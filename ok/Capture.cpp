/* Generated by Cython 3.0.11 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "language": "c++",
        "name": "ok.Capture",
        "sources": [
            "ok\\Capture.pyx"
        ]
    },
    "module_name": "ok.Capture"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__ok__Capture
#define __PYX_HAVE_API__ok__Capture
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "ok\\\\Capture.pyx",
  "<stringsource>",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_2ok_7Capture_BaseCaptureMethod;
struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod;
struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod;
struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod;
struct __pyx_obj_2ok_7Capture_HwndWindow;
struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod;
struct __pyx_obj_2ok_7Capture_ADBCaptureMethod;
struct __pyx_obj_2ok_7Capture_ImageCaptureMethod;
struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod;
struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd;
struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows;
struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y;
struct __pyx_opt_args_2ok_7Capture_bit_blt_capture_frame;

/* "ok/Capture.pyx":465
 *                 return True
 * 
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,             # <<<<<<<<<<<<<<
 *                                   bint _render_full_content=False):
 *     if hwnd is None:
 */
struct __pyx_opt_args_2ok_7Capture_bit_blt_capture_frame {
  int __pyx_n;
  int _render_full_content;
};

/* "ok/Capture.pyx":41
 * 
 * 
 * cdef class BaseCaptureMethod:             # <<<<<<<<<<<<<<
 *     name = "None"
 *     description = ""
 */
struct __pyx_obj_2ok_7Capture_BaseCaptureMethod {
  PyObject_HEAD
  struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod *__pyx_vtab;
  PyObject *_size;
  PyObject *exit_event;
};


/* "ok/Capture.pyx":92
 *         pass
 * 
 * cdef class BaseWindowsCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     cdef public object _hwnd_window
 * 
 */
struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod __pyx_base;
  PyObject *_hwnd_window;
};


/* "ok/Capture.pyx":130
 *     return x, y
 * 
 * cdef class WindowsGraphicsCaptureMethod(BaseWindowsCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Windows Graphics Capture"
 *     description = "fast, most compatible, capped at 60fps"
 */
struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod __pyx_base;
  PyObject *last_frame;
  double last_frame_time;
  PyObject *frame_pool;
  PyObject *item;
  PyObject *session;
  PyObject *cputex;
  PyObject *rtdevice;
  PyObject *dxdevice;
  PyObject *immediatedc;
  PyObject *evtoken;
  PyObject *last_size;
};


/* "ok/Capture.pyx":423
 * render_full = False
 * 
 * cdef class BitBltCaptureMethod(BaseWindowsCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "BitBlt"
 *     short_description = "fastest, least compatible"
 */
struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod __pyx_base;
};


/* "ok/Capture.pyx":520
 *     return image
 * 
 * cdef class HwndWindow:             # <<<<<<<<<<<<<<
 *     cdef public object app_exit_event, stop_event, hwnd, mute_option, thread, device_manager
 *     cdef public str exe_name, title, exe_full_path, hwnd_class, _hwnd_title
 */
struct __pyx_obj_2ok_7Capture_HwndWindow {
  PyObject_HEAD
  PyObject *app_exit_event;
  PyObject *stop_event;
  PyObject *hwnd;
  PyObject *mute_option;
  PyObject *thread;
  PyObject *device_manager;
  PyObject *exe_name;
  PyObject *title;
  PyObject *exe_full_path;
  PyObject *hwnd_class;
  PyObject *_hwnd_title;
  int player_id;
  int window_width;
  int window_height;
  int x;
  int y;
  int width;
  int height;
  int frame_width;
  int frame_height;
  int real_width;
  int real_height;
  int real_x_offset;
  int real_y_offset;
  int visible;
  int exists;
  int pos_valid;
  double scaling;
  double frame_aspect_ratio;
  PyObject *monitors_bounds;
};


/* "ok/Capture.pyx":848
 * 
 * # orignal https://github.com/Toufool/AutoSplit/blob/master/src/capture_method/DesktopDuplicationCaptureMethod.py
 * cdef class DesktopDuplicationCaptureMethod(BaseWindowsCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Direct3D Desktop Duplication"
 *     short_description = "slower, bound to display"
 */
struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod __pyx_base;
  PyObject *desktop_duplication;
};


/* "ok/Capture.pyx":947
 *         pass
 * 
 * cdef class ADBCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "ADB command line Capture"
 *     description = "use the adb screencap command, slow but works when in background/minimized, takes 300ms per frame"
 */
struct __pyx_obj_2ok_7Capture_ADBCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod __pyx_base;
  int _connected;
  PyObject *device_manager;
};


/* "ok/Capture.pyx":978
 *         return self._connected and self.device_manager.device is not None
 * 
 * cdef class ImageCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Image capture method "
 *     description = "for debugging"
 */
struct __pyx_obj_2ok_7Capture_ImageCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod __pyx_base;
  PyObject *images;
};


/* "ok/Capture.pyx":1474
 *         return ratio_float
 * 
 * cdef class NemuIpcCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Nemu Ipc Capture"
 *     description = "mumu player 12 only"
 */
struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod {
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod __pyx_base;
  int _connected;
  PyObject *device_manager;
  PyObject *nemu_impl;
  PyObject *emulator;
};


/* "ok/Capture.pyx":710
 *     return False
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):             # <<<<<<<<<<<<<<
 *     results = []
 *     if exe_name is None and title is None:
 */
struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd {
  PyObject_HEAD
  PyObject *__pyx_v_class_name;
  PyObject *__pyx_v_exe_name;
  PyObject *__pyx_v_player_id;
  PyObject *__pyx_v_results;
  PyObject *__pyx_v_title;
};


/* "ok/Capture.pyx":803
 *     return 0
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):             # <<<<<<<<<<<<<<
 *     ratio_match = []
 *     """
 */
struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows {
  PyObject_HEAD
  PyObject *__pyx_v_biggest;
  PyObject *__pyx_v_frame_aspect_ratio;
  PyObject *__pyx_v_ratio_match;
};


/* "cfunc.to_py":66
 * 
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):             # <<<<<<<<<<<<<<
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 */
struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y {
  PyObject_HEAD
  PyObject *(*__pyx_v_f)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *, PyObject *);
};



/* "ok/Capture.pyx":41
 * 
 * 
 * cdef class BaseCaptureMethod:             # <<<<<<<<<<<<<<
 *     name = "None"
 *     description = ""
 */

struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod {
  PyObject *(*get_frame)(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod *__pyx_vtabptr_2ok_7Capture_BaseCaptureMethod;


/* "ok/Capture.pyx":92
 *         pass
 * 
 * cdef class BaseWindowsCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     cdef public object _hwnd_window
 * 
 */

struct __pyx_vtabstruct_2ok_7Capture_BaseWindowsCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod __pyx_base;
};
static struct __pyx_vtabstruct_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod;


/* "ok/Capture.pyx":130
 *     return x, y
 * 
 * cdef class WindowsGraphicsCaptureMethod(BaseWindowsCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Windows Graphics Capture"
 *     description = "fast, most compatible, capped at 60fps"
 */

struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseWindowsCaptureMethod __pyx_base;
  PyObject *(*frame_arrived_callback)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *, PyObject *);
  PyObject *(*convert_dx_frame)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *);
  PyObject *(*do_get_frame)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_vtabptr_2ok_7Capture_WindowsGraphicsCaptureMethod;


/* "ok/Capture.pyx":423
 * render_full = False
 * 
 * cdef class BitBltCaptureMethod(BaseWindowsCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "BitBlt"
 *     short_description = "fastest, least compatible"
 */

struct __pyx_vtabstruct_2ok_7Capture_BitBltCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseWindowsCaptureMethod __pyx_base;
  PyObject *(*do_get_frame)(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_2ok_7Capture_BitBltCaptureMethod *__pyx_vtabptr_2ok_7Capture_BitBltCaptureMethod;


/* "ok/Capture.pyx":848
 * 
 * # orignal https://github.com/Toufool/AutoSplit/blob/master/src/capture_method/DesktopDuplicationCaptureMethod.py
 * cdef class DesktopDuplicationCaptureMethod(BaseWindowsCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Direct3D Desktop Duplication"
 *     short_description = "slower, bound to display"
 */

struct __pyx_vtabstruct_2ok_7Capture_DesktopDuplicationCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseWindowsCaptureMethod __pyx_base;
  PyObject *(*do_get_frame)(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_vtabptr_2ok_7Capture_DesktopDuplicationCaptureMethod;


/* "ok/Capture.pyx":947
 *         pass
 * 
 * cdef class ADBCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "ADB command line Capture"
 *     description = "use the adb screencap command, slow but works when in background/minimized, takes 300ms per frame"
 */

struct __pyx_vtabstruct_2ok_7Capture_ADBCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod __pyx_base;
  PyObject *(*do_get_frame)(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *, int __pyx_skip_dispatch);
  PyObject *(*screencap)(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *);
};
static struct __pyx_vtabstruct_2ok_7Capture_ADBCaptureMethod *__pyx_vtabptr_2ok_7Capture_ADBCaptureMethod;


/* "ok/Capture.pyx":978
 *         return self._connected and self.device_manager.device is not None
 * 
 * cdef class ImageCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Image capture method "
 *     description = "for debugging"
 */

struct __pyx_vtabstruct_2ok_7Capture_ImageCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod __pyx_base;
  PyObject *(*do_get_frame)(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_2ok_7Capture_ImageCaptureMethod *__pyx_vtabptr_2ok_7Capture_ImageCaptureMethod;


/* "ok/Capture.pyx":1474
 *         return ratio_float
 * 
 * cdef class NemuIpcCaptureMethod(BaseCaptureMethod):             # <<<<<<<<<<<<<<
 *     name = "Nemu Ipc Capture"
 *     description = "mumu player 12 only"
 */

struct __pyx_vtabstruct_2ok_7Capture_NemuIpcCaptureMethod {
  struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod __pyx_base;
  PyObject *(*do_get_frame)(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *, int __pyx_skip_dispatch);
  PyObject *(*screencap)(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *);
};
static struct __pyx_vtabstruct_2ok_7Capture_NemuIpcCaptureMethod *__pyx_vtabptr_2ok_7Capture_NemuIpcCaptureMethod;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_FloorDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceFloorDivide(op1, op2) : PyNumber_FloorDivide(op1, op2))
#endif

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyMethodNew2Arg.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyMethod_New2Arg PyMethod_New
#else
#define __Pyx_PyMethod_New2Arg(func, self) PyMethod_New(func, self, (PyObject*)Py_TYPE(self))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CBIntToPyUnicode.proto */
#define __Pyx_PyUnicode_FromBInt_bint(value)\
    ((value) ? __Pyx_NewRef(__pyx_n_u_True) : __Pyx_NewRef(__pyx_n_u_False))

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(__Pyx_PyLong_IsNonNeg(x)) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* SetPackagePathFromImportLib.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_PEP489_MULTI_PHASE_INIT
static int __Pyx_SetPackagePathFromImportLib(PyObject *module_name);
#else
#define __Pyx_SetPackagePathFromImportLib(a) 0
#endif

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* StrConcatInPlace.proto */
#if PY_MAJOR_VERSION >= 3
    #define __Pyx_PyStr_Concat __Pyx_PyUnicode_Concat
    #define __Pyx_PyStr_ConcatInPlace __Pyx_PyUnicode_ConcatInPlace
#else
    #define __Pyx_PyStr_Concat PyNumber_Add
    #define __Pyx_PyStr_ConcatInPlace PyNumber_InPlaceAdd
#endif
#define __Pyx_PyStr_ConcatSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
    PyNumber_Add(a, b) : __Pyx_PyStr_Concat(a, b))
#define __Pyx_PyStr_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
    PyNumber_InPlaceAdd(a, b) : __Pyx_PyStr_ConcatInPlace(a, b))

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_2ok_7Capture_17BaseCaptureMethod_get_frame(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_frame_arrived_callback(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_y); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_convert_dx_frame(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_frame); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_19BitBltCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_31DesktopDuplicationCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_16ADBCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_16ADBCaptureMethod_screencap(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_18ImageCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_screencap(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto*/

/* Module declarations from "ok.Capture" */
static int __pyx_v_2ok_7Capture_render_full;
static int __pyx_v_2ok_7Capture_BGRA_CHANNEL_COUNT;
static PyObject *__pyx_f_2ok_7Capture_bit_blt_capture_frame(PyObject *, int, int, int, int, struct __pyx_opt_args_2ok_7Capture_bit_blt_capture_frame *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_find_display(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_BaseCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_BaseWindowsCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_BitBltCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_HwndWindow__set_state(struct __pyx_obj_2ok_7Capture_HwndWindow *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_ADBCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_ImageCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *, PyObject *); /*proto*/
static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_NemuIpcCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *, PyObject *); /*proto*/
static PyObject *__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(PyObject *(*)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *, PyObject *)); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "ok.Capture"
extern int __pyx_module_is_main_ok__Capture;
int __pyx_module_is_main_ok__Capture = 0;

/* Implementation of "ok.Capture" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_reversed;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_AssertionError;
/* #### Code section: string_decls ### */
static const char __pyx_k_0[] = "0";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__7[] = "_";
static const char __pyx_k__8[] = ".";
static const char __pyx_k_dc[] = "dc";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nt[] = "nt";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pc[] = "pc";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_to[] = " to ";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_Map[] = "Map";
static const char __pyx_k_Red[] = "Red";
static const char __pyx_k__10[] = " >= ";
static const char __pyx_k__11[] = " ";
static const char __pyx_k__12[] = "";
static const char __pyx_k__14[] = ",";
static const char __pyx_k__17[] = " != ";
static const char __pyx_k__24[] = "*";
static const char __pyx_k__28[] = ":";
static const char __pyx_k_adb[] = "_adb";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_ctl[] = "_ctl";
static const char __pyx_k_cv2[] = "cv2";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_exe[] = "exe";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_ipc[] = "ipc";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pid[] = "pid";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_x_2[] = " x:";
static const char __pyx_k_y_2[] = " y:";
static const char __pyx_k_Blue[] = "Blue";
static const char __pyx_k_GUID[] = "GUID";
static const char __pyx_k_Lock[] = "Lock";
static const char __pyx_k_MUTE[] = "MUTE";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_RECT[] = "RECT";
static const char __pyx_k_Size[] = "Size";
static const char __pyx_k_True[] = "True";
static const char __pyx_k__251[] = "?";
static const char __pyx_k_addr[] = "addr";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_cast[] = "cast";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dpiX[] = "dpiX";
static const char __pyx_k_dpiY[] = "dpiY";
static const char __pyx_k_emit[] = "emit";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_hWnd[] = "hWnd";
static const char __pyx_k_host[] = "host";
static const char __pyx_k_hwnd[] = "hwnd";
static const char __pyx_k_icon[] = "icon";
static const char __pyx_k_imei[] = "imei";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_kill[] = "kill";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_mute[] = "mute";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nick[] = "nick";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_pool[] = "pool";
static const char __pyx_k_post[] = "post";
static const char __pyx_k_proc[] = "proc";
static const char __pyx_k_prop[] = "prop";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_real[] = " real:";
static const char __pyx_k_rect[] = "rect";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_true[] = "true";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_wrap[] = "wrap";
static const char __pyx_k_Alpha[] = "Alpha";
static const char __pyx_k_Close[] = "Close";
static const char __pyx_k_Event[] = "Event";
static const char __pyx_k_False[] = "False";
static const char __pyx_k_Green[] = "Green";
static const char __pyx_k_PBYTE[] = "PBYTE";
static const char __pyx_k_Unmap[] = "Unmap";
static const char __pyx_k_Usage[] = "Usage";
static const char __pyx_k_Width[] = "Width";
static const char __pyx_k_adb_2[] = "adb";
static const char __pyx_k_byref[] = "byref";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_d3d11[] = "d3d11";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_found[] = "found";
static const char __pyx_k_frame[] = "frame";
static const char __pyx_k_front[] = "front";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_ljust[] = "ljust";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pData[] = "pData";
static const char __pyx_k_pause[] = "pause";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ratio[] = "ratio";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_shell[] = "shell";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_win32[] = "win32";
static const char __pyx_k_BitBlt[] = "BitBlt";
static const char __pyx_k_Config[] = "Config";
static const char __pyx_k_Format[] = "Format";
static const char __pyx_k_Height[] = "Height";
static const char __pyx_k_Thread[] = "Thread";
static const char __pyx_k_WinDLL[] = "WinDLL";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_border[] = "border";
static const char __pyx_k_c_uint[] = "c_uint";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_create[] = "create";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_device[] = "device";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_dwmapi[] = "dwmapi";
static const char __pyx_k_echo_1[] = "echo 1";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_getenv[] = "getenv";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_idldsl[] = "idldsl";
static const char __pyx_k_images[] = "images";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_set[] = "is_set";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_lParam[] = "lParam";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_psutil[] = "psutil";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_serial[] = "serial";
static const char __pyx_k_shcore[] = "shcore";
static const char __pyx_k_sizeof[] = "sizeof";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_user32[] = "user32";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_windll[] = "windll";
static const char __pyx_k_window[] = " window:";
static const char __pyx_k_GetDesc[] = "GetDesc";
static const char __pyx_k_GetMute[] = "GetMute";
static const char __pyx_k_Handler[] = "Handler";
static const char __pyx_k_IntEnum[] = "IntEnum";
static const char __pyx_k_MAXBYTE[] = "MAXBYTE";
static const char __pyx_k_Monitor[] = "Monitor";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_POINTER[] = "POINTER";
static const char __pyx_k_Process[] = "Process";
static const char __pyx_k_Release[] = "Release";
static const char __pyx_k_SRCCOPY[] = "SRCCOPY";
static const char __pyx_k_SetMute[] = "SetMute";
static const char __pyx_k_Surface[] = "Surface";
static const char __pyx_k_abspath[] = "abspath";
static const char __pyx_k_adb_exe[] = "adb.exe";
static const char __pyx_k_address[] = "address";
static const char __pyx_k_biggest[] = "biggest";
static const char __pyx_k_bin_dir[] = "bin_dir";
static const char __pyx_k_c_ubyte[] = "c_ubyte";
static const char __pyx_k_capture[] = "capture";
static const char __pyx_k_changed[] = "changed";
static const char __pyx_k_cmdline[] = "cmdline";
static const char __pyx_k_connect[] = "connect";
static const char __pyx_k_current[] = "current";
static const char __pyx_k_d3dshot[] = "d3dshot";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_devices[] = "devices";
static const char __pyx_k_dirname[] = "dirname";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_display[] = "display";
static const char __pyx_k_environ[] = "environ";
static const char __pyx_k_handler[] = "handler";
static const char __pyx_k_index_d[] = "index=(\\d+)";
static const char __pyx_k_interop[] = "interop";
static const char __pyx_k_isdigit[] = "isdigit";
static const char __pyx_k_manager[] = "manager";
static const char __pyx_k_monitor[] = "monitor";
static const char __pyx_k_offline[] = "offline";
static const char __pyx_k_package[] = "package";
static const char __pyx_k_percent[] = "percent";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_process[] = "process";
static const char __pyx_k_refresh[] = "refresh ";
static const char __pyx_k_results[] = "results";
static const char __pyx_k_scaling[] = "scaling";
static const char __pyx_k_session[] = "session";
static const char __pyx_k_support[] = "support";
static const char __pyx_k_timeout[] = "timeout";
static const char __pyx_k_title_2[] = "title_";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_visible[] = "visible";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_win32ui[] = "win32ui";
static const char __pyx_k_windows[] = "windows";
static const char __pyx_k_AdbError[] = "AdbError";
static const char __pyx_k_Channels[] = "Channels";
static const char __pyx_k_DeleteDC[] = "DeleteDC";
static const char __pyx_k_IsIconic[] = "IsIconic";
static const char __pyx_k_IsWindow[] = "IsWindow";
static const char __pyx_k_Recreate[] = "Recreate";
static const char __pyx_k_RowPitch[] = "RowPitch";
static const char __pyx_k_adb_imei[] = "adb_imei";
static const char __pyx_k_adb_lock[] = "_adb_lock";
static const char __pyx_k_adbutils[] = "adbutils";
static const char __pyx_k_as_array[] = "as_array";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_client_x[] = "client_x";
static const char __pyx_k_client_y[] = "client_y";
static const char __pyx_k_cvtColor[] = "cvtColor";
static const char __pyx_k_deep_get[] = "deep_get";
static const char __pyx_k_delegate[] = "delegate";
static const char __pyx_k_device_2[] = "_device";
static const char __pyx_k_displays[] = "displays";
static const char __pyx_k_do_start[] = "do_start";
static const char __pyx_k_emulator[] = "emulator";
static const char __pyx_k_encoding[] = "encoding";
static const char __pyx_k_exe_name[] = "exe_name";
static const char __pyx_k_executor[] = "executor";
static const char __pyx_k_fromfile[] = "fromfile";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_height_2[] = ", height: ";
static const char __pyx_k_hmonitor[] = "hmonitor";
static const char __pyx_k_imdecode[] = "imdecode";
static const char __pyx_k_init_adb[] = "init adb";
static const char __pyx_k_is_blank[] = "is_blank";
static const char __pyx_k_is_digit[] = "is_digit";
static const char __pyx_k_monitors[] = "monitors";
static const char __pyx_k_monkey_p[] = "monkey -p ";
static const char __pyx_k_packages[] = "packages";
static const char __pyx_k_platform[] = "platform";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_sessions[] = "sessions";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_win32api[] = "win32api";
static const char __pyx_k_win32con[] = "win32con";
static const char __pyx_k_win32gui[] = "win32gui";
static const char __pyx_k_window_2[] = "window";
static const char __pyx_k_winerror[] = "winerror";
static const char __pyx_k_wintypes[] = "wintypes";
static const char __pyx_k_x_offset[] = "x_offset";
static const char __pyx_k_y_offset[] = "y_offset";
static const char __pyx_k_127_0_0_1[] = "127.0.0.1";
static const char __pyx_k_AdbClient[] = "AdbClient";
static const char __pyx_k_ArraySize[] = "ArraySize";
static const char __pyx_k_BindFlags[] = "BindFlags";
static const char __pyx_k_GetHandle[] = "GetHandle";
static const char __pyx_k_GetParent[] = "GetParent";
static const char __pyx_k_MipLevels[] = "MipLevels";
static const char __pyx_k_MiscFlags[] = "MiscFlags";
static const char __pyx_k_ReleaseDC[] = "ReleaseDC";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_check_pos[] = "check_pos";
static const char __pyx_k_clickable[] = "clickable";
static const char __pyx_k_connected[] = "connected";
static const char __pyx_k_ctypeslib[] = "ctypeslib";
static const char __pyx_k_exception[] = "exception";
static const char __pyx_k_find_hwnd[] = "find_hwnd";
static const char __pyx_k_full_path[] = "full_path";
static const char __pyx_k_get_frame[] = "get_frame";
static const char __pyx_k_hwnd_name[] = "hwnd_name";
static const char __pyx_k_init_nemu[] = "init_nemu";
static const char __pyx_k_installed[] = "installed";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_no_window[] = "_no_window";
static const char __pyx_k_numerator[] = "numerator";
static const char __pyx_k_pc_device[] = "pc_device";
static const char __pyx_k_player_id[] = "player_id";
static const char __pyx_k_png_bytes[] = "png_bytes";
static const char __pyx_k_pos_valid[] = "pos_valid";
static const char __pyx_k_preferred[] = "preferred";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_ratio_str[] = "ratio_str";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_refresh_2[] = "refresh";
static const char __pyx_k_save_file[] = "save_file";
static const char __pyx_k_screencap[] = "screencap";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_validator[] = "validator";
static const char __pyx_k_FluentIcon[] = "FluentIcon";
static const char __pyx_k_Game_Sound[] = "Game Sound";
static const char __pyx_k_GetSafeHdc[] = "GetSafeHdc";
static const char __pyx_k_HwndWindow[] = "HwndWindow";
static const char __pyx_k_ImageShape[] = "ImageShape";
static const char __pyx_k_RefreshAdb[] = "RefreshAdb";
static const char __pyx_k_SampleDesc[] = "SampleDesc";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_adb_device[] = "adb_device";
static const char __pyx_k_add_Closed[] = "add_Closed";
static const char __pyx_k_app_config[] = "app_config";
static const char __pyx_k_class_name[] = "class_name";
static const char __pyx_k_crop_image[] = "crop_image";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_disconnect[] = "disconnect";
static const char __pyx_k_display_id[] = "display_id";
static const char __pyx_k_do_refresh[] = "do_refresh";
static const char __pyx_k_exe_name_2[] = " exe_name:";
static const char __pyx_k_exit_event[] = "exit_event";
static const char __pyx_k_found_hwnd[] = "found hwnd ";
static const char __pyx_k_frombuffer[] = "frombuffer";
static const char __pyx_k_get_config[] = "get_config";
static const char __pyx_k_get_logger[] = "get_logger";
static const char __pyx_k_hwnd_class[] = "hwnd_class";
static const char __pyx_k_image_data[] = "image_data";
static const char __pyx_k_init___end[] = "__init__ end";
static const char __pyx_k_no_devices[] = "no devices";
static const char __pyx_k_not_exists[] = " not exists";
static const char __pyx_k_ok_Capture[] = "ok.Capture";
static const char __pyx_k_ok_rotypes[] = "ok.rotypes";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_real_width[] = "real_width";
static const char __pyx_k_require_bg[] = "require_bg";
static const char __pyx_k_resolution[] = "resolution";
static const char __pyx_k_screenshot[] = "screenshot";
static const char __pyx_k_set_images[] = "set_images";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_window_top[] = "window_top";
static const char __pyx_k_ContentSize[] = "ContentSize";
static const char __pyx_k_EnumWindows[] = "EnumWindows";
static const char __pyx_k_GetWindowDC[] = "GetWindowDC";
static const char __pyx_k_NemuIpcImpl[] = "NemuIpcImpl";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_PostMessage[] = "PostMessage";
static const char __pyx_k_PrintWindow[] = "PrintWindow";
static const char __pyx_k_adb_connect[] = "adb_connect";
static const char __pyx_k_adb_devices[] = "adb_devices";
static const char __pyx_k_app_current[] = "app_current";
static const char __pyx_k_base_folder[] = "base_folder";
static const char __pyx_k_can_bit_blt[] = "can_bit_blt";
static const char __pyx_k_cfunc_to_py[] = "cfunc.to_py";
static const char __pyx_k_communicate[] = "communicate";
static const char __pyx_k_denominator[] = "denominator";
static const char __pyx_k_description[] = "description";
static const char __pyx_k_device_dict[] = "device_dict";
static const char __pyx_k_device_list[] = "device_list";
static const char __pyx_k_ensure_hwnd[] = "ensure_hwnd";
static const char __pyx_k_find_hwnd_2[] = "find_hwnd ";
static const char __pyx_k_frame_ratio[] = "frame_ratio";
static const char __pyx_k_frame_width[] = "frame_width";
static const char __pyx_k_get_bin_dir[] = "_get_bin_dir";
static const char __pyx_k_get_capture[] = "get_capture";
static const char __pyx_k_get_devices[] = "get_devices";
static const char __pyx_k_handle_mute[] = "handle_mute";
static const char __pyx_k_hwnd_window[] = "hwnd_window";
static const char __pyx_k_instance_id[] = "instance_id";
static const char __pyx_k_interaction[] = "interaction";
static const char __pyx_k_iter_device[] = "iter_device";
static const char __pyx_k_monitor_top[] = "monitor_top";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_nemu_folder[] = "nemu_folder";
static const char __pyx_k_parse_ratio[] = "parse_ratio";
static const char __pyx_k_player_id_2[] = " player_id:";
static const char __pyx_k_pycaw_utils[] = "pycaw.utils";
static const char __pyx_k_ratio_float[] = "ratio_float";
static const char __pyx_k_ratio_match[] = "ratio_match";
static const char __pyx_k_real_height[] = "real_height";
static const char __pyx_k_screencap_p[] = "screencap -p";
static const char __pyx_k_self_window[] = " self.window:";
static const char __pyx_k_server_kill[] = "server_kill";
static const char __pyx_k_set_capture[] = "set_capture";
static const char __pyx_k_try_connect[] = "try_connect";
static const char __pyx_k_win_graphic[] = "win_graphic";
static const char __pyx_k_window_left[] = "window_left";
static const char __pyx_k_ColorChannel[] = "ColorChannel";
static const char __pyx_k_ConfigOption[] = "ConfigOption";
static const char __pyx_k_CopyResource[] = "CopyResource";
static const char __pyx_k_CreateBitmap[] = "CreateBitmap";
static const char __pyx_k_DeleteObject[] = "DeleteObject";
static const char __pyx_k_GetClassName[] = "GetClassName";
static const char __pyx_k_GetInterface[] = "GetInterface";
static const char __pyx_k_ID3D11Device[] = "ID3D11Device";
static const char __pyx_k_IInspectable[] = "IInspectable";
static const char __pyx_k_IMREAD_COLOR[] = "IMREAD_COLOR";
static const char __pyx_k_SelectObject[] = "SelectObject";
static const char __pyx_k_StartCapture[] = "StartCapture";
static const char __pyx_k_adb_get_imei[] = "adb_get_imei";
static const char __pyx_k_client_width[] = "client_width";
static const char __pyx_k_do_get_frame[] = "do_get_frame";
static const char __pyx_k_do_screencap[] = "do_screencap";
static const char __pyx_k_frame_height[] = "frame_height";
static const char __pyx_k_get_exe_path[] = "get_exe_path";
static const char __pyx_k_hwnd_class_2[] = " hwnd_class:";
static const char __pyx_k_init___start[] = "__init__ start";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_is_valid_exe[] = "_is_valid_exe";
static const char __pyx_k_monitor_info[] = "monitor_info";
static const char __pyx_k_monitor_left[] = "monitor_left";
static const char __pyx_k_monitor_rect[] = "monitor_rect";
static const char __pyx_k_notification[] = "notification";
static const char __pyx_k_pc_full_path[] = "pc_full_path";
static const char __pyx_k_phone_device[] = "phone_device";
static const char __pyx_k_process_iter[] = "process_iter";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_reset_device[] = "reset_device";
static const char __pyx_k_shell_device[] = "shell_device";
static const char __pyx_k_str_int_None[] = "str | int | None";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_target_width[] = "target_width";
static const char __pyx_k_title_height[] = "title_height";
static const char __pyx_k_try_kill_adb[] = "try_kill_adb";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_win32process[] = "win32process";
static const char __pyx_k_window_ratio[] = "window_ratio";
static const char __pyx_k_window_right[] = "window_right";
static const char __pyx_k_window_width[] = "window_width";
static const char __pyx_k_COLOR_RGB2BGR[] = "COLOR_RGB2BGR";
static const char __pyx_k_DeviceManager[] = "DeviceManager";
static const char __pyx_k_GetBitmapBits[] = "GetBitmapBits";
static const char __pyx_k_GetClientRect[] = "GetClientRect";
static const char __pyx_k_GetWindowRect[] = "GetWindowRect";
static const char __pyx_k_GetWindowText[] = "GetWindowText";
static const char __pyx_k_WGC_MIN_BUILD[] = "WGC_MIN_BUILD";
static const char __pyx_k_adb_connect_2[] = "adb_connect ";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_client_height[] = "client_height";
static const char __pyx_k_create_device[] = "create_device";
static const char __pyx_k_cropped_image[] = "cropped_image";
static const char __pyx_k_for_debugging[] = "for debugging";
static const char __pyx_k_get_abs_cords[] = "get_abs_cords";
static const char __pyx_k_get_hwnd_name[] = "get_hwnd_name";
static const char __pyx_k_global_config[] = "global_config";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_is_valid_hwnd[] = "is_valid_hwnd";
static const char __pyx_k_monitor_right[] = "monitor_right";
static const char __pyx_k_real_x_offset[] = "real_x_offset";
static const char __pyx_k_real_y_offset[] = "real_y_offset";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_set_hwnd_name[] = "set_hwnd_name";
static const char __pyx_k_start_or_stop[] = "start_or_stop";
static const char __pyx_k_target_height[] = "target_height";
static const char __pyx_k_target_method[] = "target_method";
static const char __pyx_k_try_delete_dc[] = "try_delete_dc";
static const char __pyx_k_update_window[] = "update_window";
static const char __pyx_k_window_bottom[] = "window_bottom";
static const char __pyx_k_window_height[] = "window_height";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_AudioUtilities[] = "AudioUtilities";
static const char __pyx_k_CPUAccessFlags[] = "CPUAccessFlags";
static const char __pyx_k_ClientToScreen[] = "ClientToScreen";
static const char __pyx_k_D3D11_MAP_READ[] = "D3D11_MAP_READ";
static const char __pyx_k_Device_is_none[] = "Device is none";
static const char __pyx_k_GetAllSessions[] = "GetAllSessions";
static const char __pyx_k_GetMonitorInfo[] = "GetMonitorInfo";
static const char __pyx_k_QueryInterface[] = "QueryInterface";
static const char __pyx_k_capture_cursor[] = "capture_cursor";
static const char __pyx_k_capture_method[] = "capture_method";
static const char __pyx_k_capture_output[] = "capture_output";
static const char __pyx_k_child_callback[] = "child_callback";
static const char __pyx_k_device_manager[] = "device_manager";
static const char __pyx_k_draw_rectangle[] = "draw_rectangle";
static const char __pyx_k_get_crop_point[] = "get_crop_point";
static const char __pyx_k_get_mute_state[] = "get_mute_state";
static const char __pyx_k_get_resolution[] = "get_resolution";
static const char __pyx_k_matching_child[] = "matching_child";
static const char __pyx_k_monitor_bottom[] = "monitor_bottom";
static const char __pyx_k_ok_Capture_pyx[] = "ok\\Capture.pyx";
static const char __pyx_k_ok_color_Color[] = "ok.color.Color";
static const char __pyx_k_qfluentwidgets[] = "qfluentwidgets";
static const char __pyx_k_refresh_phones[] = "refresh_phones";
static const char __pyx_k_set_mute_state[] = "set_mute_state";
static const char __pyx_k_socket_timeout[] = "socket_timeout";
static const char __pyx_k_use_last_error[] = "use_last_error";
static const char __pyx_k_CreateForWindow[] = "CreateForWindow";
static const char __pyx_k_CreateTexture2D[] = "CreateTexture2D";
static const char __pyx_k_EmulatorManager[] = "EmulatorManager";
static const char __pyx_k_HwndWindow_stop[] = "HwndWindow.stop";
static const char __pyx_k_ID3D11Texture2D[] = "ID3D11Texture2D";
static const char __pyx_k_IDirect3DDevice[] = "IDirect3DDevice";
static const char __pyx_k_IsWindowEnabled[] = "IsWindowEnabled";
static const char __pyx_k_IsWindowVisible[] = "IsWindowVisible";
static const char __pyx_k_TryGetNextFrame[] = "TryGetNextFrame";
static const char __pyx_k_adb_kill_server[] = "adb kill_server";
static const char __pyx_k_adbutils__utils[] = "adbutils._utils";
static const char __pyx_k_calling_refresh[] = "calling refresh";
static const char __pyx_k_check_connected[] = "check connected ";
static const char __pyx_k_emulator_device[] = "emulator_device";
static const char __pyx_k_get_exe_by_hwnd[] = "get_exe_by_hwnd";
static const char __pyx_k_monitors_bounds[] = "monitors_bounds";
static const char __pyx_k_np_ndarray_None[] = "np.ndarray | None";
static const char __pyx_k_ok_util_Handler[] = "ok.util.Handler";
static const char __pyx_k_override_config[] = "override_config";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_remove_existing[] = "remove_existing";
static const char __pyx_k_reset_framepool[] = "reset_framepool";
static const char __pyx_k_resolution_dict[] = "resolution_dict";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_skip_if_running[] = "skip_if_running";
static const char __pyx_k_supported_ratio[] = "supported_ratio";
static const char __pyx_k_update_emulator[] = "update_emulator";
static const char __pyx_k_use_adb_capture[] = "use adb capture";
static const char __pyx_k_ADBCaptureMethod[] = "ADBCaptureMethod";
static const char __pyx_k_CaptureException[] = "CaptureException";
static const char __pyx_k_EnumChildWindows[] = "EnumChildWindows";
static const char __pyx_k_GetDpiForMonitor[] = "GetDpiForMonitor";
static const char __pyx_k_IMREAD_UNCHANGED[] = "IMREAD_UNCHANGED";
static const char __pyx_k_IsBorderRequired[] = "IsBorderRequired";
static const char __pyx_k_Nemu_Ipc_Capture[] = "Nemu Ipc Capture";
static const char __pyx_k_add_FrameArrived[] = "add_FrameArrived";
static const char __pyx_k_capture_method_2[] = "capture method ";
static const char __pyx_k_connected_device[] = "connected_device";
static const char __pyx_k_device_connected[] = "device_connected";
static const char __pyx_k_get_emulator_exe[] = "get_emulator_exe";
static const char __pyx_k_get_frame_size_0[] = "get_frame size <=0 ";
static const char __pyx_k_ok_config_Config[] = "ok.config.Config";
static const char __pyx_k_ok_rotypes_roapi[] = "ok.rotypes.roapi";
static const char __pyx_k_pm_list_packages[] = "pm list packages";
static const char __pyx_k_preferred_device[] = "preferred device: ";
static const char __pyx_k_resolution_error[] = "resolution error ";
static const char __pyx_k_try_kill_adb_end[] = "try kill adb end";
static const char __pyx_k_update_pc_device[] = "update_pc_device";
static const char __pyx_k_use_bit_blt_only[] = "use_bit_blt_only";
static const char __pyx_k_ADBUTILS_ADB_PATH[] = "ADBUTILS_ADB_PATH";
static const char __pyx_k_BaseCaptureMethod[] = "BaseCaptureMethod";
static const char __pyx_k_D3D11CreateDevice[] = "D3D11CreateDevice";
static const char __pyx_k_D3D11_SDK_VERSION[] = "D3D11_SDK_VERSION";
static const char __pyx_k_DeviceManager_adb[] = "DeviceManager.adb";
static const char __pyx_k_Display_not_found[] = "Display not found";
static const char __pyx_k_FileNotFoundError[] = "FileNotFoundError";
static const char __pyx_k_MDT_EFFECTIVE_DPI[] = "MDT_EFFECTIVE_DPI";
static const char __pyx_k_MonitorFromWindow[] = "MonitorFromWindow";
static const char __pyx_k_TypedEventHandler[] = "TypedEventHandler";
static const char __pyx_k_adb_connect_error[] = "adb connect error ";
static const char __pyx_k_adb_kill_server_2[] = "adb_kill_server";
static const char __pyx_k_adb_start_package[] = "adb_start_package";
static const char __pyx_k_get_window_bounds[] = "get_window_bounds";
static const char __pyx_k_ok_logging_Logger[] = "ok.logging.Logger";
static const char __pyx_k_refresh_emulators[] = "refresh_emulators";
static const char __pyx_k_short_description[] = "short_description";
static const char __pyx_k_update_frame_size[] = "update_frame_size";
static const char __pyx_k_ADBBaseInteraction[] = "ADBBaseInteraction";
static const char __pyx_k_CreateCompatibleDC[] = "CreateCompatibleDC";
static const char __pyx_k_CreateDCFromHandle[] = "CreateDCFromHandle";
static const char __pyx_k_CreateFreeThreaded[] = "CreateFreeThreaded";
static const char __pyx_k_DirectXPixelFormat[] = "DirectXPixelFormat";
static const char __pyx_k_ISimpleAudioVolume[] = "ISimpleAudioVolume";
static const char __pyx_k_ImageCaptureMethod[] = "ImageCaptureMethod";
static const char __pyx_k_adb_capture_config[] = "adb_capture_config";
static const char __pyx_k_adb_check_in_front[] = "adb_check_in_front ";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_enum_child_windows[] = "enum_child_windows";
static const char __pyx_k_frame_aspect_ratio[] = "frame_aspect_ratio";
static const char __pyx_k_get_device_connect[] = "get device connect ";
static const char __pyx_k_not_in_device_list[] = " not in device list ";
static const char __pyx_k_ok_capture_windows[] = "ok.capture.windows";
static const char __pyx_k_ok_gui_Communicate[] = "ok.gui.Communicate";
static const char __pyx_k_update_device_list[] = "update_device_list";
static const char __pyx_k_update_path_and_id[] = "update_path_and_id ";
static const char __pyx_k_update_window_size[] = "update_window_size";
static const char __pyx_k_BitBltCaptureMethod[] = "BitBltCaptureMethod";
static const char __pyx_k_D3D11_USAGE_STAGING[] = "D3D11_USAGE_STAGING";
static const char __pyx_k_DeviceManager_shell[] = "DeviceManager.shell";
static const char __pyx_k_DeviceManager_start[] = "DeviceManager.start";
static const char __pyx_k_DeviceManager_width[] = "DeviceManager.width";
static const char __pyx_k_EnumDisplayMonitors[] = "EnumDisplayMonitors";
static const char __pyx_k_GetForegroundWindow[] = "GetForegroundWindow";
static const char __pyx_k_GraphicsCaptureItem[] = "GraphicsCaptureItem";
static const char __pyx_k_ID3D11DeviceContext[] = "ID3D11DeviceContext";
static const char __pyx_k_PyDirectInteraction[] = "PyDirectInteraction";
static const char __pyx_k_adb_check_installed[] = "adb_check_installed";
static const char __pyx_k_adb_ensure_in_front[] = "adb_ensure_in_front ";
static const char __pyx_k_bit_blt_render_full[] = "bit_blt_render_full";
static const char __pyx_k_get_monitors_bounds[] = "get_monitors_bounds";
static const char __pyx_k_installed_emulators[] = "installed emulators ";
static const char __pyx_k_is_window_minimized[] = "is_window_minimized";
static const char __pyx_k_mumu_player_12_only[] = "mumu player 12 only";
static const char __pyx_k_refresh_emulators_2[] = "refresh emulators ";
static const char __pyx_k_refresh_phones_done[] = "refresh_phones done";
static const char __pyx_k_try_kill_adb_server[] = "try kill adb server";
static const char __pyx_k_update_frame_size_2[] = "update_frame_size:";
static const char __pyx_k_use_windows_capture[] = "use_windows_capture";
static const char __pyx_k_vms_MuMuPlayer_12_0[] = "vms/MuMuPlayer-12.0-";
static const char __pyx_k_CreateCaptureSession[] = "CreateCaptureSession";
static const char __pyx_k_D3D11_TEXTURE2D_DESC[] = "D3D11_TEXTURE2D_DESC";
static const char __pyx_k_DeviceManager___init[] = "DeviceManager.__init__";
static const char __pyx_k_DeviceManager_device[] = "DeviceManager.device";
static const char __pyx_k_DeviceManager_height[] = "DeviceManager.height";
static const char __pyx_k_GetActivationFactory[] = "GetActivationFactory";
static const char __pyx_k_IGraphicsCaptureItem[] = "IGraphicsCaptureItem";
static const char __pyx_k_Image_capture_method[] = "Image capture method ";
static const char __pyx_k_NemuIpcCaptureMethod[] = "NemuIpcCaptureMethod";
static const char __pyx_k_PW_RENDERFULLCONTENT[] = "PW_RENDERFULLCONTENT";
static const char __pyx_k_WINDOWS_BUILD_NUMBER[] = "WINDOWS_BUILD_NUMBER";
static const char __pyx_k_adb_check_in_front_2[] = "adb_check_in_front";
static const char __pyx_k_get_preferred_device[] = "get_preferred_device";
static const char __pyx_k_init_windows_capture[] = "init windows capture";
static const char __pyx_k_is_foreground_window[] = "is_foreground_window";
static const char __pyx_k_need_reset_framepool[] = "need_reset_framepool";
static const char __pyx_k_set_preferred_device[] = "set_preferred_device ";
static const char __pyx_k_start_or_stop_failed[] = "start_or_stop failed: ";
static const char __pyx_k_supported_resolution[] = "supported_resolution";
static const char __pyx_k_validate_mute_config[] = "validate_mute_config";
static const char __pyx_k_D3D11_CPU_ACCESS_READ[] = "D3D11_CPU_ACCESS_READ";
static const char __pyx_k_DeviceManager_refresh[] = "DeviceManager.refresh";
static const char __pyx_k_DwmGetWindowAttribute[] = "DwmGetWindowAttribute";
static const char __pyx_k_HwndWindow_init_title[] = "HwndWindow init title:";
static const char __pyx_k_TryGetNextFrame_error[] = "TryGetNextFrame error ";
static const char __pyx_k_adb_ensure_in_front_2[] = "adb_ensure_in_front";
static const char __pyx_k_calculate_pc_exe_path[] = "calculate_pc_exe_path";
static const char __pyx_k_cropped_window_height[] = "cropped_window_height";
static const char __pyx_k_customer_app_keptlive[] = "customer.app_keptlive";
static const char __pyx_k_do_update_window_size[] = "do_update_window_size";
static const char __pyx_k_extended_frame_bounds[] = "extended_frame_bounds";
static const char __pyx_k_get_exe_by_hwnd_error[] = "get_exe_by_hwnd error";
static const char __pyx_k_get_preferred_capture[] = "get_preferred_capture";
static const char __pyx_k_installed_emulators_2[] = "installed_emulators";
static const char __pyx_k_pycaw_api_audioclient[] = "pycaw.api.audioclient";
static const char __pyx_k_set_ADBUTILS_ADB_PATH[] = "set ADBUTILS_ADB_PATH ";
static const char __pyx_k_update_capture_method[] = "update_capture_method";
static const char __pyx_k_update_resolution_for[] = "update resolution for ";
static const char __pyx_k_win_interaction_class[] = "win_interaction_class";
static const char __pyx_k_B8G8R8A8UIntNormalized[] = "B8G8R8A8UIntNormalized";
static const char __pyx_k_CreateCompatibleBitmap[] = "CreateCompatibleBitmap";
static const char __pyx_k_DeviceManager_do_start[] = "DeviceManager.do_start";
static const char __pyx_k_HwndWindow_frame_ratio[] = "HwndWindow.frame_ratio";
static const char __pyx_k_HwndWindow_handle_mute[] = "HwndWindow.handle_mute";
static const char __pyx_k_IsCursorCaptureEnabled[] = "IsCursorCaptureEnabled";
static const char __pyx_k_PostMessageInteraction[] = "PostMessageInteraction";
static const char __pyx_k_all_emulator_instances[] = "all_emulator_instances";
static const char __pyx_k_check_available_failed[] = "check available failed: ";
static const char __pyx_k_is_close_to_pure_color[] = "is_close_to_pure_color";
static const char __pyx_k_kill_adb_server_failed[] = "kill adb server failed";
static const char __pyx_k_ok_config_ConfigOption[] = "ok.config.ConfigOption";
static const char __pyx_k_set_preferred_device_2[] = "set_preferred_device";
static const char __pyx_k_test_is_not_pure_color[] = "test_is_not_pure_color";
static const char __pyx_k_windows_capture_config[] = "windows_capture_config";
static const char __pyx_k_BaseCaptureMethod_close[] = "BaseCaptureMethod.close";
static const char __pyx_k_DXGI_ERROR_DEVICE_RESET[] = "DXGI_ERROR_DEVICE_RESET";
static const char __pyx_k_WGC_NO_BORDER_MIN_BUILD[] = "WGC_NO_BORDER_MIN_BUILD";
static const char __pyx_k_adb_connect_try_connect[] = "adb_connect try_connect ";
static const char __pyx_k_calculate_pc_exe_path_2[] = "calculate_pc_exe_path ";
static const char __pyx_k_customer_app_keptlive_2[] = "customer.app_keptlive ";
static const char __pyx_k_destroy_windows_capture[] = "destroy windows capture";
static const char __pyx_k_ok_capture_adb_nemu_ipc[] = "ok.capture.adb.nemu_ipc";
static const char __pyx_k_pyx_unpickle_HwndWindow[] = "__pyx_unpickle_HwndWindow";
static const char __pyx_k_slower_bound_to_display[] = "slower, bound to display";
static const char __pyx_k_ADB_command_line_Capture[] = "ADB command line Capture";
static const char __pyx_k_BaseWindowsCaptureMethod[] = "BaseWindowsCaptureMethod";
static const char __pyx_k_D3D_DRIVER_TYPE_HARDWARE[] = "D3D_DRIVER_TYPE_HARDWARE";
static const char __pyx_k_DeviceManager_do_refresh[] = "DeviceManager.do_refresh";
static const char __pyx_k_GetWindowThreadProcessId[] = "GetWindowThreadProcessId";
static const char __pyx_k_HwndWindow_get_abs_cords[] = "HwndWindow.get_abs_cords";
static const char __pyx_k_HwndWindow_update_window[] = "HwndWindow.update_window";
static const char __pyx_k_MONITOR_DEFAULTTONEAREST[] = "MONITOR_DEFAULTTONEAREST";
static const char __pyx_k_Windows_Graphics_Capture[] = "Windows Graphics Capture";
static const char __pyx_k_fastest_least_compatible[] = "fastest, least compatible";
static const char __pyx_k_find_hwnd_child_callback[] = "find_hwnd child_callback ";
static const char __pyx_k_get_win_graphics_capture[] = "get_win_graphics_capture";
static const char __pyx_k_kill_adb_by_process_name[] = "kill adb by process name ";
static const char __pyx_k_ok_alas_emulator_windows[] = "ok.alas.emulator_windows";
static const char __pyx_k_ok_alas_platform_windows[] = "ok.alas.platform_windows";
static const char __pyx_k_DXGI_ERROR_DEVICE_REMOVED[] = "DXGI_ERROR_DEVICE_REMOVED";
static const char __pyx_k_DeviceManager_adb_connect[] = "DeviceManager.adb_connect";
static const char __pyx_k_DeviceManager_ensure_hwnd[] = "DeviceManager.ensure_hwnd";
static const char __pyx_k_DeviceManager_get_devices[] = "DeviceManager.get_devices";
static const char __pyx_k_DeviceManager_set_capture[] = "DeviceManager.set_capture";
static const char __pyx_k_find_hwnd_locals_callback[] = "find_hwnd.<locals>.callback";
static const char __pyx_k_ADBCaptureMethod_connected[] = "ADBCaptureMethod.connected";
static const char __pyx_k_DeviceManager_adb_get_imei[] = "DeviceManager.adb_get_imei";
static const char __pyx_k_DeviceManager_do_screencap[] = "DeviceManager.do_screencap";
static const char __pyx_k_DeviceManager_get_exe_path[] = "DeviceManager.get_exe_path";
static const char __pyx_k_DeviceManager_shell_device[] = "DeviceManager.shell_device";
static const char __pyx_k_DeviceManager_try_kill_adb[] = "DeviceManager.try_kill_adb";
static const char __pyx_k_Direct3D11CaptureFramePool[] = "Direct3D11CaptureFramePool";
static const char __pyx_k_HwndWindow___reduce_cython[] = "HwndWindow.__reduce_cython__";
static const char __pyx_k_NemuIpcCaptureMethod_close[] = "NemuIpcCaptureMethod.close";
static const char __pyx_k_Paused_because_game_exited[] = "Paused because game exited";
static const char __pyx_k_convert_dx_frame_win_error[] = "convert_dx_frame win error";
static const char __pyx_k_exit_reset_mute_state_to_0[] = "exit reset mute state to 0";
static const char __pyx_k_get_player_id_from_cmdline[] = "get_player_id_from_cmdline";
static const char __pyx_k_is_window_in_screen_bounds[] = "is_window_in_screen_bounds";
static const char __pyx_k_test_exclusive_full_screen[] = "test_exclusive_full_screen";
static const char __pyx_k_update_resolution_for_hwnd[] = "update_resolution_for_hwnd";
static const char __pyx_k_windows_graphics_available[] = "windows_graphics_available";
static const char __pyx_k_BaseCaptureMethod_clickable[] = "BaseCaptureMethod.clickable";
static const char __pyx_k_BaseCaptureMethod_connected[] = "BaseCaptureMethod.connected";
static const char __pyx_k_BaseCaptureMethod_get_frame[] = "BaseCaptureMethod.get_frame";
static const char __pyx_k_DWMWA_EXTENDED_FRAME_BOUNDS[] = "DWMWA_EXTENDED_FRAME_BOUNDS";
static const char __pyx_k_DeviceManager_get_hwnd_name[] = "DeviceManager.get_hwnd_name";
static const char __pyx_k_DeviceManager_set_hwnd_name[] = "DeviceManager.set_hwnd_name";
static const char __pyx_k_IGraphicsCaptureItemInterop[] = "IGraphicsCaptureItemInterop";
static const char __pyx_k_adb_connect_emulator_result[] = "adb_connect emulator result ";
static const char __pyx_k_get_window_bounds_exception[] = "get_window_bounds exception";
static const char __pyx_k_preferred_device_did_change[] = "preferred device did change ";
static const char __pyx_k_DeviceManager_get_resolution[] = "DeviceManager.get_resolution";
static const char __pyx_k_DeviceManager_refresh_phones[] = "DeviceManager.refresh_phones";
static const char __pyx_k_Direct3D_Desktop_Duplication[] = "Direct3D Desktop Duplication";
static const char __pyx_k_HwndWindow___setstate_cython[] = "HwndWindow.__setstate_cython__";
static const char __pyx_k_HwndWindow_frame_ratio_width[] = "HwndWindow: frame ratio: width: ";
static const char __pyx_k_HwndWindow_update_frame_size[] = "HwndWindow.update_frame_size";
static const char __pyx_k_IDirect3DDxgiInterfaceAccess[] = "IDirect3DDxgiInterfaceAccess";
static const char __pyx_k_ImageCaptureMethod_connected[] = "ImageCaptureMethod.connected";
static const char __pyx_k_WindowsGraphicsCaptureMethod[] = "WindowsGraphicsCaptureMethod";
static const char __pyx_k_configs_customer_config_json[] = "/configs/customer_config.json";
static const char __pyx_k_do_start_use_windows_capture[] = "do_start use windows capture ";
static const char __pyx_k_service_call_iphonesubinfo_4[] = "service call iphonesubinfo 4";
static const char __pyx_k_set_ADBUTILS_ADB_PATH_failed[] = "set ADBUTILS_ADB_PATH failed ";
static const char __pyx_k_ADBCaptureMethod_do_get_frame[] = "ADBCaptureMethod.do_get_frame";
static const char __pyx_k_DeviceManager_adb_kill_server[] = "DeviceManager.adb_kill_server";
static const char __pyx_k_HwndWindow_update_window_size[] = "HwndWindow.update_window_size";
static const char __pyx_k_ImageCaptureMethod_set_images[] = "ImageCaptureMethod.set_images";
static const char __pyx_k_Mute_Game_while_in_Background[] = "Mute Game while in Background";
static const char __pyx_k_adb_connect_already_connected[] = "adb_connect already connected ";
static const char __pyx_k_adb_connect_error_return_none[] = "adb connect error return none ";
static const char __pyx_k_adb_connect_exit_event_is_set[] = "adb_connect exit_event is set";
static const char __pyx_k_adb_shell_error_maybe_offline[] = "adb shell error maybe offline ";
static const char __pyx_k_check_mumu_app_keep_alive_400[] = "check_mumu_app_keep_alive_400";
static const char __pyx_k_ok_interaction_ADBInteraction[] = "ok.interaction.ADBInteraction";
static const char __pyx_k_ok_rotypes_Windows_Foundation[] = "ok.rotypes.Windows.Foundation";
static const char __pyx_k_pyx_unpickle_ADBCaptureMethod[] = "__pyx_unpickle_ADBCaptureMethod";
static const char __pyx_k_refresh_phones_found_an_phone[] = "refresh_phones found an phone ";
static const char __pyx_k_BaseCaptureMethod_do_get_frame[] = "BaseCaptureMethod.do_get_frame";
static const char __pyx_k_DeviceManager_device_connected[] = "DeviceManager.device_connected";
static const char __pyx_k_DeviceManager_update_pc_device[] = "DeviceManager.update_pc_device";
static const char __pyx_k_NemuIpcCaptureMethod_connected[] = "NemuIpcCaptureMethod.connected";
static const char __pyx_k_NemuIpcCaptureMethod_init_nemu[] = "NemuIpcCaptureMethod.init_nemu";
static const char __pyx_k_OpenGL_Hardware_Accelerated_or[] = "\nOpenGL, Hardware Accelerated or Exclusive Fullscreen windows. ";
static const char __pyx_k_Pyx_CFunc_1c7259__2ok_7Capture[] = "__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y.<locals>.wrap";
static const char __pyx_k_player_id_check_failed_cmdline[] = "player id check failed,cmdline ";
static const char __pyx_k_pyx_unpickle_BaseCaptureMethod[] = "__pyx_unpickle_BaseCaptureMethod";
static const char __pyx_k_pyx_unpickle_BaseWindowsCaptur[] = "__pyx_unpickle_BaseWindowsCaptureMethod";
static const char __pyx_k_pyx_unpickle_BitBltCaptureMeth[] = "__pyx_unpickle_BitBltCaptureMethod";
static const char __pyx_k_pyx_unpickle_DesktopDuplicatio[] = "__pyx_unpickle_DesktopDuplicationCaptureMethod";
static const char __pyx_k_pyx_unpickle_ImageCaptureMetho[] = "__pyx_unpickle_ImageCaptureMethod";
static const char __pyx_k_pyx_unpickle_NemuIpcCaptureMet[] = "__pyx_unpickle_NemuIpcCaptureMethod";
static const char __pyx_k_pyx_unpickle_WindowsGraphicsCa[] = "__pyx_unpickle_WindowsGraphicsCaptureMethod";
static const char __pyx_k_settings_get_secure_android_id[] = "settings get secure android_id";
static const char __pyx_k_About_10_15x_slower_than_BitBlt[] = "\nAbout 10-15x slower than BitBlt. Not affected by window size. ";
static const char __pyx_k_BitBltCaptureMethod_test_is_not[] = "BitBltCaptureMethod.test_is_not_pure_color";
static const char __pyx_k_DesktopDuplicationCaptureMethod[] = "DesktopDuplicationCaptureMethod";
static const char __pyx_k_DeviceManager_adb_start_package[] = "DeviceManager.adb_start_package";
static const char __pyx_k_DeviceManager_refresh_emulators[] = "DeviceManager.refresh_emulators";
static const char __pyx_k_DeviceManager_update_resolution[] = "DeviceManager.update_resolution_for_hwnd";
static const char __pyx_k_Duplicates_the_desktop_using_Di[] = "\nDuplicates the desktop using Direct3D. ";
static const char __pyx_k_HwndWindow_validate_mute_config[] = "HwndWindow.validate_mute_config";
static const char __pyx_k_ImageCaptureMethod_do_get_frame[] = "ImageCaptureMethod.do_get_frame";
static const char __pyx_k_It_can_record_OpenGL_and_Hardwa[] = "\nIt can record OpenGL and Hardware Accelerated windows. ";
static const char __pyx_k_NemuIpcCaptureMethod___setstate[] = "NemuIpcCaptureMethod.__setstate_cython__";
static const char __pyx_k_NemuIpcCaptureMethod_check_mumu[] = "NemuIpcCaptureMethod.check_mumu_app_keep_alive_400";
static const char __pyx_k_Overlapping_windows_will_show_u[] = "\nOverlapping windows will show up and can't record across displays. ";
static const char __pyx_k_The_best_option_when_compatible[] = "\nThe best option when compatible. But it cannot properly record ";
static const char __pyx_k_The_smaller_the_selected_region[] = "\nThe smaller the selected region, the more efficient it is. ";
static const char __pyx_k_This_option_may_not_be_availabl[] = "\nThis option may not be available for hybrid GPU laptops, ";
static const char __pyx_k_WindowsGraphicsCaptureMethod_do[] = "WindowsGraphicsCaptureMethod.do_get_frame";
static const char __pyx_k_c_android_intent_category_LAUNC[] = " -c android.intent.category.LAUNCHER 1";
static const char __pyx_k_device_connected_error_occurred[] = "device_connected error occurred, ";
static const char __pyx_k_do_update_window_size_exception[] = "do_update_window_size exception";
static const char __pyx_k_enum_child_windows_locals_child[] = "enum_child_windows.<locals>.child_callback";
static const char __pyx_k_see_D3DDD_Note_Laptops_md_for_a[] = "\nsee D3DDD-Note-Laptops.md for a solution. ";
static const char __pyx_k_update_capture_method_exception[] = "update_capture_method exception, return None: ";
static const char __pyx_k_ADBCaptureMethod___reduce_cython[] = "ADBCaptureMethod.__reduce_cython__";
static const char __pyx_k_ADBCaptureMethod___setstate_cyth[] = "ADBCaptureMethod.__setstate_cython__";
static const char __pyx_k_BaseCaptureMethod___reduce_cytho[] = "BaseCaptureMethod.__reduce_cython__";
static const char __pyx_k_BaseCaptureMethod___setstate_cyt[] = "BaseCaptureMethod.__setstate_cython__";
static const char __pyx_k_BaseCaptureMethod_draw_rectangle[] = "BaseCaptureMethod.draw_rectangle";
static const char __pyx_k_BaseWindowsCaptureMethod___reduc[] = "BaseWindowsCaptureMethod.__reduce_cython__";
static const char __pyx_k_BaseWindowsCaptureMethod___setst[] = "BaseWindowsCaptureMethod.__setstate_cython__";
static const char __pyx_k_BaseWindowsCaptureMethod_clickab[] = "BaseWindowsCaptureMethod.clickable";
static const char __pyx_k_BaseWindowsCaptureMethod_connect[] = "BaseWindowsCaptureMethod.connected";
static const char __pyx_k_BaseWindowsCaptureMethod_get_abs[] = "BaseWindowsCaptureMethod.get_abs_cords";
static const char __pyx_k_BitBltCaptureMethod___reduce_cyt[] = "BitBltCaptureMethod.__reduce_cython__";
static const char __pyx_k_BitBltCaptureMethod___setstate_c[] = "BitBltCaptureMethod.__setstate_cython__";
static const char __pyx_k_BitBltCaptureMethod_do_get_frame[] = "BitBltCaptureMethod.do_get_frame";
static const char __pyx_k_BitBltCaptureMethod_test_exclusi[] = "BitBltCaptureMethod.test_exclusive_full_screen";
static const char __pyx_k_CreateDirect3D11DeviceFromDXGIDe[] = "CreateDirect3D11DeviceFromDXGIDevice";
static const char __pyx_k_D3D11_CREATE_DEVICE_BGRA_SUPPORT[] = "D3D11_CREATE_DEVICE_BGRA_SUPPORT";
static const char __pyx_k_DeviceManager_adb_check_in_front[] = "DeviceManager.adb_check_in_front";
static const char __pyx_k_DeviceManager_adb_check_installe[] = "DeviceManager.adb_check_installed";
static const char __pyx_k_DeviceManager_adb_ensure_in_fron[] = "DeviceManager.adb_ensure_in_front";
static const char __pyx_k_DeviceManager_get_preferred_capt[] = "DeviceManager.get_preferred_capture";
static const char __pyx_k_DeviceManager_get_preferred_devi[] = "DeviceManager.get_preferred_device";
static const char __pyx_k_DeviceManager_set_preferred_devi[] = "DeviceManager.set_preferred_device";
static const char __pyx_k_DeviceManager_update_device_list[] = "DeviceManager.update_device_list";
static const char __pyx_k_DeviceManager_use_windows_captur[] = "DeviceManager.use_windows_capture";
static const char __pyx_k_Failed_to_check_check_mumu_app_k[] = "Failed to check check_mumu_app_keep_alive, file ";
static const char __pyx_k_Failed_to_test_exclusive_full_sc[] = "Failed to test_exclusive_full_screen ";
static const char __pyx_k_Failed_to_test_is_not_pure_color[] = "Failed to test_is_not_pure_color frame is None ";
static const char __pyx_k_HwndWindow_do_update_window_size[] = "HwndWindow.do_update_window_size";
static const char __pyx_k_ImageCaptureMethod___reduce_cyth[] = "ImageCaptureMethod.__reduce_cython__";
static const char __pyx_k_ImageCaptureMethod___setstate_cy[] = "ImageCaptureMethod.__setstate_cython__";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))";
static const char __pyx_k_NemuIpcCaptureMethod___reduce_cy[] = "NemuIpcCaptureMethod.__reduce_cython__";
static const char __pyx_k_NemuIpcCaptureMethod_base_folder[] = "NemuIpcCaptureMethod.base_folder";
static const char __pyx_k_NemuIpcCaptureMethod_do_get_fram[] = "NemuIpcCaptureMethod.do_get_frame";
static const char __pyx_k_NemuIpcCaptureMethod_update_emul[] = "NemuIpcCaptureMethod.update_emulator";
static const char __pyx_k_Paused_because_game_window_is_mi[] = "Paused because game window is minimized or out of screen!";
static const char __pyx_k_Please_turn_off_enable_backgroun[] = "Please turn off enable background keep alive in MuMuPlayer settings";
static const char __pyx_k_Screencap_image_decode_error_pro[] = "Screencap image decode error, probably disconnected";
static const char __pyx_k_WindowsGraphicsCaptureMethod___r[] = "WindowsGraphicsCaptureMethod.__reduce_cython__";
static const char __pyx_k_WindowsGraphicsCaptureMethod___s[] = "WindowsGraphicsCaptureMethod.__setstate_cython__";
static const char __pyx_k_WindowsGraphicsCaptureMethod_clo[] = "WindowsGraphicsCaptureMethod.close";
static const char __pyx_k_WindowsGraphicsCaptureMethod_con[] = "WindowsGraphicsCaptureMethod.connected";
static const char __pyx_k_WindowsGraphicsCaptureMethod_cre[] = "WindowsGraphicsCaptureMethod.create_device";
static const char __pyx_k_WindowsGraphicsCaptureMethod_cro[] = "WindowsGraphicsCaptureMethod.crop_image";
static const char __pyx_k_WindowsGraphicsCaptureMethod_res[] = "WindowsGraphicsCaptureMethod.reset_framepool";
static const char __pyx_k_WindowsGraphicsCaptureMethod_sta[] = "WindowsGraphicsCaptureMethod.start_or_stop";
static const char __pyx_k_Windows_Graphics_Capture_Graphic[] = "Windows.Graphics.Capture.GraphicsCaptureItem";
static const char __pyx_k_adb_connect_offline_disconnect_f[] = "adb_connect offline disconnect first ";
static const char __pyx_k_cant_find_a_usable_windows_captu[] = "cant find a usable windows capture";
static const char __pyx_k_check_available_WINDOWS_BUILD_NU[] = "check available WINDOWS_BUILD_NUMBER:";
static const char __pyx_k_device_connected_check_device_st[] = "device_connected check device state is ";
static const char __pyx_k_do_update_window_size_changed_vi[] = "do_update_window_size changed,visible:";
static const char __pyx_k_fast_most_compatible_capped_at_6[] = "fast, most compatible, capped at 60fps";
static const char __pyx_k_first_start_use_first_or_connect[] = "first start use first or connected device ";
static const char __pyx_k_frame_arrived_callback_TryGetNex[] = "frame_arrived_callback TryGetNextFrame returned None";
static const char __pyx_k_get_device_adb_device_addr_chang[] = "get device adb device addr changed ";
static const char __pyx_k_latency_too_large_return_None_fr[] = "latency too large return None frame: ";
static const char __pyx_k_no_frame_for_10_sec_try_to_resta[] = "no frame for 10 sec, try to restart";
static const char __pyx_k_ok_gui_executor_pause_pos_invali[] = "ok.gui.executor.pause pos_invalid: ";
static const char __pyx_k_ok_interaction_PostMessageIntera[] = "ok.interaction.PostMessageInteraction";
static const char __pyx_k_ok_interaction_PyDirectInteracti[] = "ok.interaction.PyDirectInteraction";
static const char __pyx_k_ok_rotypes_Windows_Graphics_Capt[] = "ok.rotypes.Windows.Graphics.Capture";
static const char __pyx_k_ok_rotypes_Windows_Graphics_Dire[] = "ok.rotypes.Windows.Graphics.DirectX.Direct3D11";
static const char __pyx_k_refresh_current_only_skip_others[] = "refresh current only skip others ";
static const char __pyx_k_self_get_preferred_device_return[] = "self.get_preferred_device returned None";
static const char __pyx_k_test_is_not_pure_color_failed_ca[] = "test_is_not_pure_color failed, can't use BitBlt";
static const char __pyx_k_unmute_game_because_option_is_tu[] = "unmute game because option is turned off";
static const char __pyx_k_use_the_adb_screencap_command_sl[] = "use the adb screencap command, slow but works when in background/minimized, takes 300ms per frame";
static const char __pyx_k_DesktopDuplicationCaptureMethod_2[] = "DesktopDuplicationCaptureMethod.do_get_frame";
static const char __pyx_k_DesktopDuplicationCaptureMethod_3[] = "DesktopDuplicationCaptureMethod.close";
static const char __pyx_k_DesktopDuplicationCaptureMethod_4[] = "DesktopDuplicationCaptureMethod.__reduce_cython__";
static const char __pyx_k_DesktopDuplicationCaptureMethod_5[] = "DesktopDuplicationCaptureMethod.__setstate_cython__";
static const char __pyx_k_Failed_to_test_is_not_pure_color_2[] = "Failed to test_is_not_pure_color failed ";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_3[] = "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_4[] = "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_5[] = "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_6[] = "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_7[] = "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_8[] = "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))";
static const char __pyx_k_ok_rotypes_Windows_Graphics_Dire_2[] = "ok.rotypes.Windows.Graphics.DirectX";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_wrap(PyObject *__pyx_self, struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_2close(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_5width___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_6height___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_4get_frame(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_6__str__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_8do_get_frame(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_10draw_rectangle(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_12clickable(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_14connected(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size_2__set__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size_4__del__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event_2__set__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event_4__del__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_16__reduce_cython__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_18__setstate_cython__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window___get__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_2__set__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_hwnd_window); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_2connected(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_4get_abs_cords(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_6clickable(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_8__str__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window___get__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_2__set__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_4__del__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_10__reduce_cython__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12__setstate_cython__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_get_crop_point(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_target_width, PyObject *__pyx_v_target_height); /* proto */
static int __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window___get__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_2__set__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_hwnd_window); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_2connected(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_4start_or_stop(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_capture_cursor); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_6create_device(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_8close(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_10do_get_frame(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_12reset_framepool(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_reset_device); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_14crop_image(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_frame); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_16__reduce_cython__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_18__setstate_cython__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_2crop_image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image, PyObject *__pyx_v_border, PyObject *__pyx_v_title_height); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_4windows_graphics_available(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_6is_blank(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_2test_exclusive_full_screen(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_4test_is_not_pure_color(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_6__reduce_cython__(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_8__setstate_cython__(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow___init__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_title, PyObject *__pyx_v_exe_name, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_hwnd_class, PyObject *__pyx_v_global_config, PyObject *__pyx_v_device_manager); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_2validate_mute_config(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_4stop(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6update_window(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_title, PyObject *__pyx_v_exe_name, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_hwnd_class); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_8update_frame_size(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10update_window_size(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_12get_abs_cords(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_14do_update_window_size(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_16handle_mute(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_18frame_ratio(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_title___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_20__str__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10stop_event___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_4hwnd___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11mute_option___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6thread___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_6thread_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_6thread_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_14device_manager___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_8exe_name___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_5title___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_5title_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_5title_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_9player_id___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_9player_id_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_12window_width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_12window_width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13window_height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_13window_height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_1x___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_1x_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_1y___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_1y_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_5width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_5width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_6height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11frame_width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_11frame_width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_12frame_height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_12frame_height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10real_width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_10real_width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11real_height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_11real_height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13real_x_offset___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_13real_x_offset_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13real_y_offset___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_13real_y_offset_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_7visible___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_7visible_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6exists___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_6exists_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_9pos_valid___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_9pos_valid_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_7scaling___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_7scaling_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_18frame_aspect_ratio___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_22__reduce_cython__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_24__setstate_cython__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_8check_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_monitors_bounds); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_10get_monitors_bounds(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_12is_window_in_screen_bounds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_window_left, PyObject *__pyx_v_window_top, PyObject *__pyx_v_window_width, PyObject *__pyx_v_window_height, PyObject *__pyx_v_monitors_bounds); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_9find_hwnd_callback(PyObject *__pyx_self, PyObject *__pyx_v_hwnd, CYTHON_UNUSED PyObject *__pyx_v_lParam); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_14find_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_exe_name, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_class_name); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_16get_mute_state(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18set_mute_state(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_mute); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20get_player_id_from_cmdline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cmdline); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18enum_child_windows_child_callback(PyObject *__pyx_self, PyObject *__pyx_v_hwnd, CYTHON_UNUSED PyObject *__pyx_v__); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_22enum_child_windows(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_biggest, PyObject *__pyx_v_frame_aspect_ratio); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_24get_exe_by_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd); /* proto */
static int __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self, struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_2do_get_frame(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_4close(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_6__reduce_cython__(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_8__setstate_cython__(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_26decimal(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_28is_digit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_30is_valid_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_32try_delete_dc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dc); /* proto */
static int __pyx_pf_2ok_7Capture_16ADBCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self, PyObject *__pyx_v_device_manager, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_2do_get_frame(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_4connected(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_6__reduce_cython__(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_8__setstate_cython__(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2ok_7Capture_18ImageCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, PyObject *__pyx_v_images); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_2set_images(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, PyObject *__pyx_v_images); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_4do_get_frame(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_6connected(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_8__reduce_cython__(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_10__setstate_cython__(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_app_config, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_global_config); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_2refresh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_4adb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_6try_kill_adb(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_8adb_connect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_addr, PyObject *__pyx_v_try_connect); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_10get_devices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_12update_pc_device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_14do_refresh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_current); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_16refresh_phones(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_current); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_18refresh_emulators(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_current); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_20get_resolution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_22set_preferred_device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_imei, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_24shell_device(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_device, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_26adb_get_imei(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_28do_screencap(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_30get_preferred_device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_32get_preferred_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_34set_hwnd_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_hwnd_name); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_36set_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_capture); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_38get_hwnd_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_40ensure_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_title, PyObject *__pyx_v_exe, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_hwnd_class); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_42use_windows_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_override_config, PyObject *__pyx_v_require_bg, PyObject *__pyx_v_use_bit_blt_only, PyObject *__pyx_v_bit_blt_render_full); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_44start(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_46do_start(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_48update_resolution_for_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_50device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_52adb_kill_server(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_54width(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_56height(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_58update_device_list(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_60shell(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_62device_connected(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_64get_exe_path(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_66adb_check_installed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_packages); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_68adb_check_in_front(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_packages); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_70adb_start_package(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_package); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_72adb_ensure_in_front(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_packages); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_34parse_ratio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ratio_str); /* proto */
static int __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, PyObject *__pyx_v_device_manager, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_2update_emulator(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, PyObject *__pyx_v_emulator); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_4init_nemu(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_6base_folder(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_8check_mumu_app_keep_alive_400(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_10close(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_12do_get_frame(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_14connected(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_16__reduce_cython__(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_18__setstate_cython__(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_36deep_get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d, PyObject *__pyx_v_keys, PyObject *__pyx_v_default); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_38update_capture_method(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_config, PyObject *__pyx_v_capture_method, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_require_bg, PyObject *__pyx_v_use_bit_blt_only, PyObject *__pyx_v_bit_blt_render_full, PyObject *__pyx_v_exit_event); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_40get_win_graphics_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_capture_method, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_exit_event); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_42get_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_capture_method, PyObject *__pyx_v_target_method, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_exit_event); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_44is_window_minimized(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hWnd); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_46get_window_bounds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_48is_foreground_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_50__pyx_unpickle_BaseCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_52__pyx_unpickle_BaseWindowsCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_54__pyx_unpickle_WindowsGraphicsCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_56__pyx_unpickle_BitBltCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_58__pyx_unpickle_HwndWindow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_60__pyx_unpickle_DesktopDuplicationCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_62__pyx_unpickle_ADBCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_64__pyx_unpickle_ImageCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2ok_7Capture_66__pyx_unpickle_NemuIpcCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_2ok_7Capture_BaseCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_WindowsGraphicsCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_BitBltCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_HwndWindow(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_DesktopDuplicationCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_ADBCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_ImageCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture_NemuIpcCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture___pyx_scope_struct__find_hwnd(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2ok_7Capture___pyx_scope_struct_1_enum_child_windows(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_setdefault = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_2ok_7Capture_BaseCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_BitBltCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_HwndWindow;
  PyObject *__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_ADBCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_ImageCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture_NemuIpcCaptureMethod;
  PyObject *__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd;
  PyObject *__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows;
  PyObject *__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y;
  #endif
  PyTypeObject *__pyx_ptype_2ok_7Capture_BaseCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_BitBltCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_HwndWindow;
  PyTypeObject *__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_ADBCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_ImageCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod;
  PyTypeObject *__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd;
  PyTypeObject *__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows;
  PyTypeObject *__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y;
  PyObject *__pyx_kp_s_0;
  PyObject *__pyx_kp_s_127_0_0_1;
  PyObject *__pyx_n_s_ADBBaseInteraction;
  PyObject *__pyx_n_s_ADBCaptureMethod;
  PyObject *__pyx_n_s_ADBCaptureMethod___reduce_cython;
  PyObject *__pyx_n_s_ADBCaptureMethod___setstate_cyth;
  PyObject *__pyx_n_s_ADBCaptureMethod_connected;
  PyObject *__pyx_n_s_ADBCaptureMethod_do_get_frame;
  PyObject *__pyx_n_s_ADBUTILS_ADB_PATH;
  PyObject *__pyx_kp_s_ADB_command_line_Capture;
  PyObject *__pyx_kp_s_About_10_15x_slower_than_BitBlt;
  PyObject *__pyx_n_s_AdbClient;
  PyObject *__pyx_n_s_AdbError;
  PyObject *__pyx_n_s_Alpha;
  PyObject *__pyx_n_s_ArraySize;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_AudioUtilities;
  PyObject *__pyx_n_s_B8G8R8A8UIntNormalized;
  PyObject *__pyx_n_s_BaseCaptureMethod;
  PyObject *__pyx_n_s_BaseCaptureMethod___reduce_cytho;
  PyObject *__pyx_n_s_BaseCaptureMethod___setstate_cyt;
  PyObject *__pyx_n_s_BaseCaptureMethod_clickable;
  PyObject *__pyx_n_s_BaseCaptureMethod_close;
  PyObject *__pyx_n_s_BaseCaptureMethod_connected;
  PyObject *__pyx_n_s_BaseCaptureMethod_do_get_frame;
  PyObject *__pyx_n_s_BaseCaptureMethod_draw_rectangle;
  PyObject *__pyx_n_s_BaseCaptureMethod_get_frame;
  PyObject *__pyx_n_s_BaseWindowsCaptureMethod;
  PyObject *__pyx_n_s_BaseWindowsCaptureMethod___reduc;
  PyObject *__pyx_n_s_BaseWindowsCaptureMethod___setst;
  PyObject *__pyx_n_s_BaseWindowsCaptureMethod_clickab;
  PyObject *__pyx_n_s_BaseWindowsCaptureMethod_connect;
  PyObject *__pyx_n_s_BaseWindowsCaptureMethod_get_abs;
  PyObject *__pyx_n_s_BindFlags;
  PyObject *__pyx_n_s_BitBlt;
  PyObject *__pyx_n_s_BitBltCaptureMethod;
  PyObject *__pyx_n_s_BitBltCaptureMethod___reduce_cyt;
  PyObject *__pyx_n_s_BitBltCaptureMethod___setstate_c;
  PyObject *__pyx_n_s_BitBltCaptureMethod_do_get_frame;
  PyObject *__pyx_n_s_BitBltCaptureMethod_test_exclusi;
  PyObject *__pyx_n_s_BitBltCaptureMethod_test_is_not;
  PyObject *__pyx_n_s_Blue;
  PyObject *__pyx_n_s_COLOR_RGB2BGR;
  PyObject *__pyx_n_s_CPUAccessFlags;
  PyObject *__pyx_n_s_CaptureException;
  PyObject *__pyx_n_s_Channels;
  PyObject *__pyx_n_s_ClientToScreen;
  PyObject *__pyx_n_s_Close;
  PyObject *__pyx_n_s_ColorChannel;
  PyObject *__pyx_n_s_Config;
  PyObject *__pyx_n_s_ConfigOption;
  PyObject *__pyx_n_s_ContentSize;
  PyObject *__pyx_n_s_CopyResource;
  PyObject *__pyx_n_s_CreateBitmap;
  PyObject *__pyx_n_s_CreateCaptureSession;
  PyObject *__pyx_n_s_CreateCompatibleBitmap;
  PyObject *__pyx_n_s_CreateCompatibleDC;
  PyObject *__pyx_n_s_CreateDCFromHandle;
  PyObject *__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe;
  PyObject *__pyx_n_s_CreateForWindow;
  PyObject *__pyx_n_s_CreateFreeThreaded;
  PyObject *__pyx_n_s_CreateTexture2D;
  PyObject *__pyx_n_s_D3D11CreateDevice;
  PyObject *__pyx_n_s_D3D11_CPU_ACCESS_READ;
  PyObject *__pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT;
  PyObject *__pyx_n_s_D3D11_MAP_READ;
  PyObject *__pyx_n_s_D3D11_SDK_VERSION;
  PyObject *__pyx_n_s_D3D11_TEXTURE2D_DESC;
  PyObject *__pyx_n_s_D3D11_USAGE_STAGING;
  PyObject *__pyx_n_s_D3D_DRIVER_TYPE_HARDWARE;
  PyObject *__pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS;
  PyObject *__pyx_n_s_DXGI_ERROR_DEVICE_REMOVED;
  PyObject *__pyx_n_s_DXGI_ERROR_DEVICE_RESET;
  PyObject *__pyx_n_s_DeleteDC;
  PyObject *__pyx_n_s_DeleteObject;
  PyObject *__pyx_n_s_DesktopDuplicationCaptureMethod;
  PyObject *__pyx_n_s_DesktopDuplicationCaptureMethod_2;
  PyObject *__pyx_n_s_DesktopDuplicationCaptureMethod_3;
  PyObject *__pyx_n_s_DesktopDuplicationCaptureMethod_4;
  PyObject *__pyx_n_s_DesktopDuplicationCaptureMethod_5;
  PyObject *__pyx_n_s_DeviceManager;
  PyObject *__pyx_n_s_DeviceManager___init;
  PyObject *__pyx_n_s_DeviceManager_adb;
  PyObject *__pyx_n_s_DeviceManager_adb_check_in_front;
  PyObject *__pyx_n_s_DeviceManager_adb_check_installe;
  PyObject *__pyx_n_s_DeviceManager_adb_connect;
  PyObject *__pyx_n_s_DeviceManager_adb_ensure_in_fron;
  PyObject *__pyx_n_s_DeviceManager_adb_get_imei;
  PyObject *__pyx_n_s_DeviceManager_adb_kill_server;
  PyObject *__pyx_n_s_DeviceManager_adb_start_package;
  PyObject *__pyx_n_s_DeviceManager_device;
  PyObject *__pyx_n_s_DeviceManager_device_connected;
  PyObject *__pyx_n_s_DeviceManager_do_refresh;
  PyObject *__pyx_n_s_DeviceManager_do_screencap;
  PyObject *__pyx_n_s_DeviceManager_do_start;
  PyObject *__pyx_n_s_DeviceManager_ensure_hwnd;
  PyObject *__pyx_n_s_DeviceManager_get_devices;
  PyObject *__pyx_n_s_DeviceManager_get_exe_path;
  PyObject *__pyx_n_s_DeviceManager_get_hwnd_name;
  PyObject *__pyx_n_s_DeviceManager_get_preferred_capt;
  PyObject *__pyx_n_s_DeviceManager_get_preferred_devi;
  PyObject *__pyx_n_s_DeviceManager_get_resolution;
  PyObject *__pyx_n_s_DeviceManager_height;
  PyObject *__pyx_n_s_DeviceManager_refresh;
  PyObject *__pyx_n_s_DeviceManager_refresh_emulators;
  PyObject *__pyx_n_s_DeviceManager_refresh_phones;
  PyObject *__pyx_n_s_DeviceManager_set_capture;
  PyObject *__pyx_n_s_DeviceManager_set_hwnd_name;
  PyObject *__pyx_n_s_DeviceManager_set_preferred_devi;
  PyObject *__pyx_n_s_DeviceManager_shell;
  PyObject *__pyx_n_s_DeviceManager_shell_device;
  PyObject *__pyx_n_s_DeviceManager_start;
  PyObject *__pyx_n_s_DeviceManager_try_kill_adb;
  PyObject *__pyx_n_s_DeviceManager_update_device_list;
  PyObject *__pyx_n_s_DeviceManager_update_pc_device;
  PyObject *__pyx_n_s_DeviceManager_update_resolution;
  PyObject *__pyx_n_s_DeviceManager_use_windows_captur;
  PyObject *__pyx_n_s_DeviceManager_width;
  PyObject *__pyx_kp_s_Device_is_none;
  PyObject *__pyx_n_s_Direct3D11CaptureFramePool;
  PyObject *__pyx_kp_s_Direct3D_Desktop_Duplication;
  PyObject *__pyx_n_s_DirectXPixelFormat;
  PyObject *__pyx_kp_s_Display_not_found;
  PyObject *__pyx_kp_s_Duplicates_the_desktop_using_Di;
  PyObject *__pyx_n_s_DwmGetWindowAttribute;
  PyObject *__pyx_n_s_EmulatorManager;
  PyObject *__pyx_n_s_EnumChildWindows;
  PyObject *__pyx_n_s_EnumDisplayMonitors;
  PyObject *__pyx_n_s_EnumWindows;
  PyObject *__pyx_n_s_Event;
  PyObject *__pyx_kp_u_Failed_to_check_check_mumu_app_k;
  PyObject *__pyx_kp_u_Failed_to_test_exclusive_full_sc;
  PyObject *__pyx_kp_u_Failed_to_test_is_not_pure_color;
  PyObject *__pyx_kp_u_Failed_to_test_is_not_pure_color_2;
  PyObject *__pyx_n_u_False;
  PyObject *__pyx_n_s_FileNotFoundError;
  PyObject *__pyx_n_s_FluentIcon;
  PyObject *__pyx_n_s_Format;
  PyObject *__pyx_n_s_GUID;
  PyObject *__pyx_kp_s_Game_Sound;
  PyObject *__pyx_n_s_GetActivationFactory;
  PyObject *__pyx_n_s_GetAllSessions;
  PyObject *__pyx_n_s_GetBitmapBits;
  PyObject *__pyx_n_s_GetClassName;
  PyObject *__pyx_n_s_GetClientRect;
  PyObject *__pyx_n_s_GetDesc;
  PyObject *__pyx_n_s_GetDpiForMonitor;
  PyObject *__pyx_n_s_GetForegroundWindow;
  PyObject *__pyx_n_s_GetHandle;
  PyObject *__pyx_n_s_GetInterface;
  PyObject *__pyx_n_s_GetMonitorInfo;
  PyObject *__pyx_n_s_GetMute;
  PyObject *__pyx_n_s_GetParent;
  PyObject *__pyx_n_s_GetSafeHdc;
  PyObject *__pyx_n_s_GetWindowDC;
  PyObject *__pyx_n_s_GetWindowRect;
  PyObject *__pyx_n_s_GetWindowText;
  PyObject *__pyx_n_s_GetWindowThreadProcessId;
  PyObject *__pyx_n_s_GraphicsCaptureItem;
  PyObject *__pyx_n_s_Green;
  PyObject *__pyx_n_s_Handler;
  PyObject *__pyx_n_s_Height;
  PyObject *__pyx_n_s_HwndWindow;
  PyObject *__pyx_n_s_HwndWindow___reduce_cython;
  PyObject *__pyx_n_s_HwndWindow___setstate_cython;
  PyObject *__pyx_n_s_HwndWindow_do_update_window_size;
  PyObject *__pyx_n_s_HwndWindow_frame_ratio;
  PyObject *__pyx_kp_u_HwndWindow_frame_ratio_width;
  PyObject *__pyx_n_s_HwndWindow_get_abs_cords;
  PyObject *__pyx_n_s_HwndWindow_handle_mute;
  PyObject *__pyx_kp_u_HwndWindow_init_title;
  PyObject *__pyx_n_s_HwndWindow_stop;
  PyObject *__pyx_n_s_HwndWindow_update_frame_size;
  PyObject *__pyx_n_s_HwndWindow_update_window;
  PyObject *__pyx_n_s_HwndWindow_update_window_size;
  PyObject *__pyx_n_s_HwndWindow_validate_mute_config;
  PyObject *__pyx_n_s_ID3D11Device;
  PyObject *__pyx_n_s_ID3D11DeviceContext;
  PyObject *__pyx_n_s_ID3D11Texture2D;
  PyObject *__pyx_n_s_IDirect3DDevice;
  PyObject *__pyx_n_s_IDirect3DDxgiInterfaceAccess;
  PyObject *__pyx_n_s_IGraphicsCaptureItem;
  PyObject *__pyx_n_s_IGraphicsCaptureItemInterop;
  PyObject *__pyx_n_s_IInspectable;
  PyObject *__pyx_n_s_IMREAD_COLOR;
  PyObject *__pyx_n_s_IMREAD_UNCHANGED;
  PyObject *__pyx_n_s_ISimpleAudioVolume;
  PyObject *__pyx_n_s_ImageCaptureMethod;
  PyObject *__pyx_n_s_ImageCaptureMethod___reduce_cyth;
  PyObject *__pyx_n_s_ImageCaptureMethod___setstate_cy;
  PyObject *__pyx_n_s_ImageCaptureMethod_connected;
  PyObject *__pyx_n_s_ImageCaptureMethod_do_get_frame;
  PyObject *__pyx_n_s_ImageCaptureMethod_set_images;
  PyObject *__pyx_n_s_ImageShape;
  PyObject *__pyx_kp_s_Image_capture_method;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8;
  PyObject *__pyx_n_s_IntEnum;
  PyObject *__pyx_n_s_IsBorderRequired;
  PyObject *__pyx_n_s_IsCursorCaptureEnabled;
  PyObject *__pyx_n_s_IsIconic;
  PyObject *__pyx_n_s_IsWindow;
  PyObject *__pyx_n_s_IsWindowEnabled;
  PyObject *__pyx_n_s_IsWindowVisible;
  PyObject *__pyx_kp_s_It_can_record_OpenGL_and_Hardwa;
  PyObject *__pyx_n_s_Lock;
  PyObject *__pyx_n_s_MAXBYTE;
  PyObject *__pyx_n_s_MDT_EFFECTIVE_DPI;
  PyObject *__pyx_n_s_MONITOR_DEFAULTTONEAREST;
  PyObject *__pyx_n_s_MUTE;
  PyObject *__pyx_n_s_Map;
  PyObject *__pyx_n_s_MipLevels;
  PyObject *__pyx_n_s_MiscFlags;
  PyObject *__pyx_n_s_Monitor;
  PyObject *__pyx_n_s_MonitorFromWindow;
  PyObject *__pyx_kp_s_Mute_Game_while_in_Background;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod___reduce_cy;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod___setstate;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_base_folder;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_check_mumu;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_close;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_connected;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_do_get_fram;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_init_nemu;
  PyObject *__pyx_n_s_NemuIpcCaptureMethod_update_emul;
  PyObject *__pyx_n_s_NemuIpcImpl;
  PyObject *__pyx_kp_s_Nemu_Ipc_Capture;
  PyObject *__pyx_n_s_None;
  PyObject *__pyx_n_s_OSError;
  PyObject *__pyx_kp_s_OpenGL_Hardware_Accelerated_or;
  PyObject *__pyx_kp_s_Overlapping_windows_will_show_u;
  PyObject *__pyx_n_s_PBYTE;
  PyObject *__pyx_n_s_POINTER;
  PyObject *__pyx_n_s_PW_RENDERFULLCONTENT;
  PyObject *__pyx_kp_s_Paused_because_game_exited;
  PyObject *__pyx_kp_s_Paused_because_game_window_is_mi;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_kp_s_Please_turn_off_enable_backgroun;
  PyObject *__pyx_n_s_PostMessage;
  PyObject *__pyx_n_s_PostMessageInteraction;
  PyObject *__pyx_n_s_PrintWindow;
  PyObject *__pyx_n_s_Process;
  PyObject *__pyx_n_s_PyDirectInteraction;
  PyObject *__pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture;
  PyObject *__pyx_n_s_QueryInterface;
  PyObject *__pyx_n_s_RECT;
  PyObject *__pyx_n_s_Recreate;
  PyObject *__pyx_n_s_Red;
  PyObject *__pyx_n_s_RefreshAdb;
  PyObject *__pyx_n_s_Release;
  PyObject *__pyx_n_s_ReleaseDC;
  PyObject *__pyx_n_s_RowPitch;
  PyObject *__pyx_n_s_SRCCOPY;
  PyObject *__pyx_n_s_SampleDesc;
  PyObject *__pyx_kp_u_Screencap_image_decode_error_pro;
  PyObject *__pyx_n_s_SelectObject;
  PyObject *__pyx_n_s_SetMute;
  PyObject *__pyx_n_s_Size;
  PyObject *__pyx_n_s_StartCapture;
  PyObject *__pyx_n_s_Surface;
  PyObject *__pyx_kp_s_The_best_option_when_compatible;
  PyObject *__pyx_kp_s_The_smaller_the_selected_region;
  PyObject *__pyx_kp_s_This_option_may_not_be_availabl;
  PyObject *__pyx_n_s_Thread;
  PyObject *__pyx_n_u_True;
  PyObject *__pyx_n_s_TryGetNextFrame;
  PyObject *__pyx_kp_u_TryGetNextFrame_error;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_TypedEventHandler;
  PyObject *__pyx_n_s_Unmap;
  PyObject *__pyx_n_s_Usage;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_WGC_MIN_BUILD;
  PyObject *__pyx_n_s_WGC_NO_BORDER_MIN_BUILD;
  PyObject *__pyx_n_s_WINDOWS_BUILD_NUMBER;
  PyObject *__pyx_n_s_Width;
  PyObject *__pyx_n_s_WinDLL;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod___r;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod___s;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_clo;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_con;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_cre;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_cro;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_do;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_res;
  PyObject *__pyx_n_s_WindowsGraphicsCaptureMethod_sta;
  PyObject *__pyx_kp_s_Windows_Graphics_Capture;
  PyObject *__pyx_kp_s_Windows_Graphics_Capture_Graphic;
  PyObject *__pyx_n_s_X;
  PyObject *__pyx_n_s_Y;
  PyObject *__pyx_kp_u__10;
  PyObject *__pyx_kp_u__11;
  PyObject *__pyx_kp_s__12;
  PyObject *__pyx_kp_u__14;
  PyObject *__pyx_kp_u__17;
  PyObject *__pyx_n_s__24;
  PyObject *__pyx_n_s__251;
  PyObject *__pyx_kp_s__28;
  PyObject *__pyx_n_s__7;
  PyObject *__pyx_n_u__7;
  PyObject *__pyx_kp_s__8;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_n_s_abspath;
  PyObject *__pyx_n_s_adb;
  PyObject *__pyx_n_s_adb_2;
  PyObject *__pyx_n_s_adb_capture_config;
  PyObject *__pyx_kp_u_adb_check_in_front;
  PyObject *__pyx_n_s_adb_check_in_front_2;
  PyObject *__pyx_n_s_adb_check_installed;
  PyObject *__pyx_n_s_adb_connect;
  PyObject *__pyx_kp_u_adb_connect_2;
  PyObject *__pyx_kp_u_adb_connect_already_connected;
  PyObject *__pyx_kp_u_adb_connect_emulator_result;
  PyObject *__pyx_kp_u_adb_connect_error;
  PyObject *__pyx_kp_u_adb_connect_error_return_none;
  PyObject *__pyx_kp_u_adb_connect_exit_event_is_set;
  PyObject *__pyx_kp_u_adb_connect_offline_disconnect_f;
  PyObject *__pyx_kp_u_adb_connect_try_connect;
  PyObject *__pyx_n_s_adb_device;
  PyObject *__pyx_n_s_adb_devices;
  PyObject *__pyx_kp_u_adb_ensure_in_front;
  PyObject *__pyx_n_s_adb_ensure_in_front_2;
  PyObject *__pyx_kp_s_adb_exe;
  PyObject *__pyx_n_s_adb_get_imei;
  PyObject *__pyx_n_s_adb_imei;
  PyObject *__pyx_kp_s_adb_kill_server;
  PyObject *__pyx_n_s_adb_kill_server_2;
  PyObject *__pyx_n_s_adb_lock;
  PyObject *__pyx_kp_u_adb_shell_error_maybe_offline;
  PyObject *__pyx_n_s_adb_start_package;
  PyObject *__pyx_n_s_adbutils;
  PyObject *__pyx_n_s_adbutils__utils;
  PyObject *__pyx_n_s_add_Closed;
  PyObject *__pyx_n_s_add_FrameArrived;
  PyObject *__pyx_n_s_addr;
  PyObject *__pyx_n_s_address;
  PyObject *__pyx_n_s_all_emulator_instances;
  PyObject *__pyx_n_s_any;
  PyObject *__pyx_n_s_app_config;
  PyObject *__pyx_n_s_app_current;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_as_array;
  PyObject *__pyx_n_s_astype;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_base_folder;
  PyObject *__pyx_n_s_biggest;
  PyObject *__pyx_n_s_bin_dir;
  PyObject *__pyx_n_s_bit_blt_render_full;
  PyObject *__pyx_n_s_border;
  PyObject *__pyx_n_s_byref;
  PyObject *__pyx_kp_u_c_android_intent_category_LAUNC;
  PyObject *__pyx_n_s_c_ubyte;
  PyObject *__pyx_n_s_c_uint;
  PyObject *__pyx_n_s_calculate_pc_exe_path;
  PyObject *__pyx_kp_u_calculate_pc_exe_path_2;
  PyObject *__pyx_n_s_callback;
  PyObject *__pyx_kp_s_calling_refresh;
  PyObject *__pyx_n_s_can_bit_blt;
  PyObject *__pyx_kp_u_cant_find_a_usable_windows_captu;
  PyObject *__pyx_n_s_capture;
  PyObject *__pyx_n_s_capture_cursor;
  PyObject *__pyx_n_s_capture_method;
  PyObject *__pyx_kp_u_capture_method_2;
  PyObject *__pyx_n_s_capture_output;
  PyObject *__pyx_n_s_cast;
  PyObject *__pyx_n_s_cfunc_to_py;
  PyObject *__pyx_n_s_changed;
  PyObject *__pyx_kp_u_check_available_WINDOWS_BUILD_NU;
  PyObject *__pyx_kp_u_check_available_failed;
  PyObject *__pyx_kp_u_check_connected;
  PyObject *__pyx_n_s_check_mumu_app_keep_alive_400;
  PyObject *__pyx_n_s_check_pos;
  PyObject *__pyx_n_s_child_callback;
  PyObject *__pyx_n_s_class;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_class_name;
  PyObject *__pyx_n_s_clickable;
  PyObject *__pyx_n_s_client_height;
  PyObject *__pyx_n_s_client_width;
  PyObject *__pyx_n_s_client_x;
  PyObject *__pyx_n_s_client_y;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_cmdline;
  PyObject *__pyx_n_s_communicate;
  PyObject *__pyx_n_s_config;
  PyObject *__pyx_kp_u_configs_customer_config_json;
  PyObject *__pyx_n_s_connect;
  PyObject *__pyx_n_s_connected;
  PyObject *__pyx_n_s_connected_device;
  PyObject *__pyx_kp_s_convert_dx_frame_win_error;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_s_create;
  PyObject *__pyx_n_s_create_device;
  PyObject *__pyx_n_s_crop_image;
  PyObject *__pyx_n_s_cropped_image;
  PyObject *__pyx_n_s_cropped_window_height;
  PyObject *__pyx_n_s_ctl;
  PyObject *__pyx_n_s_ctypes;
  PyObject *__pyx_n_s_ctypeslib;
  PyObject *__pyx_n_s_current;
  PyObject *__pyx_kp_s_customer_app_keptlive;
  PyObject *__pyx_kp_u_customer_app_keptlive_2;
  PyObject *__pyx_n_s_cv2;
  PyObject *__pyx_n_s_cvtColor;
  PyObject *__pyx_n_s_d;
  PyObject *__pyx_n_s_d3d11;
  PyObject *__pyx_n_s_d3dshot;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_dc;
  PyObject *__pyx_n_s_debug;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_deep_get;
  PyObject *__pyx_n_s_default;
  PyObject *__pyx_n_s_delegate;
  PyObject *__pyx_n_s_denominator;
  PyObject *__pyx_n_s_description;
  PyObject *__pyx_kp_s_destroy_windows_capture;
  PyObject *__pyx_n_s_device;
  PyObject *__pyx_n_s_device_2;
  PyObject *__pyx_n_s_device_connected;
  PyObject *__pyx_kp_u_device_connected_check_device_st;
  PyObject *__pyx_kp_u_device_connected_error_occurred;
  PyObject *__pyx_n_s_device_dict;
  PyObject *__pyx_n_s_device_list;
  PyObject *__pyx_n_s_device_manager;
  PyObject *__pyx_n_s_devices;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_n_s_difference;
  PyObject *__pyx_n_s_dirname;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_disconnect;
  PyObject *__pyx_n_s_display;
  PyObject *__pyx_n_s_display_id;
  PyObject *__pyx_n_s_displays;
  PyObject *__pyx_n_s_do_get_frame;
  PyObject *__pyx_n_s_do_refresh;
  PyObject *__pyx_n_s_do_screencap;
  PyObject *__pyx_n_s_do_start;
  PyObject *__pyx_n_u_do_start;
  PyObject *__pyx_kp_u_do_start_use_windows_capture;
  PyObject *__pyx_n_s_do_update_window_size;
  PyObject *__pyx_kp_u_do_update_window_size_changed_vi;
  PyObject *__pyx_kp_u_do_update_window_size_exception;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_dpiX;
  PyObject *__pyx_n_s_dpiY;
  PyObject *__pyx_n_s_draw_rectangle;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_dwmapi;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_kp_s_echo_1;
  PyObject *__pyx_n_s_emit;
  PyObject *__pyx_n_s_emulator;
  PyObject *__pyx_n_s_emulator_device;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encoding;
  PyObject *__pyx_n_s_ensure_hwnd;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_enum;
  PyObject *__pyx_n_s_enum_child_windows;
  PyObject *__pyx_n_s_enum_child_windows_locals_child;
  PyObject *__pyx_n_s_environ;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_exception;
  PyObject *__pyx_n_s_exe;
  PyObject *__pyx_n_s_exe_name;
  PyObject *__pyx_kp_u_exe_name_2;
  PyObject *__pyx_n_s_executor;
  PyObject *__pyx_n_s_exists;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_exit_event;
  PyObject *__pyx_kp_u_exit_reset_mute_state_to_0;
  PyObject *__pyx_n_s_extended_frame_bounds;
  PyObject *__pyx_n_s_f;
  PyObject *__pyx_kp_s_fast_most_compatible_capped_at_6;
  PyObject *__pyx_kp_s_fastest_least_compatible;
  PyObject *__pyx_n_s_file;
  PyObject *__pyx_n_s_find_hwnd;
  PyObject *__pyx_kp_u_find_hwnd_2;
  PyObject *__pyx_kp_u_find_hwnd_child_callback;
  PyObject *__pyx_n_s_find_hwnd_locals_callback;
  PyObject *__pyx_kp_u_first_start_use_first_or_connect;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_kp_s_for_debugging;
  PyObject *__pyx_n_s_found;
  PyObject *__pyx_kp_u_found_hwnd;
  PyObject *__pyx_n_s_frame;
  PyObject *__pyx_kp_s_frame_arrived_callback_TryGetNex;
  PyObject *__pyx_n_s_frame_aspect_ratio;
  PyObject *__pyx_n_s_frame_height;
  PyObject *__pyx_n_s_frame_ratio;
  PyObject *__pyx_n_s_frame_width;
  PyObject *__pyx_n_s_frombuffer;
  PyObject *__pyx_n_s_fromfile;
  PyObject *__pyx_n_s_front;
  PyObject *__pyx_n_s_full_path;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_get_abs_cords;
  PyObject *__pyx_n_s_get_bin_dir;
  PyObject *__pyx_n_s_get_capture;
  PyObject *__pyx_n_s_get_config;
  PyObject *__pyx_n_s_get_crop_point;
  PyObject *__pyx_kp_u_get_device_adb_device_addr_chang;
  PyObject *__pyx_kp_u_get_device_connect;
  PyObject *__pyx_n_s_get_devices;
  PyObject *__pyx_n_s_get_emulator_exe;
  PyObject *__pyx_n_s_get_exe_by_hwnd;
  PyObject *__pyx_kp_s_get_exe_by_hwnd_error;
  PyObject *__pyx_n_s_get_exe_path;
  PyObject *__pyx_n_s_get_frame;
  PyObject *__pyx_kp_u_get_frame_size_0;
  PyObject *__pyx_n_s_get_hwnd_name;
  PyObject *__pyx_n_s_get_logger;
  PyObject *__pyx_n_s_get_monitors_bounds;
  PyObject *__pyx_n_s_get_mute_state;
  PyObject *__pyx_n_s_get_player_id_from_cmdline;
  PyObject *__pyx_n_s_get_preferred_capture;
  PyObject *__pyx_n_s_get_preferred_device;
  PyObject *__pyx_n_s_get_resolution;
  PyObject *__pyx_n_s_get_win_graphics_capture;
  PyObject *__pyx_n_s_get_window_bounds;
  PyObject *__pyx_kp_u_get_window_bounds_exception;
  PyObject *__pyx_n_s_getenv;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_global_config;
  PyObject *__pyx_n_s_group;
  PyObject *__pyx_n_s_hWnd;
  PyObject *__pyx_n_s_handle_mute;
  PyObject *__pyx_n_s_handler;
  PyObject *__pyx_n_s_height;
  PyObject *__pyx_kp_u_height_2;
  PyObject *__pyx_n_s_hmonitor;
  PyObject *__pyx_n_s_host;
  PyObject *__pyx_n_s_hwnd;
  PyObject *__pyx_n_s_hwnd_class;
  PyObject *__pyx_kp_u_hwnd_class_2;
  PyObject *__pyx_n_s_hwnd_name;
  PyObject *__pyx_n_s_hwnd_window;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_icon;
  PyObject *__pyx_n_s_idldsl;
  PyObject *__pyx_n_s_image;
  PyObject *__pyx_n_s_image_data;
  PyObject *__pyx_n_s_images;
  PyObject *__pyx_n_s_imdecode;
  PyObject *__pyx_n_s_imei;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_kp_s_index_d;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_kp_s_init___end;
  PyObject *__pyx_kp_s_init___start;
  PyObject *__pyx_kp_u_init_adb;
  PyObject *__pyx_n_s_init_nemu;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_kp_s_init_windows_capture;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_installed;
  PyObject *__pyx_kp_u_installed_emulators;
  PyObject *__pyx_n_s_installed_emulators_2;
  PyObject *__pyx_n_s_instance_id;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_interaction;
  PyObject *__pyx_n_s_interop;
  PyObject *__pyx_n_s_ipc;
  PyObject *__pyx_n_s_is_blank;
  PyObject *__pyx_n_s_is_close_to_pure_color;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_digit;
  PyObject *__pyx_n_s_is_foreground_window;
  PyObject *__pyx_n_s_is_set;
  PyObject *__pyx_n_s_is_valid_exe;
  PyObject *__pyx_n_s_is_valid_hwnd;
  PyObject *__pyx_n_s_is_window_in_screen_bounds;
  PyObject *__pyx_n_s_is_window_minimized;
  PyObject *__pyx_n_s_isdigit;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isfile;
  PyObject *__pyx_n_s_item;
  PyObject *__pyx_n_s_iter_device;
  PyObject *__pyx_n_s_join;
  PyObject *__pyx_n_s_json;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_kill;
  PyObject *__pyx_kp_u_kill_adb_by_process_name;
  PyObject *__pyx_kp_u_kill_adb_server_failed;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_s_lParam;
  PyObject *__pyx_kp_u_latency_too_large_return_None_fr;
  PyObject *__pyx_n_s_list;
  PyObject *__pyx_n_s_ljust;
  PyObject *__pyx_n_s_loads;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_lower;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_manager;
  PyObject *__pyx_n_s_matching_child;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_model;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_monitor;
  PyObject *__pyx_n_s_monitor_bottom;
  PyObject *__pyx_n_s_monitor_info;
  PyObject *__pyx_n_s_monitor_left;
  PyObject *__pyx_n_s_monitor_rect;
  PyObject *__pyx_n_s_monitor_right;
  PyObject *__pyx_n_s_monitor_top;
  PyObject *__pyx_n_s_monitors;
  PyObject *__pyx_n_s_monitors_bounds;
  PyObject *__pyx_kp_u_monkey_p;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_kp_s_mumu_player_12_only;
  PyObject *__pyx_n_s_mute;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_need_reset_framepool;
  PyObject *__pyx_n_s_nemu_folder;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_nick;
  PyObject *__pyx_kp_u_no_devices;
  PyObject *__pyx_kp_u_no_frame_for_10_sec_try_to_resta;
  PyObject *__pyx_n_s_no_window;
  PyObject *__pyx_n_s_none;
  PyObject *__pyx_kp_u_not_exists;
  PyObject *__pyx_kp_u_not_in_device_list;
  PyObject *__pyx_n_s_notification;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_kp_s_np_ndarray_None;
  PyObject *__pyx_n_s_nt;
  PyObject *__pyx_n_s_numerator;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_n_s_offline;
  PyObject *__pyx_n_s_ok_Capture;
  PyObject *__pyx_kp_u_ok_Capture;
  PyObject *__pyx_kp_s_ok_Capture_pyx;
  PyObject *__pyx_n_s_ok_alas_emulator_windows;
  PyObject *__pyx_n_s_ok_alas_platform_windows;
  PyObject *__pyx_n_s_ok_capture_adb_nemu_ipc;
  PyObject *__pyx_n_s_ok_capture_windows;
  PyObject *__pyx_n_s_ok_color_Color;
  PyObject *__pyx_n_s_ok_config_Config;
  PyObject *__pyx_n_s_ok_config_ConfigOption;
  PyObject *__pyx_n_s_ok_gui_Communicate;
  PyObject *__pyx_kp_u_ok_gui_executor_pause_pos_invali;
  PyObject *__pyx_n_s_ok_interaction_ADBInteraction;
  PyObject *__pyx_n_s_ok_interaction_PostMessageIntera;
  PyObject *__pyx_n_s_ok_interaction_PyDirectInteracti;
  PyObject *__pyx_n_s_ok_logging_Logger;
  PyObject *__pyx_n_s_ok_rotypes;
  PyObject *__pyx_n_s_ok_rotypes_Windows_Foundation;
  PyObject *__pyx_n_s_ok_rotypes_Windows_Graphics_Capt;
  PyObject *__pyx_n_s_ok_rotypes_Windows_Graphics_Dire;
  PyObject *__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2;
  PyObject *__pyx_n_s_ok_rotypes_roapi;
  PyObject *__pyx_n_s_ok_util_Handler;
  PyObject *__pyx_n_s_open;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_override_config;
  PyObject *__pyx_n_s_pData;
  PyObject *__pyx_n_s_package;
  PyObject *__pyx_n_s_packages;
  PyObject *__pyx_n_s_parent;
  PyObject *__pyx_n_s_parse_ratio;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_n_s_pause;
  PyObject *__pyx_n_s_pc;
  PyObject *__pyx_n_s_pc_device;
  PyObject *__pyx_n_s_pc_full_path;
  PyObject *__pyx_n_s_percent;
  PyObject *__pyx_n_s_phone_device;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pid;
  PyObject *__pyx_n_s_platform;
  PyObject *__pyx_n_s_player_id;
  PyObject *__pyx_kp_u_player_id_2;
  PyObject *__pyx_kp_u_player_id_check_failed_cmdline;
  PyObject *__pyx_kp_s_pm_list_packages;
  PyObject *__pyx_n_s_png_bytes;
  PyObject *__pyx_n_s_pool;
  PyObject *__pyx_n_s_pop;
  PyObject *__pyx_n_s_pos_valid;
  PyObject *__pyx_n_s_post;
  PyObject *__pyx_n_s_preferred;
  PyObject *__pyx_kp_u_preferred_device;
  PyObject *__pyx_kp_u_preferred_device_did_change;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_proc;
  PyObject *__pyx_n_s_process;
  PyObject *__pyx_n_s_process_iter;
  PyObject *__pyx_n_s_prop;
  PyObject *__pyx_n_s_property;
  PyObject *__pyx_n_s_psutil;
  PyObject *__pyx_n_s_pycaw_api_audioclient;
  PyObject *__pyx_n_s_pycaw_utils;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_ADBCaptureMethod;
  PyObject *__pyx_n_s_pyx_unpickle_BaseCaptureMethod;
  PyObject *__pyx_n_s_pyx_unpickle_BaseWindowsCaptur;
  PyObject *__pyx_n_s_pyx_unpickle_BitBltCaptureMeth;
  PyObject *__pyx_n_s_pyx_unpickle_DesktopDuplicatio;
  PyObject *__pyx_n_s_pyx_unpickle_HwndWindow;
  PyObject *__pyx_n_s_pyx_unpickle_ImageCaptureMetho;
  PyObject *__pyx_n_s_pyx_unpickle_NemuIpcCaptureMet;
  PyObject *__pyx_n_s_pyx_unpickle_WindowsGraphicsCa;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qfluentwidgets;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_r;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ratio;
  PyObject *__pyx_n_s_ratio_float;
  PyObject *__pyx_n_s_ratio_match;
  PyObject *__pyx_n_s_ratio_str;
  PyObject *__pyx_n_s_re;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_kp_u_real;
  PyObject *__pyx_n_s_real_height;
  PyObject *__pyx_n_s_real_width;
  PyObject *__pyx_n_s_real_x_offset;
  PyObject *__pyx_n_s_real_y_offset;
  PyObject *__pyx_n_s_rect;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_kp_u_refresh;
  PyObject *__pyx_n_s_refresh_2;
  PyObject *__pyx_kp_u_refresh_current_only_skip_others;
  PyObject *__pyx_n_s_refresh_emulators;
  PyObject *__pyx_kp_u_refresh_emulators_2;
  PyObject *__pyx_n_s_refresh_phones;
  PyObject *__pyx_kp_u_refresh_phones_done;
  PyObject *__pyx_kp_u_refresh_phones_found_an_phone;
  PyObject *__pyx_n_s_remove_existing;
  PyObject *__pyx_n_s_require_bg;
  PyObject *__pyx_n_s_reset_device;
  PyObject *__pyx_n_s_reset_framepool;
  PyObject *__pyx_n_u_reset_framepool;
  PyObject *__pyx_n_s_resolution;
  PyObject *__pyx_n_s_resolution_dict;
  PyObject *__pyx_kp_u_resolution_error;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_results;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_s_reversed;
  PyObject *__pyx_n_s_round;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_save_file;
  PyObject *__pyx_n_s_scaling;
  PyObject *__pyx_n_s_screencap;
  PyObject *__pyx_kp_s_screencap_p;
  PyObject *__pyx_n_s_screenshot;
  PyObject *__pyx_n_s_search;
  PyObject *__pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_u_self_get_preferred_device_return;
  PyObject *__pyx_kp_u_self_window;
  PyObject *__pyx_n_s_serial;
  PyObject *__pyx_n_s_server_kill;
  PyObject *__pyx_kp_s_service_call_iphonesubinfo_4;
  PyObject *__pyx_n_s_session;
  PyObject *__pyx_n_s_sessions;
  PyObject *__pyx_n_s_set;
  PyObject *__pyx_kp_u_set_ADBUTILS_ADB_PATH;
  PyObject *__pyx_kp_u_set_ADBUTILS_ADB_PATH_failed;
  PyObject *__pyx_n_s_set_capture;
  PyObject *__pyx_n_s_set_hwnd_name;
  PyObject *__pyx_n_s_set_images;
  PyObject *__pyx_n_s_set_mute_state;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_kp_u_set_preferred_device;
  PyObject *__pyx_n_s_set_preferred_device_2;
  PyObject *__pyx_n_s_setdefault;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_kp_s_settings_get_secure_android_id;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_shcore;
  PyObject *__pyx_n_s_shell;
  PyObject *__pyx_n_s_shell_device;
  PyObject *__pyx_n_s_short_description;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sizeof;
  PyObject *__pyx_n_s_skip_if_running;
  PyObject *__pyx_n_s_sleep;
  PyObject *__pyx_kp_s_slower_bound_to_display;
  PyObject *__pyx_n_s_socket_timeout;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_start_or_stop;
  PyObject *__pyx_kp_u_start_or_stop_failed;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_kp_s_str_int_None;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_support;
  PyObject *__pyx_n_s_supported_ratio;
  PyObject *__pyx_n_s_supported_resolution;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_target;
  PyObject *__pyx_n_s_target_height;
  PyObject *__pyx_n_s_target_method;
  PyObject *__pyx_n_s_target_width;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_test_exclusive_full_screen;
  PyObject *__pyx_n_s_test_is_not_pure_color;
  PyObject *__pyx_kp_s_test_is_not_pure_color_failed_ca;
  PyObject *__pyx_n_s_text;
  PyObject *__pyx_n_s_threading;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_n_s_timeout;
  PyObject *__pyx_n_s_title;
  PyObject *__pyx_n_u_title_2;
  PyObject *__pyx_n_s_title_height;
  PyObject *__pyx_kp_u_to;
  PyObject *__pyx_n_s_true;
  PyObject *__pyx_n_s_try_connect;
  PyObject *__pyx_n_s_try_delete_dc;
  PyObject *__pyx_n_s_try_kill_adb;
  PyObject *__pyx_kp_s_try_kill_adb_end;
  PyObject *__pyx_kp_s_try_kill_adb_server;
  PyObject *__pyx_n_s_type;
  PyObject *__pyx_n_s_uint8;
  PyObject *__pyx_kp_s_unmute_game_because_option_is_tu;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_update_capture_method;
  PyObject *__pyx_kp_u_update_capture_method_exception;
  PyObject *__pyx_n_s_update_device_list;
  PyObject *__pyx_n_s_update_emulator;
  PyObject *__pyx_n_s_update_frame_size;
  PyObject *__pyx_kp_u_update_frame_size_2;
  PyObject *__pyx_kp_u_update_path_and_id;
  PyObject *__pyx_n_s_update_pc_device;
  PyObject *__pyx_kp_u_update_resolution_for;
  PyObject *__pyx_n_s_update_resolution_for_hwnd;
  PyObject *__pyx_n_s_update_window;
  PyObject *__pyx_n_s_update_window_size;
  PyObject *__pyx_kp_u_use_adb_capture;
  PyObject *__pyx_n_s_use_bit_blt_only;
  PyObject *__pyx_n_s_use_last_error;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_kp_s_use_the_adb_screencap_command_sl;
  PyObject *__pyx_n_s_use_windows_capture;
  PyObject *__pyx_n_s_user32;
  PyObject *__pyx_kp_s_utf_8;
  PyObject *__pyx_n_s_validate_mute_config;
  PyObject *__pyx_n_s_validator;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_version;
  PyObject *__pyx_n_s_visible;
  PyObject *__pyx_kp_u_vms_MuMuPlayer_12_0;
  PyObject *__pyx_n_s_volume;
  PyObject *__pyx_n_s_warning;
  PyObject *__pyx_n_s_width;
  PyObject *__pyx_n_s_win32;
  PyObject *__pyx_n_s_win32api;
  PyObject *__pyx_n_s_win32con;
  PyObject *__pyx_n_s_win32gui;
  PyObject *__pyx_n_s_win32process;
  PyObject *__pyx_n_s_win32ui;
  PyObject *__pyx_n_s_win_graphic;
  PyObject *__pyx_n_s_win_interaction_class;
  PyObject *__pyx_n_s_windll;
  PyObject *__pyx_kp_u_window;
  PyObject *__pyx_n_s_window_2;
  PyObject *__pyx_n_s_window_bottom;
  PyObject *__pyx_n_s_window_height;
  PyObject *__pyx_n_s_window_left;
  PyObject *__pyx_n_s_window_ratio;
  PyObject *__pyx_n_s_window_right;
  PyObject *__pyx_n_s_window_top;
  PyObject *__pyx_n_s_window_width;
  PyObject *__pyx_n_s_windows;
  PyObject *__pyx_n_s_windows_capture_config;
  PyObject *__pyx_n_s_windows_graphics_available;
  PyObject *__pyx_n_s_winerror;
  PyObject *__pyx_n_s_wintypes;
  PyObject *__pyx_n_s_wrap;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_u_x;
  PyObject *__pyx_n_s_x2;
  PyObject *__pyx_kp_u_x_2;
  PyObject *__pyx_n_s_x_offset;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_n_s_y2;
  PyObject *__pyx_kp_u_y_2;
  PyObject *__pyx_n_s_y_offset;
  PyObject *__pyx_float_0_2;
  PyObject *__pyx_float_0_5;
  PyObject *__pyx_float_0_7;
  PyObject *__pyx_float_0_01;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_9;
  PyObject *__pyx_int_10;
  PyObject *__pyx_int_96;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_255;
  PyObject *__pyx_int_19041;
  PyObject *__pyx_int_20348;
  PyObject *__pyx_int_15891862;
  PyObject *__pyx_int_18546816;
  PyObject *__pyx_int_30750855;
  PyObject *__pyx_int_36463512;
  PyObject *__pyx_int_37823798;
  PyObject *__pyx_int_55865105;
  PyObject *__pyx_int_63776034;
  PyObject *__pyx_int_69505199;
  PyObject *__pyx_int_74253587;
  PyObject *__pyx_int_76750241;
  PyObject *__pyx_int_97161228;
  PyObject *__pyx_int_101491740;
  PyObject *__pyx_int_129754191;
  PyObject *__pyx_int_137420293;
  PyObject *__pyx_int_147817759;
  PyObject *__pyx_int_159312098;
  PyObject *__pyx_int_166164177;
  PyObject *__pyx_int_184679976;
  PyObject *__pyx_int_198801806;
  PyObject *__pyx_int_252227782;
  PyObject *__pyx_int_252510149;
  PyObject *__pyx_int_258103348;
  PyObject *__pyx_int_267537657;
  PyObject *__pyx_int_268090033;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_slice__4;
  PyObject *__pyx_slice__5;
  PyObject *__pyx_slice__9;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_slice__30;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__99;
  PyObject *__pyx_codeobj__2;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__111;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__117;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__125;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__144;
  PyObject *__pyx_tuple__146;
  PyObject *__pyx_tuple__148;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__151;
  PyObject *__pyx_tuple__153;
  PyObject *__pyx_tuple__155;
  PyObject *__pyx_tuple__157;
  PyObject *__pyx_tuple__159;
  PyObject *__pyx_tuple__161;
  PyObject *__pyx_tuple__163;
  PyObject *__pyx_tuple__165;
  PyObject *__pyx_tuple__167;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__170;
  PyObject *__pyx_tuple__172;
  PyObject *__pyx_tuple__174;
  PyObject *__pyx_tuple__177;
  PyObject *__pyx_tuple__179;
  PyObject *__pyx_tuple__181;
  PyObject *__pyx_tuple__183;
  PyObject *__pyx_tuple__185;
  PyObject *__pyx_tuple__186;
  PyObject *__pyx_tuple__188;
  PyObject *__pyx_tuple__190;
  PyObject *__pyx_tuple__198;
  PyObject *__pyx_tuple__200;
  PyObject *__pyx_tuple__202;
  PyObject *__pyx_tuple__204;
  PyObject *__pyx_tuple__206;
  PyObject *__pyx_tuple__208;
  PyObject *__pyx_tuple__210;
  PyObject *__pyx_tuple__212;
  PyObject *__pyx_tuple__214;
  PyObject *__pyx_tuple__216;
  PyObject *__pyx_tuple__219;
  PyObject *__pyx_tuple__226;
  PyObject *__pyx_tuple__228;
  PyObject *__pyx_tuple__230;
  PyObject *__pyx_tuple__231;
  PyObject *__pyx_tuple__233;
  PyObject *__pyx_tuple__235;
  PyObject *__pyx_tuple__236;
  PyObject *__pyx_tuple__238;
  PyObject *__pyx_tuple__241;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__120;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__124;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__132;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__140;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__152;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__160;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__164;
  PyObject *__pyx_codeobj__166;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__171;
  PyObject *__pyx_codeobj__173;
  PyObject *__pyx_codeobj__175;
  PyObject *__pyx_codeobj__176;
  PyObject *__pyx_codeobj__178;
  PyObject *__pyx_codeobj__180;
  PyObject *__pyx_codeobj__182;
  PyObject *__pyx_codeobj__184;
  PyObject *__pyx_codeobj__187;
  PyObject *__pyx_codeobj__189;
  PyObject *__pyx_codeobj__191;
  PyObject *__pyx_codeobj__192;
  PyObject *__pyx_codeobj__193;
  PyObject *__pyx_codeobj__194;
  PyObject *__pyx_codeobj__195;
  PyObject *__pyx_codeobj__196;
  PyObject *__pyx_codeobj__197;
  PyObject *__pyx_codeobj__199;
  PyObject *__pyx_codeobj__201;
  PyObject *__pyx_codeobj__203;
  PyObject *__pyx_codeobj__205;
  PyObject *__pyx_codeobj__207;
  PyObject *__pyx_codeobj__209;
  PyObject *__pyx_codeobj__211;
  PyObject *__pyx_codeobj__213;
  PyObject *__pyx_codeobj__215;
  PyObject *__pyx_codeobj__217;
  PyObject *__pyx_codeobj__218;
  PyObject *__pyx_codeobj__220;
  PyObject *__pyx_codeobj__221;
  PyObject *__pyx_codeobj__222;
  PyObject *__pyx_codeobj__223;
  PyObject *__pyx_codeobj__224;
  PyObject *__pyx_codeobj__225;
  PyObject *__pyx_codeobj__227;
  PyObject *__pyx_codeobj__229;
  PyObject *__pyx_codeobj__232;
  PyObject *__pyx_codeobj__234;
  PyObject *__pyx_codeobj__237;
  PyObject *__pyx_codeobj__239;
  PyObject *__pyx_codeobj__240;
  PyObject *__pyx_codeobj__242;
  PyObject *__pyx_codeobj__243;
  PyObject *__pyx_codeobj__244;
  PyObject *__pyx_codeobj__245;
  PyObject *__pyx_codeobj__246;
  PyObject *__pyx_codeobj__247;
  PyObject *__pyx_codeobj__248;
  PyObject *__pyx_codeobj__249;
  PyObject *__pyx_codeobj__250;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_BaseCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_BaseCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_BitBltCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_HwndWindow);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_HwndWindow);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_ADBCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_ADBCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_ImageCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_ImageCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture_NemuIpcCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd);
  Py_CLEAR(clear_module_state->__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows);
  Py_CLEAR(clear_module_state->__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows);
  Py_CLEAR(clear_module_state->__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y);
  Py_CLEAR(clear_module_state->__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y);
  Py_CLEAR(clear_module_state->__pyx_kp_s_0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_127_0_0_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBBaseInteraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBCaptureMethod___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBCaptureMethod___setstate_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBCaptureMethod_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBCaptureMethod_do_get_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_ADBUTILS_ADB_PATH);
  Py_CLEAR(clear_module_state->__pyx_kp_s_ADB_command_line_Capture);
  Py_CLEAR(clear_module_state->__pyx_kp_s_About_10_15x_slower_than_BitBlt);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdbClient);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdbError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Alpha);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySize);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_AudioUtilities);
  Py_CLEAR(clear_module_state->__pyx_n_s_B8G8R8A8UIntNormalized);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod_clickable);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod_do_get_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod_draw_rectangle);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseCaptureMethod_get_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseWindowsCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseWindowsCaptureMethod___reduc);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseWindowsCaptureMethod___setst);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseWindowsCaptureMethod_clickab);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseWindowsCaptureMethod_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseWindowsCaptureMethod_get_abs);
  Py_CLEAR(clear_module_state->__pyx_n_s_BindFlags);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBlt);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBltCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBltCaptureMethod___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBltCaptureMethod___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBltCaptureMethod_do_get_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBltCaptureMethod_test_exclusi);
  Py_CLEAR(clear_module_state->__pyx_n_s_BitBltCaptureMethod_test_is_not);
  Py_CLEAR(clear_module_state->__pyx_n_s_Blue);
  Py_CLEAR(clear_module_state->__pyx_n_s_COLOR_RGB2BGR);
  Py_CLEAR(clear_module_state->__pyx_n_s_CPUAccessFlags);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaptureException);
  Py_CLEAR(clear_module_state->__pyx_n_s_Channels);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClientToScreen);
  Py_CLEAR(clear_module_state->__pyx_n_s_Close);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColorChannel);
  Py_CLEAR(clear_module_state->__pyx_n_s_Config);
  Py_CLEAR(clear_module_state->__pyx_n_s_ConfigOption);
  Py_CLEAR(clear_module_state->__pyx_n_s_ContentSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_CopyResource);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateBitmap);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateCaptureSession);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateCompatibleBitmap);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateCompatibleDC);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateDCFromHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateForWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateFreeThreaded);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreateTexture2D);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11CreateDevice);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11_CPU_ACCESS_READ);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11_MAP_READ);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11_SDK_VERSION);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11_TEXTURE2D_DESC);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D11_USAGE_STAGING);
  Py_CLEAR(clear_module_state->__pyx_n_s_D3D_DRIVER_TYPE_HARDWARE);
  Py_CLEAR(clear_module_state->__pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS);
  Py_CLEAR(clear_module_state->__pyx_n_s_DXGI_ERROR_DEVICE_REMOVED);
  Py_CLEAR(clear_module_state->__pyx_n_s_DXGI_ERROR_DEVICE_RESET);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeleteDC);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeleteObject);
  Py_CLEAR(clear_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_check_in_front);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_check_installe);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_ensure_in_fron);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_get_imei);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_kill_server);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_adb_start_package);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_device_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_do_refresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_do_screencap);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_do_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_ensure_hwnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_get_devices);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_get_exe_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_get_hwnd_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_get_preferred_capt);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_get_preferred_devi);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_get_resolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_refresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_refresh_emulators);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_refresh_phones);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_set_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_set_hwnd_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_set_preferred_devi);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_shell);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_shell_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_try_kill_adb);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_update_device_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_update_pc_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_update_resolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_use_windows_captur);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeviceManager_width);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Device_is_none);
  Py_CLEAR(clear_module_state->__pyx_n_s_Direct3D11CaptureFramePool);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Direct3D_Desktop_Duplication);
  Py_CLEAR(clear_module_state->__pyx_n_s_DirectXPixelFormat);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Display_not_found);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Duplicates_the_desktop_using_Di);
  Py_CLEAR(clear_module_state->__pyx_n_s_DwmGetWindowAttribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_EmulatorManager);
  Py_CLEAR(clear_module_state->__pyx_n_s_EnumChildWindows);
  Py_CLEAR(clear_module_state->__pyx_n_s_EnumDisplayMonitors);
  Py_CLEAR(clear_module_state->__pyx_n_s_EnumWindows);
  Py_CLEAR(clear_module_state->__pyx_n_s_Event);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_check_check_mumu_app_k);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_test_exclusive_full_sc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_test_is_not_pure_color);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_test_is_not_pure_color_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_False);
  Py_CLEAR(clear_module_state->__pyx_n_s_FileNotFoundError);
  Py_CLEAR(clear_module_state->__pyx_n_s_FluentIcon);
  Py_CLEAR(clear_module_state->__pyx_n_s_Format);
  Py_CLEAR(clear_module_state->__pyx_n_s_GUID);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Game_Sound);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetActivationFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetAllSessions);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetBitmapBits);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetClassName);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetClientRect);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetDesc);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetDpiForMonitor);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetForegroundWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetInterface);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetMonitorInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetMute);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetParent);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetSafeHdc);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetWindowDC);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetWindowRect);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetWindowText);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetWindowThreadProcessId);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphicsCaptureItem);
  Py_CLEAR(clear_module_state->__pyx_n_s_Green);
  Py_CLEAR(clear_module_state->__pyx_n_s_Handler);
  Py_CLEAR(clear_module_state->__pyx_n_s_Height);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_do_update_window_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_frame_ratio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_HwndWindow_frame_ratio_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_get_abs_cords);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_handle_mute);
  Py_CLEAR(clear_module_state->__pyx_kp_u_HwndWindow_init_title);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_update_frame_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_update_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_update_window_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_HwndWindow_validate_mute_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_ID3D11Device);
  Py_CLEAR(clear_module_state->__pyx_n_s_ID3D11DeviceContext);
  Py_CLEAR(clear_module_state->__pyx_n_s_ID3D11Texture2D);
  Py_CLEAR(clear_module_state->__pyx_n_s_IDirect3DDevice);
  Py_CLEAR(clear_module_state->__pyx_n_s_IDirect3DDxgiInterfaceAccess);
  Py_CLEAR(clear_module_state->__pyx_n_s_IGraphicsCaptureItem);
  Py_CLEAR(clear_module_state->__pyx_n_s_IGraphicsCaptureItemInterop);
  Py_CLEAR(clear_module_state->__pyx_n_s_IInspectable);
  Py_CLEAR(clear_module_state->__pyx_n_s_IMREAD_COLOR);
  Py_CLEAR(clear_module_state->__pyx_n_s_IMREAD_UNCHANGED);
  Py_CLEAR(clear_module_state->__pyx_n_s_ISimpleAudioVolume);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageCaptureMethod___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageCaptureMethod___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageCaptureMethod_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageCaptureMethod_do_get_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageCaptureMethod_set_images);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImageShape);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Image_capture_method);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntEnum);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsBorderRequired);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsCursorCaptureEnabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsIconic);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsWindowEnabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsWindowVisible);
  Py_CLEAR(clear_module_state->__pyx_kp_s_It_can_record_OpenGL_and_Hardwa);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lock);
  Py_CLEAR(clear_module_state->__pyx_n_s_MAXBYTE);
  Py_CLEAR(clear_module_state->__pyx_n_s_MDT_EFFECTIVE_DPI);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONITOR_DEFAULTTONEAREST);
  Py_CLEAR(clear_module_state->__pyx_n_s_MUTE);
  Py_CLEAR(clear_module_state->__pyx_n_s_Map);
  Py_CLEAR(clear_module_state->__pyx_n_s_MipLevels);
  Py_CLEAR(clear_module_state->__pyx_n_s_MiscFlags);
  Py_CLEAR(clear_module_state->__pyx_n_s_Monitor);
  Py_CLEAR(clear_module_state->__pyx_n_s_MonitorFromWindow);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Mute_Game_while_in_Background);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_base_folder);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_check_mumu);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_do_get_fram);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_init_nemu);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcCaptureMethod_update_emul);
  Py_CLEAR(clear_module_state->__pyx_n_s_NemuIpcImpl);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Nemu_Ipc_Capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_OSError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_OpenGL_Hardware_Accelerated_or);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Overlapping_windows_will_show_u);
  Py_CLEAR(clear_module_state->__pyx_n_s_PBYTE);
  Py_CLEAR(clear_module_state->__pyx_n_s_POINTER);
  Py_CLEAR(clear_module_state->__pyx_n_s_PW_RENDERFULLCONTENT);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Paused_because_game_exited);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Paused_because_game_window_is_mi);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Please_turn_off_enable_backgroun);
  Py_CLEAR(clear_module_state->__pyx_n_s_PostMessage);
  Py_CLEAR(clear_module_state->__pyx_n_s_PostMessageInteraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrintWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_Process);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyDirectInteraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_QueryInterface);
  Py_CLEAR(clear_module_state->__pyx_n_s_RECT);
  Py_CLEAR(clear_module_state->__pyx_n_s_Recreate);
  Py_CLEAR(clear_module_state->__pyx_n_s_Red);
  Py_CLEAR(clear_module_state->__pyx_n_s_RefreshAdb);
  Py_CLEAR(clear_module_state->__pyx_n_s_Release);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReleaseDC);
  Py_CLEAR(clear_module_state->__pyx_n_s_RowPitch);
  Py_CLEAR(clear_module_state->__pyx_n_s_SRCCOPY);
  Py_CLEAR(clear_module_state->__pyx_n_s_SampleDesc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Screencap_image_decode_error_pro);
  Py_CLEAR(clear_module_state->__pyx_n_s_SelectObject);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetMute);
  Py_CLEAR(clear_module_state->__pyx_n_s_Size);
  Py_CLEAR(clear_module_state->__pyx_n_s_StartCapture);
  Py_CLEAR(clear_module_state->__pyx_n_s_Surface);
  Py_CLEAR(clear_module_state->__pyx_kp_s_The_best_option_when_compatible);
  Py_CLEAR(clear_module_state->__pyx_kp_s_The_smaller_the_selected_region);
  Py_CLEAR(clear_module_state->__pyx_kp_s_This_option_may_not_be_availabl);
  Py_CLEAR(clear_module_state->__pyx_n_s_Thread);
  Py_CLEAR(clear_module_state->__pyx_n_u_True);
  Py_CLEAR(clear_module_state->__pyx_n_s_TryGetNextFrame);
  Py_CLEAR(clear_module_state->__pyx_kp_u_TryGetNextFrame_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypedEventHandler);
  Py_CLEAR(clear_module_state->__pyx_n_s_Unmap);
  Py_CLEAR(clear_module_state->__pyx_n_s_Usage);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_WGC_MIN_BUILD);
  Py_CLEAR(clear_module_state->__pyx_n_s_WGC_NO_BORDER_MIN_BUILD);
  Py_CLEAR(clear_module_state->__pyx_n_s_WINDOWS_BUILD_NUMBER);
  Py_CLEAR(clear_module_state->__pyx_n_s_Width);
  Py_CLEAR(clear_module_state->__pyx_n_s_WinDLL);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod___r);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod___s);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_clo);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_con);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_cre);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_cro);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_do);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_sta);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Windows_Graphics_Capture);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Windows_Graphics_Capture_Graphic);
  Py_CLEAR(clear_module_state->__pyx_n_s_X);
  Py_CLEAR(clear_module_state->__pyx_n_s_Y);
  Py_CLEAR(clear_module_state->__pyx_kp_u__10);
  Py_CLEAR(clear_module_state->__pyx_kp_u__11);
  Py_CLEAR(clear_module_state->__pyx_kp_s__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__14);
  Py_CLEAR(clear_module_state->__pyx_kp_u__17);
  Py_CLEAR(clear_module_state->__pyx_n_s__24);
  Py_CLEAR(clear_module_state->__pyx_n_s__251);
  Py_CLEAR(clear_module_state->__pyx_kp_s__28);
  Py_CLEAR(clear_module_state->__pyx_n_s__7);
  Py_CLEAR(clear_module_state->__pyx_n_u__7);
  Py_CLEAR(clear_module_state->__pyx_kp_s__8);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_n_s_abspath);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_capture_config);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_check_in_front);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_check_in_front_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_check_installed);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_connect);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_already_connected);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_emulator_result);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_error);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_error_return_none);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_exit_event_is_set);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_offline_disconnect_f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_connect_try_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_devices);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_ensure_in_front);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_ensure_in_front_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_adb_exe);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_get_imei);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_imei);
  Py_CLEAR(clear_module_state->__pyx_kp_s_adb_kill_server);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_kill_server_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_lock);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adb_shell_error_maybe_offline);
  Py_CLEAR(clear_module_state->__pyx_n_s_adb_start_package);
  Py_CLEAR(clear_module_state->__pyx_n_s_adbutils);
  Py_CLEAR(clear_module_state->__pyx_n_s_adbutils__utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_Closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_FrameArrived);
  Py_CLEAR(clear_module_state->__pyx_n_s_addr);
  Py_CLEAR(clear_module_state->__pyx_n_s_address);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_emulator_instances);
  Py_CLEAR(clear_module_state->__pyx_n_s_any);
  Py_CLEAR(clear_module_state->__pyx_n_s_app_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_app_current);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_astype);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_folder);
  Py_CLEAR(clear_module_state->__pyx_n_s_biggest);
  Py_CLEAR(clear_module_state->__pyx_n_s_bin_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_bit_blt_render_full);
  Py_CLEAR(clear_module_state->__pyx_n_s_border);
  Py_CLEAR(clear_module_state->__pyx_n_s_byref);
  Py_CLEAR(clear_module_state->__pyx_kp_u_c_android_intent_category_LAUNC);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_ubyte);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_uint);
  Py_CLEAR(clear_module_state->__pyx_n_s_calculate_pc_exe_path);
  Py_CLEAR(clear_module_state->__pyx_kp_u_calculate_pc_exe_path_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_callback);
  Py_CLEAR(clear_module_state->__pyx_kp_s_calling_refresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_can_bit_blt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_cant_find_a_usable_windows_captu);
  Py_CLEAR(clear_module_state->__pyx_n_s_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_capture_cursor);
  Py_CLEAR(clear_module_state->__pyx_n_s_capture_method);
  Py_CLEAR(clear_module_state->__pyx_kp_u_capture_method_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_capture_output);
  Py_CLEAR(clear_module_state->__pyx_n_s_cast);
  Py_CLEAR(clear_module_state->__pyx_n_s_cfunc_to_py);
  Py_CLEAR(clear_module_state->__pyx_n_s_changed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_check_available_WINDOWS_BUILD_NU);
  Py_CLEAR(clear_module_state->__pyx_kp_u_check_available_failed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_check_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_mumu_app_keep_alive_400);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_pos);
  Py_CLEAR(clear_module_state->__pyx_n_s_child_callback);
  Py_CLEAR(clear_module_state->__pyx_n_s_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_clickable);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_cmdline);
  Py_CLEAR(clear_module_state->__pyx_n_s_communicate);
  Py_CLEAR(clear_module_state->__pyx_n_s_config);
  Py_CLEAR(clear_module_state->__pyx_kp_u_configs_customer_config_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_connected);
  Py_CLEAR(clear_module_state->__pyx_n_s_connected_device);
  Py_CLEAR(clear_module_state->__pyx_kp_s_convert_dx_frame_win_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_create);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_crop_image);
  Py_CLEAR(clear_module_state->__pyx_n_s_cropped_image);
  Py_CLEAR(clear_module_state->__pyx_n_s_cropped_window_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctl);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctypes);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctypeslib);
  Py_CLEAR(clear_module_state->__pyx_n_s_current);
  Py_CLEAR(clear_module_state->__pyx_kp_s_customer_app_keptlive);
  Py_CLEAR(clear_module_state->__pyx_kp_u_customer_app_keptlive_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_cv2);
  Py_CLEAR(clear_module_state->__pyx_n_s_cvtColor);
  Py_CLEAR(clear_module_state->__pyx_n_s_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_d3d11);
  Py_CLEAR(clear_module_state->__pyx_n_s_d3dshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_dc);
  Py_CLEAR(clear_module_state->__pyx_n_s_debug);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_deep_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_default);
  Py_CLEAR(clear_module_state->__pyx_n_s_delegate);
  Py_CLEAR(clear_module_state->__pyx_n_s_denominator);
  Py_CLEAR(clear_module_state->__pyx_n_s_description);
  Py_CLEAR(clear_module_state->__pyx_kp_s_destroy_windows_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_device_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_device_connected);
  Py_CLEAR(clear_module_state->__pyx_kp_u_device_connected_check_device_st);
  Py_CLEAR(clear_module_state->__pyx_kp_u_device_connected_error_occurred);
  Py_CLEAR(clear_module_state->__pyx_n_s_device_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_device_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_device_manager);
  Py_CLEAR(clear_module_state->__pyx_n_s_devices);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_difference);
  Py_CLEAR(clear_module_state->__pyx_n_s_dirname);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_disconnect);
  Py_CLEAR(clear_module_state->__pyx_n_s_display);
  Py_CLEAR(clear_module_state->__pyx_n_s_display_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_displays);
  Py_CLEAR(clear_module_state->__pyx_n_s_do_get_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_do_refresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_do_screencap);
  Py_CLEAR(clear_module_state->__pyx_n_s_do_start);
  Py_CLEAR(clear_module_state->__pyx_n_u_do_start);
  Py_CLEAR(clear_module_state->__pyx_kp_u_do_start_use_windows_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_do_update_window_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_do_update_window_size_changed_vi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_do_update_window_size_exception);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dpiX);
  Py_CLEAR(clear_module_state->__pyx_n_s_dpiY);
  Py_CLEAR(clear_module_state->__pyx_n_s_draw_rectangle);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_dwmapi);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_kp_s_echo_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_emit);
  Py_CLEAR(clear_module_state->__pyx_n_s_emulator);
  Py_CLEAR(clear_module_state->__pyx_n_s_emulator_device);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encoding);
  Py_CLEAR(clear_module_state->__pyx_n_s_ensure_hwnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_enum_child_windows);
  Py_CLEAR(clear_module_state->__pyx_n_s_enum_child_windows_locals_child);
  Py_CLEAR(clear_module_state->__pyx_n_s_environ);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_exception);
  Py_CLEAR(clear_module_state->__pyx_n_s_exe);
  Py_CLEAR(clear_module_state->__pyx_n_s_exe_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_exe_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_executor);
  Py_CLEAR(clear_module_state->__pyx_n_s_exists);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit_event);
  Py_CLEAR(clear_module_state->__pyx_kp_u_exit_reset_mute_state_to_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_extended_frame_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_f);
  Py_CLEAR(clear_module_state->__pyx_kp_s_fast_most_compatible_capped_at_6);
  Py_CLEAR(clear_module_state->__pyx_kp_s_fastest_least_compatible);
  Py_CLEAR(clear_module_state->__pyx_n_s_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_find_hwnd);
  Py_CLEAR(clear_module_state->__pyx_kp_u_find_hwnd_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_find_hwnd_child_callback);
  Py_CLEAR(clear_module_state->__pyx_n_s_find_hwnd_locals_callback);
  Py_CLEAR(clear_module_state->__pyx_kp_u_first_start_use_first_or_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_kp_s_for_debugging);
  Py_CLEAR(clear_module_state->__pyx_n_s_found);
  Py_CLEAR(clear_module_state->__pyx_kp_u_found_hwnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_frame);
  Py_CLEAR(clear_module_state->__pyx_kp_s_frame_arrived_callback_TryGetNex);
  Py_CLEAR(clear_module_state->__pyx_n_s_frame_aspect_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_frame_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_frame_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_frame_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_frombuffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_front);
  Py_CLEAR(clear_module_state->__pyx_n_s_full_path);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_abs_cords);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_bin_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_crop_point);
  Py_CLEAR(clear_module_state->__pyx_kp_u_get_device_adb_device_addr_chang);
  Py_CLEAR(clear_module_state->__pyx_kp_u_get_device_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_devices);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_emulator_exe);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_exe_by_hwnd);
  Py_CLEAR(clear_module_state->__pyx_kp_s_get_exe_by_hwnd_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_exe_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_frame);
  Py_CLEAR(clear_module_state->__pyx_kp_u_get_frame_size_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_hwnd_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_monitors_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_mute_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_player_id_from_cmdline);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_preferred_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_preferred_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_resolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_win_graphics_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_window_bounds);
  Py_CLEAR(clear_module_state->__pyx_kp_u_get_window_bounds_exception);
  Py_CLEAR(clear_module_state->__pyx_n_s_getenv);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_global_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_group);
  Py_CLEAR(clear_module_state->__pyx_n_s_hWnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_handle_mute);
  Py_CLEAR(clear_module_state->__pyx_n_s_handler);
  Py_CLEAR(clear_module_state->__pyx_n_s_height);
  Py_CLEAR(clear_module_state->__pyx_kp_u_height_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hmonitor);
  Py_CLEAR(clear_module_state->__pyx_n_s_host);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwnd_class);
  Py_CLEAR(clear_module_state->__pyx_kp_u_hwnd_class_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwnd_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_hwnd_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_icon);
  Py_CLEAR(clear_module_state->__pyx_n_s_idldsl);
  Py_CLEAR(clear_module_state->__pyx_n_s_image);
  Py_CLEAR(clear_module_state->__pyx_n_s_image_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_images);
  Py_CLEAR(clear_module_state->__pyx_n_s_imdecode);
  Py_CLEAR(clear_module_state->__pyx_n_s_imei);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_kp_s_index_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_kp_s_init___end);
  Py_CLEAR(clear_module_state->__pyx_kp_s_init___start);
  Py_CLEAR(clear_module_state->__pyx_kp_u_init_adb);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_nemu);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_kp_s_init_windows_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_installed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_installed_emulators);
  Py_CLEAR(clear_module_state->__pyx_n_s_installed_emulators_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_instance_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_interaction);
  Py_CLEAR(clear_module_state->__pyx_n_s_interop);
  Py_CLEAR(clear_module_state->__pyx_n_s_ipc);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_blank);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_close_to_pure_color);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_digit);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_foreground_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_valid_exe);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_valid_hwnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_window_in_screen_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_window_minimized);
  Py_CLEAR(clear_module_state->__pyx_n_s_isdigit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_item);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_join);
  Py_CLEAR(clear_module_state->__pyx_n_s_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_kill);
  Py_CLEAR(clear_module_state->__pyx_kp_u_kill_adb_by_process_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_kill_adb_server_failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_s_lParam);
  Py_CLEAR(clear_module_state->__pyx_kp_u_latency_too_large_return_None_fr);
  Py_CLEAR(clear_module_state->__pyx_n_s_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_ljust);
  Py_CLEAR(clear_module_state->__pyx_n_s_loads);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_lower);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_manager);
  Py_CLEAR(clear_module_state->__pyx_n_s_matching_child);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor_bottom);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor_left);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor_rect);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor_right);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitor_top);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitors);
  Py_CLEAR(clear_module_state->__pyx_n_s_monitors_bounds);
  Py_CLEAR(clear_module_state->__pyx_kp_u_monkey_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_kp_s_mumu_player_12_only);
  Py_CLEAR(clear_module_state->__pyx_n_s_mute);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_need_reset_framepool);
  Py_CLEAR(clear_module_state->__pyx_n_s_nemu_folder);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_nick);
  Py_CLEAR(clear_module_state->__pyx_kp_u_no_devices);
  Py_CLEAR(clear_module_state->__pyx_kp_u_no_frame_for_10_sec_try_to_resta);
  Py_CLEAR(clear_module_state->__pyx_n_s_no_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_none);
  Py_CLEAR(clear_module_state->__pyx_kp_u_not_exists);
  Py_CLEAR(clear_module_state->__pyx_kp_u_not_in_device_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_notification);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_kp_s_np_ndarray_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_nt);
  Py_CLEAR(clear_module_state->__pyx_n_s_numerator);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_offline);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_Capture);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ok_Capture);
  Py_CLEAR(clear_module_state->__pyx_kp_s_ok_Capture_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_alas_emulator_windows);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_alas_platform_windows);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_capture_adb_nemu_ipc);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_capture_windows);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_color_Color);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_config_Config);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_config_ConfigOption);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_gui_Communicate);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ok_gui_executor_pause_pos_invali);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_interaction_ADBInteraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_interaction_PostMessageIntera);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_interaction_PyDirectInteracti);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_logging_Logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_rotypes);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_rotypes_Windows_Foundation);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_rotypes_Windows_Graphics_Capt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_rotypes_Windows_Graphics_Dire);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_rotypes_roapi);
  Py_CLEAR(clear_module_state->__pyx_n_s_ok_util_Handler);
  Py_CLEAR(clear_module_state->__pyx_n_s_open);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_override_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_pData);
  Py_CLEAR(clear_module_state->__pyx_n_s_package);
  Py_CLEAR(clear_module_state->__pyx_n_s_packages);
  Py_CLEAR(clear_module_state->__pyx_n_s_parent);
  Py_CLEAR(clear_module_state->__pyx_n_s_parse_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_pause);
  Py_CLEAR(clear_module_state->__pyx_n_s_pc);
  Py_CLEAR(clear_module_state->__pyx_n_s_pc_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_pc_full_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_percent);
  Py_CLEAR(clear_module_state->__pyx_n_s_phone_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pid);
  Py_CLEAR(clear_module_state->__pyx_n_s_platform);
  Py_CLEAR(clear_module_state->__pyx_n_s_player_id);
  Py_CLEAR(clear_module_state->__pyx_kp_u_player_id_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_player_id_check_failed_cmdline);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pm_list_packages);
  Py_CLEAR(clear_module_state->__pyx_n_s_png_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_pop);
  Py_CLEAR(clear_module_state->__pyx_n_s_pos_valid);
  Py_CLEAR(clear_module_state->__pyx_n_s_post);
  Py_CLEAR(clear_module_state->__pyx_n_s_preferred);
  Py_CLEAR(clear_module_state->__pyx_kp_u_preferred_device);
  Py_CLEAR(clear_module_state->__pyx_kp_u_preferred_device_did_change);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_proc);
  Py_CLEAR(clear_module_state->__pyx_n_s_process);
  Py_CLEAR(clear_module_state->__pyx_n_s_process_iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_prop);
  Py_CLEAR(clear_module_state->__pyx_n_s_property);
  Py_CLEAR(clear_module_state->__pyx_n_s_psutil);
  Py_CLEAR(clear_module_state->__pyx_n_s_pycaw_api_audioclient);
  Py_CLEAR(clear_module_state->__pyx_n_s_pycaw_utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_ADBCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_BaseCaptureMethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_BaseWindowsCaptur);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_BitBltCaptureMeth);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_DesktopDuplicatio);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_HwndWindow);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_ImageCaptureMetho);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_NemuIpcCaptureMet);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_WindowsGraphicsCa);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qfluentwidgets);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio_match);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_re);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_kp_u_real);
  Py_CLEAR(clear_module_state->__pyx_n_s_real_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_real_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_real_x_offset);
  Py_CLEAR(clear_module_state->__pyx_n_s_real_y_offset);
  Py_CLEAR(clear_module_state->__pyx_n_s_rect);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_kp_u_refresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_refresh_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_refresh_current_only_skip_others);
  Py_CLEAR(clear_module_state->__pyx_n_s_refresh_emulators);
  Py_CLEAR(clear_module_state->__pyx_kp_u_refresh_emulators_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_refresh_phones);
  Py_CLEAR(clear_module_state->__pyx_kp_u_refresh_phones_done);
  Py_CLEAR(clear_module_state->__pyx_kp_u_refresh_phones_found_an_phone);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove_existing);
  Py_CLEAR(clear_module_state->__pyx_n_s_require_bg);
  Py_CLEAR(clear_module_state->__pyx_n_s_reset_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_reset_framepool);
  Py_CLEAR(clear_module_state->__pyx_n_u_reset_framepool);
  Py_CLEAR(clear_module_state->__pyx_n_s_resolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_resolution_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_resolution_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_results);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_s_reversed);
  Py_CLEAR(clear_module_state->__pyx_n_s_round);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_save_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_scaling);
  Py_CLEAR(clear_module_state->__pyx_n_s_screencap);
  Py_CLEAR(clear_module_state->__pyx_kp_s_screencap_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_screenshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_search);
  Py_CLEAR(clear_module_state->__pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_u_self_get_preferred_device_return);
  Py_CLEAR(clear_module_state->__pyx_kp_u_self_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_serial);
  Py_CLEAR(clear_module_state->__pyx_n_s_server_kill);
  Py_CLEAR(clear_module_state->__pyx_kp_s_service_call_iphonesubinfo_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_session);
  Py_CLEAR(clear_module_state->__pyx_n_s_sessions);
  Py_CLEAR(clear_module_state->__pyx_n_s_set);
  Py_CLEAR(clear_module_state->__pyx_kp_u_set_ADBUTILS_ADB_PATH);
  Py_CLEAR(clear_module_state->__pyx_kp_u_set_ADBUTILS_ADB_PATH_failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_hwnd_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_images);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_mute_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_set_preferred_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_preferred_device_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_setdefault);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_settings_get_secure_android_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_shcore);
  Py_CLEAR(clear_module_state->__pyx_n_s_shell);
  Py_CLEAR(clear_module_state->__pyx_n_s_shell_device);
  Py_CLEAR(clear_module_state->__pyx_n_s_short_description);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizeof);
  Py_CLEAR(clear_module_state->__pyx_n_s_skip_if_running);
  Py_CLEAR(clear_module_state->__pyx_n_s_sleep);
  Py_CLEAR(clear_module_state->__pyx_kp_s_slower_bound_to_display);
  Py_CLEAR(clear_module_state->__pyx_n_s_socket_timeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_or_stop);
  Py_CLEAR(clear_module_state->__pyx_kp_u_start_or_stop_failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_kp_s_str_int_None);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_support);
  Py_CLEAR(clear_module_state->__pyx_n_s_supported_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_supported_resolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_target);
  Py_CLEAR(clear_module_state->__pyx_n_s_target_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_target_method);
  Py_CLEAR(clear_module_state->__pyx_n_s_target_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_test_exclusive_full_screen);
  Py_CLEAR(clear_module_state->__pyx_n_s_test_is_not_pure_color);
  Py_CLEAR(clear_module_state->__pyx_kp_s_test_is_not_pure_color_failed_ca);
  Py_CLEAR(clear_module_state->__pyx_n_s_text);
  Py_CLEAR(clear_module_state->__pyx_n_s_threading);
  Py_CLEAR(clear_module_state->__pyx_n_s_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_title);
  Py_CLEAR(clear_module_state->__pyx_n_u_title_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_title_height);
  Py_CLEAR(clear_module_state->__pyx_kp_u_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_true);
  Py_CLEAR(clear_module_state->__pyx_n_s_try_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_try_delete_dc);
  Py_CLEAR(clear_module_state->__pyx_n_s_try_kill_adb);
  Py_CLEAR(clear_module_state->__pyx_kp_s_try_kill_adb_end);
  Py_CLEAR(clear_module_state->__pyx_kp_s_try_kill_adb_server);
  Py_CLEAR(clear_module_state->__pyx_n_s_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_uint8);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unmute_game_because_option_is_tu);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_capture_method);
  Py_CLEAR(clear_module_state->__pyx_kp_u_update_capture_method_exception);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_device_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_emulator);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_frame_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_update_frame_size_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_update_path_and_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_pc_device);
  Py_CLEAR(clear_module_state->__pyx_kp_u_update_resolution_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_resolution_for_hwnd);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_window_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_use_adb_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_bit_blt_only);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_last_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_kp_s_use_the_adb_screencap_command_sl);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_windows_capture);
  Py_CLEAR(clear_module_state->__pyx_n_s_user32);
  Py_CLEAR(clear_module_state->__pyx_kp_s_utf_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_validate_mute_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_validator);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_version);
  Py_CLEAR(clear_module_state->__pyx_n_s_visible);
  Py_CLEAR(clear_module_state->__pyx_kp_u_vms_MuMuPlayer_12_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_win32);
  Py_CLEAR(clear_module_state->__pyx_n_s_win32api);
  Py_CLEAR(clear_module_state->__pyx_n_s_win32con);
  Py_CLEAR(clear_module_state->__pyx_n_s_win32gui);
  Py_CLEAR(clear_module_state->__pyx_n_s_win32process);
  Py_CLEAR(clear_module_state->__pyx_n_s_win32ui);
  Py_CLEAR(clear_module_state->__pyx_n_s_win_graphic);
  Py_CLEAR(clear_module_state->__pyx_n_s_win_interaction_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_windll);
  Py_CLEAR(clear_module_state->__pyx_kp_u_window);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_bottom);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_left);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_right);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_top);
  Py_CLEAR(clear_module_state->__pyx_n_s_window_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_windows);
  Py_CLEAR(clear_module_state->__pyx_n_s_windows_capture_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_windows_graphics_available);
  Py_CLEAR(clear_module_state->__pyx_n_s_winerror);
  Py_CLEAR(clear_module_state->__pyx_n_s_wintypes);
  Py_CLEAR(clear_module_state->__pyx_n_s_wrap);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_u_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_x2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_x_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_x_offset);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_y2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_y_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_y_offset);
  Py_CLEAR(clear_module_state->__pyx_float_0_2);
  Py_CLEAR(clear_module_state->__pyx_float_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_0_7);
  Py_CLEAR(clear_module_state->__pyx_float_0_01);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_9);
  Py_CLEAR(clear_module_state->__pyx_int_10);
  Py_CLEAR(clear_module_state->__pyx_int_96);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_255);
  Py_CLEAR(clear_module_state->__pyx_int_19041);
  Py_CLEAR(clear_module_state->__pyx_int_20348);
  Py_CLEAR(clear_module_state->__pyx_int_15891862);
  Py_CLEAR(clear_module_state->__pyx_int_18546816);
  Py_CLEAR(clear_module_state->__pyx_int_30750855);
  Py_CLEAR(clear_module_state->__pyx_int_36463512);
  Py_CLEAR(clear_module_state->__pyx_int_37823798);
  Py_CLEAR(clear_module_state->__pyx_int_55865105);
  Py_CLEAR(clear_module_state->__pyx_int_63776034);
  Py_CLEAR(clear_module_state->__pyx_int_69505199);
  Py_CLEAR(clear_module_state->__pyx_int_74253587);
  Py_CLEAR(clear_module_state->__pyx_int_76750241);
  Py_CLEAR(clear_module_state->__pyx_int_97161228);
  Py_CLEAR(clear_module_state->__pyx_int_101491740);
  Py_CLEAR(clear_module_state->__pyx_int_129754191);
  Py_CLEAR(clear_module_state->__pyx_int_137420293);
  Py_CLEAR(clear_module_state->__pyx_int_147817759);
  Py_CLEAR(clear_module_state->__pyx_int_159312098);
  Py_CLEAR(clear_module_state->__pyx_int_166164177);
  Py_CLEAR(clear_module_state->__pyx_int_184679976);
  Py_CLEAR(clear_module_state->__pyx_int_198801806);
  Py_CLEAR(clear_module_state->__pyx_int_252227782);
  Py_CLEAR(clear_module_state->__pyx_int_252510149);
  Py_CLEAR(clear_module_state->__pyx_int_258103348);
  Py_CLEAR(clear_module_state->__pyx_int_267537657);
  Py_CLEAR(clear_module_state->__pyx_int_268090033);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_slice__4);
  Py_CLEAR(clear_module_state->__pyx_slice__5);
  Py_CLEAR(clear_module_state->__pyx_slice__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_slice__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__111);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__117);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__125);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__144);
  Py_CLEAR(clear_module_state->__pyx_tuple__146);
  Py_CLEAR(clear_module_state->__pyx_tuple__148);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__151);
  Py_CLEAR(clear_module_state->__pyx_tuple__153);
  Py_CLEAR(clear_module_state->__pyx_tuple__155);
  Py_CLEAR(clear_module_state->__pyx_tuple__157);
  Py_CLEAR(clear_module_state->__pyx_tuple__159);
  Py_CLEAR(clear_module_state->__pyx_tuple__161);
  Py_CLEAR(clear_module_state->__pyx_tuple__163);
  Py_CLEAR(clear_module_state->__pyx_tuple__165);
  Py_CLEAR(clear_module_state->__pyx_tuple__167);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__170);
  Py_CLEAR(clear_module_state->__pyx_tuple__172);
  Py_CLEAR(clear_module_state->__pyx_tuple__174);
  Py_CLEAR(clear_module_state->__pyx_tuple__177);
  Py_CLEAR(clear_module_state->__pyx_tuple__179);
  Py_CLEAR(clear_module_state->__pyx_tuple__181);
  Py_CLEAR(clear_module_state->__pyx_tuple__183);
  Py_CLEAR(clear_module_state->__pyx_tuple__185);
  Py_CLEAR(clear_module_state->__pyx_tuple__186);
  Py_CLEAR(clear_module_state->__pyx_tuple__188);
  Py_CLEAR(clear_module_state->__pyx_tuple__190);
  Py_CLEAR(clear_module_state->__pyx_tuple__198);
  Py_CLEAR(clear_module_state->__pyx_tuple__200);
  Py_CLEAR(clear_module_state->__pyx_tuple__202);
  Py_CLEAR(clear_module_state->__pyx_tuple__204);
  Py_CLEAR(clear_module_state->__pyx_tuple__206);
  Py_CLEAR(clear_module_state->__pyx_tuple__208);
  Py_CLEAR(clear_module_state->__pyx_tuple__210);
  Py_CLEAR(clear_module_state->__pyx_tuple__212);
  Py_CLEAR(clear_module_state->__pyx_tuple__214);
  Py_CLEAR(clear_module_state->__pyx_tuple__216);
  Py_CLEAR(clear_module_state->__pyx_tuple__219);
  Py_CLEAR(clear_module_state->__pyx_tuple__226);
  Py_CLEAR(clear_module_state->__pyx_tuple__228);
  Py_CLEAR(clear_module_state->__pyx_tuple__230);
  Py_CLEAR(clear_module_state->__pyx_tuple__231);
  Py_CLEAR(clear_module_state->__pyx_tuple__233);
  Py_CLEAR(clear_module_state->__pyx_tuple__235);
  Py_CLEAR(clear_module_state->__pyx_tuple__236);
  Py_CLEAR(clear_module_state->__pyx_tuple__238);
  Py_CLEAR(clear_module_state->__pyx_tuple__241);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__72);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__120);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__140);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__160);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__164);
  Py_CLEAR(clear_module_state->__pyx_codeobj__166);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__171);
  Py_CLEAR(clear_module_state->__pyx_codeobj__173);
  Py_CLEAR(clear_module_state->__pyx_codeobj__175);
  Py_CLEAR(clear_module_state->__pyx_codeobj__176);
  Py_CLEAR(clear_module_state->__pyx_codeobj__178);
  Py_CLEAR(clear_module_state->__pyx_codeobj__180);
  Py_CLEAR(clear_module_state->__pyx_codeobj__182);
  Py_CLEAR(clear_module_state->__pyx_codeobj__184);
  Py_CLEAR(clear_module_state->__pyx_codeobj__187);
  Py_CLEAR(clear_module_state->__pyx_codeobj__189);
  Py_CLEAR(clear_module_state->__pyx_codeobj__191);
  Py_CLEAR(clear_module_state->__pyx_codeobj__192);
  Py_CLEAR(clear_module_state->__pyx_codeobj__193);
  Py_CLEAR(clear_module_state->__pyx_codeobj__194);
  Py_CLEAR(clear_module_state->__pyx_codeobj__195);
  Py_CLEAR(clear_module_state->__pyx_codeobj__196);
  Py_CLEAR(clear_module_state->__pyx_codeobj__197);
  Py_CLEAR(clear_module_state->__pyx_codeobj__199);
  Py_CLEAR(clear_module_state->__pyx_codeobj__201);
  Py_CLEAR(clear_module_state->__pyx_codeobj__203);
  Py_CLEAR(clear_module_state->__pyx_codeobj__205);
  Py_CLEAR(clear_module_state->__pyx_codeobj__207);
  Py_CLEAR(clear_module_state->__pyx_codeobj__209);
  Py_CLEAR(clear_module_state->__pyx_codeobj__211);
  Py_CLEAR(clear_module_state->__pyx_codeobj__213);
  Py_CLEAR(clear_module_state->__pyx_codeobj__215);
  Py_CLEAR(clear_module_state->__pyx_codeobj__217);
  Py_CLEAR(clear_module_state->__pyx_codeobj__218);
  Py_CLEAR(clear_module_state->__pyx_codeobj__220);
  Py_CLEAR(clear_module_state->__pyx_codeobj__221);
  Py_CLEAR(clear_module_state->__pyx_codeobj__222);
  Py_CLEAR(clear_module_state->__pyx_codeobj__223);
  Py_CLEAR(clear_module_state->__pyx_codeobj__224);
  Py_CLEAR(clear_module_state->__pyx_codeobj__225);
  Py_CLEAR(clear_module_state->__pyx_codeobj__227);
  Py_CLEAR(clear_module_state->__pyx_codeobj__229);
  Py_CLEAR(clear_module_state->__pyx_codeobj__232);
  Py_CLEAR(clear_module_state->__pyx_codeobj__234);
  Py_CLEAR(clear_module_state->__pyx_codeobj__237);
  Py_CLEAR(clear_module_state->__pyx_codeobj__239);
  Py_CLEAR(clear_module_state->__pyx_codeobj__240);
  Py_CLEAR(clear_module_state->__pyx_codeobj__242);
  Py_CLEAR(clear_module_state->__pyx_codeobj__243);
  Py_CLEAR(clear_module_state->__pyx_codeobj__244);
  Py_CLEAR(clear_module_state->__pyx_codeobj__245);
  Py_CLEAR(clear_module_state->__pyx_codeobj__246);
  Py_CLEAR(clear_module_state->__pyx_codeobj__247);
  Py_CLEAR(clear_module_state->__pyx_codeobj__248);
  Py_CLEAR(clear_module_state->__pyx_codeobj__249);
  Py_CLEAR(clear_module_state->__pyx_codeobj__250);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_BaseCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_BaseCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_BitBltCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_HwndWindow);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_HwndWindow);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_ADBCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_ADBCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_ImageCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_ImageCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture_NemuIpcCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd);
  Py_VISIT(traverse_module_state->__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows);
  Py_VISIT(traverse_module_state->__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows);
  Py_VISIT(traverse_module_state->__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y);
  Py_VISIT(traverse_module_state->__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y);
  Py_VISIT(traverse_module_state->__pyx_kp_s_0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_127_0_0_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBBaseInteraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBCaptureMethod___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBCaptureMethod___setstate_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBCaptureMethod_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBCaptureMethod_do_get_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_ADBUTILS_ADB_PATH);
  Py_VISIT(traverse_module_state->__pyx_kp_s_ADB_command_line_Capture);
  Py_VISIT(traverse_module_state->__pyx_kp_s_About_10_15x_slower_than_BitBlt);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdbClient);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdbError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Alpha);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySize);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_AudioUtilities);
  Py_VISIT(traverse_module_state->__pyx_n_s_B8G8R8A8UIntNormalized);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod_clickable);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod_do_get_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod_draw_rectangle);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseCaptureMethod_get_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseWindowsCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseWindowsCaptureMethod___reduc);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseWindowsCaptureMethod___setst);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseWindowsCaptureMethod_clickab);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseWindowsCaptureMethod_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseWindowsCaptureMethod_get_abs);
  Py_VISIT(traverse_module_state->__pyx_n_s_BindFlags);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBlt);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBltCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBltCaptureMethod___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBltCaptureMethod___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBltCaptureMethod_do_get_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBltCaptureMethod_test_exclusi);
  Py_VISIT(traverse_module_state->__pyx_n_s_BitBltCaptureMethod_test_is_not);
  Py_VISIT(traverse_module_state->__pyx_n_s_Blue);
  Py_VISIT(traverse_module_state->__pyx_n_s_COLOR_RGB2BGR);
  Py_VISIT(traverse_module_state->__pyx_n_s_CPUAccessFlags);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaptureException);
  Py_VISIT(traverse_module_state->__pyx_n_s_Channels);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClientToScreen);
  Py_VISIT(traverse_module_state->__pyx_n_s_Close);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColorChannel);
  Py_VISIT(traverse_module_state->__pyx_n_s_Config);
  Py_VISIT(traverse_module_state->__pyx_n_s_ConfigOption);
  Py_VISIT(traverse_module_state->__pyx_n_s_ContentSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_CopyResource);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateBitmap);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateCaptureSession);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateCompatibleBitmap);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateCompatibleDC);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateDCFromHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateForWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateFreeThreaded);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreateTexture2D);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11CreateDevice);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11_CPU_ACCESS_READ);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11_MAP_READ);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11_SDK_VERSION);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11_TEXTURE2D_DESC);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D11_USAGE_STAGING);
  Py_VISIT(traverse_module_state->__pyx_n_s_D3D_DRIVER_TYPE_HARDWARE);
  Py_VISIT(traverse_module_state->__pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS);
  Py_VISIT(traverse_module_state->__pyx_n_s_DXGI_ERROR_DEVICE_REMOVED);
  Py_VISIT(traverse_module_state->__pyx_n_s_DXGI_ERROR_DEVICE_RESET);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeleteDC);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeleteObject);
  Py_VISIT(traverse_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_DesktopDuplicationCaptureMethod_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_check_in_front);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_check_installe);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_ensure_in_fron);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_get_imei);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_kill_server);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_adb_start_package);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_device_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_do_refresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_do_screencap);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_do_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_ensure_hwnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_get_devices);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_get_exe_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_get_hwnd_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_get_preferred_capt);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_get_preferred_devi);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_get_resolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_refresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_refresh_emulators);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_refresh_phones);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_set_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_set_hwnd_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_set_preferred_devi);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_shell);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_shell_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_try_kill_adb);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_update_device_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_update_pc_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_update_resolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_use_windows_captur);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeviceManager_width);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Device_is_none);
  Py_VISIT(traverse_module_state->__pyx_n_s_Direct3D11CaptureFramePool);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Direct3D_Desktop_Duplication);
  Py_VISIT(traverse_module_state->__pyx_n_s_DirectXPixelFormat);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Display_not_found);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Duplicates_the_desktop_using_Di);
  Py_VISIT(traverse_module_state->__pyx_n_s_DwmGetWindowAttribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_EmulatorManager);
  Py_VISIT(traverse_module_state->__pyx_n_s_EnumChildWindows);
  Py_VISIT(traverse_module_state->__pyx_n_s_EnumDisplayMonitors);
  Py_VISIT(traverse_module_state->__pyx_n_s_EnumWindows);
  Py_VISIT(traverse_module_state->__pyx_n_s_Event);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_check_check_mumu_app_k);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_test_exclusive_full_sc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_test_is_not_pure_color);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_test_is_not_pure_color_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_False);
  Py_VISIT(traverse_module_state->__pyx_n_s_FileNotFoundError);
  Py_VISIT(traverse_module_state->__pyx_n_s_FluentIcon);
  Py_VISIT(traverse_module_state->__pyx_n_s_Format);
  Py_VISIT(traverse_module_state->__pyx_n_s_GUID);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Game_Sound);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetActivationFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetAllSessions);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetBitmapBits);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetClassName);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetClientRect);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetDesc);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetDpiForMonitor);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetForegroundWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetInterface);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetMonitorInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetMute);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetParent);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetSafeHdc);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetWindowDC);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetWindowRect);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetWindowText);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetWindowThreadProcessId);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphicsCaptureItem);
  Py_VISIT(traverse_module_state->__pyx_n_s_Green);
  Py_VISIT(traverse_module_state->__pyx_n_s_Handler);
  Py_VISIT(traverse_module_state->__pyx_n_s_Height);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_do_update_window_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_frame_ratio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_HwndWindow_frame_ratio_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_get_abs_cords);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_handle_mute);
  Py_VISIT(traverse_module_state->__pyx_kp_u_HwndWindow_init_title);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_update_frame_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_update_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_update_window_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_HwndWindow_validate_mute_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_ID3D11Device);
  Py_VISIT(traverse_module_state->__pyx_n_s_ID3D11DeviceContext);
  Py_VISIT(traverse_module_state->__pyx_n_s_ID3D11Texture2D);
  Py_VISIT(traverse_module_state->__pyx_n_s_IDirect3DDevice);
  Py_VISIT(traverse_module_state->__pyx_n_s_IDirect3DDxgiInterfaceAccess);
  Py_VISIT(traverse_module_state->__pyx_n_s_IGraphicsCaptureItem);
  Py_VISIT(traverse_module_state->__pyx_n_s_IGraphicsCaptureItemInterop);
  Py_VISIT(traverse_module_state->__pyx_n_s_IInspectable);
  Py_VISIT(traverse_module_state->__pyx_n_s_IMREAD_COLOR);
  Py_VISIT(traverse_module_state->__pyx_n_s_IMREAD_UNCHANGED);
  Py_VISIT(traverse_module_state->__pyx_n_s_ISimpleAudioVolume);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageCaptureMethod___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageCaptureMethod___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageCaptureMethod_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageCaptureMethod_do_get_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageCaptureMethod_set_images);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImageShape);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Image_capture_method);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntEnum);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsBorderRequired);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsCursorCaptureEnabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsIconic);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsWindowEnabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsWindowVisible);
  Py_VISIT(traverse_module_state->__pyx_kp_s_It_can_record_OpenGL_and_Hardwa);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lock);
  Py_VISIT(traverse_module_state->__pyx_n_s_MAXBYTE);
  Py_VISIT(traverse_module_state->__pyx_n_s_MDT_EFFECTIVE_DPI);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONITOR_DEFAULTTONEAREST);
  Py_VISIT(traverse_module_state->__pyx_n_s_MUTE);
  Py_VISIT(traverse_module_state->__pyx_n_s_Map);
  Py_VISIT(traverse_module_state->__pyx_n_s_MipLevels);
  Py_VISIT(traverse_module_state->__pyx_n_s_MiscFlags);
  Py_VISIT(traverse_module_state->__pyx_n_s_Monitor);
  Py_VISIT(traverse_module_state->__pyx_n_s_MonitorFromWindow);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Mute_Game_while_in_Background);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_base_folder);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_check_mumu);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_do_get_fram);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_init_nemu);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcCaptureMethod_update_emul);
  Py_VISIT(traverse_module_state->__pyx_n_s_NemuIpcImpl);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Nemu_Ipc_Capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_OSError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_OpenGL_Hardware_Accelerated_or);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Overlapping_windows_will_show_u);
  Py_VISIT(traverse_module_state->__pyx_n_s_PBYTE);
  Py_VISIT(traverse_module_state->__pyx_n_s_POINTER);
  Py_VISIT(traverse_module_state->__pyx_n_s_PW_RENDERFULLCONTENT);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Paused_because_game_exited);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Paused_because_game_window_is_mi);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Please_turn_off_enable_backgroun);
  Py_VISIT(traverse_module_state->__pyx_n_s_PostMessage);
  Py_VISIT(traverse_module_state->__pyx_n_s_PostMessageInteraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrintWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_Process);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyDirectInteraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_QueryInterface);
  Py_VISIT(traverse_module_state->__pyx_n_s_RECT);
  Py_VISIT(traverse_module_state->__pyx_n_s_Recreate);
  Py_VISIT(traverse_module_state->__pyx_n_s_Red);
  Py_VISIT(traverse_module_state->__pyx_n_s_RefreshAdb);
  Py_VISIT(traverse_module_state->__pyx_n_s_Release);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReleaseDC);
  Py_VISIT(traverse_module_state->__pyx_n_s_RowPitch);
  Py_VISIT(traverse_module_state->__pyx_n_s_SRCCOPY);
  Py_VISIT(traverse_module_state->__pyx_n_s_SampleDesc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Screencap_image_decode_error_pro);
  Py_VISIT(traverse_module_state->__pyx_n_s_SelectObject);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetMute);
  Py_VISIT(traverse_module_state->__pyx_n_s_Size);
  Py_VISIT(traverse_module_state->__pyx_n_s_StartCapture);
  Py_VISIT(traverse_module_state->__pyx_n_s_Surface);
  Py_VISIT(traverse_module_state->__pyx_kp_s_The_best_option_when_compatible);
  Py_VISIT(traverse_module_state->__pyx_kp_s_The_smaller_the_selected_region);
  Py_VISIT(traverse_module_state->__pyx_kp_s_This_option_may_not_be_availabl);
  Py_VISIT(traverse_module_state->__pyx_n_s_Thread);
  Py_VISIT(traverse_module_state->__pyx_n_u_True);
  Py_VISIT(traverse_module_state->__pyx_n_s_TryGetNextFrame);
  Py_VISIT(traverse_module_state->__pyx_kp_u_TryGetNextFrame_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypedEventHandler);
  Py_VISIT(traverse_module_state->__pyx_n_s_Unmap);
  Py_VISIT(traverse_module_state->__pyx_n_s_Usage);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_WGC_MIN_BUILD);
  Py_VISIT(traverse_module_state->__pyx_n_s_WGC_NO_BORDER_MIN_BUILD);
  Py_VISIT(traverse_module_state->__pyx_n_s_WINDOWS_BUILD_NUMBER);
  Py_VISIT(traverse_module_state->__pyx_n_s_Width);
  Py_VISIT(traverse_module_state->__pyx_n_s_WinDLL);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod___r);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod___s);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_clo);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_con);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_cre);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_cro);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_do);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_WindowsGraphicsCaptureMethod_sta);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Windows_Graphics_Capture);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Windows_Graphics_Capture_Graphic);
  Py_VISIT(traverse_module_state->__pyx_n_s_X);
  Py_VISIT(traverse_module_state->__pyx_n_s_Y);
  Py_VISIT(traverse_module_state->__pyx_kp_u__10);
  Py_VISIT(traverse_module_state->__pyx_kp_u__11);
  Py_VISIT(traverse_module_state->__pyx_kp_s__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__14);
  Py_VISIT(traverse_module_state->__pyx_kp_u__17);
  Py_VISIT(traverse_module_state->__pyx_n_s__24);
  Py_VISIT(traverse_module_state->__pyx_n_s__251);
  Py_VISIT(traverse_module_state->__pyx_kp_s__28);
  Py_VISIT(traverse_module_state->__pyx_n_s__7);
  Py_VISIT(traverse_module_state->__pyx_n_u__7);
  Py_VISIT(traverse_module_state->__pyx_kp_s__8);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_n_s_abspath);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_capture_config);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_check_in_front);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_check_in_front_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_check_installed);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_connect);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_already_connected);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_emulator_result);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_error);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_error_return_none);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_exit_event_is_set);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_offline_disconnect_f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_connect_try_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_devices);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_ensure_in_front);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_ensure_in_front_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_adb_exe);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_get_imei);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_imei);
  Py_VISIT(traverse_module_state->__pyx_kp_s_adb_kill_server);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_kill_server_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_lock);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adb_shell_error_maybe_offline);
  Py_VISIT(traverse_module_state->__pyx_n_s_adb_start_package);
  Py_VISIT(traverse_module_state->__pyx_n_s_adbutils);
  Py_VISIT(traverse_module_state->__pyx_n_s_adbutils__utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_Closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_FrameArrived);
  Py_VISIT(traverse_module_state->__pyx_n_s_addr);
  Py_VISIT(traverse_module_state->__pyx_n_s_address);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_emulator_instances);
  Py_VISIT(traverse_module_state->__pyx_n_s_any);
  Py_VISIT(traverse_module_state->__pyx_n_s_app_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_app_current);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_astype);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_folder);
  Py_VISIT(traverse_module_state->__pyx_n_s_biggest);
  Py_VISIT(traverse_module_state->__pyx_n_s_bin_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_bit_blt_render_full);
  Py_VISIT(traverse_module_state->__pyx_n_s_border);
  Py_VISIT(traverse_module_state->__pyx_n_s_byref);
  Py_VISIT(traverse_module_state->__pyx_kp_u_c_android_intent_category_LAUNC);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_ubyte);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_uint);
  Py_VISIT(traverse_module_state->__pyx_n_s_calculate_pc_exe_path);
  Py_VISIT(traverse_module_state->__pyx_kp_u_calculate_pc_exe_path_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_callback);
  Py_VISIT(traverse_module_state->__pyx_kp_s_calling_refresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_can_bit_blt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_cant_find_a_usable_windows_captu);
  Py_VISIT(traverse_module_state->__pyx_n_s_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_capture_cursor);
  Py_VISIT(traverse_module_state->__pyx_n_s_capture_method);
  Py_VISIT(traverse_module_state->__pyx_kp_u_capture_method_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_capture_output);
  Py_VISIT(traverse_module_state->__pyx_n_s_cast);
  Py_VISIT(traverse_module_state->__pyx_n_s_cfunc_to_py);
  Py_VISIT(traverse_module_state->__pyx_n_s_changed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_check_available_WINDOWS_BUILD_NU);
  Py_VISIT(traverse_module_state->__pyx_kp_u_check_available_failed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_check_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_mumu_app_keep_alive_400);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_pos);
  Py_VISIT(traverse_module_state->__pyx_n_s_child_callback);
  Py_VISIT(traverse_module_state->__pyx_n_s_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_clickable);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_cmdline);
  Py_VISIT(traverse_module_state->__pyx_n_s_communicate);
  Py_VISIT(traverse_module_state->__pyx_n_s_config);
  Py_VISIT(traverse_module_state->__pyx_kp_u_configs_customer_config_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_connected);
  Py_VISIT(traverse_module_state->__pyx_n_s_connected_device);
  Py_VISIT(traverse_module_state->__pyx_kp_s_convert_dx_frame_win_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_create);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_crop_image);
  Py_VISIT(traverse_module_state->__pyx_n_s_cropped_image);
  Py_VISIT(traverse_module_state->__pyx_n_s_cropped_window_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctl);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctypes);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctypeslib);
  Py_VISIT(traverse_module_state->__pyx_n_s_current);
  Py_VISIT(traverse_module_state->__pyx_kp_s_customer_app_keptlive);
  Py_VISIT(traverse_module_state->__pyx_kp_u_customer_app_keptlive_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_cv2);
  Py_VISIT(traverse_module_state->__pyx_n_s_cvtColor);
  Py_VISIT(traverse_module_state->__pyx_n_s_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_d3d11);
  Py_VISIT(traverse_module_state->__pyx_n_s_d3dshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_dc);
  Py_VISIT(traverse_module_state->__pyx_n_s_debug);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_deep_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_default);
  Py_VISIT(traverse_module_state->__pyx_n_s_delegate);
  Py_VISIT(traverse_module_state->__pyx_n_s_denominator);
  Py_VISIT(traverse_module_state->__pyx_n_s_description);
  Py_VISIT(traverse_module_state->__pyx_kp_s_destroy_windows_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_device_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_device_connected);
  Py_VISIT(traverse_module_state->__pyx_kp_u_device_connected_check_device_st);
  Py_VISIT(traverse_module_state->__pyx_kp_u_device_connected_error_occurred);
  Py_VISIT(traverse_module_state->__pyx_n_s_device_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_device_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_device_manager);
  Py_VISIT(traverse_module_state->__pyx_n_s_devices);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_difference);
  Py_VISIT(traverse_module_state->__pyx_n_s_dirname);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_disconnect);
  Py_VISIT(traverse_module_state->__pyx_n_s_display);
  Py_VISIT(traverse_module_state->__pyx_n_s_display_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_displays);
  Py_VISIT(traverse_module_state->__pyx_n_s_do_get_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_do_refresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_do_screencap);
  Py_VISIT(traverse_module_state->__pyx_n_s_do_start);
  Py_VISIT(traverse_module_state->__pyx_n_u_do_start);
  Py_VISIT(traverse_module_state->__pyx_kp_u_do_start_use_windows_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_do_update_window_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_do_update_window_size_changed_vi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_do_update_window_size_exception);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dpiX);
  Py_VISIT(traverse_module_state->__pyx_n_s_dpiY);
  Py_VISIT(traverse_module_state->__pyx_n_s_draw_rectangle);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_dwmapi);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_kp_s_echo_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_emit);
  Py_VISIT(traverse_module_state->__pyx_n_s_emulator);
  Py_VISIT(traverse_module_state->__pyx_n_s_emulator_device);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encoding);
  Py_VISIT(traverse_module_state->__pyx_n_s_ensure_hwnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_enum_child_windows);
  Py_VISIT(traverse_module_state->__pyx_n_s_enum_child_windows_locals_child);
  Py_VISIT(traverse_module_state->__pyx_n_s_environ);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_exception);
  Py_VISIT(traverse_module_state->__pyx_n_s_exe);
  Py_VISIT(traverse_module_state->__pyx_n_s_exe_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_exe_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_executor);
  Py_VISIT(traverse_module_state->__pyx_n_s_exists);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit_event);
  Py_VISIT(traverse_module_state->__pyx_kp_u_exit_reset_mute_state_to_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_extended_frame_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_f);
  Py_VISIT(traverse_module_state->__pyx_kp_s_fast_most_compatible_capped_at_6);
  Py_VISIT(traverse_module_state->__pyx_kp_s_fastest_least_compatible);
  Py_VISIT(traverse_module_state->__pyx_n_s_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_find_hwnd);
  Py_VISIT(traverse_module_state->__pyx_kp_u_find_hwnd_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_find_hwnd_child_callback);
  Py_VISIT(traverse_module_state->__pyx_n_s_find_hwnd_locals_callback);
  Py_VISIT(traverse_module_state->__pyx_kp_u_first_start_use_first_or_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_kp_s_for_debugging);
  Py_VISIT(traverse_module_state->__pyx_n_s_found);
  Py_VISIT(traverse_module_state->__pyx_kp_u_found_hwnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_frame);
  Py_VISIT(traverse_module_state->__pyx_kp_s_frame_arrived_callback_TryGetNex);
  Py_VISIT(traverse_module_state->__pyx_n_s_frame_aspect_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_frame_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_frame_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_frame_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_frombuffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_front);
  Py_VISIT(traverse_module_state->__pyx_n_s_full_path);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_abs_cords);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_bin_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_crop_point);
  Py_VISIT(traverse_module_state->__pyx_kp_u_get_device_adb_device_addr_chang);
  Py_VISIT(traverse_module_state->__pyx_kp_u_get_device_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_devices);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_emulator_exe);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_exe_by_hwnd);
  Py_VISIT(traverse_module_state->__pyx_kp_s_get_exe_by_hwnd_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_exe_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_frame);
  Py_VISIT(traverse_module_state->__pyx_kp_u_get_frame_size_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_hwnd_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_monitors_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_mute_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_player_id_from_cmdline);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_preferred_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_preferred_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_resolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_win_graphics_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_window_bounds);
  Py_VISIT(traverse_module_state->__pyx_kp_u_get_window_bounds_exception);
  Py_VISIT(traverse_module_state->__pyx_n_s_getenv);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_global_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_group);
  Py_VISIT(traverse_module_state->__pyx_n_s_hWnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_handle_mute);
  Py_VISIT(traverse_module_state->__pyx_n_s_handler);
  Py_VISIT(traverse_module_state->__pyx_n_s_height);
  Py_VISIT(traverse_module_state->__pyx_kp_u_height_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hmonitor);
  Py_VISIT(traverse_module_state->__pyx_n_s_host);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwnd_class);
  Py_VISIT(traverse_module_state->__pyx_kp_u_hwnd_class_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwnd_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_hwnd_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_icon);
  Py_VISIT(traverse_module_state->__pyx_n_s_idldsl);
  Py_VISIT(traverse_module_state->__pyx_n_s_image);
  Py_VISIT(traverse_module_state->__pyx_n_s_image_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_images);
  Py_VISIT(traverse_module_state->__pyx_n_s_imdecode);
  Py_VISIT(traverse_module_state->__pyx_n_s_imei);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_kp_s_index_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_kp_s_init___end);
  Py_VISIT(traverse_module_state->__pyx_kp_s_init___start);
  Py_VISIT(traverse_module_state->__pyx_kp_u_init_adb);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_nemu);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_kp_s_init_windows_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_installed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_installed_emulators);
  Py_VISIT(traverse_module_state->__pyx_n_s_installed_emulators_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_instance_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_interaction);
  Py_VISIT(traverse_module_state->__pyx_n_s_interop);
  Py_VISIT(traverse_module_state->__pyx_n_s_ipc);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_blank);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_close_to_pure_color);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_digit);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_foreground_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_valid_exe);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_valid_hwnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_window_in_screen_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_window_minimized);
  Py_VISIT(traverse_module_state->__pyx_n_s_isdigit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_item);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_join);
  Py_VISIT(traverse_module_state->__pyx_n_s_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_kill);
  Py_VISIT(traverse_module_state->__pyx_kp_u_kill_adb_by_process_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_kill_adb_server_failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_s_lParam);
  Py_VISIT(traverse_module_state->__pyx_kp_u_latency_too_large_return_None_fr);
  Py_VISIT(traverse_module_state->__pyx_n_s_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_ljust);
  Py_VISIT(traverse_module_state->__pyx_n_s_loads);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_lower);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_manager);
  Py_VISIT(traverse_module_state->__pyx_n_s_matching_child);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor_bottom);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor_left);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor_rect);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor_right);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitor_top);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitors);
  Py_VISIT(traverse_module_state->__pyx_n_s_monitors_bounds);
  Py_VISIT(traverse_module_state->__pyx_kp_u_monkey_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_kp_s_mumu_player_12_only);
  Py_VISIT(traverse_module_state->__pyx_n_s_mute);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_need_reset_framepool);
  Py_VISIT(traverse_module_state->__pyx_n_s_nemu_folder);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_nick);
  Py_VISIT(traverse_module_state->__pyx_kp_u_no_devices);
  Py_VISIT(traverse_module_state->__pyx_kp_u_no_frame_for_10_sec_try_to_resta);
  Py_VISIT(traverse_module_state->__pyx_n_s_no_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_none);
  Py_VISIT(traverse_module_state->__pyx_kp_u_not_exists);
  Py_VISIT(traverse_module_state->__pyx_kp_u_not_in_device_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_notification);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_kp_s_np_ndarray_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_nt);
  Py_VISIT(traverse_module_state->__pyx_n_s_numerator);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_offline);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_Capture);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ok_Capture);
  Py_VISIT(traverse_module_state->__pyx_kp_s_ok_Capture_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_alas_emulator_windows);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_alas_platform_windows);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_capture_adb_nemu_ipc);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_capture_windows);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_color_Color);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_config_Config);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_config_ConfigOption);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_gui_Communicate);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ok_gui_executor_pause_pos_invali);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_interaction_ADBInteraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_interaction_PostMessageIntera);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_interaction_PyDirectInteracti);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_logging_Logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_rotypes);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_rotypes_Windows_Foundation);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_rotypes_Windows_Graphics_Capt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_rotypes_Windows_Graphics_Dire);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_rotypes_roapi);
  Py_VISIT(traverse_module_state->__pyx_n_s_ok_util_Handler);
  Py_VISIT(traverse_module_state->__pyx_n_s_open);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_override_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_pData);
  Py_VISIT(traverse_module_state->__pyx_n_s_package);
  Py_VISIT(traverse_module_state->__pyx_n_s_packages);
  Py_VISIT(traverse_module_state->__pyx_n_s_parent);
  Py_VISIT(traverse_module_state->__pyx_n_s_parse_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_pause);
  Py_VISIT(traverse_module_state->__pyx_n_s_pc);
  Py_VISIT(traverse_module_state->__pyx_n_s_pc_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_pc_full_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_percent);
  Py_VISIT(traverse_module_state->__pyx_n_s_phone_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pid);
  Py_VISIT(traverse_module_state->__pyx_n_s_platform);
  Py_VISIT(traverse_module_state->__pyx_n_s_player_id);
  Py_VISIT(traverse_module_state->__pyx_kp_u_player_id_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_player_id_check_failed_cmdline);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pm_list_packages);
  Py_VISIT(traverse_module_state->__pyx_n_s_png_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_pop);
  Py_VISIT(traverse_module_state->__pyx_n_s_pos_valid);
  Py_VISIT(traverse_module_state->__pyx_n_s_post);
  Py_VISIT(traverse_module_state->__pyx_n_s_preferred);
  Py_VISIT(traverse_module_state->__pyx_kp_u_preferred_device);
  Py_VISIT(traverse_module_state->__pyx_kp_u_preferred_device_did_change);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_proc);
  Py_VISIT(traverse_module_state->__pyx_n_s_process);
  Py_VISIT(traverse_module_state->__pyx_n_s_process_iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_prop);
  Py_VISIT(traverse_module_state->__pyx_n_s_property);
  Py_VISIT(traverse_module_state->__pyx_n_s_psutil);
  Py_VISIT(traverse_module_state->__pyx_n_s_pycaw_api_audioclient);
  Py_VISIT(traverse_module_state->__pyx_n_s_pycaw_utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_ADBCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_BaseCaptureMethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_BaseWindowsCaptur);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_BitBltCaptureMeth);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_DesktopDuplicatio);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_HwndWindow);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_ImageCaptureMetho);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_NemuIpcCaptureMet);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_WindowsGraphicsCa);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qfluentwidgets);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio_match);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_re);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_kp_u_real);
  Py_VISIT(traverse_module_state->__pyx_n_s_real_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_real_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_real_x_offset);
  Py_VISIT(traverse_module_state->__pyx_n_s_real_y_offset);
  Py_VISIT(traverse_module_state->__pyx_n_s_rect);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_kp_u_refresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_refresh_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_refresh_current_only_skip_others);
  Py_VISIT(traverse_module_state->__pyx_n_s_refresh_emulators);
  Py_VISIT(traverse_module_state->__pyx_kp_u_refresh_emulators_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_refresh_phones);
  Py_VISIT(traverse_module_state->__pyx_kp_u_refresh_phones_done);
  Py_VISIT(traverse_module_state->__pyx_kp_u_refresh_phones_found_an_phone);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove_existing);
  Py_VISIT(traverse_module_state->__pyx_n_s_require_bg);
  Py_VISIT(traverse_module_state->__pyx_n_s_reset_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_reset_framepool);
  Py_VISIT(traverse_module_state->__pyx_n_u_reset_framepool);
  Py_VISIT(traverse_module_state->__pyx_n_s_resolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_resolution_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_resolution_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_results);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_s_reversed);
  Py_VISIT(traverse_module_state->__pyx_n_s_round);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_save_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_scaling);
  Py_VISIT(traverse_module_state->__pyx_n_s_screencap);
  Py_VISIT(traverse_module_state->__pyx_kp_s_screencap_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_screenshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_search);
  Py_VISIT(traverse_module_state->__pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_u_self_get_preferred_device_return);
  Py_VISIT(traverse_module_state->__pyx_kp_u_self_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_serial);
  Py_VISIT(traverse_module_state->__pyx_n_s_server_kill);
  Py_VISIT(traverse_module_state->__pyx_kp_s_service_call_iphonesubinfo_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_session);
  Py_VISIT(traverse_module_state->__pyx_n_s_sessions);
  Py_VISIT(traverse_module_state->__pyx_n_s_set);
  Py_VISIT(traverse_module_state->__pyx_kp_u_set_ADBUTILS_ADB_PATH);
  Py_VISIT(traverse_module_state->__pyx_kp_u_set_ADBUTILS_ADB_PATH_failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_hwnd_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_images);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_mute_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_set_preferred_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_preferred_device_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_setdefault);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_settings_get_secure_android_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_shcore);
  Py_VISIT(traverse_module_state->__pyx_n_s_shell);
  Py_VISIT(traverse_module_state->__pyx_n_s_shell_device);
  Py_VISIT(traverse_module_state->__pyx_n_s_short_description);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizeof);
  Py_VISIT(traverse_module_state->__pyx_n_s_skip_if_running);
  Py_VISIT(traverse_module_state->__pyx_n_s_sleep);
  Py_VISIT(traverse_module_state->__pyx_kp_s_slower_bound_to_display);
  Py_VISIT(traverse_module_state->__pyx_n_s_socket_timeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_or_stop);
  Py_VISIT(traverse_module_state->__pyx_kp_u_start_or_stop_failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_kp_s_str_int_None);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_support);
  Py_VISIT(traverse_module_state->__pyx_n_s_supported_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_supported_resolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_target);
  Py_VISIT(traverse_module_state->__pyx_n_s_target_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_target_method);
  Py_VISIT(traverse_module_state->__pyx_n_s_target_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_test_exclusive_full_screen);
  Py_VISIT(traverse_module_state->__pyx_n_s_test_is_not_pure_color);
  Py_VISIT(traverse_module_state->__pyx_kp_s_test_is_not_pure_color_failed_ca);
  Py_VISIT(traverse_module_state->__pyx_n_s_text);
  Py_VISIT(traverse_module_state->__pyx_n_s_threading);
  Py_VISIT(traverse_module_state->__pyx_n_s_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_title);
  Py_VISIT(traverse_module_state->__pyx_n_u_title_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_title_height);
  Py_VISIT(traverse_module_state->__pyx_kp_u_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_true);
  Py_VISIT(traverse_module_state->__pyx_n_s_try_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_try_delete_dc);
  Py_VISIT(traverse_module_state->__pyx_n_s_try_kill_adb);
  Py_VISIT(traverse_module_state->__pyx_kp_s_try_kill_adb_end);
  Py_VISIT(traverse_module_state->__pyx_kp_s_try_kill_adb_server);
  Py_VISIT(traverse_module_state->__pyx_n_s_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_uint8);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unmute_game_because_option_is_tu);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_capture_method);
  Py_VISIT(traverse_module_state->__pyx_kp_u_update_capture_method_exception);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_device_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_emulator);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_frame_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_update_frame_size_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_update_path_and_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_pc_device);
  Py_VISIT(traverse_module_state->__pyx_kp_u_update_resolution_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_resolution_for_hwnd);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_window_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_use_adb_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_bit_blt_only);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_last_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_kp_s_use_the_adb_screencap_command_sl);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_windows_capture);
  Py_VISIT(traverse_module_state->__pyx_n_s_user32);
  Py_VISIT(traverse_module_state->__pyx_kp_s_utf_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_validate_mute_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_validator);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_version);
  Py_VISIT(traverse_module_state->__pyx_n_s_visible);
  Py_VISIT(traverse_module_state->__pyx_kp_u_vms_MuMuPlayer_12_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_win32);
  Py_VISIT(traverse_module_state->__pyx_n_s_win32api);
  Py_VISIT(traverse_module_state->__pyx_n_s_win32con);
  Py_VISIT(traverse_module_state->__pyx_n_s_win32gui);
  Py_VISIT(traverse_module_state->__pyx_n_s_win32process);
  Py_VISIT(traverse_module_state->__pyx_n_s_win32ui);
  Py_VISIT(traverse_module_state->__pyx_n_s_win_graphic);
  Py_VISIT(traverse_module_state->__pyx_n_s_win_interaction_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_windll);
  Py_VISIT(traverse_module_state->__pyx_kp_u_window);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_bottom);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_left);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_right);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_top);
  Py_VISIT(traverse_module_state->__pyx_n_s_window_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_windows);
  Py_VISIT(traverse_module_state->__pyx_n_s_windows_capture_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_windows_graphics_available);
  Py_VISIT(traverse_module_state->__pyx_n_s_winerror);
  Py_VISIT(traverse_module_state->__pyx_n_s_wintypes);
  Py_VISIT(traverse_module_state->__pyx_n_s_wrap);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_u_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_x2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_x_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_x_offset);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_y2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_y_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_y_offset);
  Py_VISIT(traverse_module_state->__pyx_float_0_2);
  Py_VISIT(traverse_module_state->__pyx_float_0_5);
  Py_VISIT(traverse_module_state->__pyx_float_0_7);
  Py_VISIT(traverse_module_state->__pyx_float_0_01);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_9);
  Py_VISIT(traverse_module_state->__pyx_int_10);
  Py_VISIT(traverse_module_state->__pyx_int_96);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_255);
  Py_VISIT(traverse_module_state->__pyx_int_19041);
  Py_VISIT(traverse_module_state->__pyx_int_20348);
  Py_VISIT(traverse_module_state->__pyx_int_15891862);
  Py_VISIT(traverse_module_state->__pyx_int_18546816);
  Py_VISIT(traverse_module_state->__pyx_int_30750855);
  Py_VISIT(traverse_module_state->__pyx_int_36463512);
  Py_VISIT(traverse_module_state->__pyx_int_37823798);
  Py_VISIT(traverse_module_state->__pyx_int_55865105);
  Py_VISIT(traverse_module_state->__pyx_int_63776034);
  Py_VISIT(traverse_module_state->__pyx_int_69505199);
  Py_VISIT(traverse_module_state->__pyx_int_74253587);
  Py_VISIT(traverse_module_state->__pyx_int_76750241);
  Py_VISIT(traverse_module_state->__pyx_int_97161228);
  Py_VISIT(traverse_module_state->__pyx_int_101491740);
  Py_VISIT(traverse_module_state->__pyx_int_129754191);
  Py_VISIT(traverse_module_state->__pyx_int_137420293);
  Py_VISIT(traverse_module_state->__pyx_int_147817759);
  Py_VISIT(traverse_module_state->__pyx_int_159312098);
  Py_VISIT(traverse_module_state->__pyx_int_166164177);
  Py_VISIT(traverse_module_state->__pyx_int_184679976);
  Py_VISIT(traverse_module_state->__pyx_int_198801806);
  Py_VISIT(traverse_module_state->__pyx_int_252227782);
  Py_VISIT(traverse_module_state->__pyx_int_252510149);
  Py_VISIT(traverse_module_state->__pyx_int_258103348);
  Py_VISIT(traverse_module_state->__pyx_int_267537657);
  Py_VISIT(traverse_module_state->__pyx_int_268090033);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_slice__4);
  Py_VISIT(traverse_module_state->__pyx_slice__5);
  Py_VISIT(traverse_module_state->__pyx_slice__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_slice__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__111);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__117);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__125);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__144);
  Py_VISIT(traverse_module_state->__pyx_tuple__146);
  Py_VISIT(traverse_module_state->__pyx_tuple__148);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__151);
  Py_VISIT(traverse_module_state->__pyx_tuple__153);
  Py_VISIT(traverse_module_state->__pyx_tuple__155);
  Py_VISIT(traverse_module_state->__pyx_tuple__157);
  Py_VISIT(traverse_module_state->__pyx_tuple__159);
  Py_VISIT(traverse_module_state->__pyx_tuple__161);
  Py_VISIT(traverse_module_state->__pyx_tuple__163);
  Py_VISIT(traverse_module_state->__pyx_tuple__165);
  Py_VISIT(traverse_module_state->__pyx_tuple__167);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__170);
  Py_VISIT(traverse_module_state->__pyx_tuple__172);
  Py_VISIT(traverse_module_state->__pyx_tuple__174);
  Py_VISIT(traverse_module_state->__pyx_tuple__177);
  Py_VISIT(traverse_module_state->__pyx_tuple__179);
  Py_VISIT(traverse_module_state->__pyx_tuple__181);
  Py_VISIT(traverse_module_state->__pyx_tuple__183);
  Py_VISIT(traverse_module_state->__pyx_tuple__185);
  Py_VISIT(traverse_module_state->__pyx_tuple__186);
  Py_VISIT(traverse_module_state->__pyx_tuple__188);
  Py_VISIT(traverse_module_state->__pyx_tuple__190);
  Py_VISIT(traverse_module_state->__pyx_tuple__198);
  Py_VISIT(traverse_module_state->__pyx_tuple__200);
  Py_VISIT(traverse_module_state->__pyx_tuple__202);
  Py_VISIT(traverse_module_state->__pyx_tuple__204);
  Py_VISIT(traverse_module_state->__pyx_tuple__206);
  Py_VISIT(traverse_module_state->__pyx_tuple__208);
  Py_VISIT(traverse_module_state->__pyx_tuple__210);
  Py_VISIT(traverse_module_state->__pyx_tuple__212);
  Py_VISIT(traverse_module_state->__pyx_tuple__214);
  Py_VISIT(traverse_module_state->__pyx_tuple__216);
  Py_VISIT(traverse_module_state->__pyx_tuple__219);
  Py_VISIT(traverse_module_state->__pyx_tuple__226);
  Py_VISIT(traverse_module_state->__pyx_tuple__228);
  Py_VISIT(traverse_module_state->__pyx_tuple__230);
  Py_VISIT(traverse_module_state->__pyx_tuple__231);
  Py_VISIT(traverse_module_state->__pyx_tuple__233);
  Py_VISIT(traverse_module_state->__pyx_tuple__235);
  Py_VISIT(traverse_module_state->__pyx_tuple__236);
  Py_VISIT(traverse_module_state->__pyx_tuple__238);
  Py_VISIT(traverse_module_state->__pyx_tuple__241);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__72);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__120);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__140);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__160);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__164);
  Py_VISIT(traverse_module_state->__pyx_codeobj__166);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__171);
  Py_VISIT(traverse_module_state->__pyx_codeobj__173);
  Py_VISIT(traverse_module_state->__pyx_codeobj__175);
  Py_VISIT(traverse_module_state->__pyx_codeobj__176);
  Py_VISIT(traverse_module_state->__pyx_codeobj__178);
  Py_VISIT(traverse_module_state->__pyx_codeobj__180);
  Py_VISIT(traverse_module_state->__pyx_codeobj__182);
  Py_VISIT(traverse_module_state->__pyx_codeobj__184);
  Py_VISIT(traverse_module_state->__pyx_codeobj__187);
  Py_VISIT(traverse_module_state->__pyx_codeobj__189);
  Py_VISIT(traverse_module_state->__pyx_codeobj__191);
  Py_VISIT(traverse_module_state->__pyx_codeobj__192);
  Py_VISIT(traverse_module_state->__pyx_codeobj__193);
  Py_VISIT(traverse_module_state->__pyx_codeobj__194);
  Py_VISIT(traverse_module_state->__pyx_codeobj__195);
  Py_VISIT(traverse_module_state->__pyx_codeobj__196);
  Py_VISIT(traverse_module_state->__pyx_codeobj__197);
  Py_VISIT(traverse_module_state->__pyx_codeobj__199);
  Py_VISIT(traverse_module_state->__pyx_codeobj__201);
  Py_VISIT(traverse_module_state->__pyx_codeobj__203);
  Py_VISIT(traverse_module_state->__pyx_codeobj__205);
  Py_VISIT(traverse_module_state->__pyx_codeobj__207);
  Py_VISIT(traverse_module_state->__pyx_codeobj__209);
  Py_VISIT(traverse_module_state->__pyx_codeobj__211);
  Py_VISIT(traverse_module_state->__pyx_codeobj__213);
  Py_VISIT(traverse_module_state->__pyx_codeobj__215);
  Py_VISIT(traverse_module_state->__pyx_codeobj__217);
  Py_VISIT(traverse_module_state->__pyx_codeobj__218);
  Py_VISIT(traverse_module_state->__pyx_codeobj__220);
  Py_VISIT(traverse_module_state->__pyx_codeobj__221);
  Py_VISIT(traverse_module_state->__pyx_codeobj__222);
  Py_VISIT(traverse_module_state->__pyx_codeobj__223);
  Py_VISIT(traverse_module_state->__pyx_codeobj__224);
  Py_VISIT(traverse_module_state->__pyx_codeobj__225);
  Py_VISIT(traverse_module_state->__pyx_codeobj__227);
  Py_VISIT(traverse_module_state->__pyx_codeobj__229);
  Py_VISIT(traverse_module_state->__pyx_codeobj__232);
  Py_VISIT(traverse_module_state->__pyx_codeobj__234);
  Py_VISIT(traverse_module_state->__pyx_codeobj__237);
  Py_VISIT(traverse_module_state->__pyx_codeobj__239);
  Py_VISIT(traverse_module_state->__pyx_codeobj__240);
  Py_VISIT(traverse_module_state->__pyx_codeobj__242);
  Py_VISIT(traverse_module_state->__pyx_codeobj__243);
  Py_VISIT(traverse_module_state->__pyx_codeobj__244);
  Py_VISIT(traverse_module_state->__pyx_codeobj__245);
  Py_VISIT(traverse_module_state->__pyx_codeobj__246);
  Py_VISIT(traverse_module_state->__pyx_codeobj__247);
  Py_VISIT(traverse_module_state->__pyx_codeobj__248);
  Py_VISIT(traverse_module_state->__pyx_codeobj__249);
  Py_VISIT(traverse_module_state->__pyx_codeobj__250);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_2ok_7Capture_BaseCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_BaseCaptureMethod
#define __pyx_type_2ok_7Capture_BaseWindowsCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod
#define __pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod
#define __pyx_type_2ok_7Capture_BitBltCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_BitBltCaptureMethod
#define __pyx_type_2ok_7Capture_HwndWindow __pyx_mstate_global->__pyx_type_2ok_7Capture_HwndWindow
#define __pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod
#define __pyx_type_2ok_7Capture_ADBCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_ADBCaptureMethod
#define __pyx_type_2ok_7Capture_ImageCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_ImageCaptureMethod
#define __pyx_type_2ok_7Capture_NemuIpcCaptureMethod __pyx_mstate_global->__pyx_type_2ok_7Capture_NemuIpcCaptureMethod
#define __pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd __pyx_mstate_global->__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd
#define __pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows __pyx_mstate_global->__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows
#define __pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y __pyx_mstate_global->__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y
#endif
#define __pyx_ptype_2ok_7Capture_BaseCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_BaseCaptureMethod
#define __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod
#define __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod
#define __pyx_ptype_2ok_7Capture_BitBltCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_BitBltCaptureMethod
#define __pyx_ptype_2ok_7Capture_HwndWindow __pyx_mstate_global->__pyx_ptype_2ok_7Capture_HwndWindow
#define __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod
#define __pyx_ptype_2ok_7Capture_ADBCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_ADBCaptureMethod
#define __pyx_ptype_2ok_7Capture_ImageCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_ImageCaptureMethod
#define __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod __pyx_mstate_global->__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod
#define __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd __pyx_mstate_global->__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd
#define __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows __pyx_mstate_global->__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows
#define __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y __pyx_mstate_global->__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y
#define __pyx_kp_s_0 __pyx_mstate_global->__pyx_kp_s_0
#define __pyx_kp_s_127_0_0_1 __pyx_mstate_global->__pyx_kp_s_127_0_0_1
#define __pyx_n_s_ADBBaseInteraction __pyx_mstate_global->__pyx_n_s_ADBBaseInteraction
#define __pyx_n_s_ADBCaptureMethod __pyx_mstate_global->__pyx_n_s_ADBCaptureMethod
#define __pyx_n_s_ADBCaptureMethod___reduce_cython __pyx_mstate_global->__pyx_n_s_ADBCaptureMethod___reduce_cython
#define __pyx_n_s_ADBCaptureMethod___setstate_cyth __pyx_mstate_global->__pyx_n_s_ADBCaptureMethod___setstate_cyth
#define __pyx_n_s_ADBCaptureMethod_connected __pyx_mstate_global->__pyx_n_s_ADBCaptureMethod_connected
#define __pyx_n_s_ADBCaptureMethod_do_get_frame __pyx_mstate_global->__pyx_n_s_ADBCaptureMethod_do_get_frame
#define __pyx_n_s_ADBUTILS_ADB_PATH __pyx_mstate_global->__pyx_n_s_ADBUTILS_ADB_PATH
#define __pyx_kp_s_ADB_command_line_Capture __pyx_mstate_global->__pyx_kp_s_ADB_command_line_Capture
#define __pyx_kp_s_About_10_15x_slower_than_BitBlt __pyx_mstate_global->__pyx_kp_s_About_10_15x_slower_than_BitBlt
#define __pyx_n_s_AdbClient __pyx_mstate_global->__pyx_n_s_AdbClient
#define __pyx_n_s_AdbError __pyx_mstate_global->__pyx_n_s_AdbError
#define __pyx_n_s_Alpha __pyx_mstate_global->__pyx_n_s_Alpha
#define __pyx_n_s_ArraySize __pyx_mstate_global->__pyx_n_s_ArraySize
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_AudioUtilities __pyx_mstate_global->__pyx_n_s_AudioUtilities
#define __pyx_n_s_B8G8R8A8UIntNormalized __pyx_mstate_global->__pyx_n_s_B8G8R8A8UIntNormalized
#define __pyx_n_s_BaseCaptureMethod __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod
#define __pyx_n_s_BaseCaptureMethod___reduce_cytho __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod___reduce_cytho
#define __pyx_n_s_BaseCaptureMethod___setstate_cyt __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod___setstate_cyt
#define __pyx_n_s_BaseCaptureMethod_clickable __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod_clickable
#define __pyx_n_s_BaseCaptureMethod_close __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod_close
#define __pyx_n_s_BaseCaptureMethod_connected __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod_connected
#define __pyx_n_s_BaseCaptureMethod_do_get_frame __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod_do_get_frame
#define __pyx_n_s_BaseCaptureMethod_draw_rectangle __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod_draw_rectangle
#define __pyx_n_s_BaseCaptureMethod_get_frame __pyx_mstate_global->__pyx_n_s_BaseCaptureMethod_get_frame
#define __pyx_n_s_BaseWindowsCaptureMethod __pyx_mstate_global->__pyx_n_s_BaseWindowsCaptureMethod
#define __pyx_n_s_BaseWindowsCaptureMethod___reduc __pyx_mstate_global->__pyx_n_s_BaseWindowsCaptureMethod___reduc
#define __pyx_n_s_BaseWindowsCaptureMethod___setst __pyx_mstate_global->__pyx_n_s_BaseWindowsCaptureMethod___setst
#define __pyx_n_s_BaseWindowsCaptureMethod_clickab __pyx_mstate_global->__pyx_n_s_BaseWindowsCaptureMethod_clickab
#define __pyx_n_s_BaseWindowsCaptureMethod_connect __pyx_mstate_global->__pyx_n_s_BaseWindowsCaptureMethod_connect
#define __pyx_n_s_BaseWindowsCaptureMethod_get_abs __pyx_mstate_global->__pyx_n_s_BaseWindowsCaptureMethod_get_abs
#define __pyx_n_s_BindFlags __pyx_mstate_global->__pyx_n_s_BindFlags
#define __pyx_n_s_BitBlt __pyx_mstate_global->__pyx_n_s_BitBlt
#define __pyx_n_s_BitBltCaptureMethod __pyx_mstate_global->__pyx_n_s_BitBltCaptureMethod
#define __pyx_n_s_BitBltCaptureMethod___reduce_cyt __pyx_mstate_global->__pyx_n_s_BitBltCaptureMethod___reduce_cyt
#define __pyx_n_s_BitBltCaptureMethod___setstate_c __pyx_mstate_global->__pyx_n_s_BitBltCaptureMethod___setstate_c
#define __pyx_n_s_BitBltCaptureMethod_do_get_frame __pyx_mstate_global->__pyx_n_s_BitBltCaptureMethod_do_get_frame
#define __pyx_n_s_BitBltCaptureMethod_test_exclusi __pyx_mstate_global->__pyx_n_s_BitBltCaptureMethod_test_exclusi
#define __pyx_n_s_BitBltCaptureMethod_test_is_not __pyx_mstate_global->__pyx_n_s_BitBltCaptureMethod_test_is_not
#define __pyx_n_s_Blue __pyx_mstate_global->__pyx_n_s_Blue
#define __pyx_n_s_COLOR_RGB2BGR __pyx_mstate_global->__pyx_n_s_COLOR_RGB2BGR
#define __pyx_n_s_CPUAccessFlags __pyx_mstate_global->__pyx_n_s_CPUAccessFlags
#define __pyx_n_s_CaptureException __pyx_mstate_global->__pyx_n_s_CaptureException
#define __pyx_n_s_Channels __pyx_mstate_global->__pyx_n_s_Channels
#define __pyx_n_s_ClientToScreen __pyx_mstate_global->__pyx_n_s_ClientToScreen
#define __pyx_n_s_Close __pyx_mstate_global->__pyx_n_s_Close
#define __pyx_n_s_ColorChannel __pyx_mstate_global->__pyx_n_s_ColorChannel
#define __pyx_n_s_Config __pyx_mstate_global->__pyx_n_s_Config
#define __pyx_n_s_ConfigOption __pyx_mstate_global->__pyx_n_s_ConfigOption
#define __pyx_n_s_ContentSize __pyx_mstate_global->__pyx_n_s_ContentSize
#define __pyx_n_s_CopyResource __pyx_mstate_global->__pyx_n_s_CopyResource
#define __pyx_n_s_CreateBitmap __pyx_mstate_global->__pyx_n_s_CreateBitmap
#define __pyx_n_s_CreateCaptureSession __pyx_mstate_global->__pyx_n_s_CreateCaptureSession
#define __pyx_n_s_CreateCompatibleBitmap __pyx_mstate_global->__pyx_n_s_CreateCompatibleBitmap
#define __pyx_n_s_CreateCompatibleDC __pyx_mstate_global->__pyx_n_s_CreateCompatibleDC
#define __pyx_n_s_CreateDCFromHandle __pyx_mstate_global->__pyx_n_s_CreateDCFromHandle
#define __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe __pyx_mstate_global->__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe
#define __pyx_n_s_CreateForWindow __pyx_mstate_global->__pyx_n_s_CreateForWindow
#define __pyx_n_s_CreateFreeThreaded __pyx_mstate_global->__pyx_n_s_CreateFreeThreaded
#define __pyx_n_s_CreateTexture2D __pyx_mstate_global->__pyx_n_s_CreateTexture2D
#define __pyx_n_s_D3D11CreateDevice __pyx_mstate_global->__pyx_n_s_D3D11CreateDevice
#define __pyx_n_s_D3D11_CPU_ACCESS_READ __pyx_mstate_global->__pyx_n_s_D3D11_CPU_ACCESS_READ
#define __pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT __pyx_mstate_global->__pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT
#define __pyx_n_s_D3D11_MAP_READ __pyx_mstate_global->__pyx_n_s_D3D11_MAP_READ
#define __pyx_n_s_D3D11_SDK_VERSION __pyx_mstate_global->__pyx_n_s_D3D11_SDK_VERSION
#define __pyx_n_s_D3D11_TEXTURE2D_DESC __pyx_mstate_global->__pyx_n_s_D3D11_TEXTURE2D_DESC
#define __pyx_n_s_D3D11_USAGE_STAGING __pyx_mstate_global->__pyx_n_s_D3D11_USAGE_STAGING
#define __pyx_n_s_D3D_DRIVER_TYPE_HARDWARE __pyx_mstate_global->__pyx_n_s_D3D_DRIVER_TYPE_HARDWARE
#define __pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS __pyx_mstate_global->__pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS
#define __pyx_n_s_DXGI_ERROR_DEVICE_REMOVED __pyx_mstate_global->__pyx_n_s_DXGI_ERROR_DEVICE_REMOVED
#define __pyx_n_s_DXGI_ERROR_DEVICE_RESET __pyx_mstate_global->__pyx_n_s_DXGI_ERROR_DEVICE_RESET
#define __pyx_n_s_DeleteDC __pyx_mstate_global->__pyx_n_s_DeleteDC
#define __pyx_n_s_DeleteObject __pyx_mstate_global->__pyx_n_s_DeleteObject
#define __pyx_n_s_DesktopDuplicationCaptureMethod __pyx_mstate_global->__pyx_n_s_DesktopDuplicationCaptureMethod
#define __pyx_n_s_DesktopDuplicationCaptureMethod_2 __pyx_mstate_global->__pyx_n_s_DesktopDuplicationCaptureMethod_2
#define __pyx_n_s_DesktopDuplicationCaptureMethod_3 __pyx_mstate_global->__pyx_n_s_DesktopDuplicationCaptureMethod_3
#define __pyx_n_s_DesktopDuplicationCaptureMethod_4 __pyx_mstate_global->__pyx_n_s_DesktopDuplicationCaptureMethod_4
#define __pyx_n_s_DesktopDuplicationCaptureMethod_5 __pyx_mstate_global->__pyx_n_s_DesktopDuplicationCaptureMethod_5
#define __pyx_n_s_DeviceManager __pyx_mstate_global->__pyx_n_s_DeviceManager
#define __pyx_n_s_DeviceManager___init __pyx_mstate_global->__pyx_n_s_DeviceManager___init
#define __pyx_n_s_DeviceManager_adb __pyx_mstate_global->__pyx_n_s_DeviceManager_adb
#define __pyx_n_s_DeviceManager_adb_check_in_front __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_check_in_front
#define __pyx_n_s_DeviceManager_adb_check_installe __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_check_installe
#define __pyx_n_s_DeviceManager_adb_connect __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_connect
#define __pyx_n_s_DeviceManager_adb_ensure_in_fron __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_ensure_in_fron
#define __pyx_n_s_DeviceManager_adb_get_imei __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_get_imei
#define __pyx_n_s_DeviceManager_adb_kill_server __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_kill_server
#define __pyx_n_s_DeviceManager_adb_start_package __pyx_mstate_global->__pyx_n_s_DeviceManager_adb_start_package
#define __pyx_n_s_DeviceManager_device __pyx_mstate_global->__pyx_n_s_DeviceManager_device
#define __pyx_n_s_DeviceManager_device_connected __pyx_mstate_global->__pyx_n_s_DeviceManager_device_connected
#define __pyx_n_s_DeviceManager_do_refresh __pyx_mstate_global->__pyx_n_s_DeviceManager_do_refresh
#define __pyx_n_s_DeviceManager_do_screencap __pyx_mstate_global->__pyx_n_s_DeviceManager_do_screencap
#define __pyx_n_s_DeviceManager_do_start __pyx_mstate_global->__pyx_n_s_DeviceManager_do_start
#define __pyx_n_s_DeviceManager_ensure_hwnd __pyx_mstate_global->__pyx_n_s_DeviceManager_ensure_hwnd
#define __pyx_n_s_DeviceManager_get_devices __pyx_mstate_global->__pyx_n_s_DeviceManager_get_devices
#define __pyx_n_s_DeviceManager_get_exe_path __pyx_mstate_global->__pyx_n_s_DeviceManager_get_exe_path
#define __pyx_n_s_DeviceManager_get_hwnd_name __pyx_mstate_global->__pyx_n_s_DeviceManager_get_hwnd_name
#define __pyx_n_s_DeviceManager_get_preferred_capt __pyx_mstate_global->__pyx_n_s_DeviceManager_get_preferred_capt
#define __pyx_n_s_DeviceManager_get_preferred_devi __pyx_mstate_global->__pyx_n_s_DeviceManager_get_preferred_devi
#define __pyx_n_s_DeviceManager_get_resolution __pyx_mstate_global->__pyx_n_s_DeviceManager_get_resolution
#define __pyx_n_s_DeviceManager_height __pyx_mstate_global->__pyx_n_s_DeviceManager_height
#define __pyx_n_s_DeviceManager_refresh __pyx_mstate_global->__pyx_n_s_DeviceManager_refresh
#define __pyx_n_s_DeviceManager_refresh_emulators __pyx_mstate_global->__pyx_n_s_DeviceManager_refresh_emulators
#define __pyx_n_s_DeviceManager_refresh_phones __pyx_mstate_global->__pyx_n_s_DeviceManager_refresh_phones
#define __pyx_n_s_DeviceManager_set_capture __pyx_mstate_global->__pyx_n_s_DeviceManager_set_capture
#define __pyx_n_s_DeviceManager_set_hwnd_name __pyx_mstate_global->__pyx_n_s_DeviceManager_set_hwnd_name
#define __pyx_n_s_DeviceManager_set_preferred_devi __pyx_mstate_global->__pyx_n_s_DeviceManager_set_preferred_devi
#define __pyx_n_s_DeviceManager_shell __pyx_mstate_global->__pyx_n_s_DeviceManager_shell
#define __pyx_n_s_DeviceManager_shell_device __pyx_mstate_global->__pyx_n_s_DeviceManager_shell_device
#define __pyx_n_s_DeviceManager_start __pyx_mstate_global->__pyx_n_s_DeviceManager_start
#define __pyx_n_s_DeviceManager_try_kill_adb __pyx_mstate_global->__pyx_n_s_DeviceManager_try_kill_adb
#define __pyx_n_s_DeviceManager_update_device_list __pyx_mstate_global->__pyx_n_s_DeviceManager_update_device_list
#define __pyx_n_s_DeviceManager_update_pc_device __pyx_mstate_global->__pyx_n_s_DeviceManager_update_pc_device
#define __pyx_n_s_DeviceManager_update_resolution __pyx_mstate_global->__pyx_n_s_DeviceManager_update_resolution
#define __pyx_n_s_DeviceManager_use_windows_captur __pyx_mstate_global->__pyx_n_s_DeviceManager_use_windows_captur
#define __pyx_n_s_DeviceManager_width __pyx_mstate_global->__pyx_n_s_DeviceManager_width
#define __pyx_kp_s_Device_is_none __pyx_mstate_global->__pyx_kp_s_Device_is_none
#define __pyx_n_s_Direct3D11CaptureFramePool __pyx_mstate_global->__pyx_n_s_Direct3D11CaptureFramePool
#define __pyx_kp_s_Direct3D_Desktop_Duplication __pyx_mstate_global->__pyx_kp_s_Direct3D_Desktop_Duplication
#define __pyx_n_s_DirectXPixelFormat __pyx_mstate_global->__pyx_n_s_DirectXPixelFormat
#define __pyx_kp_s_Display_not_found __pyx_mstate_global->__pyx_kp_s_Display_not_found
#define __pyx_kp_s_Duplicates_the_desktop_using_Di __pyx_mstate_global->__pyx_kp_s_Duplicates_the_desktop_using_Di
#define __pyx_n_s_DwmGetWindowAttribute __pyx_mstate_global->__pyx_n_s_DwmGetWindowAttribute
#define __pyx_n_s_EmulatorManager __pyx_mstate_global->__pyx_n_s_EmulatorManager
#define __pyx_n_s_EnumChildWindows __pyx_mstate_global->__pyx_n_s_EnumChildWindows
#define __pyx_n_s_EnumDisplayMonitors __pyx_mstate_global->__pyx_n_s_EnumDisplayMonitors
#define __pyx_n_s_EnumWindows __pyx_mstate_global->__pyx_n_s_EnumWindows
#define __pyx_n_s_Event __pyx_mstate_global->__pyx_n_s_Event
#define __pyx_kp_u_Failed_to_check_check_mumu_app_k __pyx_mstate_global->__pyx_kp_u_Failed_to_check_check_mumu_app_k
#define __pyx_kp_u_Failed_to_test_exclusive_full_sc __pyx_mstate_global->__pyx_kp_u_Failed_to_test_exclusive_full_sc
#define __pyx_kp_u_Failed_to_test_is_not_pure_color __pyx_mstate_global->__pyx_kp_u_Failed_to_test_is_not_pure_color
#define __pyx_kp_u_Failed_to_test_is_not_pure_color_2 __pyx_mstate_global->__pyx_kp_u_Failed_to_test_is_not_pure_color_2
#define __pyx_n_u_False __pyx_mstate_global->__pyx_n_u_False
#define __pyx_n_s_FileNotFoundError __pyx_mstate_global->__pyx_n_s_FileNotFoundError
#define __pyx_n_s_FluentIcon __pyx_mstate_global->__pyx_n_s_FluentIcon
#define __pyx_n_s_Format __pyx_mstate_global->__pyx_n_s_Format
#define __pyx_n_s_GUID __pyx_mstate_global->__pyx_n_s_GUID
#define __pyx_kp_s_Game_Sound __pyx_mstate_global->__pyx_kp_s_Game_Sound
#define __pyx_n_s_GetActivationFactory __pyx_mstate_global->__pyx_n_s_GetActivationFactory
#define __pyx_n_s_GetAllSessions __pyx_mstate_global->__pyx_n_s_GetAllSessions
#define __pyx_n_s_GetBitmapBits __pyx_mstate_global->__pyx_n_s_GetBitmapBits
#define __pyx_n_s_GetClassName __pyx_mstate_global->__pyx_n_s_GetClassName
#define __pyx_n_s_GetClientRect __pyx_mstate_global->__pyx_n_s_GetClientRect
#define __pyx_n_s_GetDesc __pyx_mstate_global->__pyx_n_s_GetDesc
#define __pyx_n_s_GetDpiForMonitor __pyx_mstate_global->__pyx_n_s_GetDpiForMonitor
#define __pyx_n_s_GetForegroundWindow __pyx_mstate_global->__pyx_n_s_GetForegroundWindow
#define __pyx_n_s_GetHandle __pyx_mstate_global->__pyx_n_s_GetHandle
#define __pyx_n_s_GetInterface __pyx_mstate_global->__pyx_n_s_GetInterface
#define __pyx_n_s_GetMonitorInfo __pyx_mstate_global->__pyx_n_s_GetMonitorInfo
#define __pyx_n_s_GetMute __pyx_mstate_global->__pyx_n_s_GetMute
#define __pyx_n_s_GetParent __pyx_mstate_global->__pyx_n_s_GetParent
#define __pyx_n_s_GetSafeHdc __pyx_mstate_global->__pyx_n_s_GetSafeHdc
#define __pyx_n_s_GetWindowDC __pyx_mstate_global->__pyx_n_s_GetWindowDC
#define __pyx_n_s_GetWindowRect __pyx_mstate_global->__pyx_n_s_GetWindowRect
#define __pyx_n_s_GetWindowText __pyx_mstate_global->__pyx_n_s_GetWindowText
#define __pyx_n_s_GetWindowThreadProcessId __pyx_mstate_global->__pyx_n_s_GetWindowThreadProcessId
#define __pyx_n_s_GraphicsCaptureItem __pyx_mstate_global->__pyx_n_s_GraphicsCaptureItem
#define __pyx_n_s_Green __pyx_mstate_global->__pyx_n_s_Green
#define __pyx_n_s_Handler __pyx_mstate_global->__pyx_n_s_Handler
#define __pyx_n_s_Height __pyx_mstate_global->__pyx_n_s_Height
#define __pyx_n_s_HwndWindow __pyx_mstate_global->__pyx_n_s_HwndWindow
#define __pyx_n_s_HwndWindow___reduce_cython __pyx_mstate_global->__pyx_n_s_HwndWindow___reduce_cython
#define __pyx_n_s_HwndWindow___setstate_cython __pyx_mstate_global->__pyx_n_s_HwndWindow___setstate_cython
#define __pyx_n_s_HwndWindow_do_update_window_size __pyx_mstate_global->__pyx_n_s_HwndWindow_do_update_window_size
#define __pyx_n_s_HwndWindow_frame_ratio __pyx_mstate_global->__pyx_n_s_HwndWindow_frame_ratio
#define __pyx_kp_u_HwndWindow_frame_ratio_width __pyx_mstate_global->__pyx_kp_u_HwndWindow_frame_ratio_width
#define __pyx_n_s_HwndWindow_get_abs_cords __pyx_mstate_global->__pyx_n_s_HwndWindow_get_abs_cords
#define __pyx_n_s_HwndWindow_handle_mute __pyx_mstate_global->__pyx_n_s_HwndWindow_handle_mute
#define __pyx_kp_u_HwndWindow_init_title __pyx_mstate_global->__pyx_kp_u_HwndWindow_init_title
#define __pyx_n_s_HwndWindow_stop __pyx_mstate_global->__pyx_n_s_HwndWindow_stop
#define __pyx_n_s_HwndWindow_update_frame_size __pyx_mstate_global->__pyx_n_s_HwndWindow_update_frame_size
#define __pyx_n_s_HwndWindow_update_window __pyx_mstate_global->__pyx_n_s_HwndWindow_update_window
#define __pyx_n_s_HwndWindow_update_window_size __pyx_mstate_global->__pyx_n_s_HwndWindow_update_window_size
#define __pyx_n_s_HwndWindow_validate_mute_config __pyx_mstate_global->__pyx_n_s_HwndWindow_validate_mute_config
#define __pyx_n_s_ID3D11Device __pyx_mstate_global->__pyx_n_s_ID3D11Device
#define __pyx_n_s_ID3D11DeviceContext __pyx_mstate_global->__pyx_n_s_ID3D11DeviceContext
#define __pyx_n_s_ID3D11Texture2D __pyx_mstate_global->__pyx_n_s_ID3D11Texture2D
#define __pyx_n_s_IDirect3DDevice __pyx_mstate_global->__pyx_n_s_IDirect3DDevice
#define __pyx_n_s_IDirect3DDxgiInterfaceAccess __pyx_mstate_global->__pyx_n_s_IDirect3DDxgiInterfaceAccess
#define __pyx_n_s_IGraphicsCaptureItem __pyx_mstate_global->__pyx_n_s_IGraphicsCaptureItem
#define __pyx_n_s_IGraphicsCaptureItemInterop __pyx_mstate_global->__pyx_n_s_IGraphicsCaptureItemInterop
#define __pyx_n_s_IInspectable __pyx_mstate_global->__pyx_n_s_IInspectable
#define __pyx_n_s_IMREAD_COLOR __pyx_mstate_global->__pyx_n_s_IMREAD_COLOR
#define __pyx_n_s_IMREAD_UNCHANGED __pyx_mstate_global->__pyx_n_s_IMREAD_UNCHANGED
#define __pyx_n_s_ISimpleAudioVolume __pyx_mstate_global->__pyx_n_s_ISimpleAudioVolume
#define __pyx_n_s_ImageCaptureMethod __pyx_mstate_global->__pyx_n_s_ImageCaptureMethod
#define __pyx_n_s_ImageCaptureMethod___reduce_cyth __pyx_mstate_global->__pyx_n_s_ImageCaptureMethod___reduce_cyth
#define __pyx_n_s_ImageCaptureMethod___setstate_cy __pyx_mstate_global->__pyx_n_s_ImageCaptureMethod___setstate_cy
#define __pyx_n_s_ImageCaptureMethod_connected __pyx_mstate_global->__pyx_n_s_ImageCaptureMethod_connected
#define __pyx_n_s_ImageCaptureMethod_do_get_frame __pyx_mstate_global->__pyx_n_s_ImageCaptureMethod_do_get_frame
#define __pyx_n_s_ImageCaptureMethod_set_images __pyx_mstate_global->__pyx_n_s_ImageCaptureMethod_set_images
#define __pyx_n_s_ImageShape __pyx_mstate_global->__pyx_n_s_ImageShape
#define __pyx_kp_s_Image_capture_method __pyx_mstate_global->__pyx_kp_s_Image_capture_method
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8
#define __pyx_n_s_IntEnum __pyx_mstate_global->__pyx_n_s_IntEnum
#define __pyx_n_s_IsBorderRequired __pyx_mstate_global->__pyx_n_s_IsBorderRequired
#define __pyx_n_s_IsCursorCaptureEnabled __pyx_mstate_global->__pyx_n_s_IsCursorCaptureEnabled
#define __pyx_n_s_IsIconic __pyx_mstate_global->__pyx_n_s_IsIconic
#define __pyx_n_s_IsWindow __pyx_mstate_global->__pyx_n_s_IsWindow
#define __pyx_n_s_IsWindowEnabled __pyx_mstate_global->__pyx_n_s_IsWindowEnabled
#define __pyx_n_s_IsWindowVisible __pyx_mstate_global->__pyx_n_s_IsWindowVisible
#define __pyx_kp_s_It_can_record_OpenGL_and_Hardwa __pyx_mstate_global->__pyx_kp_s_It_can_record_OpenGL_and_Hardwa
#define __pyx_n_s_Lock __pyx_mstate_global->__pyx_n_s_Lock
#define __pyx_n_s_MAXBYTE __pyx_mstate_global->__pyx_n_s_MAXBYTE
#define __pyx_n_s_MDT_EFFECTIVE_DPI __pyx_mstate_global->__pyx_n_s_MDT_EFFECTIVE_DPI
#define __pyx_n_s_MONITOR_DEFAULTTONEAREST __pyx_mstate_global->__pyx_n_s_MONITOR_DEFAULTTONEAREST
#define __pyx_n_s_MUTE __pyx_mstate_global->__pyx_n_s_MUTE
#define __pyx_n_s_Map __pyx_mstate_global->__pyx_n_s_Map
#define __pyx_n_s_MipLevels __pyx_mstate_global->__pyx_n_s_MipLevels
#define __pyx_n_s_MiscFlags __pyx_mstate_global->__pyx_n_s_MiscFlags
#define __pyx_n_s_Monitor __pyx_mstate_global->__pyx_n_s_Monitor
#define __pyx_n_s_MonitorFromWindow __pyx_mstate_global->__pyx_n_s_MonitorFromWindow
#define __pyx_kp_s_Mute_Game_while_in_Background __pyx_mstate_global->__pyx_kp_s_Mute_Game_while_in_Background
#define __pyx_n_s_NemuIpcCaptureMethod __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod
#define __pyx_n_s_NemuIpcCaptureMethod___reduce_cy __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod___reduce_cy
#define __pyx_n_s_NemuIpcCaptureMethod___setstate __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod___setstate
#define __pyx_n_s_NemuIpcCaptureMethod_base_folder __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_base_folder
#define __pyx_n_s_NemuIpcCaptureMethod_check_mumu __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_check_mumu
#define __pyx_n_s_NemuIpcCaptureMethod_close __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_close
#define __pyx_n_s_NemuIpcCaptureMethod_connected __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_connected
#define __pyx_n_s_NemuIpcCaptureMethod_do_get_fram __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_do_get_fram
#define __pyx_n_s_NemuIpcCaptureMethod_init_nemu __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_init_nemu
#define __pyx_n_s_NemuIpcCaptureMethod_update_emul __pyx_mstate_global->__pyx_n_s_NemuIpcCaptureMethod_update_emul
#define __pyx_n_s_NemuIpcImpl __pyx_mstate_global->__pyx_n_s_NemuIpcImpl
#define __pyx_kp_s_Nemu_Ipc_Capture __pyx_mstate_global->__pyx_kp_s_Nemu_Ipc_Capture
#define __pyx_n_s_None __pyx_mstate_global->__pyx_n_s_None
#define __pyx_n_s_OSError __pyx_mstate_global->__pyx_n_s_OSError
#define __pyx_kp_s_OpenGL_Hardware_Accelerated_or __pyx_mstate_global->__pyx_kp_s_OpenGL_Hardware_Accelerated_or
#define __pyx_kp_s_Overlapping_windows_will_show_u __pyx_mstate_global->__pyx_kp_s_Overlapping_windows_will_show_u
#define __pyx_n_s_PBYTE __pyx_mstate_global->__pyx_n_s_PBYTE
#define __pyx_n_s_POINTER __pyx_mstate_global->__pyx_n_s_POINTER
#define __pyx_n_s_PW_RENDERFULLCONTENT __pyx_mstate_global->__pyx_n_s_PW_RENDERFULLCONTENT
#define __pyx_kp_s_Paused_because_game_exited __pyx_mstate_global->__pyx_kp_s_Paused_because_game_exited
#define __pyx_kp_s_Paused_because_game_window_is_mi __pyx_mstate_global->__pyx_kp_s_Paused_because_game_window_is_mi
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_kp_s_Please_turn_off_enable_backgroun __pyx_mstate_global->__pyx_kp_s_Please_turn_off_enable_backgroun
#define __pyx_n_s_PostMessage __pyx_mstate_global->__pyx_n_s_PostMessage
#define __pyx_n_s_PostMessageInteraction __pyx_mstate_global->__pyx_n_s_PostMessageInteraction
#define __pyx_n_s_PrintWindow __pyx_mstate_global->__pyx_n_s_PrintWindow
#define __pyx_n_s_Process __pyx_mstate_global->__pyx_n_s_Process
#define __pyx_n_s_PyDirectInteraction __pyx_mstate_global->__pyx_n_s_PyDirectInteraction
#define __pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture __pyx_mstate_global->__pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture
#define __pyx_n_s_QueryInterface __pyx_mstate_global->__pyx_n_s_QueryInterface
#define __pyx_n_s_RECT __pyx_mstate_global->__pyx_n_s_RECT
#define __pyx_n_s_Recreate __pyx_mstate_global->__pyx_n_s_Recreate
#define __pyx_n_s_Red __pyx_mstate_global->__pyx_n_s_Red
#define __pyx_n_s_RefreshAdb __pyx_mstate_global->__pyx_n_s_RefreshAdb
#define __pyx_n_s_Release __pyx_mstate_global->__pyx_n_s_Release
#define __pyx_n_s_ReleaseDC __pyx_mstate_global->__pyx_n_s_ReleaseDC
#define __pyx_n_s_RowPitch __pyx_mstate_global->__pyx_n_s_RowPitch
#define __pyx_n_s_SRCCOPY __pyx_mstate_global->__pyx_n_s_SRCCOPY
#define __pyx_n_s_SampleDesc __pyx_mstate_global->__pyx_n_s_SampleDesc
#define __pyx_kp_u_Screencap_image_decode_error_pro __pyx_mstate_global->__pyx_kp_u_Screencap_image_decode_error_pro
#define __pyx_n_s_SelectObject __pyx_mstate_global->__pyx_n_s_SelectObject
#define __pyx_n_s_SetMute __pyx_mstate_global->__pyx_n_s_SetMute
#define __pyx_n_s_Size __pyx_mstate_global->__pyx_n_s_Size
#define __pyx_n_s_StartCapture __pyx_mstate_global->__pyx_n_s_StartCapture
#define __pyx_n_s_Surface __pyx_mstate_global->__pyx_n_s_Surface
#define __pyx_kp_s_The_best_option_when_compatible __pyx_mstate_global->__pyx_kp_s_The_best_option_when_compatible
#define __pyx_kp_s_The_smaller_the_selected_region __pyx_mstate_global->__pyx_kp_s_The_smaller_the_selected_region
#define __pyx_kp_s_This_option_may_not_be_availabl __pyx_mstate_global->__pyx_kp_s_This_option_may_not_be_availabl
#define __pyx_n_s_Thread __pyx_mstate_global->__pyx_n_s_Thread
#define __pyx_n_u_True __pyx_mstate_global->__pyx_n_u_True
#define __pyx_n_s_TryGetNextFrame __pyx_mstate_global->__pyx_n_s_TryGetNextFrame
#define __pyx_kp_u_TryGetNextFrame_error __pyx_mstate_global->__pyx_kp_u_TryGetNextFrame_error
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_TypedEventHandler __pyx_mstate_global->__pyx_n_s_TypedEventHandler
#define __pyx_n_s_Unmap __pyx_mstate_global->__pyx_n_s_Unmap
#define __pyx_n_s_Usage __pyx_mstate_global->__pyx_n_s_Usage
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_WGC_MIN_BUILD __pyx_mstate_global->__pyx_n_s_WGC_MIN_BUILD
#define __pyx_n_s_WGC_NO_BORDER_MIN_BUILD __pyx_mstate_global->__pyx_n_s_WGC_NO_BORDER_MIN_BUILD
#define __pyx_n_s_WINDOWS_BUILD_NUMBER __pyx_mstate_global->__pyx_n_s_WINDOWS_BUILD_NUMBER
#define __pyx_n_s_Width __pyx_mstate_global->__pyx_n_s_Width
#define __pyx_n_s_WinDLL __pyx_mstate_global->__pyx_n_s_WinDLL
#define __pyx_n_s_WindowsGraphicsCaptureMethod __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod
#define __pyx_n_s_WindowsGraphicsCaptureMethod___r __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod___r
#define __pyx_n_s_WindowsGraphicsCaptureMethod___s __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod___s
#define __pyx_n_s_WindowsGraphicsCaptureMethod_clo __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_clo
#define __pyx_n_s_WindowsGraphicsCaptureMethod_con __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_con
#define __pyx_n_s_WindowsGraphicsCaptureMethod_cre __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_cre
#define __pyx_n_s_WindowsGraphicsCaptureMethod_cro __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_cro
#define __pyx_n_s_WindowsGraphicsCaptureMethod_do __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_do
#define __pyx_n_s_WindowsGraphicsCaptureMethod_res __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_res
#define __pyx_n_s_WindowsGraphicsCaptureMethod_sta __pyx_mstate_global->__pyx_n_s_WindowsGraphicsCaptureMethod_sta
#define __pyx_kp_s_Windows_Graphics_Capture __pyx_mstate_global->__pyx_kp_s_Windows_Graphics_Capture
#define __pyx_kp_s_Windows_Graphics_Capture_Graphic __pyx_mstate_global->__pyx_kp_s_Windows_Graphics_Capture_Graphic
#define __pyx_n_s_X __pyx_mstate_global->__pyx_n_s_X
#define __pyx_n_s_Y __pyx_mstate_global->__pyx_n_s_Y
#define __pyx_kp_u__10 __pyx_mstate_global->__pyx_kp_u__10
#define __pyx_kp_u__11 __pyx_mstate_global->__pyx_kp_u__11
#define __pyx_kp_s__12 __pyx_mstate_global->__pyx_kp_s__12
#define __pyx_kp_u__14 __pyx_mstate_global->__pyx_kp_u__14
#define __pyx_kp_u__17 __pyx_mstate_global->__pyx_kp_u__17
#define __pyx_n_s__24 __pyx_mstate_global->__pyx_n_s__24
#define __pyx_n_s__251 __pyx_mstate_global->__pyx_n_s__251
#define __pyx_kp_s__28 __pyx_mstate_global->__pyx_kp_s__28
#define __pyx_n_s__7 __pyx_mstate_global->__pyx_n_s__7
#define __pyx_n_u__7 __pyx_mstate_global->__pyx_n_u__7
#define __pyx_kp_s__8 __pyx_mstate_global->__pyx_kp_s__8
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_n_s_abspath __pyx_mstate_global->__pyx_n_s_abspath
#define __pyx_n_s_adb __pyx_mstate_global->__pyx_n_s_adb
#define __pyx_n_s_adb_2 __pyx_mstate_global->__pyx_n_s_adb_2
#define __pyx_n_s_adb_capture_config __pyx_mstate_global->__pyx_n_s_adb_capture_config
#define __pyx_kp_u_adb_check_in_front __pyx_mstate_global->__pyx_kp_u_adb_check_in_front
#define __pyx_n_s_adb_check_in_front_2 __pyx_mstate_global->__pyx_n_s_adb_check_in_front_2
#define __pyx_n_s_adb_check_installed __pyx_mstate_global->__pyx_n_s_adb_check_installed
#define __pyx_n_s_adb_connect __pyx_mstate_global->__pyx_n_s_adb_connect
#define __pyx_kp_u_adb_connect_2 __pyx_mstate_global->__pyx_kp_u_adb_connect_2
#define __pyx_kp_u_adb_connect_already_connected __pyx_mstate_global->__pyx_kp_u_adb_connect_already_connected
#define __pyx_kp_u_adb_connect_emulator_result __pyx_mstate_global->__pyx_kp_u_adb_connect_emulator_result
#define __pyx_kp_u_adb_connect_error __pyx_mstate_global->__pyx_kp_u_adb_connect_error
#define __pyx_kp_u_adb_connect_error_return_none __pyx_mstate_global->__pyx_kp_u_adb_connect_error_return_none
#define __pyx_kp_u_adb_connect_exit_event_is_set __pyx_mstate_global->__pyx_kp_u_adb_connect_exit_event_is_set
#define __pyx_kp_u_adb_connect_offline_disconnect_f __pyx_mstate_global->__pyx_kp_u_adb_connect_offline_disconnect_f
#define __pyx_kp_u_adb_connect_try_connect __pyx_mstate_global->__pyx_kp_u_adb_connect_try_connect
#define __pyx_n_s_adb_device __pyx_mstate_global->__pyx_n_s_adb_device
#define __pyx_n_s_adb_devices __pyx_mstate_global->__pyx_n_s_adb_devices
#define __pyx_kp_u_adb_ensure_in_front __pyx_mstate_global->__pyx_kp_u_adb_ensure_in_front
#define __pyx_n_s_adb_ensure_in_front_2 __pyx_mstate_global->__pyx_n_s_adb_ensure_in_front_2
#define __pyx_kp_s_adb_exe __pyx_mstate_global->__pyx_kp_s_adb_exe
#define __pyx_n_s_adb_get_imei __pyx_mstate_global->__pyx_n_s_adb_get_imei
#define __pyx_n_s_adb_imei __pyx_mstate_global->__pyx_n_s_adb_imei
#define __pyx_kp_s_adb_kill_server __pyx_mstate_global->__pyx_kp_s_adb_kill_server
#define __pyx_n_s_adb_kill_server_2 __pyx_mstate_global->__pyx_n_s_adb_kill_server_2
#define __pyx_n_s_adb_lock __pyx_mstate_global->__pyx_n_s_adb_lock
#define __pyx_kp_u_adb_shell_error_maybe_offline __pyx_mstate_global->__pyx_kp_u_adb_shell_error_maybe_offline
#define __pyx_n_s_adb_start_package __pyx_mstate_global->__pyx_n_s_adb_start_package
#define __pyx_n_s_adbutils __pyx_mstate_global->__pyx_n_s_adbutils
#define __pyx_n_s_adbutils__utils __pyx_mstate_global->__pyx_n_s_adbutils__utils
#define __pyx_n_s_add_Closed __pyx_mstate_global->__pyx_n_s_add_Closed
#define __pyx_n_s_add_FrameArrived __pyx_mstate_global->__pyx_n_s_add_FrameArrived
#define __pyx_n_s_addr __pyx_mstate_global->__pyx_n_s_addr
#define __pyx_n_s_address __pyx_mstate_global->__pyx_n_s_address
#define __pyx_n_s_all_emulator_instances __pyx_mstate_global->__pyx_n_s_all_emulator_instances
#define __pyx_n_s_any __pyx_mstate_global->__pyx_n_s_any
#define __pyx_n_s_app_config __pyx_mstate_global->__pyx_n_s_app_config
#define __pyx_n_s_app_current __pyx_mstate_global->__pyx_n_s_app_current
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_as_array __pyx_mstate_global->__pyx_n_s_as_array
#define __pyx_n_s_astype __pyx_mstate_global->__pyx_n_s_astype
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_base_folder __pyx_mstate_global->__pyx_n_s_base_folder
#define __pyx_n_s_biggest __pyx_mstate_global->__pyx_n_s_biggest
#define __pyx_n_s_bin_dir __pyx_mstate_global->__pyx_n_s_bin_dir
#define __pyx_n_s_bit_blt_render_full __pyx_mstate_global->__pyx_n_s_bit_blt_render_full
#define __pyx_n_s_border __pyx_mstate_global->__pyx_n_s_border
#define __pyx_n_s_byref __pyx_mstate_global->__pyx_n_s_byref
#define __pyx_kp_u_c_android_intent_category_LAUNC __pyx_mstate_global->__pyx_kp_u_c_android_intent_category_LAUNC
#define __pyx_n_s_c_ubyte __pyx_mstate_global->__pyx_n_s_c_ubyte
#define __pyx_n_s_c_uint __pyx_mstate_global->__pyx_n_s_c_uint
#define __pyx_n_s_calculate_pc_exe_path __pyx_mstate_global->__pyx_n_s_calculate_pc_exe_path
#define __pyx_kp_u_calculate_pc_exe_path_2 __pyx_mstate_global->__pyx_kp_u_calculate_pc_exe_path_2
#define __pyx_n_s_callback __pyx_mstate_global->__pyx_n_s_callback
#define __pyx_kp_s_calling_refresh __pyx_mstate_global->__pyx_kp_s_calling_refresh
#define __pyx_n_s_can_bit_blt __pyx_mstate_global->__pyx_n_s_can_bit_blt
#define __pyx_kp_u_cant_find_a_usable_windows_captu __pyx_mstate_global->__pyx_kp_u_cant_find_a_usable_windows_captu
#define __pyx_n_s_capture __pyx_mstate_global->__pyx_n_s_capture
#define __pyx_n_s_capture_cursor __pyx_mstate_global->__pyx_n_s_capture_cursor
#define __pyx_n_s_capture_method __pyx_mstate_global->__pyx_n_s_capture_method
#define __pyx_kp_u_capture_method_2 __pyx_mstate_global->__pyx_kp_u_capture_method_2
#define __pyx_n_s_capture_output __pyx_mstate_global->__pyx_n_s_capture_output
#define __pyx_n_s_cast __pyx_mstate_global->__pyx_n_s_cast
#define __pyx_n_s_cfunc_to_py __pyx_mstate_global->__pyx_n_s_cfunc_to_py
#define __pyx_n_s_changed __pyx_mstate_global->__pyx_n_s_changed
#define __pyx_kp_u_check_available_WINDOWS_BUILD_NU __pyx_mstate_global->__pyx_kp_u_check_available_WINDOWS_BUILD_NU
#define __pyx_kp_u_check_available_failed __pyx_mstate_global->__pyx_kp_u_check_available_failed
#define __pyx_kp_u_check_connected __pyx_mstate_global->__pyx_kp_u_check_connected
#define __pyx_n_s_check_mumu_app_keep_alive_400 __pyx_mstate_global->__pyx_n_s_check_mumu_app_keep_alive_400
#define __pyx_n_s_check_pos __pyx_mstate_global->__pyx_n_s_check_pos
#define __pyx_n_s_child_callback __pyx_mstate_global->__pyx_n_s_child_callback
#define __pyx_n_s_class __pyx_mstate_global->__pyx_n_s_class
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_class_name __pyx_mstate_global->__pyx_n_s_class_name
#define __pyx_n_s_clickable __pyx_mstate_global->__pyx_n_s_clickable
#define __pyx_n_s_client_height __pyx_mstate_global->__pyx_n_s_client_height
#define __pyx_n_s_client_width __pyx_mstate_global->__pyx_n_s_client_width
#define __pyx_n_s_client_x __pyx_mstate_global->__pyx_n_s_client_x
#define __pyx_n_s_client_y __pyx_mstate_global->__pyx_n_s_client_y
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_cmdline __pyx_mstate_global->__pyx_n_s_cmdline
#define __pyx_n_s_communicate __pyx_mstate_global->__pyx_n_s_communicate
#define __pyx_n_s_config __pyx_mstate_global->__pyx_n_s_config
#define __pyx_kp_u_configs_customer_config_json __pyx_mstate_global->__pyx_kp_u_configs_customer_config_json
#define __pyx_n_s_connect __pyx_mstate_global->__pyx_n_s_connect
#define __pyx_n_s_connected __pyx_mstate_global->__pyx_n_s_connected
#define __pyx_n_s_connected_device __pyx_mstate_global->__pyx_n_s_connected_device
#define __pyx_kp_s_convert_dx_frame_win_error __pyx_mstate_global->__pyx_kp_s_convert_dx_frame_win_error
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_s_create __pyx_mstate_global->__pyx_n_s_create
#define __pyx_n_s_create_device __pyx_mstate_global->__pyx_n_s_create_device
#define __pyx_n_s_crop_image __pyx_mstate_global->__pyx_n_s_crop_image
#define __pyx_n_s_cropped_image __pyx_mstate_global->__pyx_n_s_cropped_image
#define __pyx_n_s_cropped_window_height __pyx_mstate_global->__pyx_n_s_cropped_window_height
#define __pyx_n_s_ctl __pyx_mstate_global->__pyx_n_s_ctl
#define __pyx_n_s_ctypes __pyx_mstate_global->__pyx_n_s_ctypes
#define __pyx_n_s_ctypeslib __pyx_mstate_global->__pyx_n_s_ctypeslib
#define __pyx_n_s_current __pyx_mstate_global->__pyx_n_s_current
#define __pyx_kp_s_customer_app_keptlive __pyx_mstate_global->__pyx_kp_s_customer_app_keptlive
#define __pyx_kp_u_customer_app_keptlive_2 __pyx_mstate_global->__pyx_kp_u_customer_app_keptlive_2
#define __pyx_n_s_cv2 __pyx_mstate_global->__pyx_n_s_cv2
#define __pyx_n_s_cvtColor __pyx_mstate_global->__pyx_n_s_cvtColor
#define __pyx_n_s_d __pyx_mstate_global->__pyx_n_s_d
#define __pyx_n_s_d3d11 __pyx_mstate_global->__pyx_n_s_d3d11
#define __pyx_n_s_d3dshot __pyx_mstate_global->__pyx_n_s_d3dshot
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_dc __pyx_mstate_global->__pyx_n_s_dc
#define __pyx_n_s_debug __pyx_mstate_global->__pyx_n_s_debug
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_deep_get __pyx_mstate_global->__pyx_n_s_deep_get
#define __pyx_n_s_default __pyx_mstate_global->__pyx_n_s_default
#define __pyx_n_s_delegate __pyx_mstate_global->__pyx_n_s_delegate
#define __pyx_n_s_denominator __pyx_mstate_global->__pyx_n_s_denominator
#define __pyx_n_s_description __pyx_mstate_global->__pyx_n_s_description
#define __pyx_kp_s_destroy_windows_capture __pyx_mstate_global->__pyx_kp_s_destroy_windows_capture
#define __pyx_n_s_device __pyx_mstate_global->__pyx_n_s_device
#define __pyx_n_s_device_2 __pyx_mstate_global->__pyx_n_s_device_2
#define __pyx_n_s_device_connected __pyx_mstate_global->__pyx_n_s_device_connected
#define __pyx_kp_u_device_connected_check_device_st __pyx_mstate_global->__pyx_kp_u_device_connected_check_device_st
#define __pyx_kp_u_device_connected_error_occurred __pyx_mstate_global->__pyx_kp_u_device_connected_error_occurred
#define __pyx_n_s_device_dict __pyx_mstate_global->__pyx_n_s_device_dict
#define __pyx_n_s_device_list __pyx_mstate_global->__pyx_n_s_device_list
#define __pyx_n_s_device_manager __pyx_mstate_global->__pyx_n_s_device_manager
#define __pyx_n_s_devices __pyx_mstate_global->__pyx_n_s_devices
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_n_s_difference __pyx_mstate_global->__pyx_n_s_difference
#define __pyx_n_s_dirname __pyx_mstate_global->__pyx_n_s_dirname
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_disconnect __pyx_mstate_global->__pyx_n_s_disconnect
#define __pyx_n_s_display __pyx_mstate_global->__pyx_n_s_display
#define __pyx_n_s_display_id __pyx_mstate_global->__pyx_n_s_display_id
#define __pyx_n_s_displays __pyx_mstate_global->__pyx_n_s_displays
#define __pyx_n_s_do_get_frame __pyx_mstate_global->__pyx_n_s_do_get_frame
#define __pyx_n_s_do_refresh __pyx_mstate_global->__pyx_n_s_do_refresh
#define __pyx_n_s_do_screencap __pyx_mstate_global->__pyx_n_s_do_screencap
#define __pyx_n_s_do_start __pyx_mstate_global->__pyx_n_s_do_start
#define __pyx_n_u_do_start __pyx_mstate_global->__pyx_n_u_do_start
#define __pyx_kp_u_do_start_use_windows_capture __pyx_mstate_global->__pyx_kp_u_do_start_use_windows_capture
#define __pyx_n_s_do_update_window_size __pyx_mstate_global->__pyx_n_s_do_update_window_size
#define __pyx_kp_u_do_update_window_size_changed_vi __pyx_mstate_global->__pyx_kp_u_do_update_window_size_changed_vi
#define __pyx_kp_u_do_update_window_size_exception __pyx_mstate_global->__pyx_kp_u_do_update_window_size_exception
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_dpiX __pyx_mstate_global->__pyx_n_s_dpiX
#define __pyx_n_s_dpiY __pyx_mstate_global->__pyx_n_s_dpiY
#define __pyx_n_s_draw_rectangle __pyx_mstate_global->__pyx_n_s_draw_rectangle
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_dwmapi __pyx_mstate_global->__pyx_n_s_dwmapi
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_kp_s_echo_1 __pyx_mstate_global->__pyx_kp_s_echo_1
#define __pyx_n_s_emit __pyx_mstate_global->__pyx_n_s_emit
#define __pyx_n_s_emulator __pyx_mstate_global->__pyx_n_s_emulator
#define __pyx_n_s_emulator_device __pyx_mstate_global->__pyx_n_s_emulator_device
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encoding __pyx_mstate_global->__pyx_n_s_encoding
#define __pyx_n_s_ensure_hwnd __pyx_mstate_global->__pyx_n_s_ensure_hwnd
#define __pyx_n_s_enter __pyx_mstate_global->__pyx_n_s_enter
#define __pyx_n_s_enum __pyx_mstate_global->__pyx_n_s_enum
#define __pyx_n_s_enum_child_windows __pyx_mstate_global->__pyx_n_s_enum_child_windows
#define __pyx_n_s_enum_child_windows_locals_child __pyx_mstate_global->__pyx_n_s_enum_child_windows_locals_child
#define __pyx_n_s_environ __pyx_mstate_global->__pyx_n_s_environ
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_exception __pyx_mstate_global->__pyx_n_s_exception
#define __pyx_n_s_exe __pyx_mstate_global->__pyx_n_s_exe
#define __pyx_n_s_exe_name __pyx_mstate_global->__pyx_n_s_exe_name
#define __pyx_kp_u_exe_name_2 __pyx_mstate_global->__pyx_kp_u_exe_name_2
#define __pyx_n_s_executor __pyx_mstate_global->__pyx_n_s_executor
#define __pyx_n_s_exists __pyx_mstate_global->__pyx_n_s_exists
#define __pyx_n_s_exit __pyx_mstate_global->__pyx_n_s_exit
#define __pyx_n_s_exit_event __pyx_mstate_global->__pyx_n_s_exit_event
#define __pyx_kp_u_exit_reset_mute_state_to_0 __pyx_mstate_global->__pyx_kp_u_exit_reset_mute_state_to_0
#define __pyx_n_s_extended_frame_bounds __pyx_mstate_global->__pyx_n_s_extended_frame_bounds
#define __pyx_n_s_f __pyx_mstate_global->__pyx_n_s_f
#define __pyx_kp_s_fast_most_compatible_capped_at_6 __pyx_mstate_global->__pyx_kp_s_fast_most_compatible_capped_at_6
#define __pyx_kp_s_fastest_least_compatible __pyx_mstate_global->__pyx_kp_s_fastest_least_compatible
#define __pyx_n_s_file __pyx_mstate_global->__pyx_n_s_file
#define __pyx_n_s_find_hwnd __pyx_mstate_global->__pyx_n_s_find_hwnd
#define __pyx_kp_u_find_hwnd_2 __pyx_mstate_global->__pyx_kp_u_find_hwnd_2
#define __pyx_kp_u_find_hwnd_child_callback __pyx_mstate_global->__pyx_kp_u_find_hwnd_child_callback
#define __pyx_n_s_find_hwnd_locals_callback __pyx_mstate_global->__pyx_n_s_find_hwnd_locals_callback
#define __pyx_kp_u_first_start_use_first_or_connect __pyx_mstate_global->__pyx_kp_u_first_start_use_first_or_connect
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_kp_s_for_debugging __pyx_mstate_global->__pyx_kp_s_for_debugging
#define __pyx_n_s_found __pyx_mstate_global->__pyx_n_s_found
#define __pyx_kp_u_found_hwnd __pyx_mstate_global->__pyx_kp_u_found_hwnd
#define __pyx_n_s_frame __pyx_mstate_global->__pyx_n_s_frame
#define __pyx_kp_s_frame_arrived_callback_TryGetNex __pyx_mstate_global->__pyx_kp_s_frame_arrived_callback_TryGetNex
#define __pyx_n_s_frame_aspect_ratio __pyx_mstate_global->__pyx_n_s_frame_aspect_ratio
#define __pyx_n_s_frame_height __pyx_mstate_global->__pyx_n_s_frame_height
#define __pyx_n_s_frame_ratio __pyx_mstate_global->__pyx_n_s_frame_ratio
#define __pyx_n_s_frame_width __pyx_mstate_global->__pyx_n_s_frame_width
#define __pyx_n_s_frombuffer __pyx_mstate_global->__pyx_n_s_frombuffer
#define __pyx_n_s_fromfile __pyx_mstate_global->__pyx_n_s_fromfile
#define __pyx_n_s_front __pyx_mstate_global->__pyx_n_s_front
#define __pyx_n_s_full_path __pyx_mstate_global->__pyx_n_s_full_path
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_get_abs_cords __pyx_mstate_global->__pyx_n_s_get_abs_cords
#define __pyx_n_s_get_bin_dir __pyx_mstate_global->__pyx_n_s_get_bin_dir
#define __pyx_n_s_get_capture __pyx_mstate_global->__pyx_n_s_get_capture
#define __pyx_n_s_get_config __pyx_mstate_global->__pyx_n_s_get_config
#define __pyx_n_s_get_crop_point __pyx_mstate_global->__pyx_n_s_get_crop_point
#define __pyx_kp_u_get_device_adb_device_addr_chang __pyx_mstate_global->__pyx_kp_u_get_device_adb_device_addr_chang
#define __pyx_kp_u_get_device_connect __pyx_mstate_global->__pyx_kp_u_get_device_connect
#define __pyx_n_s_get_devices __pyx_mstate_global->__pyx_n_s_get_devices
#define __pyx_n_s_get_emulator_exe __pyx_mstate_global->__pyx_n_s_get_emulator_exe
#define __pyx_n_s_get_exe_by_hwnd __pyx_mstate_global->__pyx_n_s_get_exe_by_hwnd
#define __pyx_kp_s_get_exe_by_hwnd_error __pyx_mstate_global->__pyx_kp_s_get_exe_by_hwnd_error
#define __pyx_n_s_get_exe_path __pyx_mstate_global->__pyx_n_s_get_exe_path
#define __pyx_n_s_get_frame __pyx_mstate_global->__pyx_n_s_get_frame
#define __pyx_kp_u_get_frame_size_0 __pyx_mstate_global->__pyx_kp_u_get_frame_size_0
#define __pyx_n_s_get_hwnd_name __pyx_mstate_global->__pyx_n_s_get_hwnd_name
#define __pyx_n_s_get_logger __pyx_mstate_global->__pyx_n_s_get_logger
#define __pyx_n_s_get_monitors_bounds __pyx_mstate_global->__pyx_n_s_get_monitors_bounds
#define __pyx_n_s_get_mute_state __pyx_mstate_global->__pyx_n_s_get_mute_state
#define __pyx_n_s_get_player_id_from_cmdline __pyx_mstate_global->__pyx_n_s_get_player_id_from_cmdline
#define __pyx_n_s_get_preferred_capture __pyx_mstate_global->__pyx_n_s_get_preferred_capture
#define __pyx_n_s_get_preferred_device __pyx_mstate_global->__pyx_n_s_get_preferred_device
#define __pyx_n_s_get_resolution __pyx_mstate_global->__pyx_n_s_get_resolution
#define __pyx_n_s_get_win_graphics_capture __pyx_mstate_global->__pyx_n_s_get_win_graphics_capture
#define __pyx_n_s_get_window_bounds __pyx_mstate_global->__pyx_n_s_get_window_bounds
#define __pyx_kp_u_get_window_bounds_exception __pyx_mstate_global->__pyx_kp_u_get_window_bounds_exception
#define __pyx_n_s_getenv __pyx_mstate_global->__pyx_n_s_getenv
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_global_config __pyx_mstate_global->__pyx_n_s_global_config
#define __pyx_n_s_group __pyx_mstate_global->__pyx_n_s_group
#define __pyx_n_s_hWnd __pyx_mstate_global->__pyx_n_s_hWnd
#define __pyx_n_s_handle_mute __pyx_mstate_global->__pyx_n_s_handle_mute
#define __pyx_n_s_handler __pyx_mstate_global->__pyx_n_s_handler
#define __pyx_n_s_height __pyx_mstate_global->__pyx_n_s_height
#define __pyx_kp_u_height_2 __pyx_mstate_global->__pyx_kp_u_height_2
#define __pyx_n_s_hmonitor __pyx_mstate_global->__pyx_n_s_hmonitor
#define __pyx_n_s_host __pyx_mstate_global->__pyx_n_s_host
#define __pyx_n_s_hwnd __pyx_mstate_global->__pyx_n_s_hwnd
#define __pyx_n_s_hwnd_class __pyx_mstate_global->__pyx_n_s_hwnd_class
#define __pyx_kp_u_hwnd_class_2 __pyx_mstate_global->__pyx_kp_u_hwnd_class_2
#define __pyx_n_s_hwnd_name __pyx_mstate_global->__pyx_n_s_hwnd_name
#define __pyx_n_s_hwnd_window __pyx_mstate_global->__pyx_n_s_hwnd_window
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_icon __pyx_mstate_global->__pyx_n_s_icon
#define __pyx_n_s_idldsl __pyx_mstate_global->__pyx_n_s_idldsl
#define __pyx_n_s_image __pyx_mstate_global->__pyx_n_s_image
#define __pyx_n_s_image_data __pyx_mstate_global->__pyx_n_s_image_data
#define __pyx_n_s_images __pyx_mstate_global->__pyx_n_s_images
#define __pyx_n_s_imdecode __pyx_mstate_global->__pyx_n_s_imdecode
#define __pyx_n_s_imei __pyx_mstate_global->__pyx_n_s_imei
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_kp_s_index_d __pyx_mstate_global->__pyx_kp_s_index_d
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_kp_s_init___end __pyx_mstate_global->__pyx_kp_s_init___end
#define __pyx_kp_s_init___start __pyx_mstate_global->__pyx_kp_s_init___start
#define __pyx_kp_u_init_adb __pyx_mstate_global->__pyx_kp_u_init_adb
#define __pyx_n_s_init_nemu __pyx_mstate_global->__pyx_n_s_init_nemu
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_kp_s_init_windows_capture __pyx_mstate_global->__pyx_kp_s_init_windows_capture
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_installed __pyx_mstate_global->__pyx_n_s_installed
#define __pyx_kp_u_installed_emulators __pyx_mstate_global->__pyx_kp_u_installed_emulators
#define __pyx_n_s_installed_emulators_2 __pyx_mstate_global->__pyx_n_s_installed_emulators_2
#define __pyx_n_s_instance_id __pyx_mstate_global->__pyx_n_s_instance_id
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_interaction __pyx_mstate_global->__pyx_n_s_interaction
#define __pyx_n_s_interop __pyx_mstate_global->__pyx_n_s_interop
#define __pyx_n_s_ipc __pyx_mstate_global->__pyx_n_s_ipc
#define __pyx_n_s_is_blank __pyx_mstate_global->__pyx_n_s_is_blank
#define __pyx_n_s_is_close_to_pure_color __pyx_mstate_global->__pyx_n_s_is_close_to_pure_color
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_digit __pyx_mstate_global->__pyx_n_s_is_digit
#define __pyx_n_s_is_foreground_window __pyx_mstate_global->__pyx_n_s_is_foreground_window
#define __pyx_n_s_is_set __pyx_mstate_global->__pyx_n_s_is_set
#define __pyx_n_s_is_valid_exe __pyx_mstate_global->__pyx_n_s_is_valid_exe
#define __pyx_n_s_is_valid_hwnd __pyx_mstate_global->__pyx_n_s_is_valid_hwnd
#define __pyx_n_s_is_window_in_screen_bounds __pyx_mstate_global->__pyx_n_s_is_window_in_screen_bounds
#define __pyx_n_s_is_window_minimized __pyx_mstate_global->__pyx_n_s_is_window_minimized
#define __pyx_n_s_isdigit __pyx_mstate_global->__pyx_n_s_isdigit
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isfile __pyx_mstate_global->__pyx_n_s_isfile
#define __pyx_n_s_item __pyx_mstate_global->__pyx_n_s_item
#define __pyx_n_s_iter_device __pyx_mstate_global->__pyx_n_s_iter_device
#define __pyx_n_s_join __pyx_mstate_global->__pyx_n_s_join
#define __pyx_n_s_json __pyx_mstate_global->__pyx_n_s_json
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_kill __pyx_mstate_global->__pyx_n_s_kill
#define __pyx_kp_u_kill_adb_by_process_name __pyx_mstate_global->__pyx_kp_u_kill_adb_by_process_name
#define __pyx_kp_u_kill_adb_server_failed __pyx_mstate_global->__pyx_kp_u_kill_adb_server_failed
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_s_lParam __pyx_mstate_global->__pyx_n_s_lParam
#define __pyx_kp_u_latency_too_large_return_None_fr __pyx_mstate_global->__pyx_kp_u_latency_too_large_return_None_fr
#define __pyx_n_s_list __pyx_mstate_global->__pyx_n_s_list
#define __pyx_n_s_ljust __pyx_mstate_global->__pyx_n_s_ljust
#define __pyx_n_s_loads __pyx_mstate_global->__pyx_n_s_loads
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_lower __pyx_mstate_global->__pyx_n_s_lower
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_manager __pyx_mstate_global->__pyx_n_s_manager
#define __pyx_n_s_matching_child __pyx_mstate_global->__pyx_n_s_matching_child
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_model __pyx_mstate_global->__pyx_n_s_model
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_monitor __pyx_mstate_global->__pyx_n_s_monitor
#define __pyx_n_s_monitor_bottom __pyx_mstate_global->__pyx_n_s_monitor_bottom
#define __pyx_n_s_monitor_info __pyx_mstate_global->__pyx_n_s_monitor_info
#define __pyx_n_s_monitor_left __pyx_mstate_global->__pyx_n_s_monitor_left
#define __pyx_n_s_monitor_rect __pyx_mstate_global->__pyx_n_s_monitor_rect
#define __pyx_n_s_monitor_right __pyx_mstate_global->__pyx_n_s_monitor_right
#define __pyx_n_s_monitor_top __pyx_mstate_global->__pyx_n_s_monitor_top
#define __pyx_n_s_monitors __pyx_mstate_global->__pyx_n_s_monitors
#define __pyx_n_s_monitors_bounds __pyx_mstate_global->__pyx_n_s_monitors_bounds
#define __pyx_kp_u_monkey_p __pyx_mstate_global->__pyx_kp_u_monkey_p
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_kp_s_mumu_player_12_only __pyx_mstate_global->__pyx_kp_s_mumu_player_12_only
#define __pyx_n_s_mute __pyx_mstate_global->__pyx_n_s_mute
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_need_reset_framepool __pyx_mstate_global->__pyx_n_s_need_reset_framepool
#define __pyx_n_s_nemu_folder __pyx_mstate_global->__pyx_n_s_nemu_folder
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_nick __pyx_mstate_global->__pyx_n_s_nick
#define __pyx_kp_u_no_devices __pyx_mstate_global->__pyx_kp_u_no_devices
#define __pyx_kp_u_no_frame_for_10_sec_try_to_resta __pyx_mstate_global->__pyx_kp_u_no_frame_for_10_sec_try_to_resta
#define __pyx_n_s_no_window __pyx_mstate_global->__pyx_n_s_no_window
#define __pyx_n_s_none __pyx_mstate_global->__pyx_n_s_none
#define __pyx_kp_u_not_exists __pyx_mstate_global->__pyx_kp_u_not_exists
#define __pyx_kp_u_not_in_device_list __pyx_mstate_global->__pyx_kp_u_not_in_device_list
#define __pyx_n_s_notification __pyx_mstate_global->__pyx_n_s_notification
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_kp_s_np_ndarray_None __pyx_mstate_global->__pyx_kp_s_np_ndarray_None
#define __pyx_n_s_nt __pyx_mstate_global->__pyx_n_s_nt
#define __pyx_n_s_numerator __pyx_mstate_global->__pyx_n_s_numerator
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_n_s_offline __pyx_mstate_global->__pyx_n_s_offline
#define __pyx_n_s_ok_Capture __pyx_mstate_global->__pyx_n_s_ok_Capture
#define __pyx_kp_u_ok_Capture __pyx_mstate_global->__pyx_kp_u_ok_Capture
#define __pyx_kp_s_ok_Capture_pyx __pyx_mstate_global->__pyx_kp_s_ok_Capture_pyx
#define __pyx_n_s_ok_alas_emulator_windows __pyx_mstate_global->__pyx_n_s_ok_alas_emulator_windows
#define __pyx_n_s_ok_alas_platform_windows __pyx_mstate_global->__pyx_n_s_ok_alas_platform_windows
#define __pyx_n_s_ok_capture_adb_nemu_ipc __pyx_mstate_global->__pyx_n_s_ok_capture_adb_nemu_ipc
#define __pyx_n_s_ok_capture_windows __pyx_mstate_global->__pyx_n_s_ok_capture_windows
#define __pyx_n_s_ok_color_Color __pyx_mstate_global->__pyx_n_s_ok_color_Color
#define __pyx_n_s_ok_config_Config __pyx_mstate_global->__pyx_n_s_ok_config_Config
#define __pyx_n_s_ok_config_ConfigOption __pyx_mstate_global->__pyx_n_s_ok_config_ConfigOption
#define __pyx_n_s_ok_gui_Communicate __pyx_mstate_global->__pyx_n_s_ok_gui_Communicate
#define __pyx_kp_u_ok_gui_executor_pause_pos_invali __pyx_mstate_global->__pyx_kp_u_ok_gui_executor_pause_pos_invali
#define __pyx_n_s_ok_interaction_ADBInteraction __pyx_mstate_global->__pyx_n_s_ok_interaction_ADBInteraction
#define __pyx_n_s_ok_interaction_PostMessageIntera __pyx_mstate_global->__pyx_n_s_ok_interaction_PostMessageIntera
#define __pyx_n_s_ok_interaction_PyDirectInteracti __pyx_mstate_global->__pyx_n_s_ok_interaction_PyDirectInteracti
#define __pyx_n_s_ok_logging_Logger __pyx_mstate_global->__pyx_n_s_ok_logging_Logger
#define __pyx_n_s_ok_rotypes __pyx_mstate_global->__pyx_n_s_ok_rotypes
#define __pyx_n_s_ok_rotypes_Windows_Foundation __pyx_mstate_global->__pyx_n_s_ok_rotypes_Windows_Foundation
#define __pyx_n_s_ok_rotypes_Windows_Graphics_Capt __pyx_mstate_global->__pyx_n_s_ok_rotypes_Windows_Graphics_Capt
#define __pyx_n_s_ok_rotypes_Windows_Graphics_Dire __pyx_mstate_global->__pyx_n_s_ok_rotypes_Windows_Graphics_Dire
#define __pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2 __pyx_mstate_global->__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2
#define __pyx_n_s_ok_rotypes_roapi __pyx_mstate_global->__pyx_n_s_ok_rotypes_roapi
#define __pyx_n_s_ok_util_Handler __pyx_mstate_global->__pyx_n_s_ok_util_Handler
#define __pyx_n_s_open __pyx_mstate_global->__pyx_n_s_open
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_override_config __pyx_mstate_global->__pyx_n_s_override_config
#define __pyx_n_s_pData __pyx_mstate_global->__pyx_n_s_pData
#define __pyx_n_s_package __pyx_mstate_global->__pyx_n_s_package
#define __pyx_n_s_packages __pyx_mstate_global->__pyx_n_s_packages
#define __pyx_n_s_parent __pyx_mstate_global->__pyx_n_s_parent
#define __pyx_n_s_parse_ratio __pyx_mstate_global->__pyx_n_s_parse_ratio
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_n_s_pause __pyx_mstate_global->__pyx_n_s_pause
#define __pyx_n_s_pc __pyx_mstate_global->__pyx_n_s_pc
#define __pyx_n_s_pc_device __pyx_mstate_global->__pyx_n_s_pc_device
#define __pyx_n_s_pc_full_path __pyx_mstate_global->__pyx_n_s_pc_full_path
#define __pyx_n_s_percent __pyx_mstate_global->__pyx_n_s_percent
#define __pyx_n_s_phone_device __pyx_mstate_global->__pyx_n_s_phone_device
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pid __pyx_mstate_global->__pyx_n_s_pid
#define __pyx_n_s_platform __pyx_mstate_global->__pyx_n_s_platform
#define __pyx_n_s_player_id __pyx_mstate_global->__pyx_n_s_player_id
#define __pyx_kp_u_player_id_2 __pyx_mstate_global->__pyx_kp_u_player_id_2
#define __pyx_kp_u_player_id_check_failed_cmdline __pyx_mstate_global->__pyx_kp_u_player_id_check_failed_cmdline
#define __pyx_kp_s_pm_list_packages __pyx_mstate_global->__pyx_kp_s_pm_list_packages
#define __pyx_n_s_png_bytes __pyx_mstate_global->__pyx_n_s_png_bytes
#define __pyx_n_s_pool __pyx_mstate_global->__pyx_n_s_pool
#define __pyx_n_s_pop __pyx_mstate_global->__pyx_n_s_pop
#define __pyx_n_s_pos_valid __pyx_mstate_global->__pyx_n_s_pos_valid
#define __pyx_n_s_post __pyx_mstate_global->__pyx_n_s_post
#define __pyx_n_s_preferred __pyx_mstate_global->__pyx_n_s_preferred
#define __pyx_kp_u_preferred_device __pyx_mstate_global->__pyx_kp_u_preferred_device
#define __pyx_kp_u_preferred_device_did_change __pyx_mstate_global->__pyx_kp_u_preferred_device_did_change
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_proc __pyx_mstate_global->__pyx_n_s_proc
#define __pyx_n_s_process __pyx_mstate_global->__pyx_n_s_process
#define __pyx_n_s_process_iter __pyx_mstate_global->__pyx_n_s_process_iter
#define __pyx_n_s_prop __pyx_mstate_global->__pyx_n_s_prop
#define __pyx_n_s_property __pyx_mstate_global->__pyx_n_s_property
#define __pyx_n_s_psutil __pyx_mstate_global->__pyx_n_s_psutil
#define __pyx_n_s_pycaw_api_audioclient __pyx_mstate_global->__pyx_n_s_pycaw_api_audioclient
#define __pyx_n_s_pycaw_utils __pyx_mstate_global->__pyx_n_s_pycaw_utils
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_ADBCaptureMethod __pyx_mstate_global->__pyx_n_s_pyx_unpickle_ADBCaptureMethod
#define __pyx_n_s_pyx_unpickle_BaseCaptureMethod __pyx_mstate_global->__pyx_n_s_pyx_unpickle_BaseCaptureMethod
#define __pyx_n_s_pyx_unpickle_BaseWindowsCaptur __pyx_mstate_global->__pyx_n_s_pyx_unpickle_BaseWindowsCaptur
#define __pyx_n_s_pyx_unpickle_BitBltCaptureMeth __pyx_mstate_global->__pyx_n_s_pyx_unpickle_BitBltCaptureMeth
#define __pyx_n_s_pyx_unpickle_DesktopDuplicatio __pyx_mstate_global->__pyx_n_s_pyx_unpickle_DesktopDuplicatio
#define __pyx_n_s_pyx_unpickle_HwndWindow __pyx_mstate_global->__pyx_n_s_pyx_unpickle_HwndWindow
#define __pyx_n_s_pyx_unpickle_ImageCaptureMetho __pyx_mstate_global->__pyx_n_s_pyx_unpickle_ImageCaptureMetho
#define __pyx_n_s_pyx_unpickle_NemuIpcCaptureMet __pyx_mstate_global->__pyx_n_s_pyx_unpickle_NemuIpcCaptureMet
#define __pyx_n_s_pyx_unpickle_WindowsGraphicsCa __pyx_mstate_global->__pyx_n_s_pyx_unpickle_WindowsGraphicsCa
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qfluentwidgets __pyx_mstate_global->__pyx_n_s_qfluentwidgets
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_r __pyx_mstate_global->__pyx_n_s_r
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ratio __pyx_mstate_global->__pyx_n_s_ratio
#define __pyx_n_s_ratio_float __pyx_mstate_global->__pyx_n_s_ratio_float
#define __pyx_n_s_ratio_match __pyx_mstate_global->__pyx_n_s_ratio_match
#define __pyx_n_s_ratio_str __pyx_mstate_global->__pyx_n_s_ratio_str
#define __pyx_n_s_re __pyx_mstate_global->__pyx_n_s_re
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_kp_u_real __pyx_mstate_global->__pyx_kp_u_real
#define __pyx_n_s_real_height __pyx_mstate_global->__pyx_n_s_real_height
#define __pyx_n_s_real_width __pyx_mstate_global->__pyx_n_s_real_width
#define __pyx_n_s_real_x_offset __pyx_mstate_global->__pyx_n_s_real_x_offset
#define __pyx_n_s_real_y_offset __pyx_mstate_global->__pyx_n_s_real_y_offset
#define __pyx_n_s_rect __pyx_mstate_global->__pyx_n_s_rect
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_kp_u_refresh __pyx_mstate_global->__pyx_kp_u_refresh
#define __pyx_n_s_refresh_2 __pyx_mstate_global->__pyx_n_s_refresh_2
#define __pyx_kp_u_refresh_current_only_skip_others __pyx_mstate_global->__pyx_kp_u_refresh_current_only_skip_others
#define __pyx_n_s_refresh_emulators __pyx_mstate_global->__pyx_n_s_refresh_emulators
#define __pyx_kp_u_refresh_emulators_2 __pyx_mstate_global->__pyx_kp_u_refresh_emulators_2
#define __pyx_n_s_refresh_phones __pyx_mstate_global->__pyx_n_s_refresh_phones
#define __pyx_kp_u_refresh_phones_done __pyx_mstate_global->__pyx_kp_u_refresh_phones_done
#define __pyx_kp_u_refresh_phones_found_an_phone __pyx_mstate_global->__pyx_kp_u_refresh_phones_found_an_phone
#define __pyx_n_s_remove_existing __pyx_mstate_global->__pyx_n_s_remove_existing
#define __pyx_n_s_require_bg __pyx_mstate_global->__pyx_n_s_require_bg
#define __pyx_n_s_reset_device __pyx_mstate_global->__pyx_n_s_reset_device
#define __pyx_n_s_reset_framepool __pyx_mstate_global->__pyx_n_s_reset_framepool
#define __pyx_n_u_reset_framepool __pyx_mstate_global->__pyx_n_u_reset_framepool
#define __pyx_n_s_resolution __pyx_mstate_global->__pyx_n_s_resolution
#define __pyx_n_s_resolution_dict __pyx_mstate_global->__pyx_n_s_resolution_dict
#define __pyx_kp_u_resolution_error __pyx_mstate_global->__pyx_kp_u_resolution_error
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_results __pyx_mstate_global->__pyx_n_s_results
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_s_reversed __pyx_mstate_global->__pyx_n_s_reversed
#define __pyx_n_s_round __pyx_mstate_global->__pyx_n_s_round
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_save_file __pyx_mstate_global->__pyx_n_s_save_file
#define __pyx_n_s_scaling __pyx_mstate_global->__pyx_n_s_scaling
#define __pyx_n_s_screencap __pyx_mstate_global->__pyx_n_s_screencap
#define __pyx_kp_s_screencap_p __pyx_mstate_global->__pyx_kp_s_screencap_p
#define __pyx_n_s_screenshot __pyx_mstate_global->__pyx_n_s_screenshot
#define __pyx_n_s_search __pyx_mstate_global->__pyx_n_s_search
#define __pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a __pyx_mstate_global->__pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_u_self_get_preferred_device_return __pyx_mstate_global->__pyx_kp_u_self_get_preferred_device_return
#define __pyx_kp_u_self_window __pyx_mstate_global->__pyx_kp_u_self_window
#define __pyx_n_s_serial __pyx_mstate_global->__pyx_n_s_serial
#define __pyx_n_s_server_kill __pyx_mstate_global->__pyx_n_s_server_kill
#define __pyx_kp_s_service_call_iphonesubinfo_4 __pyx_mstate_global->__pyx_kp_s_service_call_iphonesubinfo_4
#define __pyx_n_s_session __pyx_mstate_global->__pyx_n_s_session
#define __pyx_n_s_sessions __pyx_mstate_global->__pyx_n_s_sessions
#define __pyx_n_s_set __pyx_mstate_global->__pyx_n_s_set
#define __pyx_kp_u_set_ADBUTILS_ADB_PATH __pyx_mstate_global->__pyx_kp_u_set_ADBUTILS_ADB_PATH
#define __pyx_kp_u_set_ADBUTILS_ADB_PATH_failed __pyx_mstate_global->__pyx_kp_u_set_ADBUTILS_ADB_PATH_failed
#define __pyx_n_s_set_capture __pyx_mstate_global->__pyx_n_s_set_capture
#define __pyx_n_s_set_hwnd_name __pyx_mstate_global->__pyx_n_s_set_hwnd_name
#define __pyx_n_s_set_images __pyx_mstate_global->__pyx_n_s_set_images
#define __pyx_n_s_set_mute_state __pyx_mstate_global->__pyx_n_s_set_mute_state
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_kp_u_set_preferred_device __pyx_mstate_global->__pyx_kp_u_set_preferred_device
#define __pyx_n_s_set_preferred_device_2 __pyx_mstate_global->__pyx_n_s_set_preferred_device_2
#define __pyx_n_s_setdefault __pyx_mstate_global->__pyx_n_s_setdefault
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_kp_s_settings_get_secure_android_id __pyx_mstate_global->__pyx_kp_s_settings_get_secure_android_id
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_shcore __pyx_mstate_global->__pyx_n_s_shcore
#define __pyx_n_s_shell __pyx_mstate_global->__pyx_n_s_shell
#define __pyx_n_s_shell_device __pyx_mstate_global->__pyx_n_s_shell_device
#define __pyx_n_s_short_description __pyx_mstate_global->__pyx_n_s_short_description
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sizeof __pyx_mstate_global->__pyx_n_s_sizeof
#define __pyx_n_s_skip_if_running __pyx_mstate_global->__pyx_n_s_skip_if_running
#define __pyx_n_s_sleep __pyx_mstate_global->__pyx_n_s_sleep
#define __pyx_kp_s_slower_bound_to_display __pyx_mstate_global->__pyx_kp_s_slower_bound_to_display
#define __pyx_n_s_socket_timeout __pyx_mstate_global->__pyx_n_s_socket_timeout
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_split __pyx_mstate_global->__pyx_n_s_split
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_start_or_stop __pyx_mstate_global->__pyx_n_s_start_or_stop
#define __pyx_kp_u_start_or_stop_failed __pyx_mstate_global->__pyx_kp_u_start_or_stop_failed
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_kp_s_str_int_None __pyx_mstate_global->__pyx_kp_s_str_int_None
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_support __pyx_mstate_global->__pyx_n_s_support
#define __pyx_n_s_supported_ratio __pyx_mstate_global->__pyx_n_s_supported_ratio
#define __pyx_n_s_supported_resolution __pyx_mstate_global->__pyx_n_s_supported_resolution
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_target __pyx_mstate_global->__pyx_n_s_target
#define __pyx_n_s_target_height __pyx_mstate_global->__pyx_n_s_target_height
#define __pyx_n_s_target_method __pyx_mstate_global->__pyx_n_s_target_method
#define __pyx_n_s_target_width __pyx_mstate_global->__pyx_n_s_target_width
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_test_exclusive_full_screen __pyx_mstate_global->__pyx_n_s_test_exclusive_full_screen
#define __pyx_n_s_test_is_not_pure_color __pyx_mstate_global->__pyx_n_s_test_is_not_pure_color
#define __pyx_kp_s_test_is_not_pure_color_failed_ca __pyx_mstate_global->__pyx_kp_s_test_is_not_pure_color_failed_ca
#define __pyx_n_s_text __pyx_mstate_global->__pyx_n_s_text
#define __pyx_n_s_threading __pyx_mstate_global->__pyx_n_s_threading
#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time
#define __pyx_n_s_timeout __pyx_mstate_global->__pyx_n_s_timeout
#define __pyx_n_s_title __pyx_mstate_global->__pyx_n_s_title
#define __pyx_n_u_title_2 __pyx_mstate_global->__pyx_n_u_title_2
#define __pyx_n_s_title_height __pyx_mstate_global->__pyx_n_s_title_height
#define __pyx_kp_u_to __pyx_mstate_global->__pyx_kp_u_to
#define __pyx_n_s_true __pyx_mstate_global->__pyx_n_s_true
#define __pyx_n_s_try_connect __pyx_mstate_global->__pyx_n_s_try_connect
#define __pyx_n_s_try_delete_dc __pyx_mstate_global->__pyx_n_s_try_delete_dc
#define __pyx_n_s_try_kill_adb __pyx_mstate_global->__pyx_n_s_try_kill_adb
#define __pyx_kp_s_try_kill_adb_end __pyx_mstate_global->__pyx_kp_s_try_kill_adb_end
#define __pyx_kp_s_try_kill_adb_server __pyx_mstate_global->__pyx_kp_s_try_kill_adb_server
#define __pyx_n_s_type __pyx_mstate_global->__pyx_n_s_type
#define __pyx_n_s_uint8 __pyx_mstate_global->__pyx_n_s_uint8
#define __pyx_kp_s_unmute_game_because_option_is_tu __pyx_mstate_global->__pyx_kp_s_unmute_game_because_option_is_tu
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_update_capture_method __pyx_mstate_global->__pyx_n_s_update_capture_method
#define __pyx_kp_u_update_capture_method_exception __pyx_mstate_global->__pyx_kp_u_update_capture_method_exception
#define __pyx_n_s_update_device_list __pyx_mstate_global->__pyx_n_s_update_device_list
#define __pyx_n_s_update_emulator __pyx_mstate_global->__pyx_n_s_update_emulator
#define __pyx_n_s_update_frame_size __pyx_mstate_global->__pyx_n_s_update_frame_size
#define __pyx_kp_u_update_frame_size_2 __pyx_mstate_global->__pyx_kp_u_update_frame_size_2
#define __pyx_kp_u_update_path_and_id __pyx_mstate_global->__pyx_kp_u_update_path_and_id
#define __pyx_n_s_update_pc_device __pyx_mstate_global->__pyx_n_s_update_pc_device
#define __pyx_kp_u_update_resolution_for __pyx_mstate_global->__pyx_kp_u_update_resolution_for
#define __pyx_n_s_update_resolution_for_hwnd __pyx_mstate_global->__pyx_n_s_update_resolution_for_hwnd
#define __pyx_n_s_update_window __pyx_mstate_global->__pyx_n_s_update_window
#define __pyx_n_s_update_window_size __pyx_mstate_global->__pyx_n_s_update_window_size
#define __pyx_kp_u_use_adb_capture __pyx_mstate_global->__pyx_kp_u_use_adb_capture
#define __pyx_n_s_use_bit_blt_only __pyx_mstate_global->__pyx_n_s_use_bit_blt_only
#define __pyx_n_s_use_last_error __pyx_mstate_global->__pyx_n_s_use_last_error
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_kp_s_use_the_adb_screencap_command_sl __pyx_mstate_global->__pyx_kp_s_use_the_adb_screencap_command_sl
#define __pyx_n_s_use_windows_capture __pyx_mstate_global->__pyx_n_s_use_windows_capture
#define __pyx_n_s_user32 __pyx_mstate_global->__pyx_n_s_user32
#define __pyx_kp_s_utf_8 __pyx_mstate_global->__pyx_kp_s_utf_8
#define __pyx_n_s_validate_mute_config __pyx_mstate_global->__pyx_n_s_validate_mute_config
#define __pyx_n_s_validator __pyx_mstate_global->__pyx_n_s_validator
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_version __pyx_mstate_global->__pyx_n_s_version
#define __pyx_n_s_visible __pyx_mstate_global->__pyx_n_s_visible
#define __pyx_kp_u_vms_MuMuPlayer_12_0 __pyx_mstate_global->__pyx_kp_u_vms_MuMuPlayer_12_0
#define __pyx_n_s_volume __pyx_mstate_global->__pyx_n_s_volume
#define __pyx_n_s_warning __pyx_mstate_global->__pyx_n_s_warning
#define __pyx_n_s_width __pyx_mstate_global->__pyx_n_s_width
#define __pyx_n_s_win32 __pyx_mstate_global->__pyx_n_s_win32
#define __pyx_n_s_win32api __pyx_mstate_global->__pyx_n_s_win32api
#define __pyx_n_s_win32con __pyx_mstate_global->__pyx_n_s_win32con
#define __pyx_n_s_win32gui __pyx_mstate_global->__pyx_n_s_win32gui
#define __pyx_n_s_win32process __pyx_mstate_global->__pyx_n_s_win32process
#define __pyx_n_s_win32ui __pyx_mstate_global->__pyx_n_s_win32ui
#define __pyx_n_s_win_graphic __pyx_mstate_global->__pyx_n_s_win_graphic
#define __pyx_n_s_win_interaction_class __pyx_mstate_global->__pyx_n_s_win_interaction_class
#define __pyx_n_s_windll __pyx_mstate_global->__pyx_n_s_windll
#define __pyx_kp_u_window __pyx_mstate_global->__pyx_kp_u_window
#define __pyx_n_s_window_2 __pyx_mstate_global->__pyx_n_s_window_2
#define __pyx_n_s_window_bottom __pyx_mstate_global->__pyx_n_s_window_bottom
#define __pyx_n_s_window_height __pyx_mstate_global->__pyx_n_s_window_height
#define __pyx_n_s_window_left __pyx_mstate_global->__pyx_n_s_window_left
#define __pyx_n_s_window_ratio __pyx_mstate_global->__pyx_n_s_window_ratio
#define __pyx_n_s_window_right __pyx_mstate_global->__pyx_n_s_window_right
#define __pyx_n_s_window_top __pyx_mstate_global->__pyx_n_s_window_top
#define __pyx_n_s_window_width __pyx_mstate_global->__pyx_n_s_window_width
#define __pyx_n_s_windows __pyx_mstate_global->__pyx_n_s_windows
#define __pyx_n_s_windows_capture_config __pyx_mstate_global->__pyx_n_s_windows_capture_config
#define __pyx_n_s_windows_graphics_available __pyx_mstate_global->__pyx_n_s_windows_graphics_available
#define __pyx_n_s_winerror __pyx_mstate_global->__pyx_n_s_winerror
#define __pyx_n_s_wintypes __pyx_mstate_global->__pyx_n_s_wintypes
#define __pyx_n_s_wrap __pyx_mstate_global->__pyx_n_s_wrap
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_u_x __pyx_mstate_global->__pyx_n_u_x
#define __pyx_n_s_x2 __pyx_mstate_global->__pyx_n_s_x2
#define __pyx_kp_u_x_2 __pyx_mstate_global->__pyx_kp_u_x_2
#define __pyx_n_s_x_offset __pyx_mstate_global->__pyx_n_s_x_offset
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_n_s_y2 __pyx_mstate_global->__pyx_n_s_y2
#define __pyx_kp_u_y_2 __pyx_mstate_global->__pyx_kp_u_y_2
#define __pyx_n_s_y_offset __pyx_mstate_global->__pyx_n_s_y_offset
#define __pyx_float_0_2 __pyx_mstate_global->__pyx_float_0_2
#define __pyx_float_0_5 __pyx_mstate_global->__pyx_float_0_5
#define __pyx_float_0_7 __pyx_mstate_global->__pyx_float_0_7
#define __pyx_float_0_01 __pyx_mstate_global->__pyx_float_0_01
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_9 __pyx_mstate_global->__pyx_int_9
#define __pyx_int_10 __pyx_mstate_global->__pyx_int_10
#define __pyx_int_96 __pyx_mstate_global->__pyx_int_96
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_255 __pyx_mstate_global->__pyx_int_255
#define __pyx_int_19041 __pyx_mstate_global->__pyx_int_19041
#define __pyx_int_20348 __pyx_mstate_global->__pyx_int_20348
#define __pyx_int_15891862 __pyx_mstate_global->__pyx_int_15891862
#define __pyx_int_18546816 __pyx_mstate_global->__pyx_int_18546816
#define __pyx_int_30750855 __pyx_mstate_global->__pyx_int_30750855
#define __pyx_int_36463512 __pyx_mstate_global->__pyx_int_36463512
#define __pyx_int_37823798 __pyx_mstate_global->__pyx_int_37823798
#define __pyx_int_55865105 __pyx_mstate_global->__pyx_int_55865105
#define __pyx_int_63776034 __pyx_mstate_global->__pyx_int_63776034
#define __pyx_int_69505199 __pyx_mstate_global->__pyx_int_69505199
#define __pyx_int_74253587 __pyx_mstate_global->__pyx_int_74253587
#define __pyx_int_76750241 __pyx_mstate_global->__pyx_int_76750241
#define __pyx_int_97161228 __pyx_mstate_global->__pyx_int_97161228
#define __pyx_int_101491740 __pyx_mstate_global->__pyx_int_101491740
#define __pyx_int_129754191 __pyx_mstate_global->__pyx_int_129754191
#define __pyx_int_137420293 __pyx_mstate_global->__pyx_int_137420293
#define __pyx_int_147817759 __pyx_mstate_global->__pyx_int_147817759
#define __pyx_int_159312098 __pyx_mstate_global->__pyx_int_159312098
#define __pyx_int_166164177 __pyx_mstate_global->__pyx_int_166164177
#define __pyx_int_184679976 __pyx_mstate_global->__pyx_int_184679976
#define __pyx_int_198801806 __pyx_mstate_global->__pyx_int_198801806
#define __pyx_int_252227782 __pyx_mstate_global->__pyx_int_252227782
#define __pyx_int_252510149 __pyx_mstate_global->__pyx_int_252510149
#define __pyx_int_258103348 __pyx_mstate_global->__pyx_int_258103348
#define __pyx_int_267537657 __pyx_mstate_global->__pyx_int_267537657
#define __pyx_int_268090033 __pyx_mstate_global->__pyx_int_268090033
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_slice__4 __pyx_mstate_global->__pyx_slice__4
#define __pyx_slice__5 __pyx_mstate_global->__pyx_slice__5
#define __pyx_slice__9 __pyx_mstate_global->__pyx_slice__9
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_slice__30 __pyx_mstate_global->__pyx_slice__30
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__99 __pyx_mstate_global->__pyx_tuple__99
#define __pyx_codeobj__2 __pyx_mstate_global->__pyx_codeobj__2
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__111 __pyx_mstate_global->__pyx_tuple__111
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__117 __pyx_mstate_global->__pyx_tuple__117
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__125 __pyx_mstate_global->__pyx_tuple__125
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__144 __pyx_mstate_global->__pyx_tuple__144
#define __pyx_tuple__146 __pyx_mstate_global->__pyx_tuple__146
#define __pyx_tuple__148 __pyx_mstate_global->__pyx_tuple__148
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__151 __pyx_mstate_global->__pyx_tuple__151
#define __pyx_tuple__153 __pyx_mstate_global->__pyx_tuple__153
#define __pyx_tuple__155 __pyx_mstate_global->__pyx_tuple__155
#define __pyx_tuple__157 __pyx_mstate_global->__pyx_tuple__157
#define __pyx_tuple__159 __pyx_mstate_global->__pyx_tuple__159
#define __pyx_tuple__161 __pyx_mstate_global->__pyx_tuple__161
#define __pyx_tuple__163 __pyx_mstate_global->__pyx_tuple__163
#define __pyx_tuple__165 __pyx_mstate_global->__pyx_tuple__165
#define __pyx_tuple__167 __pyx_mstate_global->__pyx_tuple__167
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__170 __pyx_mstate_global->__pyx_tuple__170
#define __pyx_tuple__172 __pyx_mstate_global->__pyx_tuple__172
#define __pyx_tuple__174 __pyx_mstate_global->__pyx_tuple__174
#define __pyx_tuple__177 __pyx_mstate_global->__pyx_tuple__177
#define __pyx_tuple__179 __pyx_mstate_global->__pyx_tuple__179
#define __pyx_tuple__181 __pyx_mstate_global->__pyx_tuple__181
#define __pyx_tuple__183 __pyx_mstate_global->__pyx_tuple__183
#define __pyx_tuple__185 __pyx_mstate_global->__pyx_tuple__185
#define __pyx_tuple__186 __pyx_mstate_global->__pyx_tuple__186
#define __pyx_tuple__188 __pyx_mstate_global->__pyx_tuple__188
#define __pyx_tuple__190 __pyx_mstate_global->__pyx_tuple__190
#define __pyx_tuple__198 __pyx_mstate_global->__pyx_tuple__198
#define __pyx_tuple__200 __pyx_mstate_global->__pyx_tuple__200
#define __pyx_tuple__202 __pyx_mstate_global->__pyx_tuple__202
#define __pyx_tuple__204 __pyx_mstate_global->__pyx_tuple__204
#define __pyx_tuple__206 __pyx_mstate_global->__pyx_tuple__206
#define __pyx_tuple__208 __pyx_mstate_global->__pyx_tuple__208
#define __pyx_tuple__210 __pyx_mstate_global->__pyx_tuple__210
#define __pyx_tuple__212 __pyx_mstate_global->__pyx_tuple__212
#define __pyx_tuple__214 __pyx_mstate_global->__pyx_tuple__214
#define __pyx_tuple__216 __pyx_mstate_global->__pyx_tuple__216
#define __pyx_tuple__219 __pyx_mstate_global->__pyx_tuple__219
#define __pyx_tuple__226 __pyx_mstate_global->__pyx_tuple__226
#define __pyx_tuple__228 __pyx_mstate_global->__pyx_tuple__228
#define __pyx_tuple__230 __pyx_mstate_global->__pyx_tuple__230
#define __pyx_tuple__231 __pyx_mstate_global->__pyx_tuple__231
#define __pyx_tuple__233 __pyx_mstate_global->__pyx_tuple__233
#define __pyx_tuple__235 __pyx_mstate_global->__pyx_tuple__235
#define __pyx_tuple__236 __pyx_mstate_global->__pyx_tuple__236
#define __pyx_tuple__238 __pyx_mstate_global->__pyx_tuple__238
#define __pyx_tuple__241 __pyx_mstate_global->__pyx_tuple__241
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__72 __pyx_mstate_global->__pyx_codeobj__72
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__120 __pyx_mstate_global->__pyx_codeobj__120
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__140 __pyx_mstate_global->__pyx_codeobj__140
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__152 __pyx_mstate_global->__pyx_codeobj__152
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__160 __pyx_mstate_global->__pyx_codeobj__160
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__164 __pyx_mstate_global->__pyx_codeobj__164
#define __pyx_codeobj__166 __pyx_mstate_global->__pyx_codeobj__166
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__171 __pyx_mstate_global->__pyx_codeobj__171
#define __pyx_codeobj__173 __pyx_mstate_global->__pyx_codeobj__173
#define __pyx_codeobj__175 __pyx_mstate_global->__pyx_codeobj__175
#define __pyx_codeobj__176 __pyx_mstate_global->__pyx_codeobj__176
#define __pyx_codeobj__178 __pyx_mstate_global->__pyx_codeobj__178
#define __pyx_codeobj__180 __pyx_mstate_global->__pyx_codeobj__180
#define __pyx_codeobj__182 __pyx_mstate_global->__pyx_codeobj__182
#define __pyx_codeobj__184 __pyx_mstate_global->__pyx_codeobj__184
#define __pyx_codeobj__187 __pyx_mstate_global->__pyx_codeobj__187
#define __pyx_codeobj__189 __pyx_mstate_global->__pyx_codeobj__189
#define __pyx_codeobj__191 __pyx_mstate_global->__pyx_codeobj__191
#define __pyx_codeobj__192 __pyx_mstate_global->__pyx_codeobj__192
#define __pyx_codeobj__193 __pyx_mstate_global->__pyx_codeobj__193
#define __pyx_codeobj__194 __pyx_mstate_global->__pyx_codeobj__194
#define __pyx_codeobj__195 __pyx_mstate_global->__pyx_codeobj__195
#define __pyx_codeobj__196 __pyx_mstate_global->__pyx_codeobj__196
#define __pyx_codeobj__197 __pyx_mstate_global->__pyx_codeobj__197
#define __pyx_codeobj__199 __pyx_mstate_global->__pyx_codeobj__199
#define __pyx_codeobj__201 __pyx_mstate_global->__pyx_codeobj__201
#define __pyx_codeobj__203 __pyx_mstate_global->__pyx_codeobj__203
#define __pyx_codeobj__205 __pyx_mstate_global->__pyx_codeobj__205
#define __pyx_codeobj__207 __pyx_mstate_global->__pyx_codeobj__207
#define __pyx_codeobj__209 __pyx_mstate_global->__pyx_codeobj__209
#define __pyx_codeobj__211 __pyx_mstate_global->__pyx_codeobj__211
#define __pyx_codeobj__213 __pyx_mstate_global->__pyx_codeobj__213
#define __pyx_codeobj__215 __pyx_mstate_global->__pyx_codeobj__215
#define __pyx_codeobj__217 __pyx_mstate_global->__pyx_codeobj__217
#define __pyx_codeobj__218 __pyx_mstate_global->__pyx_codeobj__218
#define __pyx_codeobj__220 __pyx_mstate_global->__pyx_codeobj__220
#define __pyx_codeobj__221 __pyx_mstate_global->__pyx_codeobj__221
#define __pyx_codeobj__222 __pyx_mstate_global->__pyx_codeobj__222
#define __pyx_codeobj__223 __pyx_mstate_global->__pyx_codeobj__223
#define __pyx_codeobj__224 __pyx_mstate_global->__pyx_codeobj__224
#define __pyx_codeobj__225 __pyx_mstate_global->__pyx_codeobj__225
#define __pyx_codeobj__227 __pyx_mstate_global->__pyx_codeobj__227
#define __pyx_codeobj__229 __pyx_mstate_global->__pyx_codeobj__229
#define __pyx_codeobj__232 __pyx_mstate_global->__pyx_codeobj__232
#define __pyx_codeobj__234 __pyx_mstate_global->__pyx_codeobj__234
#define __pyx_codeobj__237 __pyx_mstate_global->__pyx_codeobj__237
#define __pyx_codeobj__239 __pyx_mstate_global->__pyx_codeobj__239
#define __pyx_codeobj__240 __pyx_mstate_global->__pyx_codeobj__240
#define __pyx_codeobj__242 __pyx_mstate_global->__pyx_codeobj__242
#define __pyx_codeobj__243 __pyx_mstate_global->__pyx_codeobj__243
#define __pyx_codeobj__244 __pyx_mstate_global->__pyx_codeobj__244
#define __pyx_codeobj__245 __pyx_mstate_global->__pyx_codeobj__245
#define __pyx_codeobj__246 __pyx_mstate_global->__pyx_codeobj__246
#define __pyx_codeobj__247 __pyx_mstate_global->__pyx_codeobj__247
#define __pyx_codeobj__248 __pyx_mstate_global->__pyx_codeobj__248
#define __pyx_codeobj__249 __pyx_mstate_global->__pyx_codeobj__249
#define __pyx_codeobj__250 __pyx_mstate_global->__pyx_codeobj__250
/* #### Code section: module_code ### */

/* "cfunc.to_py":67
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):             # <<<<<<<<<<<<<<
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 *         return f(self, x, y)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_1wrap(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_wrap, "wrap(self: 'WindowsGraphicsCaptureMethod', x, y)");
static PyMethodDef __pyx_mdef_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_1wrap = {"wrap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_1wrap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_wrap};
static PyObject *__pyx_pw_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_1wrap(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wrap (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_x,&__pyx_n_s_y,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("wrap", 1, 3, 3, 1); __PYX_ERR(1, 67, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("wrap", 1, 3, 3, 2); __PYX_ERR(1, 67, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "wrap") < 0)) __PYX_ERR(1, 67, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_self = ((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)values[0]);
    __pyx_v_x = values[1];
    __pyx_v_y = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wrap", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 67, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cfunc.to_py.__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y.wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, 1, "self", 0))) __PYX_ERR(1, 67, __pyx_L1_error)
  __pyx_r = __pyx_pf_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_wrap(__pyx_self, __pyx_v_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_wrap(PyObject *__pyx_self, struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *__pyx_cur_scope;
  struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap", 1);
  __pyx_outer_scope = (struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "cfunc.to_py":69
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 *         return f(self, x, y)             # <<<<<<<<<<<<<<
 *     return wrap
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_f(__pyx_v_self, __pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cfunc.to_py":67
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):             # <<<<<<<<<<<<<<
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 *         return f(self, x, y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cfunc.to_py.__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y.wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cfunc.to_py":66
 * 
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):             # <<<<<<<<<<<<<<
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 */

static PyObject *__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(PyObject *(*__pyx_v_f)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *, PyObject *)) {
  struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *__pyx_cur_scope;
  PyObject *__pyx_v_wrap = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y", 0);
  __pyx_cur_scope = (struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *)__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 66, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_f = __pyx_v_f;

  /* "cfunc.to_py":67
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):             # <<<<<<<<<<<<<<
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 *         return f(self, x, y)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_11cfunc_dot_to_py_89__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_1wrap, 0, __pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cfunc_to_py, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wrap = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cfunc.to_py":70
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 *         return f(self, x, y)
 *     return wrap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_wrap);
  __pyx_r = __pyx_v_wrap;
  goto __pyx_L0;

  /* "cfunc.to_py":66
 * 
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):             # <<<<<<<<<<<<<<
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cfunc.to_py.__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_wrap);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":47
 *     cdef public object exit_event
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._size = (0, 0)
 *         self.exit_event = None
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":48
 * 
 *     def __init__(self):
 *         self._size = (0, 0)             # <<<<<<<<<<<<<<
 *         self.exit_event = None
 * 
 */
  __Pyx_INCREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __Pyx_GOTREF(__pyx_v_self->_size);
  __Pyx_DECREF(__pyx_v_self->_size);
  __pyx_v_self->_size = __pyx_tuple__3;

  /* "ok/Capture.pyx":49
 *     def __init__(self):
 *         self._size = (0, 0)
 *         self.exit_event = None             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->exit_event);
  __Pyx_DECREF(__pyx_v_self->exit_event);
  __pyx_v_self->exit_event = Py_None;

  /* "ok/Capture.pyx":47
 *     cdef public object exit_event
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._size = (0, 0)
 *         self.exit_event = None
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":51
 *         self.exit_event = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         # Some capture methods don't need an initialization process
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_3close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_2close(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_2close(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":55
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def width(self):
 *         return self._size[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5width_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5width___get__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_5width___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ok/Capture.pyx":57
 *     @property
 *     def width(self):
 *         return self._size[0]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_size == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 57, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_size, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":55
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def width(self):
 *         return self._size[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":59
 *         return self._size[0]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def height(self):
 *         return self._size[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_6height_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_6height___get__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_6height___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ok/Capture.pyx":61
 *     @property
 *     def height(self):
 *         return self._size[1]             # <<<<<<<<<<<<<<
 * 
 *     cpdef object get_frame(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_size == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 61, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_size, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":59
 *         return self._size[0]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def height(self):
 *         return self._size[1]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":63
 *         return self._size[1]
 * 
 *     cpdef object get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         if self.exit_event.is_set():
 */

static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_17BaseCaptureMethod_get_frame(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_frame = 0;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":65
 *     cpdef object get_frame(self):
 *         cdef object frame
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->exit_event, __pyx_n_s_is_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":66
 *         cdef object frame
 *         if self.exit_event.is_set():
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             frame = self.do_get_frame()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":65
 *     cpdef object get_frame(self):
 *         cdef object frame
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "ok/Capture.pyx":67
 *         if self.exit_event.is_set():
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             frame = self.do_get_frame()
 *             if frame is not None:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    /*try:*/ {

      /* "ok/Capture.pyx":68
 *             return
 *         try:
 *             frame = self.do_get_frame()             # <<<<<<<<<<<<<<
 *             if frame is not None:
 *                 self._size = (frame.shape[1], frame.shape[0])
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_v_frame = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "ok/Capture.pyx":69
 *         try:
 *             frame = self.do_get_frame()
 *             if frame is not None:             # <<<<<<<<<<<<<<
 *                 self._size = (frame.shape[1], frame.shape[0])
 *                 if frame.shape[2] == 4:
 */
      __pyx_t_6 = (__pyx_v_frame != Py_None);
      if (__pyx_t_6) {

        /* "ok/Capture.pyx":70
 *             frame = self.do_get_frame()
 *             if frame is not None:
 *                 self._size = (frame.shape[1], frame.shape[0])             # <<<<<<<<<<<<<<
 *                 if frame.shape[2] == 4:
 *                     frame = frame[:, :, :3]
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(0, 70, __pyx_L4_error);
        __Pyx_GIVEREF(__pyx_t_3);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(0, 70, __pyx_L4_error);
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_v_self->_size);
        __Pyx_DECREF(__pyx_v_self->_size);
        __pyx_v_self->_size = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;

        /* "ok/Capture.pyx":71
 *             if frame is not None:
 *                 self._size = (frame.shape[1], frame.shape[0])
 *                 if frame.shape[2] == 4:             # <<<<<<<<<<<<<<
 *                     frame = frame[:, :, :3]
 *             return frame
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_6 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_3, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 71, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_6) {

          /* "ok/Capture.pyx":72
 *                 self._size = (frame.shape[1], frame.shape[0])
 *                 if frame.shape[2] == 4:
 *                     frame = frame[:, :, :3]             # <<<<<<<<<<<<<<
 *             return frame
 *         except Exception as e:
 */
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_frame, __pyx_tuple__6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF_SET(__pyx_v_frame, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "ok/Capture.pyx":71
 *             if frame is not None:
 *                 self._size = (frame.shape[1], frame.shape[0])
 *                 if frame.shape[2] == 4:             # <<<<<<<<<<<<<<
 *                     frame = frame[:, :, :3]
 *             return frame
 */
        }

        /* "ok/Capture.pyx":69
 *         try:
 *             frame = self.do_get_frame()
 *             if frame is not None:             # <<<<<<<<<<<<<<
 *                 self._size = (frame.shape[1], frame.shape[0])
 *                 if frame.shape[2] == 4:
 */
      }

      /* "ok/Capture.pyx":73
 *                 if frame.shape[2] == 4:
 *                     frame = frame[:, :, :3]
 *             return frame             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             raise CaptureException(str(e)) from e
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_frame);
      __pyx_r = __pyx_v_frame;
      goto __pyx_L8_try_return;

      /* "ok/Capture.pyx":67
 *         if self.exit_event.is_set():
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             frame = self.do_get_frame()
 *             if frame is not None:
 */
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":74
 *                     frame = frame[:, :, :3]
 *             return frame
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             raise CaptureException(str(e)) from e
 * 
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_10) {
      __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(0, 74, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_e = __pyx_t_1;
      /*try:*/ {

        /* "ok/Capture.pyx":75
 *             return frame
 *         except Exception as e:
 *             raise CaptureException(str(e)) from e             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_CaptureException); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 75, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_Str(__pyx_v_e); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 75, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_12};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_Raise(__pyx_t_4, 0, 0, __pyx_v_e);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 75, __pyx_L17_error)
      }

      /* "ok/Capture.pyx":74
 *                     frame = frame[:, :, :3]
 *             return frame
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             raise CaptureException(str(e)) from e
 * 
 */
      /*finally:*/ {
        __pyx_L17_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L6_except_error;
        }
      }
    }
    goto __pyx_L6_except_error;

    /* "ok/Capture.pyx":67
 *         if self.exit_event.is_set():
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             frame = self.do_get_frame()
 *             if frame is not None:
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L0;
  }

  /* "ok/Capture.pyx":63
 *         return self._size[1]
 * 
 *     cpdef object get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         if self.exit_event.is_set():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_5get_frame = {"get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_4get_frame(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_4get_frame(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_17BaseCaptureMethod_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":77
 *             raise CaptureException(str(e)) from e
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return f'{self.__class__.__name__}_{self.width}x{self.height}'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_6__str__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_6__str__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "ok/Capture.pyx":78
 * 
 *     def __str__(self):
 *         return f'{self.__class__.__name__}_{self.width}x{self.height}'             # <<<<<<<<<<<<<<
 * 
 *     def do_get_frame(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_n_u_x);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":77
 *             raise CaptureException(str(e)) from e
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return f'{self.__class__.__name__}_{self.width}x{self.height}'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":80
 *         return f'{self.__class__.__name__}_{self.width}x{self.height}'
 * 
 *     def do_get_frame(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_9do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_9do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_9do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_9do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_8do_get_frame(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_8do_get_frame(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":83
 *         pass
 * 
 *     def draw_rectangle(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_11draw_rectangle(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_11draw_rectangle = {"draw_rectangle", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_11draw_rectangle, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_11draw_rectangle(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("draw_rectangle (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("draw_rectangle", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "draw_rectangle", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10draw_rectangle(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_10draw_rectangle(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("draw_rectangle", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":86
 *         pass
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_13clickable(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_13clickable = {"clickable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_13clickable, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_13clickable(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clickable (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clickable", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clickable", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_12clickable(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_12clickable(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clickable", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":89
 *         pass
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_15connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_15connected = {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_15connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_15connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("connected", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "connected", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_14connected(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_14connected(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":44
 *     name = "None"
 *     description = ""
 *     cdef public tuple _size             # <<<<<<<<<<<<<<
 *     cdef public object exit_event
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size___get__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size_2__set__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size_2__set__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyTuple_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v_value))) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_size);
  __Pyx_DECREF(__pyx_v_self->_size);
  __pyx_v_self->_size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod._size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size_4__del__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_5_size_4__del__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_size);
  __Pyx_DECREF(__pyx_v_self->_size);
  __pyx_v_self->_size = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":45
 *     description = ""
 *     cdef public tuple _size
 *     cdef public object exit_event             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event___get__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event___get__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exit_event);
  __pyx_r = __pyx_v_self->exit_event;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event_2__set__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event_2__set__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->exit_event);
  __Pyx_DECREF(__pyx_v_self->exit_event);
  __pyx_v_self->exit_event = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event_4__del__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_17BaseCaptureMethod_10exit_event_4__del__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->exit_event);
  __Pyx_DECREF(__pyx_v_self->exit_event);
  __pyx_v_self->exit_event = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_17__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_16__reduce_cython__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_16__reduce_cython__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._size, self.exit_event)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->_size);
  __Pyx_GIVEREF(__pyx_v_self->_size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->_size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->exit_event);
  __Pyx_GIVEREF(__pyx_v_self->exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->_size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->exit_event != Py_None);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._size is not None or self.exit_event is not None
 *     if use_setstate:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_BaseCaptureMethod); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_97161228);
    __Pyx_GIVEREF(__pyx_int_97161228);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_97161228)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, None), state
 *     else:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_BaseCaptureMethod); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_97161228);
    __Pyx_GIVEREF(__pyx_int_97161228);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_97161228)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17BaseCaptureMethod_19__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17BaseCaptureMethod_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_17BaseCaptureMethod_18__setstate_cython__(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_17BaseCaptureMethod_18__setstate_cython__(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_BaseCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BaseCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":95
 *     cdef public object _hwnd_window
 * 
 *     def __init__(self, hwnd_window: HwndWindow):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._hwnd_window = hwnd_window
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd_window,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_window)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 95, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_hwnd_window = ((struct __pyx_obj_2ok_7Capture_HwndWindow *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 95, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hwnd_window), __pyx_ptype_2ok_7Capture_HwndWindow, 0, "hwnd_window", 0))) __PYX_ERR(0, 95, __pyx_L1_error)
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self), __pyx_v_hwnd_window);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":96
 * 
 *     def __init__(self, hwnd_window: HwndWindow):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._hwnd_window = hwnd_window
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod))) __PYX_ERR(0, 96, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 96, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":97
 *     def __init__(self, hwnd_window: HwndWindow):
 *         super().__init__()
 *         self._hwnd_window = hwnd_window             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF((PyObject *)__pyx_v_hwnd_window);
  __Pyx_GIVEREF((PyObject *)__pyx_v_hwnd_window);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_window);
  __Pyx_DECREF(__pyx_v_self->_hwnd_window);
  __pyx_v_self->_hwnd_window = ((PyObject *)__pyx_v_hwnd_window);

  /* "ok/Capture.pyx":95
 *     cdef public object _hwnd_window
 * 
 *     def __init__(self, hwnd_window: HwndWindow):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._hwnd_window = hwnd_window
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":99
 *         self._hwnd_window = hwnd_window
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hwnd_window(self):
 *         return self._hwnd_window
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window___get__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window___get__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ok/Capture.pyx":101
 *     @property
 *     def hwnd_window(self):
 *         return self._hwnd_window             # <<<<<<<<<<<<<<
 * 
 *     @hwnd_window.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_hwnd_window);
  __pyx_r = __pyx_v_self->_hwnd_window;
  goto __pyx_L0;

  /* "ok/Capture.pyx":99
 *         self._hwnd_window = hwnd_window
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hwnd_window(self):
 *         return self._hwnd_window
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":103
 *         return self._hwnd_window
 * 
 *     @hwnd_window.setter             # <<<<<<<<<<<<<<
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_hwnd_window); /*proto*/
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_hwnd_window) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_2__set__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self), ((PyObject *)__pyx_v_hwnd_window));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_2__set__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_hwnd_window) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);

  /* "ok/Capture.pyx":105
 *     @hwnd_window.setter
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window             # <<<<<<<<<<<<<<
 * 
 *     def connected(self):
 */
  __Pyx_INCREF(__pyx_v_hwnd_window);
  __Pyx_GIVEREF(__pyx_v_hwnd_window);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_window);
  __Pyx_DECREF(__pyx_v_self->_hwnd_window);
  __pyx_v_self->_hwnd_window = __pyx_v_hwnd_window;

  /* "ok/Capture.pyx":103
 *         return self._hwnd_window
 * 
 *     @hwnd_window.setter             # <<<<<<<<<<<<<<
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":107
 *         self._hwnd_window = hwnd_window
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f"check connected {self._hwnd_window}")
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_3connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_3connected = {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_3connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_3connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("connected", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "connected", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_2connected(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_2connected(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connected", 1);

  /* "ok/Capture.pyx":108
 * 
 *     def connected(self):
 *         logger.debug(f"check connected {self._hwnd_window}")             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_hwnd_window, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_check_connected, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":109
 *     def connected(self):
 *         logger.debug(f"check connected {self._hwnd_window}")
 *         return self.hwnd_window is not None and self.hwnd_window.exists             # <<<<<<<<<<<<<<
 * 
 *     def get_abs_cords(self, x, y):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = (__pyx_t_3 != Py_None);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":107
 *         self._hwnd_window = hwnd_window
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f"check connected {self._hwnd_window}")
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":111
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_5get_abs_cords(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_5get_abs_cords = {"get_abs_cords", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_5get_abs_cords, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_5get_abs_cords(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_abs_cords (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_abs_cords", 1, 2, 2, 1); __PYX_ERR(0, 111, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_abs_cords") < 0)) __PYX_ERR(0, 111, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_abs_cords", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 111, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.get_abs_cords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_4get_abs_cords(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_4get_abs_cords(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_abs_cords", 1);

  /* "ok/Capture.pyx":112
 * 
 *     def get_abs_cords(self, x, y):
 *         return self.hwnd_window.get_abs_cords(x, y)             # <<<<<<<<<<<<<<
 * 
 *     def clickable(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_abs_cords); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_x, __pyx_v_y};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":111
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.get_abs_cords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":114
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.visible
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_7clickable(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_7clickable = {"clickable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_7clickable, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_7clickable(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clickable (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clickable", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clickable", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_6clickable(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_6clickable(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clickable", 1);

  /* "ok/Capture.pyx":115
 * 
 *     def clickable(self):
 *         return self.hwnd_window is not None and self.hwnd_window.visible             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_visible); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":114
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.visible
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.clickable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":117
 *         return self.hwnd_window is not None and self.hwnd_window.visible
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         result = f'{self.__class__.__name__}_{self.width}x{self.height}'
 *         if self.hwnd_window is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_8__str__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_8__str__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "ok/Capture.pyx":118
 * 
 *     def __str__(self):
 *         result = f'{self.__class__.__name__}_{self.width}x{self.height}'             # <<<<<<<<<<<<<<
 *         if self.hwnd_window is None:
 *             result += '_no_window'
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_n_u_x);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ok/Capture.pyx":119
 *     def __str__(self):
 *         result = f'{self.__class__.__name__}_{self.width}x{self.height}'
 *         if self.hwnd_window is None:             # <<<<<<<<<<<<<<
 *             result += '_no_window'
 *         else:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__pyx_t_4 == Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":120
 *         result = f'{self.__class__.__name__}_{self.width}x{self.height}'
 *         if self.hwnd_window is None:
 *             result += '_no_window'             # <<<<<<<<<<<<<<
 *         else:
 *             result += f'_{self.hwnd_window}'
 */
    __pyx_t_4 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_result, __pyx_n_s_no_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_result, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "ok/Capture.pyx":119
 *     def __str__(self):
 *         result = f'{self.__class__.__name__}_{self.width}x{self.height}'
 *         if self.hwnd_window is None:             # <<<<<<<<<<<<<<
 *             result += '_no_window'
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":122
 *             result += '_no_window'
 *         else:
 *             result += f'_{self.hwnd_window}'             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_n_u__7, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":123
 *         else:
 *             result += f'_{self.hwnd_window}'
 *         return result             # <<<<<<<<<<<<<<
 * 
 * def get_crop_point(frame_width, frame_height, target_width, target_height):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "ok/Capture.pyx":117
 *         return self.hwnd_window is not None and self.hwnd_window.visible
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         result = f'{self.__class__.__name__}_{self.width}x{self.height}'
 *         if self.hwnd_window is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":93
 * 
 * cdef class BaseWindowsCaptureMethod(BaseCaptureMethod):
 *     cdef public object _hwnd_window             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, hwnd_window: HwndWindow):
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window___get__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window___get__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_hwnd_window);
  __pyx_r = __pyx_v_self->_hwnd_window;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_2__set__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_2__set__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_window);
  __Pyx_DECREF(__pyx_v_self->_hwnd_window);
  __pyx_v_self->_hwnd_window = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_4__del__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_4__del__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_window);
  __Pyx_DECREF(__pyx_v_self->_hwnd_window);
  __pyx_v_self->_hwnd_window = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_10__reduce_cython__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_10__reduce_cython__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.exit_event)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->_hwnd_window);
  __Pyx_GIVEREF(__pyx_v_self->_hwnd_window);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->_hwnd_window)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->_hwnd_window != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.exit_event != Py_None);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 *     if use_setstate:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_BaseWindowsCaptur); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_268090033);
    __Pyx_GIVEREF(__pyx_int_268090033);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_268090033)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, None), state
 *     else:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseWindowsCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_BaseWindowsCaptur); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_268090033);
    __Pyx_GIVEREF(__pyx_int_268090033);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_268090033)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseWindowsCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12__setstate_cython__(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24BaseWindowsCaptureMethod_12__setstate_cython__(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseWindowsCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_BaseWindowsCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseWindowsCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BaseWindowsCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":125
 *         return result
 * 
 * def get_crop_point(frame_width, frame_height, target_width, target_height):             # <<<<<<<<<<<<<<
 *     x = round((frame_width - target_width) / 2)
 *     y = (frame_height - target_height) - x
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_1get_crop_point(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_1get_crop_point = {"get_crop_point", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_1get_crop_point, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_1get_crop_point(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_frame_width = 0;
  PyObject *__pyx_v_frame_height = 0;
  PyObject *__pyx_v_target_width = 0;
  PyObject *__pyx_v_target_height = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_crop_point (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frame_width,&__pyx_n_s_frame_height,&__pyx_n_s_target_width,&__pyx_n_s_target_height,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_crop_point", 1, 4, 4, 1); __PYX_ERR(0, 125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_crop_point", 1, 4, 4, 2); __PYX_ERR(0, 125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_crop_point", 1, 4, 4, 3); __PYX_ERR(0, 125, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_crop_point") < 0)) __PYX_ERR(0, 125, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_frame_width = values[0];
    __pyx_v_frame_height = values[1];
    __pyx_v_target_width = values[2];
    __pyx_v_target_height = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_crop_point", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 125, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_crop_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_get_crop_point(__pyx_self, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_target_width, __pyx_v_target_height);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_get_crop_point(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_target_width, PyObject *__pyx_v_target_height) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_crop_point", 1);

  /* "ok/Capture.pyx":126
 * 
 * def get_crop_point(frame_width, frame_height, target_width, target_height):
 *     x = round((frame_width - target_width) / 2)             # <<<<<<<<<<<<<<
 *     y = (frame_height - target_height) - x
 *     return x, y
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_frame_width, __pyx_v_target_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_round, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":127
 * def get_crop_point(frame_width, frame_height, target_width, target_height):
 *     x = round((frame_width - target_width) / 2)
 *     y = (frame_height - target_height) - x             # <<<<<<<<<<<<<<
 *     return x, y
 * 
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_frame_height, __pyx_v_target_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":128
 *     x = round((frame_width - target_width) / 2)
 *     y = (frame_height - target_height) - x
 *     return x, y             # <<<<<<<<<<<<<<
 * 
 * cdef class WindowsGraphicsCaptureMethod(BaseWindowsCaptureMethod):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x)) __PYX_ERR(0, 128, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_y)) __PYX_ERR(0, 128, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":125
 *         return result
 * 
 * def get_crop_point(frame_width, frame_height, target_width, target_height):             # <<<<<<<<<<<<<<
 *     x = round((frame_width - target_width) / 2)
 *     y = (frame_height - target_height) - x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ok.Capture.get_crop_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":146
 *     cdef object last_size
 * 
 *     def __init__(self, hwnd_window: HwndWindow):             # <<<<<<<<<<<<<<
 *         super().__init__(hwnd_window)
 *         self.last_frame = None
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd_window,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_window)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 146, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_hwnd_window = ((struct __pyx_obj_2ok_7Capture_HwndWindow *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 146, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hwnd_window), __pyx_ptype_2ok_7Capture_HwndWindow, 0, "hwnd_window", 0))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self), __pyx_v_hwnd_window);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":147
 * 
 *     def __init__(self, hwnd_window: HwndWindow):
 *         super().__init__(hwnd_window)             # <<<<<<<<<<<<<<
 *         self.last_frame = None
 *         self.last_frame_time = time.time()
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod))) __PYX_ERR(0, 147, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 147, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_hwnd_window)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":148
 *     def __init__(self, hwnd_window: HwndWindow):
 *         super().__init__(hwnd_window)
 *         self.last_frame = None             # <<<<<<<<<<<<<<
 *         self.last_frame_time = time.time()
 *         self.frame_pool = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->last_frame);
  __Pyx_DECREF(__pyx_v_self->last_frame);
  __pyx_v_self->last_frame = Py_None;

  /* "ok/Capture.pyx":149
 *         super().__init__(hwnd_window)
 *         self.last_frame = None
 *         self.last_frame_time = time.time()             # <<<<<<<<<<<<<<
 *         self.frame_pool = None
 *         self.item = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->last_frame_time = __pyx_t_5;

  /* "ok/Capture.pyx":150
 *         self.last_frame = None
 *         self.last_frame_time = time.time()
 *         self.frame_pool = None             # <<<<<<<<<<<<<<
 *         self.item = None
 *         self.session = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->frame_pool);
  __Pyx_DECREF(__pyx_v_self->frame_pool);
  __pyx_v_self->frame_pool = Py_None;

  /* "ok/Capture.pyx":151
 *         self.last_frame_time = time.time()
 *         self.frame_pool = None
 *         self.item = None             # <<<<<<<<<<<<<<
 *         self.session = None
 *         self.cputex = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->item);
  __Pyx_DECREF(__pyx_v_self->item);
  __pyx_v_self->item = Py_None;

  /* "ok/Capture.pyx":152
 *         self.frame_pool = None
 *         self.item = None
 *         self.session = None             # <<<<<<<<<<<<<<
 *         self.cputex = None
 *         self.rtdevice = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->session);
  __Pyx_DECREF(__pyx_v_self->session);
  __pyx_v_self->session = Py_None;

  /* "ok/Capture.pyx":153
 *         self.item = None
 *         self.session = None
 *         self.cputex = None             # <<<<<<<<<<<<<<
 *         self.rtdevice = None
 *         self.dxdevice = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->cputex);
  __Pyx_DECREF(__pyx_v_self->cputex);
  __pyx_v_self->cputex = Py_None;

  /* "ok/Capture.pyx":154
 *         self.session = None
 *         self.cputex = None
 *         self.rtdevice = None             # <<<<<<<<<<<<<<
 *         self.dxdevice = None
 *         self.immediatedc = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rtdevice);
  __Pyx_DECREF(__pyx_v_self->rtdevice);
  __pyx_v_self->rtdevice = Py_None;

  /* "ok/Capture.pyx":155
 *         self.cputex = None
 *         self.rtdevice = None
 *         self.dxdevice = None             # <<<<<<<<<<<<<<
 *         self.immediatedc = None
 *         self.start_or_stop()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dxdevice);
  __Pyx_DECREF(__pyx_v_self->dxdevice);
  __pyx_v_self->dxdevice = Py_None;

  /* "ok/Capture.pyx":156
 *         self.rtdevice = None
 *         self.dxdevice = None
 *         self.immediatedc = None             # <<<<<<<<<<<<<<
 *         self.start_or_stop()
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->immediatedc);
  __Pyx_DECREF(__pyx_v_self->immediatedc);
  __pyx_v_self->immediatedc = Py_None;

  /* "ok/Capture.pyx":157
 *         self.dxdevice = None
 *         self.immediatedc = None
 *         self.start_or_stop()             # <<<<<<<<<<<<<<
 * 
 *     cdef frame_arrived_callback(self, x, y):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_start_or_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":146
 *     cdef object last_size
 * 
 *     def __init__(self, hwnd_window: HwndWindow):             # <<<<<<<<<<<<<<
 *         super().__init__(hwnd_window)
 *         self.last_frame = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":159
 *         self.start_or_stop()
 * 
 *     cdef frame_arrived_callback(self, x, y):             # <<<<<<<<<<<<<<
 *         cdef object next_frame
 *         try:
 */

static PyObject *__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_frame_arrived_callback(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x, CYTHON_UNUSED PyObject *__pyx_v_y) {
  PyObject *__pyx_v_next_frame = 0;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_arrived_callback", 1);

  /* "ok/Capture.pyx":161
 *     cdef frame_arrived_callback(self, x, y):
 *         cdef object next_frame
 *         try:             # <<<<<<<<<<<<<<
 *             self.last_frame_time = time.time()
 *             next_frame = self.frame_pool.TryGetNextFrame()
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ok/Capture.pyx":162
 *         cdef object next_frame
 *         try:
 *             self.last_frame_time = time.time()             # <<<<<<<<<<<<<<
 *             next_frame = self.frame_pool.TryGetNextFrame()
 *             if next_frame is not None:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 162, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->last_frame_time = __pyx_t_8;

      /* "ok/Capture.pyx":163
 *         try:
 *             self.last_frame_time = time.time()
 *             next_frame = self.frame_pool.TryGetNextFrame()             # <<<<<<<<<<<<<<
 *             if next_frame is not None:
 *                 self.last_frame = self.convert_dx_frame(next_frame)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->frame_pool, __pyx_n_s_TryGetNextFrame); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_next_frame = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":164
 *             self.last_frame_time = time.time()
 *             next_frame = self.frame_pool.TryGetNextFrame()
 *             if next_frame is not None:             # <<<<<<<<<<<<<<
 *                 self.last_frame = self.convert_dx_frame(next_frame)
 *             else:
 */
      __pyx_t_9 = (__pyx_v_next_frame != Py_None);
      if (__pyx_t_9) {

        /* "ok/Capture.pyx":165
 *             next_frame = self.frame_pool.TryGetNextFrame()
 *             if next_frame is not None:
 *                 self.last_frame = self.convert_dx_frame(next_frame)             # <<<<<<<<<<<<<<
 *             else:
 *                 logger.warning('frame_arrived_callback TryGetNextFrame returned None')
 */
        __pyx_t_4 = ((struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->convert_dx_frame(__pyx_v_self, __pyx_v_next_frame); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_v_self->last_frame);
        __Pyx_DECREF(__pyx_v_self->last_frame);
        __pyx_v_self->last_frame = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "ok/Capture.pyx":164
 *             self.last_frame_time = time.time()
 *             next_frame = self.frame_pool.TryGetNextFrame()
 *             if next_frame is not None:             # <<<<<<<<<<<<<<
 *                 self.last_frame = self.convert_dx_frame(next_frame)
 *             else:
 */
        goto __pyx_L9;
      }

      /* "ok/Capture.pyx":167
 *                 self.last_frame = self.convert_dx_frame(next_frame)
 *             else:
 *                 logger.warning('frame_arrived_callback TryGetNextFrame returned None')             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             logger.error(f"TryGetNextFrame error {e}")
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 167, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_s_frame_arrived_callback_TryGetNex};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_L9:;

      /* "ok/Capture.pyx":161
 *     cdef frame_arrived_callback(self, x, y):
 *         cdef object next_frame
 *         try:             # <<<<<<<<<<<<<<
 *             self.last_frame_time = time.time()
 *             next_frame = self.frame_pool.TryGetNextFrame()
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":168
 *             else:
 *                 logger.warning('frame_arrived_callback TryGetNextFrame returned None')
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"TryGetNextFrame error {e}")
 *             self.close()
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_10) {
      __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.frame_arrived_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 168, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "ok/Capture.pyx":169
 *                 logger.warning('frame_arrived_callback TryGetNextFrame returned None')
 *         except Exception as e:
 *             logger.error(f"TryGetNextFrame error {e}")             # <<<<<<<<<<<<<<
 *             self.close()
 *             return
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 169, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_error); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 169, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 169, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = __Pyx_PyUnicode_Concat(__pyx_kp_u_TryGetNextFrame_error, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 169, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_14};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 169, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ok/Capture.pyx":170
 *         except Exception as e:
 *             logger.error(f"TryGetNextFrame error {e}")
 *             self.close()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 170, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 170, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ok/Capture.pyx":171
 *             logger.error(f"TryGetNextFrame error {e}")
 *             self.close()
 *             return             # <<<<<<<<<<<<<<
 * 
 *     cdef object convert_dx_frame(self, frame):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L14_return;
      }

      /* "ok/Capture.pyx":168
 *             else:
 *                 logger.warning('frame_arrived_callback TryGetNextFrame returned None')
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"TryGetNextFrame error {e}")
 *             self.close()
 */
      /*finally:*/ {
        __pyx_L15_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __pyx_t_10 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
          }
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_16;
          goto __pyx_L5_except_error;
        }
        __pyx_L14_return: {
          __pyx_t_22 = __pyx_r;
          __pyx_r = 0;
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          __pyx_r = __pyx_t_22;
          __pyx_t_22 = 0;
          goto __pyx_L6_except_return;
        }
      }
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":161
 *     cdef frame_arrived_callback(self, x, y):
 *         cdef object next_frame
 *         try:             # <<<<<<<<<<<<<<
 *             self.last_frame_time = time.time()
 *             next_frame = self.frame_pool.TryGetNextFrame()
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "ok/Capture.pyx":159
 *         self.start_or_stop()
 * 
 *     cdef frame_arrived_callback(self, x, y):             # <<<<<<<<<<<<<<
 *         cdef object next_frame
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.frame_arrived_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_next_frame);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":173
 *             return
 * 
 *     cdef object convert_dx_frame(self, frame):             # <<<<<<<<<<<<<<
 *         if not frame:
 *             # logger.warning('convert_dx_frame self.last_dx_frame is none')
 */

static PyObject *__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_convert_dx_frame(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_frame) {
  int __pyx_v_need_reset_framepool;
  int __pyx_v_need_reset_device;
  PyObject *__pyx_v_tex = 0;
  PyObject *__pyx_v_cputex = 0;
  PyObject *__pyx_v_desc = 0;
  PyObject *__pyx_v_mapinfo = 0;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_v_d3d11 = NULL;
  PyObject *__pyx_v_IDirect3DDxgiInterfaceAccess = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_GetActivationFactory = NULL;
  PyObject *__pyx_v_desc2 = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  char const *__pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_dx_frame", 1);

  /* "ok/Capture.pyx":174
 * 
 *     cdef object convert_dx_frame(self, frame):
 *         if not frame:             # <<<<<<<<<<<<<<
 *             # logger.warning('convert_dx_frame self.last_dx_frame is none')
 *             return None
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_frame); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":176
 *         if not frame:
 *             # logger.warning('convert_dx_frame self.last_dx_frame is none')
 *             return None             # <<<<<<<<<<<<<<
 *         cdef bint need_reset_framepool = False
 *         if frame.ContentSize.Width != self.last_size.Width or frame.ContentSize.Height != self.last_size.Height:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":174
 * 
 *     cdef object convert_dx_frame(self, frame):
 *         if not frame:             # <<<<<<<<<<<<<<
 *             # logger.warning('convert_dx_frame self.last_dx_frame is none')
 *             return None
 */
  }

  /* "ok/Capture.pyx":177
 *             # logger.warning('convert_dx_frame self.last_dx_frame is none')
 *             return None
 *         cdef bint need_reset_framepool = False             # <<<<<<<<<<<<<<
 *         if frame.ContentSize.Width != self.last_size.Width or frame.ContentSize.Height != self.last_size.Height:
 *             need_reset_framepool = True
 */
  __pyx_v_need_reset_framepool = 0;

  /* "ok/Capture.pyx":178
 *             return None
 *         cdef bint need_reset_framepool = False
 *         if frame.ContentSize.Width != self.last_size.Width or frame.ContentSize.Height != self.last_size.Height:             # <<<<<<<<<<<<<<
 *             need_reset_framepool = True
 *             self.last_size = frame.ContentSize
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_ContentSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->last_size, __pyx_n_s_Width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_ContentSize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->last_size, __pyx_n_s_Height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":179
 *         cdef bint need_reset_framepool = False
 *         if frame.ContentSize.Width != self.last_size.Width or frame.ContentSize.Height != self.last_size.Height:
 *             need_reset_framepool = True             # <<<<<<<<<<<<<<
 *             self.last_size = frame.ContentSize
 * 
 */
    __pyx_v_need_reset_framepool = 1;

    /* "ok/Capture.pyx":180
 *         if frame.ContentSize.Width != self.last_size.Width or frame.ContentSize.Height != self.last_size.Height:
 *             need_reset_framepool = True
 *             self.last_size = frame.ContentSize             # <<<<<<<<<<<<<<
 * 
 *         if need_reset_framepool:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_ContentSize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->last_size);
    __Pyx_DECREF(__pyx_v_self->last_size);
    __pyx_v_self->last_size = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ok/Capture.pyx":178
 *             return None
 *         cdef bint need_reset_framepool = False
 *         if frame.ContentSize.Width != self.last_size.Width or frame.ContentSize.Height != self.last_size.Height:             # <<<<<<<<<<<<<<
 *             need_reset_framepool = True
 *             self.last_size = frame.ContentSize
 */
  }

  /* "ok/Capture.pyx":182
 *             self.last_size = frame.ContentSize
 * 
 *         if need_reset_framepool:             # <<<<<<<<<<<<<<
 *             logger.info('need_reset_framepool')
 *             self.reset_framepool(frame.ContentSize)
 */
  if (__pyx_v_need_reset_framepool) {

    /* "ok/Capture.pyx":183
 * 
 *         if need_reset_framepool:
 *             logger.info('need_reset_framepool')             # <<<<<<<<<<<<<<
 *             self.reset_framepool(frame.ContentSize)
 *             return
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_n_s_need_reset_framepool};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":184
 *         if need_reset_framepool:
 *             logger.info('need_reset_framepool')
 *             self.reset_framepool(frame.ContentSize)             # <<<<<<<<<<<<<<
 *             return
 *         cdef bint need_reset_device = False
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset_framepool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_ContentSize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":185
 *             logger.info('need_reset_framepool')
 *             self.reset_framepool(frame.ContentSize)
 *             return             # <<<<<<<<<<<<<<
 *         cdef bint need_reset_device = False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":182
 *             self.last_size = frame.ContentSize
 * 
 *         if need_reset_framepool:             # <<<<<<<<<<<<<<
 *             logger.info('need_reset_framepool')
 *             self.reset_framepool(frame.ContentSize)
 */
  }

  /* "ok/Capture.pyx":186
 *             self.reset_framepool(frame.ContentSize)
 *             return
 *         cdef bint need_reset_device = False             # <<<<<<<<<<<<<<
 * 
 *         cdef object tex = None
 */
  __pyx_v_need_reset_device = 0;

  /* "ok/Capture.pyx":188
 *         cdef bint need_reset_device = False
 * 
 *         cdef object tex = None             # <<<<<<<<<<<<<<
 * 
 *         cdef object cputex = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_tex = Py_None;

  /* "ok/Capture.pyx":190
 *         cdef object tex = None
 * 
 *         cdef object cputex = None             # <<<<<<<<<<<<<<
 *         cdef object desc = None
 *         cdef object mapinfo = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_cputex = Py_None;

  /* "ok/Capture.pyx":191
 * 
 *         cdef object cputex = None
 *         cdef object desc = None             # <<<<<<<<<<<<<<
 *         cdef object mapinfo = None
 *         cdef object img = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_desc = Py_None;

  /* "ok/Capture.pyx":192
 *         cdef object cputex = None
 *         cdef object desc = None
 *         cdef object mapinfo = None             # <<<<<<<<<<<<<<
 *         cdef object img = None
 *         try:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_mapinfo = Py_None;

  /* "ok/Capture.pyx":193
 *         cdef object desc = None
 *         cdef object mapinfo = None
 *         cdef object img = None             # <<<<<<<<<<<<<<
 *         try:
 *             from ok.capture.windows import d3d11
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_img = Py_None;

  /* "ok/Capture.pyx":194
 *         cdef object mapinfo = None
 *         cdef object img = None
 *         try:             # <<<<<<<<<<<<<<
 *             from ok.capture.windows import d3d11
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess
 */
  /*try:*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "ok/Capture.pyx":195
 *         cdef object img = None
 *         try:
 *             from ok.capture.windows import d3d11             # <<<<<<<<<<<<<<
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess
 *             from ok.rotypes.roapi import GetActivationFactory
 */
        __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_n_s_d3d11);
        __Pyx_GIVEREF(__pyx_n_s_d3d11);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_d3d11)) __PYX_ERR(0, 195, __pyx_L11_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_capture_windows, __pyx_t_4, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_d3d11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_d3d11 = __pyx_t_4;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":196
 *         try:
 *             from ok.capture.windows import d3d11
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess             # <<<<<<<<<<<<<<
 *             from ok.rotypes.roapi import GetActivationFactory
 *             tex = frame.Surface.astype(IDirect3DDxgiInterfaceAccess).GetInterface(
 */
        __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_IDirect3DDxgiInterfaceAccess);
        __Pyx_GIVEREF(__pyx_n_s_IDirect3DDxgiInterfaceAccess);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IDirect3DDxgiInterfaceAccess)) __PYX_ERR(0, 196, __pyx_L11_error);
        __pyx_t_4 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Dire, __pyx_t_3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_IDirect3DDxgiInterfaceAccess); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_IDirect3DDxgiInterfaceAccess = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ok/Capture.pyx":197
 *             from ok.capture.windows import d3d11
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess
 *             from ok.rotypes.roapi import GetActivationFactory             # <<<<<<<<<<<<<<
 *             tex = frame.Surface.astype(IDirect3DDxgiInterfaceAccess).GetInterface(
 *                 d3d11.ID3D11Texture2D.GUID).astype(d3d11.ID3D11Texture2D)
 */
        __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_n_s_GetActivationFactory);
        __Pyx_GIVEREF(__pyx_n_s_GetActivationFactory);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_GetActivationFactory)) __PYX_ERR(0, 197, __pyx_L11_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes_roapi, __pyx_t_4, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_GetActivationFactory); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_GetActivationFactory = __pyx_t_4;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":198
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess
 *             from ok.rotypes.roapi import GetActivationFactory
 *             tex = frame.Surface.astype(IDirect3DDxgiInterfaceAccess).GetInterface(             # <<<<<<<<<<<<<<
 *                 d3d11.ID3D11Texture2D.GUID).astype(d3d11.ID3D11Texture2D)
 *             desc = tex.GetDesc()
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_Surface); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_astype); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 198, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_IDirect3DDxgiInterfaceAccess};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GetInterface); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 198, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ok/Capture.pyx":199
 *             from ok.rotypes.roapi import GetActivationFactory
 *             tex = frame.Surface.astype(IDirect3DDxgiInterfaceAccess).GetInterface(
 *                 d3d11.ID3D11Texture2D.GUID).astype(d3d11.ID3D11Texture2D)             # <<<<<<<<<<<<<<
 *             desc = tex.GetDesc()
 *             desc2 = d3d11.D3D11_TEXTURE2D_DESC()
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_ID3D11Texture2D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GUID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_astype); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 199, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_ID3D11Texture2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_4};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_tex, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":200
 *             tex = frame.Surface.astype(IDirect3DDxgiInterfaceAccess).GetInterface(
 *                 d3d11.ID3D11Texture2D.GUID).astype(d3d11.ID3D11Texture2D)
 *             desc = tex.GetDesc()             # <<<<<<<<<<<<<<
 *             desc2 = d3d11.D3D11_TEXTURE2D_DESC()
 *             desc2.Width = desc.Width
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_tex, __pyx_n_s_GetDesc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 200, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_desc, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":201
 *                 d3d11.ID3D11Texture2D.GUID).astype(d3d11.ID3D11Texture2D)
 *             desc = tex.GetDesc()
 *             desc2 = d3d11.D3D11_TEXTURE2D_DESC()             # <<<<<<<<<<<<<<
 *             desc2.Width = desc.Width
 *             desc2.Height = desc.Height
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11_TEXTURE2D_DESC); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 201, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_v_desc2 = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":202
 *             desc = tex.GetDesc()
 *             desc2 = d3d11.D3D11_TEXTURE2D_DESC()
 *             desc2.Width = desc.Width             # <<<<<<<<<<<<<<
 *             desc2.Height = desc.Height
 *             desc2.MipLevels = desc.MipLevels
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_Width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_Width, __pyx_t_3) < 0) __PYX_ERR(0, 202, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":203
 *             desc2 = d3d11.D3D11_TEXTURE2D_DESC()
 *             desc2.Width = desc.Width
 *             desc2.Height = desc.Height             # <<<<<<<<<<<<<<
 *             desc2.MipLevels = desc.MipLevels
 *             desc2.ArraySize = desc.ArraySize
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_Height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_Height, __pyx_t_3) < 0) __PYX_ERR(0, 203, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":204
 *             desc2.Width = desc.Width
 *             desc2.Height = desc.Height
 *             desc2.MipLevels = desc.MipLevels             # <<<<<<<<<<<<<<
 *             desc2.ArraySize = desc.ArraySize
 *             desc2.Format = desc.Format
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_MipLevels); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_MipLevels, __pyx_t_3) < 0) __PYX_ERR(0, 204, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":205
 *             desc2.Height = desc.Height
 *             desc2.MipLevels = desc.MipLevels
 *             desc2.ArraySize = desc.ArraySize             # <<<<<<<<<<<<<<
 *             desc2.Format = desc.Format
 *             desc2.SampleDesc = desc.SampleDesc
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_ArraySize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_ArraySize, __pyx_t_3) < 0) __PYX_ERR(0, 205, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":206
 *             desc2.MipLevels = desc.MipLevels
 *             desc2.ArraySize = desc.ArraySize
 *             desc2.Format = desc.Format             # <<<<<<<<<<<<<<
 *             desc2.SampleDesc = desc.SampleDesc
 *             desc2.Usage = d3d11.D3D11_USAGE_STAGING
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_Format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_Format, __pyx_t_3) < 0) __PYX_ERR(0, 206, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":207
 *             desc2.ArraySize = desc.ArraySize
 *             desc2.Format = desc.Format
 *             desc2.SampleDesc = desc.SampleDesc             # <<<<<<<<<<<<<<
 *             desc2.Usage = d3d11.D3D11_USAGE_STAGING
 *             desc2.CPUAccessFlags = d3d11.D3D11_CPU_ACCESS_READ
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_SampleDesc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_SampleDesc, __pyx_t_3) < 0) __PYX_ERR(0, 207, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":208
 *             desc2.Format = desc.Format
 *             desc2.SampleDesc = desc.SampleDesc
 *             desc2.Usage = d3d11.D3D11_USAGE_STAGING             # <<<<<<<<<<<<<<
 *             desc2.CPUAccessFlags = d3d11.D3D11_CPU_ACCESS_READ
 *             desc2.BindFlags = 0
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11_USAGE_STAGING); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_Usage, __pyx_t_3) < 0) __PYX_ERR(0, 208, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":209
 *             desc2.SampleDesc = desc.SampleDesc
 *             desc2.Usage = d3d11.D3D11_USAGE_STAGING
 *             desc2.CPUAccessFlags = d3d11.D3D11_CPU_ACCESS_READ             # <<<<<<<<<<<<<<
 *             desc2.BindFlags = 0
 *             desc2.MiscFlags = 0
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11_CPU_ACCESS_READ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_CPUAccessFlags, __pyx_t_3) < 0) __PYX_ERR(0, 209, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":210
 *             desc2.Usage = d3d11.D3D11_USAGE_STAGING
 *             desc2.CPUAccessFlags = d3d11.D3D11_CPU_ACCESS_READ
 *             desc2.BindFlags = 0             # <<<<<<<<<<<<<<
 *             desc2.MiscFlags = 0
 *             cputex = self.dxdevice.CreateTexture2D(ctypes.byref(desc2), None)
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_BindFlags, __pyx_int_0) < 0) __PYX_ERR(0, 210, __pyx_L11_error)

        /* "ok/Capture.pyx":211
 *             desc2.CPUAccessFlags = d3d11.D3D11_CPU_ACCESS_READ
 *             desc2.BindFlags = 0
 *             desc2.MiscFlags = 0             # <<<<<<<<<<<<<<
 *             cputex = self.dxdevice.CreateTexture2D(ctypes.byref(desc2), None)
 *             self.immediatedc.CopyResource(cputex, tex)
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_desc2, __pyx_n_s_MiscFlags, __pyx_int_0) < 0) __PYX_ERR(0, 211, __pyx_L11_error)

        /* "ok/Capture.pyx":212
 *             desc2.BindFlags = 0
 *             desc2.MiscFlags = 0
 *             cputex = self.dxdevice.CreateTexture2D(ctypes.byref(desc2), None)             # <<<<<<<<<<<<<<
 *             self.immediatedc.CopyResource(cputex, tex)
 *             mapinfo = self.immediatedc.Map(cputex, 0, d3d11.D3D11_MAP_READ, 0)
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->dxdevice, __pyx_n_s_CreateTexture2D); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 212, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_byref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_desc2};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_4, Py_None};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 212, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_cputex, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":213
 *             desc2.MiscFlags = 0
 *             cputex = self.dxdevice.CreateTexture2D(ctypes.byref(desc2), None)
 *             self.immediatedc.CopyResource(cputex, tex)             # <<<<<<<<<<<<<<
 *             mapinfo = self.immediatedc.Map(cputex, 0, d3d11.D3D11_MAP_READ, 0)
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->immediatedc, __pyx_n_s_CopyResource); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 213, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_cputex, __pyx_v_tex};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":214
 *             cputex = self.dxdevice.CreateTexture2D(ctypes.byref(desc2), None)
 *             self.immediatedc.CopyResource(cputex, tex)
 *             mapinfo = self.immediatedc.Map(cputex, 0, d3d11.D3D11_MAP_READ, 0)             # <<<<<<<<<<<<<<
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->immediatedc, __pyx_n_s_Map); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 214, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11_MAP_READ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_5, __pyx_v_cputex, __pyx_int_0, __pyx_t_4, __pyx_int_0};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_mapinfo, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":215
 *             self.immediatedc.CopyResource(cputex, tex)
 *             mapinfo = self.immediatedc.Map(cputex, 0, d3d11.D3D11_MAP_READ, 0)
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),             # <<<<<<<<<<<<<<
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[
 *                   :, :desc.Width].copy()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ctypeslib); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_as_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_cast); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_mapinfo, __pyx_n_s_pData); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_PBYTE); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 215, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_t_7, __pyx_t_13};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }

        /* "ok/Capture.pyx":216
 *             mapinfo = self.immediatedc.Map(cputex, 0, d3d11.D3D11_MAP_READ, 0)
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[             # <<<<<<<<<<<<<<
 *                   :, :desc.Width].copy()
 *             self.immediatedc.Unmap(cputex, 0)
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_Height); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_mapinfo, __pyx_n_s_RowPitch); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = __Pyx_PyInt_FloorDivideObjC(__pyx_t_13, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12)) __PYX_ERR(0, 216, __pyx_L11_error);
        __Pyx_GIVEREF(__pyx_t_7);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_7)) __PYX_ERR(0, 216, __pyx_L11_error);
        __Pyx_INCREF(__pyx_int_4);
        __Pyx_GIVEREF(__pyx_int_4);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_int_4)) __PYX_ERR(0, 216, __pyx_L11_error);
        __pyx_t_12 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_13};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 215, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }

        /* "ok/Capture.pyx":217
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[
 *                   :, :desc.Width].copy()             # <<<<<<<<<<<<<<
 *             self.immediatedc.Unmap(cputex, 0)
 *             # logger.debug(f'frame latency {(time.time() - start):.3f} {(time.time() - dx_time):.3f}')
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_Width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 217, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "ok/Capture.pyx":216
 *             mapinfo = self.immediatedc.Map(cputex, 0, d3d11.D3D11_MAP_READ, 0)
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[             # <<<<<<<<<<<<<<
 *                   :, :desc.Width].copy()
 *             self.immediatedc.Unmap(cputex, 0)
 */
        __pyx_t_13 = PySlice_New(Py_None, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_slice__4);
        __Pyx_GIVEREF(__pyx_slice__4);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_slice__4)) __PYX_ERR(0, 216, __pyx_L11_error);
        __Pyx_GIVEREF(__pyx_t_13);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_13)) __PYX_ERR(0, 216, __pyx_L11_error);
        __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 216, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ok/Capture.pyx":217
 *             img = np.ctypeslib.as_array(ctypes.cast(mapinfo.pData, PBYTE),
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[
 *                   :, :desc.Width].copy()             # <<<<<<<<<<<<<<
 *             self.immediatedc.Unmap(cputex, 0)
 *             # logger.debug(f'frame latency {(time.time() - start):.3f} {(time.time() - dx_time):.3f}')
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 217, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_img, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":218
 *                                         (desc.Height, mapinfo.RowPitch // 4, 4))[
 *                   :, :desc.Width].copy()
 *             self.immediatedc.Unmap(cputex, 0)             # <<<<<<<<<<<<<<
 *             # logger.debug(f'frame latency {(time.time() - start):.3f} {(time.time() - dx_time):.3f}')
 *             return img
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->immediatedc, __pyx_n_s_Unmap); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_v_cputex, __pyx_int_0};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":220
 *             self.immediatedc.Unmap(cputex, 0)
 *             # logger.debug(f'frame latency {(time.time() - start):.3f} {(time.time() - dx_time):.3f}')
 *             return img             # <<<<<<<<<<<<<<
 *         except OSError as e:
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_img);
        __pyx_r = __pyx_v_img;
        goto __pyx_L15_try_return;

        /* "ok/Capture.pyx":194
 *         cdef object mapinfo = None
 *         cdef object img = None
 *         try:             # <<<<<<<<<<<<<<
 *             from ok.capture.windows import d3d11
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess
 */
      }
      __pyx_L11_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ok/Capture.pyx":221
 *             # logger.debug(f'frame latency {(time.time() - start):.3f} {(time.time() - dx_time):.3f}')
 *             return img
 *         except OSError as e:             # <<<<<<<<<<<<<<
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:
 *                 need_reset_framepool = True
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
      if (__pyx_t_15) {
        __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.convert_dx_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_13) < 0) __PYX_ERR(0, 221, __pyx_L13_except_error)
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_e = __pyx_t_4;
        /*try:*/ {

          /* "ok/Capture.pyx":222
 *             return img
 *         except OSError as e:
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:             # <<<<<<<<<<<<<<
 *                 need_reset_framepool = True
 *                 need_reset_device = True
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_winerror); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(!__pyx_v_d3d11)) { __Pyx_RaiseUnboundLocalError("d3d11"); __PYX_ERR(0, 222, __pyx_L22_error) }
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_DXGI_ERROR_DEVICE_REMOVED); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = PyObject_RichCompare(__pyx_t_11, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (!__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L25_bool_binop_done;
          }
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_winerror); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(!__pyx_v_d3d11)) { __Pyx_RaiseUnboundLocalError("d3d11"); __PYX_ERR(0, 222, __pyx_L22_error) }
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_DXGI_ERROR_DEVICE_RESET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_11 = PyObject_RichCompare(__pyx_t_7, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 222, __pyx_L22_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_2 = __pyx_t_1;
          __pyx_L25_bool_binop_done:;
          if (likely(__pyx_t_2)) {

            /* "ok/Capture.pyx":223
 *         except OSError as e:
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:
 *                 need_reset_framepool = True             # <<<<<<<<<<<<<<
 *                 need_reset_device = True
 *                 logger.error('convert_dx_frame win error', e)
 */
            __pyx_v_need_reset_framepool = 1;

            /* "ok/Capture.pyx":224
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:
 *                 need_reset_framepool = True
 *                 need_reset_device = True             # <<<<<<<<<<<<<<
 *                 logger.error('convert_dx_frame win error', e)
 *             else:
 */
            __pyx_v_need_reset_device = 1;

            /* "ok/Capture.pyx":225
 *                 need_reset_framepool = True
 *                 need_reset_device = True
 *                 logger.error('convert_dx_frame win error', e)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise e
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_kp_s_convert_dx_frame_win_error, __pyx_v_e};
              __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 225, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

            /* "ok/Capture.pyx":222
 *             return img
 *         except OSError as e:
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:             # <<<<<<<<<<<<<<
 *                 need_reset_framepool = True
 *                 need_reset_device = True
 */
            goto __pyx_L24;
          }

          /* "ok/Capture.pyx":227
 *                 logger.error('convert_dx_frame win error', e)
 *             else:
 *                 raise e             # <<<<<<<<<<<<<<
 *         finally:
 *             if tex is not None:
 */
          /*else*/ {
            __Pyx_Raise(__pyx_v_e, 0, 0, 0);
            __PYX_ERR(0, 227, __pyx_L22_error)
          }
          __pyx_L24:;
        }

        /* "ok/Capture.pyx":221
 *             # logger.debug(f'frame latency {(time.time() - start):.3f} {(time.time() - dx_time):.3f}')
 *             return img
 *         except OSError as e:             # <<<<<<<<<<<<<<
 *             if e.winerror == d3d11.DXGI_ERROR_DEVICE_REMOVED or e.winerror == d3d11.DXGI_ERROR_DEVICE_RESET:
 *                 need_reset_framepool = True
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            goto __pyx_L23;
          }
          __pyx_L22_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_21);
            __Pyx_XGOTREF(__pyx_t_22);
            __Pyx_XGOTREF(__pyx_t_23);
            __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_XGIVEREF(__pyx_t_22);
              __Pyx_XGIVEREF(__pyx_t_23);
              __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
            goto __pyx_L13_except_error;
          }
          __pyx_L23:;
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L12_exception_handled;
      }
      goto __pyx_L13_except_error;

      /* "ok/Capture.pyx":194
 *         cdef object mapinfo = None
 *         cdef object img = None
 *         try:             # <<<<<<<<<<<<<<
 *             from ok.capture.windows import d3d11
 *             from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDxgiInterfaceAccess
 */
      __pyx_L13_except_error:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L9_error;
      __pyx_L15_try_return:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L8_return;
      __pyx_L12_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    }
  }

  /* "ok/Capture.pyx":229
 *                 raise e
 *         finally:
 *             if tex is not None:             # <<<<<<<<<<<<<<
 *                 tex.Release()
 *             if cputex is not None:
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_2 = (__pyx_v_tex != Py_None);
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":230
 *         finally:
 *             if tex is not None:
 *                 tex.Release()             # <<<<<<<<<<<<<<
 *             if cputex is not None:
 *                 cputex.Release()
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tex, __pyx_n_s_Release); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "ok/Capture.pyx":229
 *                 raise e
 *         finally:
 *             if tex is not None:             # <<<<<<<<<<<<<<
 *                 tex.Release()
 *             if cputex is not None:
 */
      }

      /* "ok/Capture.pyx":231
 *             if tex is not None:
 *                 tex.Release()
 *             if cputex is not None:             # <<<<<<<<<<<<<<
 *                 cputex.Release()
 *         if need_reset_framepool:
 */
      __pyx_t_2 = (__pyx_v_cputex != Py_None);
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":232
 *                 tex.Release()
 *             if cputex is not None:
 *                 cputex.Release()             # <<<<<<<<<<<<<<
 *         if need_reset_framepool:
 *             self.reset_framepool(frame.ContentSize, need_reset_device)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cputex, __pyx_n_s_Release); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "ok/Capture.pyx":231
 *             if tex is not None:
 *                 tex.Release()
 *             if cputex is not None:             # <<<<<<<<<<<<<<
 *                 cputex.Release()
 *         if need_reset_framepool:
 */
      }
      goto __pyx_L10;
    }
    __pyx_L9_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_22, &__pyx_t_21);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_23);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_21);
      __pyx_t_16 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_24 = __pyx_filename;
      {

        /* "ok/Capture.pyx":229
 *                 raise e
 *         finally:
 *             if tex is not None:             # <<<<<<<<<<<<<<
 *                 tex.Release()
 *             if cputex is not None:
 */
        __pyx_t_2 = (__pyx_v_tex != Py_None);
        if (__pyx_t_2) {

          /* "ok/Capture.pyx":230
 *         finally:
 *             if tex is not None:
 *                 tex.Release()             # <<<<<<<<<<<<<<
 *             if cputex is not None:
 *                 cputex.Release()
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tex, __pyx_n_s_Release); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
            __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 230, __pyx_L34_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "ok/Capture.pyx":229
 *                 raise e
 *         finally:
 *             if tex is not None:             # <<<<<<<<<<<<<<
 *                 tex.Release()
 *             if cputex is not None:
 */
        }

        /* "ok/Capture.pyx":231
 *             if tex is not None:
 *                 tex.Release()
 *             if cputex is not None:             # <<<<<<<<<<<<<<
 *                 cputex.Release()
 *         if need_reset_framepool:
 */
        __pyx_t_2 = (__pyx_v_cputex != Py_None);
        if (__pyx_t_2) {

          /* "ok/Capture.pyx":232
 *                 tex.Release()
 *             if cputex is not None:
 *                 cputex.Release()             # <<<<<<<<<<<<<<
 *         if need_reset_framepool:
 *             self.reset_framepool(frame.ContentSize, need_reset_device)
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cputex, __pyx_n_s_Release); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
            __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 232, __pyx_L34_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "ok/Capture.pyx":231
 *             if tex is not None:
 *                 tex.Release()
 *             if cputex is not None:             # <<<<<<<<<<<<<<
 *                 cputex.Release()
 *         if need_reset_framepool:
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_22, __pyx_t_21);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0;
      __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_24;
      goto __pyx_L1_error;
      __pyx_L34_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_22, __pyx_t_21);
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L8_return: {
      __pyx_t_21 = __pyx_r;
      __pyx_r = 0;

      /* "ok/Capture.pyx":229
 *                 raise e
 *         finally:
 *             if tex is not None:             # <<<<<<<<<<<<<<
 *                 tex.Release()
 *             if cputex is not None:
 */
      __pyx_t_2 = (__pyx_v_tex != Py_None);
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":230
 *         finally:
 *             if tex is not None:
 *                 tex.Release()             # <<<<<<<<<<<<<<
 *             if cputex is not None:
 *                 cputex.Release()
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tex, __pyx_n_s_Release); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "ok/Capture.pyx":229
 *                 raise e
 *         finally:
 *             if tex is not None:             # <<<<<<<<<<<<<<
 *                 tex.Release()
 *             if cputex is not None:
 */
      }

      /* "ok/Capture.pyx":231
 *             if tex is not None:
 *                 tex.Release()
 *             if cputex is not None:             # <<<<<<<<<<<<<<
 *                 cputex.Release()
 *         if need_reset_framepool:
 */
      __pyx_t_2 = (__pyx_v_cputex != Py_None);
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":232
 *                 tex.Release()
 *             if cputex is not None:
 *                 cputex.Release()             # <<<<<<<<<<<<<<
 *         if need_reset_framepool:
 *             self.reset_framepool(frame.ContentSize, need_reset_device)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cputex, __pyx_n_s_Release); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "ok/Capture.pyx":231
 *             if tex is not None:
 *                 tex.Release()
 *             if cputex is not None:             # <<<<<<<<<<<<<<
 *                 cputex.Release()
 *         if need_reset_framepool:
 */
      }
      __pyx_r = __pyx_t_21;
      __pyx_t_21 = 0;
      goto __pyx_L0;
    }
    __pyx_L10:;
  }

  /* "ok/Capture.pyx":233
 *             if cputex is not None:
 *                 cputex.Release()
 *         if need_reset_framepool:             # <<<<<<<<<<<<<<
 *             self.reset_framepool(frame.ContentSize, need_reset_device)
 *             return self.get_frame()
 */
  if (__pyx_v_need_reset_framepool) {

    /* "ok/Capture.pyx":234
 *                 cputex.Release()
 *         if need_reset_framepool:
 *             self.reset_framepool(frame.ContentSize, need_reset_device)             # <<<<<<<<<<<<<<
 *             return self.get_frame()
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset_framepool); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_ContentSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyBool_FromLong(__pyx_v_need_reset_device); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_11};
      __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "ok/Capture.pyx":235
 *         if need_reset_framepool:
 *             self.reset_framepool(frame.ContentSize, need_reset_device)
 *             return self.get_frame()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_13 = ((struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.get_frame(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self), 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_r = __pyx_t_13;
    __pyx_t_13 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":233
 *             if cputex is not None:
 *                 cputex.Release()
 *         if need_reset_framepool:             # <<<<<<<<<<<<<<
 *             self.reset_framepool(frame.ContentSize, need_reset_device)
 *             return self.get_frame()
 */
  }

  /* "ok/Capture.pyx":173
 *             return
 * 
 *     cdef object convert_dx_frame(self, frame):             # <<<<<<<<<<<<<<
 *         if not frame:
 *             # logger.warning('convert_dx_frame self.last_dx_frame is none')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.convert_dx_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tex);
  __Pyx_XDECREF(__pyx_v_cputex);
  __Pyx_XDECREF(__pyx_v_desc);
  __Pyx_XDECREF(__pyx_v_mapinfo);
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XDECREF(__pyx_v_d3d11);
  __Pyx_XDECREF(__pyx_v_IDirect3DDxgiInterfaceAccess);
  __Pyx_XDECREF(__pyx_v_GetActivationFactory);
  __Pyx_XDECREF(__pyx_v_desc2);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":237
 *             return self.get_frame()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hwnd_window(self):
 *         return self._hwnd_window
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window___get__(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window___get__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ok/Capture.pyx":239
 *     @property
 *     def hwnd_window(self):
 *         return self._hwnd_window             # <<<<<<<<<<<<<<
 * 
 *     @hwnd_window.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._hwnd_window);
  __pyx_r = __pyx_v_self->__pyx_base._hwnd_window;
  goto __pyx_L0;

  /* "ok/Capture.pyx":237
 *             return self.get_frame()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hwnd_window(self):
 *         return self._hwnd_window
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":241
 *         return self._hwnd_window
 * 
 *     @hwnd_window.setter             # <<<<<<<<<<<<<<
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_hwnd_window); /*proto*/
static int __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_hwnd_window) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_2__set__(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self), ((PyObject *)__pyx_v_hwnd_window));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_2__set__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_hwnd_window) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);

  /* "ok/Capture.pyx":243
 *     @hwnd_window.setter
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window             # <<<<<<<<<<<<<<
 *         self.start_or_stop()
 * 
 */
  __Pyx_INCREF(__pyx_v_hwnd_window);
  __Pyx_GIVEREF(__pyx_v_hwnd_window);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._hwnd_window);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._hwnd_window);
  __pyx_v_self->__pyx_base._hwnd_window = __pyx_v_hwnd_window;

  /* "ok/Capture.pyx":244
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window
 *         self.start_or_stop()             # <<<<<<<<<<<<<<
 * 
 *     def connected(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_start_or_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":241
 *         return self._hwnd_window
 * 
 *     @hwnd_window.setter             # <<<<<<<<<<<<<<
 *     def hwnd_window(self, hwnd_window):
 *         self._hwnd_window = hwnd_window
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.hwnd_window.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":246
 *         self.start_or_stop()
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_3connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_3connected = {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_3connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_3connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("connected", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "connected", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_2connected(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_2connected(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connected", 1);

  /* "ok/Capture.pyx":247
 * 
 *     def connected(self):
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None             # <<<<<<<<<<<<<<
 * 
 *     def start_or_stop(self, capture_cursor=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 247, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_self->frame_pool != Py_None);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":246
 *         self.start_or_stop()
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":249
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 *     def start_or_stop(self, capture_cursor=False):             # <<<<<<<<<<<<<<
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_5start_or_stop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_5start_or_stop = {"start_or_stop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_5start_or_stop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_5start_or_stop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_capture_cursor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_or_stop (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_capture_cursor,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_capture_cursor);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "start_or_stop") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_capture_cursor = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start_or_stop", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.start_or_stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_4start_or_stop(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self), __pyx_v_capture_cursor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_4start_or_stop(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_capture_cursor) {
  PyObject *__pyx_v_d3d11 = NULL;
  PyObject *__pyx_v_IInspectable = NULL;
  PyObject *__pyx_v_TypedEventHandler = NULL;
  PyObject *__pyx_v_Direct3D11CaptureFramePool = NULL;
  PyObject *__pyx_v_IGraphicsCaptureItemInterop = NULL;
  PyObject *__pyx_v_IGraphicsCaptureItem = NULL;
  PyObject *__pyx_v_GraphicsCaptureItem = NULL;
  PyObject *__pyx_v_DirectXPixelFormat = NULL;
  PyObject *__pyx_v_IDirect3DDevice = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_CreateDirect3D11DeviceFromDXGIDevice = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_IDirect3DDxgiInterfaceAccess = NULL;
  PyObject *__pyx_v_GetActivationFactory = NULL;
  PyObject *__pyx_v_interop = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_delegate = NULL;
  PyObject *__pyx_v_pool = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_or_stop", 1);

  /* "ok/Capture.pyx":250
 * 
 *     def start_or_stop(self, capture_cursor=False):
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:             # <<<<<<<<<<<<<<
 *             try:
 *                 from ok.capture.windows import d3d11
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exists); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_self->frame_pool == Py_None);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":251
 *     def start_or_stop(self, capture_cursor=False):
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:             # <<<<<<<<<<<<<<
 *                 from ok.capture.windows import d3d11
 *                 from ok.rotypes import IInspectable
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "ok/Capture.pyx":252
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:
 *                 from ok.capture.windows import d3d11             # <<<<<<<<<<<<<<
 *                 from ok.rotypes import IInspectable
 *                 from ok.rotypes.Windows.Foundation import TypedEventHandler
 */
        __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_n_s_d3d11);
        __Pyx_GIVEREF(__pyx_n_s_d3d11);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_d3d11)) __PYX_ERR(0, 252, __pyx_L7_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_capture_windows, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_d3d11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_d3d11 = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":253
 *             try:
 *                 from ok.capture.windows import d3d11
 *                 from ok.rotypes import IInspectable             # <<<<<<<<<<<<<<
 *                 from ok.rotypes.Windows.Foundation import TypedEventHandler
 *                 from ok.rotypes.Windows.Graphics.Capture import Direct3D11CaptureFramePool, IGraphicsCaptureItemInterop, \
 */
        __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_IInspectable);
        __Pyx_GIVEREF(__pyx_n_s_IInspectable);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IInspectable)) __PYX_ERR(0, 253, __pyx_L7_error);
        __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_rotypes, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IInspectable); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_IInspectable = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":254
 *                 from ok.capture.windows import d3d11
 *                 from ok.rotypes import IInspectable
 *                 from ok.rotypes.Windows.Foundation import TypedEventHandler             # <<<<<<<<<<<<<<
 *                 from ok.rotypes.Windows.Graphics.Capture import Direct3D11CaptureFramePool, IGraphicsCaptureItemInterop, \
 *                     IGraphicsCaptureItem, GraphicsCaptureItem
 */
        __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_n_s_TypedEventHandler);
        __Pyx_GIVEREF(__pyx_n_s_TypedEventHandler);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_TypedEventHandler)) __PYX_ERR(0, 254, __pyx_L7_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Foundation, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_TypedEventHandler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_TypedEventHandler = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":255
 *                 from ok.rotypes import IInspectable
 *                 from ok.rotypes.Windows.Foundation import TypedEventHandler
 *                 from ok.rotypes.Windows.Graphics.Capture import Direct3D11CaptureFramePool, IGraphicsCaptureItemInterop, \             # <<<<<<<<<<<<<<
 *                     IGraphicsCaptureItem, GraphicsCaptureItem
 *                 from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 */
        __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_Direct3D11CaptureFramePool);
        __Pyx_GIVEREF(__pyx_n_s_Direct3D11CaptureFramePool);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Direct3D11CaptureFramePool)) __PYX_ERR(0, 255, __pyx_L7_error);
        __Pyx_INCREF(__pyx_n_s_IGraphicsCaptureItemInterop);
        __Pyx_GIVEREF(__pyx_n_s_IGraphicsCaptureItemInterop);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_IGraphicsCaptureItemInterop)) __PYX_ERR(0, 255, __pyx_L7_error);
        __Pyx_INCREF(__pyx_n_s_IGraphicsCaptureItem);
        __Pyx_GIVEREF(__pyx_n_s_IGraphicsCaptureItem);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_IGraphicsCaptureItem)) __PYX_ERR(0, 255, __pyx_L7_error);
        __Pyx_INCREF(__pyx_n_s_GraphicsCaptureItem);
        __Pyx_GIVEREF(__pyx_n_s_GraphicsCaptureItem);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 3, __pyx_n_s_GraphicsCaptureItem)) __PYX_ERR(0, 255, __pyx_L7_error);
        __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Capt, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Direct3D11CaptureFramePool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_Direct3D11CaptureFramePool = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IGraphicsCaptureItemInterop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_IGraphicsCaptureItemInterop = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IGraphicsCaptureItem); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_IGraphicsCaptureItem = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_GraphicsCaptureItem); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_GraphicsCaptureItem = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":257
 *                 from ok.rotypes.Windows.Graphics.Capture import Direct3D11CaptureFramePool, IGraphicsCaptureItemInterop, \
 *                     IGraphicsCaptureItem, GraphicsCaptureItem
 *                 from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat             # <<<<<<<<<<<<<<
 *                 from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDevice, \
 *                     CreateDirect3D11DeviceFromDXGIDevice, \
 */
        __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_n_s_DirectXPixelFormat);
        __Pyx_GIVEREF(__pyx_n_s_DirectXPixelFormat);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_DirectXPixelFormat)) __PYX_ERR(0, 257, __pyx_L7_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_DirectXPixelFormat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_DirectXPixelFormat = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":258
 *                     IGraphicsCaptureItem, GraphicsCaptureItem
 *                 from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 *                 from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import IDirect3DDevice, \             # <<<<<<<<<<<<<<
 *                     CreateDirect3D11DeviceFromDXGIDevice, \
 *                     IDirect3DDxgiInterfaceAccess
 */
        __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_IDirect3DDevice);
        __Pyx_GIVEREF(__pyx_n_s_IDirect3DDevice);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IDirect3DDevice)) __PYX_ERR(0, 258, __pyx_L7_error);
        __Pyx_INCREF(__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe);
        __Pyx_GIVEREF(__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe)) __PYX_ERR(0, 258, __pyx_L7_error);
        __Pyx_INCREF(__pyx_n_s_IDirect3DDxgiInterfaceAccess);
        __Pyx_GIVEREF(__pyx_n_s_IDirect3DDxgiInterfaceAccess);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_IDirect3DDxgiInterfaceAccess)) __PYX_ERR(0, 258, __pyx_L7_error);
        __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Dire, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IDirect3DDevice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_IDirect3DDevice = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_CreateDirect3D11DeviceFromDXGIDevice = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IDirect3DDxgiInterfaceAccess); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_IDirect3DDxgiInterfaceAccess = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":261
 *                     CreateDirect3D11DeviceFromDXGIDevice, \
 *                     IDirect3DDxgiInterfaceAccess
 *                 from ok.rotypes.roapi import GetActivationFactory             # <<<<<<<<<<<<<<
 *                 logger.info('init windows capture')
 *                 interop = GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 */
        __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_n_s_GetActivationFactory);
        __Pyx_GIVEREF(__pyx_n_s_GetActivationFactory);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_GetActivationFactory)) __PYX_ERR(0, 261, __pyx_L7_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes_roapi, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_GetActivationFactory); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_GetActivationFactory = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":262
 *                     IDirect3DDxgiInterfaceAccess
 *                 from ok.rotypes.roapi import GetActivationFactory
 *                 logger.info('init windows capture')             # <<<<<<<<<<<<<<
 *                 interop = GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 *                     IGraphicsCaptureItemInterop)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 262, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s_init_windows_capture};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":263
 *                 from ok.rotypes.roapi import GetActivationFactory
 *                 logger.info('init windows capture')
 *                 interop = GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(             # <<<<<<<<<<<<<<
 *                     IGraphicsCaptureItemInterop)
 *                 self.rtdevice = IDirect3DDevice()
 */
        __Pyx_INCREF(__pyx_v_GetActivationFactory);
        __pyx_t_2 = __pyx_v_GetActivationFactory; __pyx_t_10 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_kp_s_Windows_Graphics_Capture_Graphic};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 263, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ok/Capture.pyx":264
 *                 logger.info('init windows capture')
 *                 interop = GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 *                     IGraphicsCaptureItemInterop)             # <<<<<<<<<<<<<<
 *                 self.rtdevice = IDirect3DDevice()
 *                 self.dxdevice = d3d11.ID3D11Device()
 */
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_IGraphicsCaptureItemInterop};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_v_interop = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":265
 *                 interop = GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 *                     IGraphicsCaptureItemInterop)
 *                 self.rtdevice = IDirect3DDevice()             # <<<<<<<<<<<<<<
 *                 self.dxdevice = d3d11.ID3D11Device()
 *                 self.immediatedc = d3d11.ID3D11DeviceContext()
 */
        __Pyx_INCREF(__pyx_v_IDirect3DDevice);
        __pyx_t_2 = __pyx_v_IDirect3DDevice; __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->rtdevice);
        __Pyx_DECREF(__pyx_v_self->rtdevice);
        __pyx_v_self->rtdevice = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":266
 *                     IGraphicsCaptureItemInterop)
 *                 self.rtdevice = IDirect3DDevice()
 *                 self.dxdevice = d3d11.ID3D11Device()             # <<<<<<<<<<<<<<
 *                 self.immediatedc = d3d11.ID3D11DeviceContext()
 *                 self.create_device()
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_ID3D11Device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->dxdevice);
        __Pyx_DECREF(__pyx_v_self->dxdevice);
        __pyx_v_self->dxdevice = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":267
 *                 self.rtdevice = IDirect3DDevice()
 *                 self.dxdevice = d3d11.ID3D11Device()
 *                 self.immediatedc = d3d11.ID3D11DeviceContext()             # <<<<<<<<<<<<<<
 *                 self.create_device()
 *                 item = interop.CreateForWindow(self.hwnd_window.hwnd, IGraphicsCaptureItem.GUID)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_ID3D11DeviceContext); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->immediatedc);
        __Pyx_DECREF(__pyx_v_self->immediatedc);
        __pyx_v_self->immediatedc = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":268
 *                 self.dxdevice = d3d11.ID3D11Device()
 *                 self.immediatedc = d3d11.ID3D11DeviceContext()
 *                 self.create_device()             # <<<<<<<<<<<<<<
 *                 item = interop.CreateForWindow(self.hwnd_window.hwnd, IGraphicsCaptureItem.GUID)
 *                 self.item = item
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":269
 *                 self.immediatedc = d3d11.ID3D11DeviceContext()
 *                 self.create_device()
 *                 item = interop.CreateForWindow(self.hwnd_window.hwnd, IGraphicsCaptureItem.GUID)             # <<<<<<<<<<<<<<
 *                 self.item = item
 *                 self.last_size = item.Size
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_interop, __pyx_n_s_CreateForWindow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 269, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 269, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_IGraphicsCaptureItem, __pyx_n_s_GUID); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 269, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_10, __pyx_t_8};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_v_item = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":270
 *                 self.create_device()
 *                 item = interop.CreateForWindow(self.hwnd_window.hwnd, IGraphicsCaptureItem.GUID)
 *                 self.item = item             # <<<<<<<<<<<<<<
 *                 self.last_size = item.Size
 *                 delegate = TypedEventHandler(GraphicsCaptureItem, IInspectable).delegate(
 */
        __Pyx_INCREF(__pyx_v_item);
        __Pyx_GIVEREF(__pyx_v_item);
        __Pyx_GOTREF(__pyx_v_self->item);
        __Pyx_DECREF(__pyx_v_self->item);
        __pyx_v_self->item = __pyx_v_item;

        /* "ok/Capture.pyx":271
 *                 item = interop.CreateForWindow(self.hwnd_window.hwnd, IGraphicsCaptureItem.GUID)
 *                 self.item = item
 *                 self.last_size = item.Size             # <<<<<<<<<<<<<<
 *                 delegate = TypedEventHandler(GraphicsCaptureItem, IInspectable).delegate(
 *                     self.close)
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_Size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->last_size);
        __Pyx_DECREF(__pyx_v_self->last_size);
        __pyx_v_self->last_size = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":272
 *                 self.item = item
 *                 self.last_size = item.Size
 *                 delegate = TypedEventHandler(GraphicsCaptureItem, IInspectable).delegate(             # <<<<<<<<<<<<<<
 *                     self.close)
 *                 self.evtoken = item.add_Closed(delegate)
 */
        __Pyx_INCREF(__pyx_v_TypedEventHandler);
        __pyx_t_8 = __pyx_v_TypedEventHandler; __pyx_t_10 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_v_GraphicsCaptureItem, __pyx_v_IInspectable};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_delegate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 272, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":273
 *                 self.last_size = item.Size
 *                 delegate = TypedEventHandler(GraphicsCaptureItem, IInspectable).delegate(
 *                     self.close)             # <<<<<<<<<<<<<<
 *                 self.evtoken = item.add_Closed(delegate)
 *                 self.frame_pool = Direct3D11CaptureFramePool.CreateFreeThreaded(self.rtdevice,
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_v_delegate = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":274
 *                 delegate = TypedEventHandler(GraphicsCaptureItem, IInspectable).delegate(
 *                     self.close)
 *                 self.evtoken = item.add_Closed(delegate)             # <<<<<<<<<<<<<<
 *                 self.frame_pool = Direct3D11CaptureFramePool.CreateFreeThreaded(self.rtdevice,
 *                                                                                 DirectXPixelFormat.B8G8R8A8UIntNormalized,
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_add_Closed); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_delegate};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->evtoken);
        __Pyx_DECREF(__pyx_v_self->evtoken);
        __pyx_v_self->evtoken = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":275
 *                     self.close)
 *                 self.evtoken = item.add_Closed(delegate)
 *                 self.frame_pool = Direct3D11CaptureFramePool.CreateFreeThreaded(self.rtdevice,             # <<<<<<<<<<<<<<
 *                                                                                 DirectXPixelFormat.B8G8R8A8UIntNormalized,
 *                                                                                 1, item.Size)
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_Direct3D11CaptureFramePool, __pyx_n_s_CreateFreeThreaded); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "ok/Capture.pyx":276
 *                 self.evtoken = item.add_Closed(delegate)
 *                 self.frame_pool = Direct3D11CaptureFramePool.CreateFreeThreaded(self.rtdevice,
 *                                                                                 DirectXPixelFormat.B8G8R8A8UIntNormalized,             # <<<<<<<<<<<<<<
 *                                                                                 1, item.Size)
 *                 self.session = self.frame_pool.CreateCaptureSession(item)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_DirectXPixelFormat, __pyx_n_s_B8G8R8A8UIntNormalized); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);

        /* "ok/Capture.pyx":277
 *                 self.frame_pool = Direct3D11CaptureFramePool.CreateFreeThreaded(self.rtdevice,
 *                                                                                 DirectXPixelFormat.B8G8R8A8UIntNormalized,
 *                                                                                 1, item.Size)             # <<<<<<<<<<<<<<
 *                 self.session = self.frame_pool.CreateCaptureSession(item)
 *                 pool = self.frame_pool
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_Size); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 277, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_11, __pyx_v_self->rtdevice, __pyx_t_2, __pyx_int_1, __pyx_t_10};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 4+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }

        /* "ok/Capture.pyx":275
 *                     self.close)
 *                 self.evtoken = item.add_Closed(delegate)
 *                 self.frame_pool = Direct3D11CaptureFramePool.CreateFreeThreaded(self.rtdevice,             # <<<<<<<<<<<<<<
 *                                                                                 DirectXPixelFormat.B8G8R8A8UIntNormalized,
 *                                                                                 1, item.Size)
 */
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->frame_pool);
        __Pyx_DECREF(__pyx_v_self->frame_pool);
        __pyx_v_self->frame_pool = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":278
 *                                                                                 DirectXPixelFormat.B8G8R8A8UIntNormalized,
 *                                                                                 1, item.Size)
 *                 self.session = self.frame_pool.CreateCaptureSession(item)             # <<<<<<<<<<<<<<
 *                 pool = self.frame_pool
 *                 pool.add_FrameArrived(
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->frame_pool, __pyx_n_s_CreateCaptureSession); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 278, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_item};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_v_self->session);
        __Pyx_DECREF(__pyx_v_self->session);
        __pyx_v_self->session = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":279
 *                                                                                 1, item.Size)
 *                 self.session = self.frame_pool.CreateCaptureSession(item)
 *                 pool = self.frame_pool             # <<<<<<<<<<<<<<
 *                 pool.add_FrameArrived(
 *                     TypedEventHandler(Direct3D11CaptureFramePool, IInspectable).delegate(
 */
        __pyx_t_3 = __pyx_v_self->frame_pool;
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_pool = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":280
 *                 self.session = self.frame_pool.CreateCaptureSession(item)
 *                 pool = self.frame_pool
 *                 pool.add_FrameArrived(             # <<<<<<<<<<<<<<
 *                     TypedEventHandler(Direct3D11CaptureFramePool, IInspectable).delegate(
 *                         self.frame_arrived_callback))
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_add_FrameArrived); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 280, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "ok/Capture.pyx":281
 *                 pool = self.frame_pool
 *                 pool.add_FrameArrived(
 *                     TypedEventHandler(Direct3D11CaptureFramePool, IInspectable).delegate(             # <<<<<<<<<<<<<<
 *                         self.frame_arrived_callback))
 *                 self.session.IsCursorCaptureEnabled = capture_cursor
 */
        __Pyx_INCREF(__pyx_v_TypedEventHandler);
        __pyx_t_11 = __pyx_v_TypedEventHandler; __pyx_t_12 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_v_Direct3D11CaptureFramePool, __pyx_v_IInspectable};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_delegate); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 281, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":282
 *                 pool.add_FrameArrived(
 *                     TypedEventHandler(Direct3D11CaptureFramePool, IInspectable).delegate(
 *                         self.frame_arrived_callback))             # <<<<<<<<<<<<<<
 *                 self.session.IsCursorCaptureEnabled = capture_cursor
 *                 if WINDOWS_BUILD_NUMBER >= WGC_NO_BORDER_MIN_BUILD:
 */
        __Pyx_INCREF((PyObject *)__pyx_v_self);
        __pyx_t_13 = __pyx_v_self;
        __pyx_t_2 = __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(((struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_t_13->__pyx_base.__pyx_base.__pyx_vtab)->frame_arrived_callback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = ((PyObject *)__pyx_t_13);
        __Pyx_INCREF(__pyx_t_12);
        __pyx_t_14 = __Pyx_PyMethod_New2Arg(__pyx_t_2, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 282, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF((PyObject *)__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_14};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 281, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":283
 *                     TypedEventHandler(Direct3D11CaptureFramePool, IInspectable).delegate(
 *                         self.frame_arrived_callback))
 *                 self.session.IsCursorCaptureEnabled = capture_cursor             # <<<<<<<<<<<<<<
 *                 if WINDOWS_BUILD_NUMBER >= WGC_NO_BORDER_MIN_BUILD:
 *                     self.session.IsBorderRequired = False
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self->session, __pyx_n_s_IsCursorCaptureEnabled, __pyx_v_capture_cursor) < 0) __PYX_ERR(0, 283, __pyx_L7_error)

        /* "ok/Capture.pyx":284
 *                         self.frame_arrived_callback))
 *                 self.session.IsCursorCaptureEnabled = capture_cursor
 *                 if WINDOWS_BUILD_NUMBER >= WGC_NO_BORDER_MIN_BUILD:             # <<<<<<<<<<<<<<
 *                     self.session.IsBorderRequired = False
 *                 self.session.StartCapture()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_WINDOWS_BUILD_NUMBER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_WGC_NO_BORDER_MIN_BUILD); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 284, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_GE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 284, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 284, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_1) {

          /* "ok/Capture.pyx":285
 *                 self.session.IsCursorCaptureEnabled = capture_cursor
 *                 if WINDOWS_BUILD_NUMBER >= WGC_NO_BORDER_MIN_BUILD:
 *                     self.session.IsBorderRequired = False             # <<<<<<<<<<<<<<
 *                 self.session.StartCapture()
 *                 return True
 */
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self->session, __pyx_n_s_IsBorderRequired, Py_False) < 0) __PYX_ERR(0, 285, __pyx_L7_error)

          /* "ok/Capture.pyx":284
 *                         self.frame_arrived_callback))
 *                 self.session.IsCursorCaptureEnabled = capture_cursor
 *                 if WINDOWS_BUILD_NUMBER >= WGC_NO_BORDER_MIN_BUILD:             # <<<<<<<<<<<<<<
 *                     self.session.IsBorderRequired = False
 *                 self.session.StartCapture()
 */
        }

        /* "ok/Capture.pyx":286
 *                 if WINDOWS_BUILD_NUMBER >= WGC_NO_BORDER_MIN_BUILD:
 *                     self.session.IsBorderRequired = False
 *                 self.session.StartCapture()             # <<<<<<<<<<<<<<
 *                 return True
 *             except Exception as e:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->session, __pyx_n_s_StartCapture); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 286, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 286, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "ok/Capture.pyx":287
 *                     self.session.IsBorderRequired = False
 *                 self.session.StartCapture()
 *                 return True             # <<<<<<<<<<<<<<
 *             except Exception as e:
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L11_try_return;

        /* "ok/Capture.pyx":251
 *     def start_or_stop(self, capture_cursor=False):
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:             # <<<<<<<<<<<<<<
 *                 from ok.capture.windows import d3d11
 *                 from ok.rotypes import IInspectable
 */
      }
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF((PyObject *)__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "ok/Capture.pyx":288
 *                 self.session.StartCapture()
 *                 return True
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)
 *                 return False
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_15) {
        __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.start_or_stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_8, &__pyx_t_3) < 0) __PYX_ERR(0, 288, __pyx_L9_except_error)
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "ok/Capture.pyx":289
 *                 return True
 *             except Exception as e:
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)             # <<<<<<<<<<<<<<
 *                 return False
 *         elif not self.hwnd_window.exists and self.frame_pool is not None:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_error); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_start_or_stop_failed, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11)) __PYX_ERR(0, 289, __pyx_L19_error);
          __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_exception, __pyx_v_e) < 0) __PYX_ERR(0, 289, __pyx_L19_error)
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "ok/Capture.pyx":290
 *             except Exception as e:
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)
 *                 return False             # <<<<<<<<<<<<<<
 *         elif not self.hwnd_window.exists and self.frame_pool is not None:
 *             self.close()
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L18_return;
        }

        /* "ok/Capture.pyx":288
 *                 self.session.StartCapture()
 *                 return True
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)
 *                 return False
 */
        /*finally:*/ {
          __pyx_L19_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_XDECREF((PyObject *)__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_21);
            __Pyx_XGOTREF(__pyx_t_22);
            __Pyx_XGOTREF(__pyx_t_23);
            __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_XGIVEREF(__pyx_t_22);
              __Pyx_XGIVEREF(__pyx_t_23);
              __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
            goto __pyx_L9_except_error;
          }
          __pyx_L18_return: {
            __pyx_t_23 = __pyx_r;
            __pyx_r = 0;
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            __pyx_r = __pyx_t_23;
            __pyx_t_23 = 0;
            goto __pyx_L10_except_return;
          }
        }
      }
      goto __pyx_L9_except_error;

      /* "ok/Capture.pyx":251
 *     def start_or_stop(self, capture_cursor=False):
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:             # <<<<<<<<<<<<<<
 *                 from ok.capture.windows import d3d11
 *                 from ok.rotypes import IInspectable
 */
      __pyx_L9_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L11_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L10_except_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
    }

    /* "ok/Capture.pyx":250
 * 
 *     def start_or_stop(self, capture_cursor=False):
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:             # <<<<<<<<<<<<<<
 *             try:
 *                 from ok.capture.windows import d3d11
 */
  }

  /* "ok/Capture.pyx":291
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)
 *                 return False
 *         elif not self.hwnd_window.exists and self.frame_pool is not None:             # <<<<<<<<<<<<<<
 *             self.close()
 *             return False
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exists); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_24 = (!__pyx_t_4);
  if (__pyx_t_24) {
  } else {
    __pyx_t_1 = __pyx_t_24;
    goto __pyx_L25_bool_binop_done;
  }
  __pyx_t_24 = (__pyx_v_self->frame_pool != Py_None);
  __pyx_t_1 = __pyx_t_24;
  __pyx_L25_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":292
 *                 return False
 *         elif not self.hwnd_window.exists and self.frame_pool is not None:
 *             self.close()             # <<<<<<<<<<<<<<
 *             return False
 *         return self.hwnd_window.exists
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "ok/Capture.pyx":293
 *         elif not self.hwnd_window.exists and self.frame_pool is not None:
 *             self.close()
 *             return False             # <<<<<<<<<<<<<<
 *         return self.hwnd_window.exists
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "ok/Capture.pyx":291
 *                 logger.error(f'start_or_stop failed: {self.hwnd_window}', exception=e)
 *                 return False
 *         elif not self.hwnd_window.exists and self.frame_pool is not None:             # <<<<<<<<<<<<<<
 *             self.close()
 *             return False
 */
  }

  /* "ok/Capture.pyx":294
 *             self.close()
 *             return False
 *         return self.hwnd_window.exists             # <<<<<<<<<<<<<<
 * 
 *     def create_device(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":249
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 *     def start_or_stop(self, capture_cursor=False):             # <<<<<<<<<<<<<<
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF((PyObject *)__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.start_or_stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d3d11);
  __Pyx_XDECREF(__pyx_v_IInspectable);
  __Pyx_XDECREF(__pyx_v_TypedEventHandler);
  __Pyx_XDECREF(__pyx_v_Direct3D11CaptureFramePool);
  __Pyx_XDECREF(__pyx_v_IGraphicsCaptureItemInterop);
  __Pyx_XDECREF(__pyx_v_IGraphicsCaptureItem);
  __Pyx_XDECREF(__pyx_v_GraphicsCaptureItem);
  __Pyx_XDECREF(__pyx_v_DirectXPixelFormat);
  __Pyx_XDECREF(__pyx_v_IDirect3DDevice);
  __Pyx_XDECREF(__pyx_v_CreateDirect3D11DeviceFromDXGIDevice);
  __Pyx_XDECREF(__pyx_v_IDirect3DDxgiInterfaceAccess);
  __Pyx_XDECREF(__pyx_v_GetActivationFactory);
  __Pyx_XDECREF(__pyx_v_interop);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_delegate);
  __Pyx_XDECREF(__pyx_v_pool);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":296
 *         return self.hwnd_window.exists
 * 
 *     def create_device(self):             # <<<<<<<<<<<<<<
 *         from ok.capture.windows import d3d11
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_7create_device(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_7create_device = {"create_device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_7create_device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_7create_device(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_device (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("create_device", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create_device", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_6create_device(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_6create_device(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_d3d11 = NULL;
  PyObject *__pyx_v_CreateDirect3D11DeviceFromDXGIDevice = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_device", 1);

  /* "ok/Capture.pyx":297
 * 
 *     def create_device(self):
 *         from ok.capture.windows import d3d11             # <<<<<<<<<<<<<<
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice
 *         d3d11.D3D11CreateDevice(
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_d3d11);
  __Pyx_GIVEREF(__pyx_n_s_d3d11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_d3d11)) __PYX_ERR(0, 297, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_capture_windows, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_d3d11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_d3d11 = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":298
 *     def create_device(self):
 *         from ok.capture.windows import d3d11
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice             # <<<<<<<<<<<<<<
 *         d3d11.D3D11CreateDevice(
 *             None,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe);
  __Pyx_GIVEREF(__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe)) __PYX_ERR(0, 298, __pyx_L1_error);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Dire, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_CreateDirect3D11DeviceFromDXGIDevice = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":299
 *         from ok.capture.windows import d3d11
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice
 *         d3d11.D3D11CreateDevice(             # <<<<<<<<<<<<<<
 *             None,
 *             d3d11.D3D_DRIVER_TYPE_HARDWARE,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11CreateDevice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "ok/Capture.pyx":301
 *         d3d11.D3D11CreateDevice(
 *             None,
 *             d3d11.D3D_DRIVER_TYPE_HARDWARE,             # <<<<<<<<<<<<<<
 *             None,
 *             d3d11.D3D11_CREATE_DEVICE_BGRA_SUPPORT,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D_DRIVER_TYPE_HARDWARE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "ok/Capture.pyx":303
 *             d3d11.D3D_DRIVER_TYPE_HARDWARE,
 *             None,
 *             d3d11.D3D11_CREATE_DEVICE_BGRA_SUPPORT,             # <<<<<<<<<<<<<<
 *             None,
 *             0,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "ok/Capture.pyx":306
 *             None,
 *             0,
 *             d3d11.D3D11_SDK_VERSION,             # <<<<<<<<<<<<<<
 *             ctypes.byref(self.dxdevice),
 *             None,
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3d11, __pyx_n_s_D3D11_SDK_VERSION); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "ok/Capture.pyx":307
 *             0,
 *             d3d11.D3D11_SDK_VERSION,
 *             ctypes.byref(self.dxdevice),             # <<<<<<<<<<<<<<
 *             None,
 *             ctypes.byref(self.immediatedc)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_byref); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_self->dxdevice};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "ok/Capture.pyx":309
 *             ctypes.byref(self.dxdevice),
 *             None,
 *             ctypes.byref(self.immediatedc)             # <<<<<<<<<<<<<<
 *         )
 *         self.rtdevice = CreateDirect3D11DeviceFromDXGIDevice(self.dxdevice)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_byref); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_self->immediatedc};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_t_10 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[11] = {__pyx_t_10, Py_None, __pyx_t_3, Py_None, __pyx_t_4, Py_None, __pyx_int_0, __pyx_t_5, __pyx_t_6, Py_None, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 10+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":311
 *             ctypes.byref(self.immediatedc)
 *         )
 *         self.rtdevice = CreateDirect3D11DeviceFromDXGIDevice(self.dxdevice)             # <<<<<<<<<<<<<<
 *         self.evtoken = None
 * 
 */
  __Pyx_INCREF(__pyx_v_CreateDirect3D11DeviceFromDXGIDevice);
  __pyx_t_2 = __pyx_v_CreateDirect3D11DeviceFromDXGIDevice; __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_self->dxdevice};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rtdevice);
  __Pyx_DECREF(__pyx_v_self->rtdevice);
  __pyx_v_self->rtdevice = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":312
 *         )
 *         self.rtdevice = CreateDirect3D11DeviceFromDXGIDevice(self.dxdevice)
 *         self.evtoken = None             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->evtoken);
  __Pyx_DECREF(__pyx_v_self->evtoken);
  __pyx_v_self->evtoken = Py_None;

  /* "ok/Capture.pyx":296
 *         return self.hwnd_window.exists
 * 
 *     def create_device(self):             # <<<<<<<<<<<<<<
 *         from ok.capture.windows import d3d11
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.create_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d3d11);
  __Pyx_XDECREF(__pyx_v_CreateDirect3D11DeviceFromDXGIDevice);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":314
 *         self.evtoken = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_9close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_9close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_9close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_9close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_8close(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_8close(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);

  /* "ok/Capture.pyx":315
 * 
 *     def close(self):
 *         logger.info('destroy windows capture')             # <<<<<<<<<<<<<<
 *         if self.frame_pool is not None:
 *             self.frame_pool.Close()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s_destroy_windows_capture};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":316
 *     def close(self):
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:             # <<<<<<<<<<<<<<
 *             self.frame_pool.Close()
 *             self.frame_pool = None
 */
  __pyx_t_5 = (__pyx_v_self->frame_pool != Py_None);
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":317
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:
 *             self.frame_pool.Close()             # <<<<<<<<<<<<<<
 *             self.frame_pool = None
 *         if self.session is not None:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->frame_pool, __pyx_n_s_Close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":318
 *         if self.frame_pool is not None:
 *             self.frame_pool.Close()
 *             self.frame_pool = None             # <<<<<<<<<<<<<<
 *         if self.session is not None:
 *             self.session.Close()  # E_UNEXPECTED ???
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->frame_pool);
    __Pyx_DECREF(__pyx_v_self->frame_pool);
    __pyx_v_self->frame_pool = Py_None;

    /* "ok/Capture.pyx":316
 *     def close(self):
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:             # <<<<<<<<<<<<<<
 *             self.frame_pool.Close()
 *             self.frame_pool = None
 */
  }

  /* "ok/Capture.pyx":319
 *             self.frame_pool.Close()
 *             self.frame_pool = None
 *         if self.session is not None:             # <<<<<<<<<<<<<<
 *             self.session.Close()  # E_UNEXPECTED ???
 *             self.session = None
 */
  __pyx_t_5 = (__pyx_v_self->session != Py_None);
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":320
 *             self.frame_pool = None
 *         if self.session is not None:
 *             self.session.Close()  # E_UNEXPECTED ???             # <<<<<<<<<<<<<<
 *             self.session = None
 *         self.item = None
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->session, __pyx_n_s_Close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":321
 *         if self.session is not None:
 *             self.session.Close()  # E_UNEXPECTED ???
 *             self.session = None             # <<<<<<<<<<<<<<
 *         self.item = None
 *         if self.rtdevice:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->session);
    __Pyx_DECREF(__pyx_v_self->session);
    __pyx_v_self->session = Py_None;

    /* "ok/Capture.pyx":319
 *             self.frame_pool.Close()
 *             self.frame_pool = None
 *         if self.session is not None:             # <<<<<<<<<<<<<<
 *             self.session.Close()  # E_UNEXPECTED ???
 *             self.session = None
 */
  }

  /* "ok/Capture.pyx":322
 *             self.session.Close()  # E_UNEXPECTED ???
 *             self.session = None
 *         self.item = None             # <<<<<<<<<<<<<<
 *         if self.rtdevice:
 *             self.rtdevice.Release()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->item);
  __Pyx_DECREF(__pyx_v_self->item);
  __pyx_v_self->item = Py_None;

  /* "ok/Capture.pyx":323
 *             self.session = None
 *         self.item = None
 *         if self.rtdevice:             # <<<<<<<<<<<<<<
 *             self.rtdevice.Release()
 *         if self.dxdevice:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->rtdevice); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 323, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":324
 *         self.item = None
 *         if self.rtdevice:
 *             self.rtdevice.Release()             # <<<<<<<<<<<<<<
 *         if self.dxdevice:
 *             self.dxdevice.Release()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->rtdevice, __pyx_n_s_Release); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":323
 *             self.session = None
 *         self.item = None
 *         if self.rtdevice:             # <<<<<<<<<<<<<<
 *             self.rtdevice.Release()
 *         if self.dxdevice:
 */
  }

  /* "ok/Capture.pyx":325
 *         if self.rtdevice:
 *             self.rtdevice.Release()
 *         if self.dxdevice:             # <<<<<<<<<<<<<<
 *             self.dxdevice.Release()
 *         if self.cputex:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->dxdevice); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 325, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":326
 *             self.rtdevice.Release()
 *         if self.dxdevice:
 *             self.dxdevice.Release()             # <<<<<<<<<<<<<<
 *         if self.cputex:
 *             self.cputex.Release()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->dxdevice, __pyx_n_s_Release); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":325
 *         if self.rtdevice:
 *             self.rtdevice.Release()
 *         if self.dxdevice:             # <<<<<<<<<<<<<<
 *             self.dxdevice.Release()
 *         if self.cputex:
 */
  }

  /* "ok/Capture.pyx":327
 *         if self.dxdevice:
 *             self.dxdevice.Release()
 *         if self.cputex:             # <<<<<<<<<<<<<<
 *             self.cputex.Release()
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->cputex); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 327, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":328
 *             self.dxdevice.Release()
 *         if self.cputex:
 *             self.cputex.Release()             # <<<<<<<<<<<<<<
 * 
 *     cpdef object do_get_frame(self):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->cputex, __pyx_n_s_Release); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":327
 *         if self.dxdevice:
 *             self.dxdevice.Release()
 *         if self.cputex:             # <<<<<<<<<<<<<<
 *             self.cputex.Release()
 * 
 */
  }

  /* "ok/Capture.pyx":314
 *         self.evtoken = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":330
 *             self.cputex.Release()
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         cdef double latency
 */

static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_frame = 0;
  double __pyx_v_latency;
  PyObject *__pyx_v_new_height = NULL;
  PyObject *__pyx_v_new_width = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":333
 *         cdef object frame
 *         cdef double latency
 *         if self.start_or_stop():             # <<<<<<<<<<<<<<
 *             frame = self.last_frame
 *             self.last_frame = None
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_start_or_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":334
 *         cdef double latency
 *         if self.start_or_stop():
 *             frame = self.last_frame             # <<<<<<<<<<<<<<
 *             self.last_frame = None
 *             if frame is None:
 */
    __pyx_t_1 = __pyx_v_self->last_frame;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_frame = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":335
 *         if self.start_or_stop():
 *             frame = self.last_frame
 *             self.last_frame = None             # <<<<<<<<<<<<<<
 *             if frame is None:
 *                 if time.time() - self.last_frame_time > 10:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->last_frame);
    __Pyx_DECREF(__pyx_v_self->last_frame);
    __pyx_v_self->last_frame = Py_None;

    /* "ok/Capture.pyx":336
 *             frame = self.last_frame
 *             self.last_frame = None
 *             if frame is None:             # <<<<<<<<<<<<<<
 *                 if time.time() - self.last_frame_time > 10:
 *                     logger.warning(f'no frame for 10 sec, try to restart')
 */
    __pyx_t_6 = (__pyx_v_frame == Py_None);
    if (__pyx_t_6) {

      /* "ok/Capture.pyx":337
 *             self.last_frame = None
 *             if frame is None:
 *                 if time.time() - self.last_frame_time > 10:             # <<<<<<<<<<<<<<
 *                     logger.warning(f'no frame for 10 sec, try to restart')
 *                     self.close()
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->last_frame_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_10, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {

        /* "ok/Capture.pyx":338
 *             if frame is None:
 *                 if time.time() - self.last_frame_time > 10:
 *                     logger.warning(f'no frame for 10 sec, try to restart')             # <<<<<<<<<<<<<<
 *                     self.close()
 *                     self.last_frame_time = time.time()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_no_frame_for_10_sec_try_to_resta};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":339
 *                 if time.time() - self.last_frame_time > 10:
 *                     logger.warning(f'no frame for 10 sec, try to restart')
 *                     self.close()             # <<<<<<<<<<<<<<
 *                     self.last_frame_time = time.time()
 *                     return self.do_get_frame()
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":340
 *                     logger.warning(f'no frame for 10 sec, try to restart')
 *                     self.close()
 *                     self.last_frame_time = time.time()             # <<<<<<<<<<<<<<
 *                     return self.do_get_frame()
 *                 else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_self->last_frame_time = __pyx_t_7;

        /* "ok/Capture.pyx":341
 *                     self.close()
 *                     self.last_frame_time = time.time()
 *                     return self.do_get_frame()             # <<<<<<<<<<<<<<
 *                 else:
 *                     return None
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = ((struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->do_get_frame(__pyx_v_self, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "ok/Capture.pyx":337
 *             self.last_frame = None
 *             if frame is None:
 *                 if time.time() - self.last_frame_time > 10:             # <<<<<<<<<<<<<<
 *                     logger.warning(f'no frame for 10 sec, try to restart')
 *                     self.close()
 */
      }

      /* "ok/Capture.pyx":343
 *                     return self.do_get_frame()
 *                 else:
 *                     return None             # <<<<<<<<<<<<<<
 *             latency = time.time() - self.last_frame_time
 * 
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L0;
      }

      /* "ok/Capture.pyx":336
 *             frame = self.last_frame
 *             self.last_frame = None
 *             if frame is None:             # <<<<<<<<<<<<<<
 *                 if time.time() - self.last_frame_time > 10:
 *                     logger.warning(f'no frame for 10 sec, try to restart')
 */
    }

    /* "ok/Capture.pyx":344
 *                 else:
 *                     return None
 *             latency = time.time() - self.last_frame_time             # <<<<<<<<<<<<<<
 * 
 *             frame = self.crop_image(frame)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->last_frame_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_latency = __pyx_t_7;

    /* "ok/Capture.pyx":346
 *             latency = time.time() - self.last_frame_time
 * 
 *             frame = self.crop_image(frame)             # <<<<<<<<<<<<<<
 * 
 *             if frame is not None:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_crop_image); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_frame};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_frame, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":348
 *             frame = self.crop_image(frame)
 * 
 *             if frame is not None:             # <<<<<<<<<<<<<<
 *                 new_height, new_width = frame.shape[:2]
 *                 if new_width <= 0 or new_width <= 0:
 */
    __pyx_t_6 = (__pyx_v_frame != Py_None);
    if (__pyx_t_6) {

      /* "ok/Capture.pyx":349
 * 
 *             if frame is not None:
 *                 new_height, new_width = frame.shape[:2]             # <<<<<<<<<<<<<<
 *                 if new_width <= 0 or new_width <= 0:
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, 2, NULL, NULL, &__pyx_slice__9, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 349, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
        index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 2) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 349, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __pyx_v_new_height = __pyx_t_2;
      __pyx_t_2 = 0;
      __pyx_v_new_width = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ok/Capture.pyx":350
 *             if frame is not None:
 *                 new_height, new_width = frame.shape[:2]
 *                 if new_width <= 0 or new_width <= 0:             # <<<<<<<<<<<<<<
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 *                     frame = None
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_new_width, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_6 = __pyx_t_9;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_new_width, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __pyx_t_9;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_6) {

        /* "ok/Capture.pyx":351
 *                 new_height, new_width = frame.shape[:2]
 *                 if new_width <= 0 or new_width <= 0:
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")             # <<<<<<<<<<<<<<
 *                     frame = None
 *             if latency > 2:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = 0;
        __pyx_t_11 = 127;
        __Pyx_INCREF(__pyx_kp_u_get_frame_size_0);
        __pyx_t_10 += 19;
        __Pyx_GIVEREF(__pyx_kp_u_get_frame_size_0);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_get_frame_size_0);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_new_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_n_u_x);
        __pyx_t_10 += 1;
        __Pyx_GIVEREF(__pyx_n_u_x);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_n_u_x);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_new_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "ok/Capture.pyx":352
 *                 if new_width <= 0 or new_width <= 0:
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 *                     frame = None             # <<<<<<<<<<<<<<
 *             if latency > 2:
 *                 logger.warning(f"latency too large return None frame: {latency}")
 */
        __Pyx_INCREF(Py_None);
        __Pyx_DECREF_SET(__pyx_v_frame, Py_None);

        /* "ok/Capture.pyx":350
 *             if frame is not None:
 *                 new_height, new_width = frame.shape[:2]
 *                 if new_width <= 0 or new_width <= 0:             # <<<<<<<<<<<<<<
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 *                     frame = None
 */
      }

      /* "ok/Capture.pyx":348
 *             frame = self.crop_image(frame)
 * 
 *             if frame is not None:             # <<<<<<<<<<<<<<
 *                 new_height, new_width = frame.shape[:2]
 *                 if new_width <= 0 or new_width <= 0:
 */
    }

    /* "ok/Capture.pyx":353
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 *                     frame = None
 *             if latency > 2:             # <<<<<<<<<<<<<<
 *                 logger.warning(f"latency too large return None frame: {latency}")
 *                 return None
 */
    __pyx_t_6 = (__pyx_v_latency > 2.0);
    if (__pyx_t_6) {

      /* "ok/Capture.pyx":354
 *                     frame = None
 *             if latency > 2:
 *                 logger.warning(f"latency too large return None frame: {latency}")             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_latency); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_latency_too_large_return_None_fr, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":355
 *             if latency > 2:
 *                 logger.warning(f"latency too large return None frame: {latency}")
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 # logger.debug(f'frame latency: {latency}')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "ok/Capture.pyx":353
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 *                     frame = None
 *             if latency > 2:             # <<<<<<<<<<<<<<
 *                 logger.warning(f"latency too large return None frame: {latency}")
 *                 return None
 */
    }

    /* "ok/Capture.pyx":358
 *             else:
 *                 # logger.debug(f'frame latency: {latency}')
 *                 return frame             # <<<<<<<<<<<<<<
 * 
 *     def reset_framepool(self, size, reset_device=False):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_frame);
      __pyx_r = __pyx_v_frame;
      goto __pyx_L0;
    }

    /* "ok/Capture.pyx":333
 *         cdef object frame
 *         cdef double latency
 *         if self.start_or_stop():             # <<<<<<<<<<<<<<
 *             frame = self.last_frame
 *             self.last_frame = None
 */
  }

  /* "ok/Capture.pyx":330
 *             self.cputex.Release()
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         cdef double latency
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XDECREF(__pyx_v_new_height);
  __Pyx_XDECREF(__pyx_v_new_width);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_10do_get_frame(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_10do_get_frame(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_do_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":360
 *                 return frame
 * 
 *     def reset_framepool(self, size, reset_device=False):             # <<<<<<<<<<<<<<
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_13reset_framepool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_13reset_framepool = {"reset_framepool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_13reset_framepool, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_13reset_framepool(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_reset_device = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_framepool (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_reset_device,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reset_device);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reset_framepool") < 0)) __PYX_ERR(0, 360, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
    __pyx_v_reset_device = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_framepool", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 360, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.reset_framepool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_12reset_framepool(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self), __pyx_v_size, __pyx_v_reset_device);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_12reset_framepool(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_reset_device) {
  PyObject *__pyx_v_DirectXPixelFormat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_framepool", 1);

  /* "ok/Capture.pyx":361
 * 
 *     def reset_framepool(self, size, reset_device=False):
 *         logger.info(f'reset_framepool')             # <<<<<<<<<<<<<<
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 *         if reset_device:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_reset_framepool};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":362
 *     def reset_framepool(self, size, reset_device=False):
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat             # <<<<<<<<<<<<<<
 *         if reset_device:
 *             self.create_device()
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DirectXPixelFormat);
  __Pyx_GIVEREF(__pyx_n_s_DirectXPixelFormat);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DirectXPixelFormat)) __PYX_ERR(0, 362, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_DirectXPixelFormat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_DirectXPixelFormat = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":363
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 *         if reset_device:             # <<<<<<<<<<<<<<
 *             self.create_device()
 *         self.frame_pool.Recreate(self.rtdevice,
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_reset_device); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 363, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":364
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 *         if reset_device:
 *             self.create_device()             # <<<<<<<<<<<<<<
 *         self.frame_pool.Recreate(self.rtdevice,
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":363
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 *         if reset_device:             # <<<<<<<<<<<<<<
 *             self.create_device()
 *         self.frame_pool.Recreate(self.rtdevice,
 */
  }

  /* "ok/Capture.pyx":365
 *         if reset_device:
 *             self.create_device()
 *         self.frame_pool.Recreate(self.rtdevice,             # <<<<<<<<<<<<<<
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->frame_pool, __pyx_n_s_Recreate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "ok/Capture.pyx":366
 *             self.create_device()
 *         self.frame_pool.Recreate(self.rtdevice,
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)             # <<<<<<<<<<<<<<
 * 
 *     def crop_image(self, frame):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_DirectXPixelFormat, __pyx_n_s_B8G8R8A8UIntNormalized); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_self->rtdevice, __pyx_t_2, __pyx_int_2, __pyx_v_size};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":360
 *                 return frame
 * 
 *     def reset_framepool(self, size, reset_device=False):             # <<<<<<<<<<<<<<
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.reset_framepool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_DirectXPixelFormat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":368
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)
 * 
 *     def crop_image(self, frame):             # <<<<<<<<<<<<<<
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_15crop_image(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_15crop_image = {"crop_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_15crop_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_15crop_image(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_frame = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("crop_image (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frame,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "crop_image") < 0)) __PYX_ERR(0, 368, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_frame = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("crop_image", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 368, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.crop_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_14crop_image(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self), __pyx_v_frame);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_14crop_image(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v_frame) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("crop_image", 0);
  __Pyx_INCREF(__pyx_v_frame);

  /* "ok/Capture.pyx":369
 * 
 *     def crop_image(self, frame):
 *         if frame is not None:             # <<<<<<<<<<<<<<
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 *             if x > 0 or y > 0:
 */
  __pyx_t_1 = (__pyx_v_frame != Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":370
 *     def crop_image(self, frame):
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)             # <<<<<<<<<<<<<<
 *             if x > 0 or y > 0:
 *                 frame = crop_image(frame, x, y)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_crop_point); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_width); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_height); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_9, 4+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 370, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_8)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_7), 2) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 370, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_x = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_y = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "ok/Capture.pyx":371
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 *             if x > 0 or y > 0:             # <<<<<<<<<<<<<<
 *                 frame = crop_image(frame, x, y)
 *         return frame
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_x, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!__pyx_t_11) {
    } else {
      __pyx_t_1 = __pyx_t_11;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_y, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_11;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":372
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 *             if x > 0 or y > 0:
 *                 frame = crop_image(frame, x, y)             # <<<<<<<<<<<<<<
 *         return frame
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_crop_image); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_frame, __pyx_v_x, __pyx_v_y};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 3+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_frame, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ok/Capture.pyx":371
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 *             if x > 0 or y > 0:             # <<<<<<<<<<<<<<
 *                 frame = crop_image(frame, x, y)
 *         return frame
 */
    }

    /* "ok/Capture.pyx":369
 * 
 *     def crop_image(self, frame):
 *         if frame is not None:             # <<<<<<<<<<<<<<
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 *             if x > 0 or y > 0:
 */
  }

  /* "ok/Capture.pyx":373
 *             if x > 0 or y > 0:
 *                 frame = crop_image(frame, x, y)
 *         return frame             # <<<<<<<<<<<<<<
 * 
 * def crop_image(image, border, title_height):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_frame);
  __pyx_r = __pyx_v_frame;
  goto __pyx_L0;

  /* "ok/Capture.pyx":368
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)
 * 
 *     def crop_image(self, frame):             # <<<<<<<<<<<<<<
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.crop_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_17__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_16__reduce_cython__(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_16__reduce_cython__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.cputex, self.dxdevice, self.evtoken, self.exit_event, self.frame_pool, self.immediatedc, self.item, self.last_frame, self.last_frame_time, self.last_size, self.rtdevice, self.session)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->last_frame_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(14); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._hwnd_window);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._hwnd_window);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->__pyx_base._hwnd_window)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->__pyx_base.__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->cputex);
  __Pyx_GIVEREF(__pyx_v_self->cputex);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->cputex)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->dxdevice);
  __Pyx_GIVEREF(__pyx_v_self->dxdevice);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_self->dxdevice)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->evtoken);
  __Pyx_GIVEREF(__pyx_v_self->evtoken);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_self->evtoken)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_self->__pyx_base.__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->frame_pool);
  __Pyx_GIVEREF(__pyx_v_self->frame_pool);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_v_self->frame_pool)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->immediatedc);
  __Pyx_GIVEREF(__pyx_v_self->immediatedc);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_v_self->immediatedc)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->item);
  __Pyx_GIVEREF(__pyx_v_self->item);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 8, __pyx_v_self->item)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->last_frame);
  __Pyx_GIVEREF(__pyx_v_self->last_frame);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 9, __pyx_v_self->last_frame)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 10, __pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->last_size);
  __Pyx_GIVEREF(__pyx_v_self->last_size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 11, __pyx_v_self->last_size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->rtdevice);
  __Pyx_GIVEREF(__pyx_v_self->rtdevice);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 12, __pyx_v_self->rtdevice)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->session);
  __Pyx_GIVEREF(__pyx_v_self->session);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 13, __pyx_v_self->session)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.cputex, self.dxdevice, self.evtoken, self.exit_event, self.frame_pool, self.immediatedc, self.item, self.last_frame, self.last_frame_time, self.last_size, self.rtdevice, self.session)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.cputex, self.dxdevice, self.evtoken, self.exit_event, self.frame_pool, self.immediatedc, self.item, self.last_frame, self.last_frame_time, self.last_size, self.rtdevice, self.session)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.cputex is not None or self.dxdevice is not None or self.evtoken is not None or self.exit_event is not None or self.frame_pool is not None or self.immediatedc is not None or self.item is not None or self.last_frame is not None or self.last_size is not None or self.rtdevice is not None or self.session is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.cputex, self.dxdevice, self.evtoken, self.exit_event, self.frame_pool, self.immediatedc, self.item, self.last_frame, self.last_frame_time, self.last_size, self.rtdevice, self.session)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.cputex is not None or self.dxdevice is not None or self.evtoken is not None or self.exit_event is not None or self.frame_pool is not None or self.immediatedc is not None or self.item is not None or self.last_frame is not None or self.last_size is not None or self.rtdevice is not None or self.session is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base._hwnd_window != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->cputex != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->dxdevice != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->evtoken != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.__pyx_base.exit_event != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->frame_pool != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->immediatedc != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->item != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->last_frame != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->last_size != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->rtdevice != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->session != Py_None);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.cputex is not None or self.dxdevice is not None or self.evtoken is not None or self.exit_event is not None or self.frame_pool is not None or self.immediatedc is not None or self.item is not None or self.last_frame is not None or self.last_size is not None or self.rtdevice is not None or self.session is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.cputex is not None or self.dxdevice is not None or self.evtoken is not None or self.exit_event is not None or self.frame_pool is not None or self.immediatedc is not None or self.item is not None or self.last_frame is not None or self.last_size is not None or self.rtdevice is not None or self.session is not None
 *     if use_setstate:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_WindowsGraphicsCa); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_36463512);
    __Pyx_GIVEREF(__pyx_int_36463512);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_36463512)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.cputex is not None or self.dxdevice is not None or self.evtoken is not None or self.exit_event is not None or self.frame_pool is not None or self.immediatedc is not None or self.item is not None or self.last_frame is not None or self.last_size is not None or self.rtdevice is not None or self.session is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, None), state
 *     else:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_WindowsGraphicsCa); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_36463512);
    __Pyx_GIVEREF(__pyx_int_36463512);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_36463512)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_19__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_18__setstate_cython__(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28WindowsGraphicsCaptureMethod_18__setstate_cython__(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.WindowsGraphicsCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":375
 *         return frame
 * 
 * def crop_image(image, border, title_height):             # <<<<<<<<<<<<<<
 *     # Load the image
 *     # Image dimensions
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_3crop_image(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_3crop_image = {"crop_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_3crop_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_3crop_image(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_image = 0;
  PyObject *__pyx_v_border = 0;
  PyObject *__pyx_v_title_height = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("crop_image (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_image,&__pyx_n_s_border,&__pyx_n_s_title_height,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_image)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_border)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("crop_image", 1, 3, 3, 1); __PYX_ERR(0, 375, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_title_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("crop_image", 1, 3, 3, 2); __PYX_ERR(0, 375, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "crop_image") < 0)) __PYX_ERR(0, 375, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_image = values[0];
    __pyx_v_border = values[1];
    __pyx_v_title_height = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("crop_image", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 375, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.crop_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_2crop_image(__pyx_self, __pyx_v_image, __pyx_v_border, __pyx_v_title_height);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_2crop_image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image, PyObject *__pyx_v_border, PyObject *__pyx_v_title_height) {
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_x2 = NULL;
  PyObject *__pyx_v_y2 = NULL;
  PyObject *__pyx_v_cropped_image = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("crop_image", 1);

  /* "ok/Capture.pyx":378
 *     # Load the image
 *     # Image dimensions
 *     height, width = image.shape[:2]             # <<<<<<<<<<<<<<
 * 
 *     # Calculate the coordinates for the bottom-right corner
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 2, NULL, NULL, &__pyx_slice__9, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 378, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 378, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_height = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_width = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":381
 * 
 *     # Calculate the coordinates for the bottom-right corner
 *     x2 = width - border             # <<<<<<<<<<<<<<
 *     y2 = height - border
 * 
 */
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_width, __pyx_v_border); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_x2 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":382
 *     # Calculate the coordinates for the bottom-right corner
 *     x2 = width - border
 *     y2 = height - border             # <<<<<<<<<<<<<<
 * 
 *     # Crop the image
 */
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_height, __pyx_v_border); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_y2 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":385
 * 
 *     # Crop the image
 *     cropped_image = image[title_height:y2, border:x2]             # <<<<<<<<<<<<<<
 * 
 *     # print(f"cropped image: {title_height}-{y2}, {border}-{x2} {cropped_image.shape}")
 */
  __pyx_t_2 = PySlice_New(__pyx_v_title_height, __pyx_v_y2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PySlice_New(__pyx_v_border, __pyx_v_x2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_image, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cropped_image = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":394
 *     # cv2.waitKey(0)
 * 
 *     return cropped_image             # <<<<<<<<<<<<<<
 * 
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_cropped_image);
  __pyx_r = __pyx_v_cropped_image;
  goto __pyx_L0;

  /* "ok/Capture.pyx":375
 *         return frame
 * 
 * def crop_image(image, border, title_height):             # <<<<<<<<<<<<<<
 *     # Load the image
 *     # Image dimensions
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.crop_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_cropped_image);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":398
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1
 * 
 * def windows_graphics_available():             # <<<<<<<<<<<<<<
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_5windows_graphics_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_5windows_graphics_available = {"windows_graphics_available", (PyCFunction)__pyx_pw_2ok_7Capture_5windows_graphics_available, METH_NOARGS, 0};
static PyObject *__pyx_pw_2ok_7Capture_5windows_graphics_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("windows_graphics_available (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_4windows_graphics_available(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_4windows_graphics_available(CYTHON_UNUSED PyObject *__pyx_self) {
  CYTHON_UNUSED PyObject *__pyx_v_idldsl = NULL;
  PyObject *__pyx_v_GetActivationFactory = NULL;
  PyObject *__pyx_v_IGraphicsCaptureItemInterop = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("windows_graphics_available", 1);

  /* "ok/Capture.pyx":399
 * 
 * def windows_graphics_available():
 *     logger.info(             # <<<<<<<<<<<<<<
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":400
 * def windows_graphics_available():
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")             # <<<<<<<<<<<<<<
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:
 *         try:
 */
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_check_available_WINDOWS_BUILD_NU);
  __pyx_t_4 += 37;
  __Pyx_GIVEREF(__pyx_kp_u_check_available_WINDOWS_BUILD_NU);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_check_available_WINDOWS_BUILD_NU);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_WINDOWS_BUILD_NUMBER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u__10);
  __pyx_t_4 += 4;
  __Pyx_GIVEREF(__pyx_kp_u__10);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__10);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_WGC_MIN_BUILD); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__11);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_WINDOWS_BUILD_NUMBER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_WGC_MIN_BUILD); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_6, __pyx_t_7, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_2, 6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":401
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:             # <<<<<<<<<<<<<<
 *         try:
 *             from ok.rotypes import idldsl
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WINDOWS_BUILD_NUMBER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_WGC_MIN_BUILD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_10) {

    /* "ok/Capture.pyx":402
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:
 *         try:             # <<<<<<<<<<<<<<
 *             from ok.rotypes import idldsl
 *             from ok.rotypes.roapi import GetActivationFactory
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "ok/Capture.pyx":403
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:
 *         try:
 *             from ok.rotypes import idldsl             # <<<<<<<<<<<<<<
 *             from ok.rotypes.roapi import GetActivationFactory
 *             from ok.rotypes.Windows.Graphics.Capture import IGraphicsCaptureItemInterop
 */
        __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 403, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_n_s_idldsl);
        __Pyx_GIVEREF(__pyx_n_s_idldsl);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_idldsl)) __PYX_ERR(0, 403, __pyx_L4_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes, __pyx_t_7, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_idldsl); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 403, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_v_idldsl = __pyx_t_7;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":404
 *         try:
 *             from ok.rotypes import idldsl
 *             from ok.rotypes.roapi import GetActivationFactory             # <<<<<<<<<<<<<<
 *             from ok.rotypes.Windows.Graphics.Capture import IGraphicsCaptureItemInterop
 *             GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 */
        __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_GetActivationFactory);
        __Pyx_GIVEREF(__pyx_n_s_GetActivationFactory);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_GetActivationFactory)) __PYX_ERR(0, 404, __pyx_L4_error);
        __pyx_t_7 = __Pyx_Import(__pyx_n_s_ok_rotypes_roapi, __pyx_t_3, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_GetActivationFactory); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_GetActivationFactory = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "ok/Capture.pyx":405
 *             from ok.rotypes import idldsl
 *             from ok.rotypes.roapi import GetActivationFactory
 *             from ok.rotypes.Windows.Graphics.Capture import IGraphicsCaptureItemInterop             # <<<<<<<<<<<<<<
 *             GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 *                 IGraphicsCaptureItemInterop)
 */
        __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_n_s_IGraphicsCaptureItemInterop);
        __Pyx_GIVEREF(__pyx_n_s_IGraphicsCaptureItemInterop);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_IGraphicsCaptureItemInterop)) __PYX_ERR(0, 405, __pyx_L4_error);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_rotypes_Windows_Graphics_Capt, __pyx_t_7, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_IGraphicsCaptureItemInterop); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_v_IGraphicsCaptureItemInterop = __pyx_t_7;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":406
 *             from ok.rotypes.roapi import GetActivationFactory
 *             from ok.rotypes.Windows.Graphics.Capture import IGraphicsCaptureItemInterop
 *             GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(             # <<<<<<<<<<<<<<
 *                 IGraphicsCaptureItemInterop)
 *             return True
 */
        __Pyx_INCREF(__pyx_v_GetActivationFactory);
        __pyx_t_1 = __pyx_v_GetActivationFactory; __pyx_t_2 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s_Windows_Graphics_Capture_Graphic};
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 406, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "ok/Capture.pyx":407
 *             from ok.rotypes.Windows.Graphics.Capture import IGraphicsCaptureItemInterop
 *             GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 *                 IGraphicsCaptureItemInterop)             # <<<<<<<<<<<<<<
 *             return True
 *         except Exception as e:
 */
        __pyx_t_7 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_IGraphicsCaptureItemInterop};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":408
 *             GetActivationFactory('Windows.Graphics.Capture.GraphicsCaptureItem').astype(
 *                 IGraphicsCaptureItemInterop)
 *             return True             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             logger.error(f'check available failed: {e}', exception=e)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L8_try_return;

        /* "ok/Capture.pyx":402
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:
 *         try:             # <<<<<<<<<<<<<<
 *             from ok.rotypes import idldsl
 *             from ok.rotypes.roapi import GetActivationFactory
 */
      }
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "ok/Capture.pyx":409
 *                 IGraphicsCaptureItemInterop)
 *             return True
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f'check available failed: {e}', exception=e)
 *             return False
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_14) {
        __Pyx_AddTraceback("ok.Capture.windows_graphics_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 409, __pyx_L6_except_error)
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_e = __pyx_t_1;
        /*try:*/ {

          /* "ok/Capture.pyx":410
 *             return True
 *         except Exception as e:
 *             logger.error(f'check available failed: {e}', exception=e)             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_check_available_failed, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_6);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6)) __PYX_ERR(0, 410, __pyx_L15_error);
          __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_exception, __pyx_v_e) < 0) __PYX_ERR(0, 410, __pyx_L15_error)
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 410, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "ok/Capture.pyx":411
 *         except Exception as e:
 *             logger.error(f'check available failed: {e}', exception=e)
 *             return False             # <<<<<<<<<<<<<<
 * 
 * def is_blank(image):
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L14_return;
        }

        /* "ok/Capture.pyx":409
 *                 IGraphicsCaptureItemInterop)
 *             return True
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f'check available failed: {e}', exception=e)
 *             return False
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_21);
            __Pyx_XGOTREF(__pyx_t_22);
            __Pyx_XGOTREF(__pyx_t_23);
            __pyx_t_14 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_XGIVEREF(__pyx_t_22);
              __Pyx_XGIVEREF(__pyx_t_23);
              __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
            goto __pyx_L6_except_error;
          }
          __pyx_L14_return: {
            __pyx_t_23 = __pyx_r;
            __pyx_r = 0;
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            __pyx_r = __pyx_t_23;
            __pyx_t_23 = 0;
            goto __pyx_L7_except_return;
          }
        }
      }
      goto __pyx_L6_except_error;

      /* "ok/Capture.pyx":402
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:
 *         try:             # <<<<<<<<<<<<<<
 *             from ok.rotypes import idldsl
 *             from ok.rotypes.roapi import GetActivationFactory
 */
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L0;
    }

    /* "ok/Capture.pyx":401
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 *     if WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD:             # <<<<<<<<<<<<<<
 *         try:
 *             from ok.rotypes import idldsl
 */
  }

  /* "ok/Capture.pyx":398
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1
 * 
 * def windows_graphics_available():             # <<<<<<<<<<<<<<
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("ok.Capture.windows_graphics_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idldsl);
  __Pyx_XDECREF(__pyx_v_GetActivationFactory);
  __Pyx_XDECREF(__pyx_v_IGraphicsCaptureItemInterop);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":413
 *             return False
 * 
 * def is_blank(image):             # <<<<<<<<<<<<<<
 *     """
 *     BitBlt can return a balnk buffer. Either because the target is unsupported,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_7is_blank(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2ok_7Capture_6is_blank, "\n    BitBlt can return a balnk buffer. Either because the target is unsupported,\n    or because there's two windows of the same name for the same executable.\n    ");
static PyMethodDef __pyx_mdef_2ok_7Capture_7is_blank = {"is_blank", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_7is_blank, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2ok_7Capture_6is_blank};
static PyObject *__pyx_pw_2ok_7Capture_7is_blank(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_image = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_blank (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_image,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_image)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_blank") < 0)) __PYX_ERR(0, 413, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_image = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_blank", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 413, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.is_blank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_6is_blank(__pyx_self, __pyx_v_image);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_6is_blank(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_blank", 1);

  /* "ok/Capture.pyx":418
 *     or because there's two windows of the same name for the same executable.
 *     """
 *     return not image.any()             # <<<<<<<<<<<<<<
 * 
 * cdef bint render_full
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":413
 *             return False
 * 
 * def is_blank(image):             # <<<<<<<<<<<<<<
 *     """
 *     BitBlt can return a balnk buffer. Either because the target is unsupported,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.is_blank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":432
 *     )
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:
 */

static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_19BitBltCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  struct __pyx_opt_args_2ok_7Capture_bit_blt_capture_frame __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":434
 *     cpdef object do_get_frame(self):
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:             # <<<<<<<<<<<<<<
 *             x = self.hwnd_window.real_x_offset
 *             y = self.hwnd_window.real_y_offset
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_real_x_offset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_2, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_real_y_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_1, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":435
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:
 *             x = self.hwnd_window.real_x_offset             # <<<<<<<<<<<<<<
 *             y = self.hwnd_window.real_y_offset
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_real_x_offset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_x = __pyx_t_8;

    /* "ok/Capture.pyx":436
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:
 *             x = self.hwnd_window.real_x_offset
 *             y = self.hwnd_window.real_y_offset             # <<<<<<<<<<<<<<
 *         else:
 *             x, y = get_crop_point(self.hwnd_window.window_width, self.hwnd_window.window_height,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_real_y_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_y = __pyx_t_8;

    /* "ok/Capture.pyx":434
 *     cpdef object do_get_frame(self):
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:             # <<<<<<<<<<<<<<
 *             x = self.hwnd_window.real_x_offset
 *             y = self.hwnd_window.real_y_offset
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":438
 *             y = self.hwnd_window.real_y_offset
 *         else:
 *             x, y = get_crop_point(self.hwnd_window.window_width, self.hwnd_window.window_height,             # <<<<<<<<<<<<<<
 *                                   self.hwnd_window.width, self.hwnd_window.height)
 *         return bit_blt_capture_frame(self.hwnd_window.hwnd, x,
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_crop_point); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_window_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_window_height); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":439
 *         else:
 *             x, y = get_crop_point(self.hwnd_window.window_width, self.hwnd_window.window_height,
 *                                   self.hwnd_window.width, self.hwnd_window.height)             # <<<<<<<<<<<<<<
 *         return bit_blt_capture_frame(self.hwnd_window.hwnd, x,
 *                                      y,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_width); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_height); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_3, __pyx_t_4, __pyx_t_9, __pyx_t_10, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 4+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 438, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_11 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_10), 2) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 438, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }

    /* "ok/Capture.pyx":438
 *             y = self.hwnd_window.real_y_offset
 *         else:
 *             x, y = get_crop_point(self.hwnd_window.window_width, self.hwnd_window.window_height,             # <<<<<<<<<<<<<<
 *                                   self.hwnd_window.width, self.hwnd_window.height)
 *         return bit_blt_capture_frame(self.hwnd_window.hwnd, x,
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_x = __pyx_t_8;
    __pyx_v_y = __pyx_t_13;
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":440
 *             x, y = get_crop_point(self.hwnd_window.window_width, self.hwnd_window.window_height,
 *                                   self.hwnd_window.width, self.hwnd_window.height)
 *         return bit_blt_capture_frame(self.hwnd_window.hwnd, x,             # <<<<<<<<<<<<<<
 *                                      y,
 *                                      self.hwnd_window.real_width or self.hwnd_window.width,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":442
 *         return bit_blt_capture_frame(self.hwnd_window.hwnd, x,
 *                                      y,
 *                                      self.hwnd_window.real_width or self.hwnd_window.width,             # <<<<<<<<<<<<<<
 *                                      self.hwnd_window.real_height or self.hwnd_window.height,
 *                                      render_full)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_real_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 442, __pyx_L1_error)
  if (!__pyx_t_6) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)
    __pyx_t_13 = __pyx_t_8;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_t_13 = __pyx_t_8;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_L8_bool_binop_done:;

  /* "ok/Capture.pyx":443
 *                                      y,
 *                                      self.hwnd_window.real_width or self.hwnd_window.width,
 *                                      self.hwnd_window.real_height or self.hwnd_window.height,             # <<<<<<<<<<<<<<
 *                                      render_full)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_real_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 443, __pyx_L1_error)
  if (!__pyx_t_6) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_14;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_t_8 = __pyx_t_14;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_L10_bool_binop_done:;

  /* "ok/Capture.pyx":440
 *             x, y = get_crop_point(self.hwnd_window.window_width, self.hwnd_window.window_height,
 *                                   self.hwnd_window.width, self.hwnd_window.height)
 *         return bit_blt_capture_frame(self.hwnd_window.hwnd, x,             # <<<<<<<<<<<<<<
 *                                      y,
 *                                      self.hwnd_window.real_width or self.hwnd_window.width,
 */
  __pyx_t_15.__pyx_n = 1;
  __pyx_t_15._render_full_content = __pyx_v_2ok_7Capture_render_full;
  __pyx_t_1 = __pyx_f_2ok_7Capture_bit_blt_capture_frame(__pyx_t_11, __pyx_v_x, __pyx_v_y, __pyx_t_13, __pyx_t_8, &__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":432
 *     )
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_19BitBltCaptureMethod_do_get_frame(((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_19BitBltCaptureMethod_do_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":446
 *                                      render_full)
 * 
 *     def test_exclusive_full_screen(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_3test_exclusive_full_screen(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_3test_exclusive_full_screen = {"test_exclusive_full_screen", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_3test_exclusive_full_screen, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_3test_exclusive_full_screen(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_exclusive_full_screen (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("test_exclusive_full_screen", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "test_exclusive_full_screen", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_19BitBltCaptureMethod_2test_exclusive_full_screen(((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_2test_exclusive_full_screen(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_frame = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_exclusive_full_screen", 1);

  /* "ok/Capture.pyx":447
 * 
 *     def test_exclusive_full_screen(self):
 *         frame = self.do_get_frame()             # <<<<<<<<<<<<<<
 *         if frame is None:
 *             logger.error(f'Failed to test_exclusive_full_screen {self.hwnd_window}')
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->do_get_frame(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_frame = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":448
 *     def test_exclusive_full_screen(self):
 *         frame = self.do_get_frame()
 *         if frame is None:             # <<<<<<<<<<<<<<
 *             logger.error(f'Failed to test_exclusive_full_screen {self.hwnd_window}')
 *             return False
 */
  __pyx_t_2 = (__pyx_v_frame == Py_None);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":449
 *         frame = self.do_get_frame()
 *         if frame is None:
 *             logger.error(f'Failed to test_exclusive_full_screen {self.hwnd_window}')             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Failed_to_test_exclusive_full_sc, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":450
 *         if frame is None:
 *             logger.error(f'Failed to test_exclusive_full_screen {self.hwnd_window}')
 *             return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "ok/Capture.pyx":448
 *     def test_exclusive_full_screen(self):
 *         frame = self.do_get_frame()
 *         if frame is None:             # <<<<<<<<<<<<<<
 *             logger.error(f'Failed to test_exclusive_full_screen {self.hwnd_window}')
 *             return False
 */
  }

  /* "ok/Capture.pyx":451
 *             logger.error(f'Failed to test_exclusive_full_screen {self.hwnd_window}')
 *             return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def test_is_not_pure_color(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":446
 *                                      render_full)
 * 
 *     def test_exclusive_full_screen(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.test_exclusive_full_screen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":453
 *         return True
 * 
 *     def test_is_not_pure_color(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_5test_is_not_pure_color(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_5test_is_not_pure_color = {"test_is_not_pure_color", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_5test_is_not_pure_color, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_5test_is_not_pure_color(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_is_not_pure_color (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("test_is_not_pure_color", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "test_is_not_pure_color", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_19BitBltCaptureMethod_4test_is_not_pure_color(((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_4test_is_not_pure_color(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_frame = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_is_not_pure_color", 1);

  /* "ok/Capture.pyx":454
 * 
 *     def test_is_not_pure_color(self):
 *         frame = self.do_get_frame()             # <<<<<<<<<<<<<<
 *         if frame is None:
 *             logger.error(f'Failed to test_is_not_pure_color frame is None {self.hwnd_window}')
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->do_get_frame(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_frame = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":455
 *     def test_is_not_pure_color(self):
 *         frame = self.do_get_frame()
 *         if frame is None:             # <<<<<<<<<<<<<<
 *             logger.error(f'Failed to test_is_not_pure_color frame is None {self.hwnd_window}')
 *             return False
 */
  __pyx_t_2 = (__pyx_v_frame == Py_None);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":456
 *         frame = self.do_get_frame()
 *         if frame is None:
 *             logger.error(f'Failed to test_is_not_pure_color frame is None {self.hwnd_window}')             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Failed_to_test_is_not_pure_color, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":457
 *         if frame is None:
 *             logger.error(f'Failed to test_is_not_pure_color frame is None {self.hwnd_window}')
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             if is_close_to_pure_color(frame):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "ok/Capture.pyx":455
 *     def test_is_not_pure_color(self):
 *         frame = self.do_get_frame()
 *         if frame is None:             # <<<<<<<<<<<<<<
 *             logger.error(f'Failed to test_is_not_pure_color frame is None {self.hwnd_window}')
 *             return False
 */
  }

  /* "ok/Capture.pyx":459
 *             return False
 *         else:
 *             if is_close_to_pure_color(frame):             # <<<<<<<<<<<<<<
 *                 logger.error(f'Failed to test_is_not_pure_color failed {self.hwnd_window}')
 *                 return False
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_is_close_to_pure_color); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_frame};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":460
 *         else:
 *             if is_close_to_pure_color(frame):
 *                 logger.error(f'Failed to test_is_not_pure_color failed {self.hwnd_window}')             # <<<<<<<<<<<<<<
 *                 return False
 *             else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Failed_to_test_is_not_pure_color_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":461
 *             if is_close_to_pure_color(frame):
 *                 logger.error(f'Failed to test_is_not_pure_color failed {self.hwnd_window}')
 *                 return False             # <<<<<<<<<<<<<<
 *             else:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "ok/Capture.pyx":459
 *             return False
 *         else:
 *             if is_close_to_pure_color(frame):             # <<<<<<<<<<<<<<
 *                 logger.error(f'Failed to test_is_not_pure_color failed {self.hwnd_window}')
 *                 return False
 */
    }

    /* "ok/Capture.pyx":463
 *                 return False
 *             else:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;
    }
  }

  /* "ok/Capture.pyx":453
 *         return True
 * 
 *     def test_is_not_pure_color(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.test_is_not_pure_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_19BitBltCaptureMethod_6__reduce_cython__(((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_6__reduce_cython__(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.exit_event)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._hwnd_window);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._hwnd_window);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->__pyx_base._hwnd_window)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->__pyx_base.__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->__pyx_base.__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base._hwnd_window != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.__pyx_base.exit_event != Py_None);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 *     if use_setstate:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_BitBltCaptureMeth); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_268090033);
    __Pyx_GIVEREF(__pyx_int_268090033);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_268090033)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, None), state
 *     else:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BitBltCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_BitBltCaptureMeth); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_268090033);
    __Pyx_GIVEREF(__pyx_int_268090033);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_268090033)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BitBltCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_19BitBltCaptureMethod_8__setstate_cython__(((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_19BitBltCaptureMethod_8__setstate_cython__(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BitBltCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_BitBltCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BitBltCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.BitBltCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":465
 *                 return True
 * 
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,             # <<<<<<<<<<<<<<
 *                                   bint _render_full_content=False):
 *     if hwnd is None:
 */

static PyObject *__pyx_f_2ok_7Capture_bit_blt_capture_frame(PyObject *__pyx_v_hwnd, int __pyx_v_border, int __pyx_v_title_height, int __pyx_v_width, int __pyx_v_height, struct __pyx_opt_args_2ok_7Capture_bit_blt_capture_frame *__pyx_optional_args) {

  /* "ok/Capture.pyx":466
 * 
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,
 *                                   bint _render_full_content=False):             # <<<<<<<<<<<<<<
 *     if hwnd is None:
 *         return None
 */
  int __pyx_v__render_full_content = ((int)0);
  CYTHON_UNUSED double __pyx_v_start;
  PyObject *__pyx_v_image = 0;
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_dc_object = 0;
  PyObject *__pyx_v_bitmap = 0;
  PyObject *__pyx_v_window_dc = 0;
  PyObject *__pyx_v_compatible_dc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bit_blt_capture_frame", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v__render_full_content = __pyx_optional_args->_render_full_content;
    }
  }

  /* "ok/Capture.pyx":467
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,
 *                                   bint _render_full_content=False):
 *     if hwnd is None:             # <<<<<<<<<<<<<<
 *         return None
 *     if width <= 0 or height <= 0:
 */
  __pyx_t_1 = (__pyx_v_hwnd == Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":468
 *                                   bint _render_full_content=False):
 *     if hwnd is None:
 *         return None             # <<<<<<<<<<<<<<
 *     if width <= 0 or height <= 0:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":467
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,
 *                                   bint _render_full_content=False):
 *     if hwnd is None:             # <<<<<<<<<<<<<<
 *         return None
 *     if width <= 0 or height <= 0:
 */
  }

  /* "ok/Capture.pyx":469
 *     if hwnd is None:
 *         return None
 *     if width <= 0 or height <= 0:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef double start
 */
  __pyx_t_2 = (__pyx_v_width <= 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_height <= 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":470
 *         return None
 *     if width <= 0 or height <= 0:
 *         return None             # <<<<<<<<<<<<<<
 *     cdef double start
 *     start = time.time()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":469
 *     if hwnd is None:
 *         return None
 *     if width <= 0 or height <= 0:             # <<<<<<<<<<<<<<
 *         return None
 *     cdef double start
 */
  }

  /* "ok/Capture.pyx":472
 *         return None
 *     cdef double start
 *     start = time.time()             # <<<<<<<<<<<<<<
 *     cdef object image
 *     image = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_start = __pyx_t_7;

  /* "ok/Capture.pyx":474
 *     start = time.time()
 *     cdef object image
 *     image = None             # <<<<<<<<<<<<<<
 * 
 *     cdef int x, y
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_image = Py_None;

  /* "ok/Capture.pyx":477
 * 
 *     cdef int x, y
 *     x = border             # <<<<<<<<<<<<<<
 *     y = title_height
 * 
 */
  __pyx_v_x = __pyx_v_border;

  /* "ok/Capture.pyx":478
 *     cdef int x, y
 *     x = border
 *     y = title_height             # <<<<<<<<<<<<<<
 * 
 *     cdef object dc_object, bitmap, window_dc, compatible_dc
 */
  __pyx_v_y = __pyx_v_title_height;

  /* "ok/Capture.pyx":481
 * 
 *     cdef object dc_object, bitmap, window_dc, compatible_dc
 *     try:             # <<<<<<<<<<<<<<
 *         window_dc = win32gui.GetWindowDC(hwnd)
 *         dc_object = win32ui.CreateDCFromHandle(window_dc)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "ok/Capture.pyx":482
 *     cdef object dc_object, bitmap, window_dc, compatible_dc
 *     try:
 *         window_dc = win32gui.GetWindowDC(hwnd)             # <<<<<<<<<<<<<<
 *         dc_object = win32ui.CreateDCFromHandle(window_dc)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GetWindowDC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_hwnd};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_v_window_dc = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ok/Capture.pyx":483
 *     try:
 *         window_dc = win32gui.GetWindowDC(hwnd)
 *         dc_object = win32ui.CreateDCFromHandle(window_dc)             # <<<<<<<<<<<<<<
 * 
 *         # Causes a 10-15x performance drop. But allows recording hardware accelerated windows
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32ui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_CreateDCFromHandle); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_window_dc};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_dc_object = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ok/Capture.pyx":486
 * 
 *         # Causes a 10-15x performance drop. But allows recording hardware accelerated windows
 *         if _render_full_content:             # <<<<<<<<<<<<<<
 *             ctypes.windll.user32.PrintWindow(hwnd, dc_object.GetSafeHdc(), PW_RENDERFULLCONTENT)
 * 
 */
      if (__pyx_v__render_full_content) {

        /* "ok/Capture.pyx":487
 *         # Causes a 10-15x performance drop. But allows recording hardware accelerated windows
 *         if _render_full_content:
 *             ctypes.windll.user32.PrintWindow(hwnd, dc_object.GetSafeHdc(), PW_RENDERFULLCONTENT)             # <<<<<<<<<<<<<<
 * 
 *         # On Windows there is a shadow around the windows that we need to account for.
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_windll); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_user32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_PrintWindow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_dc_object, __pyx_n_s_GetSafeHdc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 487, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_PW_RENDERFULLCONTENT); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 487, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_12, __pyx_v_hwnd, __pyx_t_5, __pyx_t_11};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":486
 * 
 *         # Causes a 10-15x performance drop. But allows recording hardware accelerated windows
 *         if _render_full_content:             # <<<<<<<<<<<<<<
 *             ctypes.windll.user32.PrintWindow(hwnd, dc_object.GetSafeHdc(), PW_RENDERFULLCONTENT)
 * 
 */
      }

      /* "ok/Capture.pyx":491
 *         # On Windows there is a shadow around the windows that we need to account for.
 *         # left_bounds, top_bounds = 3, 0
 *         compatible_dc = dc_object.CreateCompatibleDC()             # <<<<<<<<<<<<<<
 *         bitmap = win32ui.CreateBitmap()
 *         bitmap.CreateCompatibleBitmap(dc_object, width, height)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dc_object, __pyx_n_s_CreateCompatibleDC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_v_compatible_dc = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ok/Capture.pyx":492
 *         # left_bounds, top_bounds = 3, 0
 *         compatible_dc = dc_object.CreateCompatibleDC()
 *         bitmap = win32ui.CreateBitmap()             # <<<<<<<<<<<<<<
 *         bitmap.CreateCompatibleBitmap(dc_object, width, height)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32ui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_CreateBitmap); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 492, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_v_bitmap = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ok/Capture.pyx":493
 *         compatible_dc = dc_object.CreateCompatibleDC()
 *         bitmap = win32ui.CreateBitmap()
 *         bitmap.CreateCompatibleBitmap(dc_object, width, height)             # <<<<<<<<<<<<<<
 * 
 *         compatible_dc.SelectObject(bitmap)
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_n_s_CreateCompatibleBitmap); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 493, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_12, __pyx_v_dc_object, __pyx_t_4, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 493, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":495
 *         bitmap.CreateCompatibleBitmap(dc_object, width, height)
 * 
 *         compatible_dc.SelectObject(bitmap)             # <<<<<<<<<<<<<<
 *         compatible_dc.BitBlt(
 *             (0, 0),
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_compatible_dc, __pyx_n_s_SelectObject); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 495, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_bitmap};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 495, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":496
 * 
 *         compatible_dc.SelectObject(bitmap)
 *         compatible_dc.BitBlt(             # <<<<<<<<<<<<<<
 *             (0, 0),
 *             (width, height),
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_compatible_dc, __pyx_n_s_BitBlt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 496, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);

      /* "ok/Capture.pyx":498
 *         compatible_dc.BitBlt(
 *             (0, 0),
 *             (width, height),             # <<<<<<<<<<<<<<
 *             dc_object,
 *             (x, y),
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 498, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_5);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5)) __PYX_ERR(0, 498, __pyx_L7_error);
      __Pyx_GIVEREF(__pyx_t_4);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_4)) __PYX_ERR(0, 498, __pyx_L7_error);
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":500
 *             (width, height),
 *             dc_object,
 *             (x, y),             # <<<<<<<<<<<<<<
 *             win32con.SRCCOPY,
 *         )
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 500, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_4);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4)) __PYX_ERR(0, 500, __pyx_L7_error);
      __Pyx_GIVEREF(__pyx_t_5);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_5)) __PYX_ERR(0, 500, __pyx_L7_error);
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;

      /* "ok/Capture.pyx":501
 *             dc_object,
 *             (x, y),
 *             win32con.SRCCOPY,             # <<<<<<<<<<<<<<
 *         )
 *         image = np.frombuffer(bitmap.GetBitmapBits(True), dtype=np.uint8)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_win32con); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_SRCCOPY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[6] = {__pyx_t_5, __pyx_tuple__3, __pyx_t_12, __pyx_v_dc_object, __pyx_t_13, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 5+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":503
 *             win32con.SRCCOPY,
 *         )
 *         image = np.frombuffer(bitmap.GetBitmapBits(True), dtype=np.uint8)             # <<<<<<<<<<<<<<
 *     except:
 *         # Invalid handle or the window was closed while it was being manipulated
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_frombuffer); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_n_s_GetBitmapBits); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_13, Py_True};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 503, __pyx_L7_error);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_uint8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 503, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_image, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "ok/Capture.pyx":481
 * 
 *     cdef object dc_object, bitmap, window_dc, compatible_dc
 *     try:             # <<<<<<<<<<<<<<
 *         window_dc = win32gui.GetWindowDC(hwnd)
 *         dc_object = win32ui.CreateDCFromHandle(window_dc)
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ok/Capture.pyx":504
 *         )
 *         image = np.frombuffer(bitmap.GetBitmapBits(True), dtype=np.uint8)
 *     except:             # <<<<<<<<<<<<<<
 *         # Invalid handle or the window was closed while it was being manipulated
 *         return None
 */
    /*except:*/ {
      __Pyx_AddTraceback("ok.Capture.bit_blt_capture_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 504, __pyx_L9_except_error)
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);

      /* "ok/Capture.pyx":506
 *     except:
 *         # Invalid handle or the window was closed while it was being manipulated
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     if is_blank(image):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L10_except_return;
    }

    /* "ok/Capture.pyx":481
 * 
 *     cdef object dc_object, bitmap, window_dc, compatible_dc
 *     try:             # <<<<<<<<<<<<<<
 *         window_dc = win32gui.GetWindowDC(hwnd)
 *         dc_object = win32ui.CreateDCFromHandle(window_dc)
 */
    __pyx_L9_except_error:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L10_except_return:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L0;
    __pyx_L12_try_end:;
  }

  /* "ok/Capture.pyx":508
 *         return None
 * 
 *     if is_blank(image):             # <<<<<<<<<<<<<<
 *         image = None
 *     else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_is_blank); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_image};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":509
 * 
 *     if is_blank(image):
 *         image = None             # <<<<<<<<<<<<<<
 *     else:
 *         image.shape = (height, width, BGRA_CHANNEL_COUNT)
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_image, Py_None);

    /* "ok/Capture.pyx":508
 *         return None
 * 
 *     if is_blank(image):             # <<<<<<<<<<<<<<
 *         image = None
 *     else:
 */
    goto __pyx_L16;
  }

  /* "ok/Capture.pyx":511
 *         image = None
 *     else:
 *         image.shape = (height, width, BGRA_CHANNEL_COUNT)             # <<<<<<<<<<<<<<
 * 
 *     # Cleanup DC and handle
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_2ok_7Capture_BGRA_CHANNEL_COUNT); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_12);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_12)) __PYX_ERR(0, 511, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_12 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_image, __pyx_n_s_shape, __pyx_t_11) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_L16:;

  /* "ok/Capture.pyx":514
 * 
 *     # Cleanup DC and handle
 *     try_delete_dc(dc_object)             # <<<<<<<<<<<<<<
 *     try_delete_dc(compatible_dc)
 *     win32gui.ReleaseDC(hwnd, window_dc)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_try_delete_dc); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_dc_object};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "ok/Capture.pyx":515
 *     # Cleanup DC and handle
 *     try_delete_dc(dc_object)
 *     try_delete_dc(compatible_dc)             # <<<<<<<<<<<<<<
 *     win32gui.ReleaseDC(hwnd, window_dc)
 *     win32gui.DeleteObject(bitmap.GetHandle())
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_try_delete_dc); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_compatible_dc};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "ok/Capture.pyx":516
 *     try_delete_dc(dc_object)
 *     try_delete_dc(compatible_dc)
 *     win32gui.ReleaseDC(hwnd, window_dc)             # <<<<<<<<<<<<<<
 *     win32gui.DeleteObject(bitmap.GetHandle())
 *     return image
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_ReleaseDC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_v_hwnd, __pyx_v_window_dc};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "ok/Capture.pyx":517
 *     try_delete_dc(compatible_dc)
 *     win32gui.ReleaseDC(hwnd, window_dc)
 *     win32gui.DeleteObject(bitmap.GetHandle())             # <<<<<<<<<<<<<<
 *     return image
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DeleteObject); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_n_s_GetHandle); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_13 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_13, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "ok/Capture.pyx":518
 *     win32gui.ReleaseDC(hwnd, window_dc)
 *     win32gui.DeleteObject(bitmap.GetHandle())
 *     return image             # <<<<<<<<<<<<<<
 * 
 * cdef class HwndWindow:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_image);
  __pyx_r = __pyx_v_image;
  goto __pyx_L0;

  /* "ok/Capture.pyx":465
 *                 return True
 * 
 * cdef object bit_blt_capture_frame(object hwnd, int border, int title_height, int width, int height,             # <<<<<<<<<<<<<<
 *                                   bint _render_full_content=False):
 *     if hwnd is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.bit_blt_capture_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_image);
  __Pyx_XDECREF(__pyx_v_dc_object);
  __Pyx_XDECREF(__pyx_v_bitmap);
  __Pyx_XDECREF(__pyx_v_window_dc);
  __Pyx_XDECREF(__pyx_v_compatible_dc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":528
 *     cdef public list monitors_bounds
 * 
 *     def __init__(self, exit_event, title, exe_name=None, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None,             # <<<<<<<<<<<<<<
 *                  global_config=None, device_manager=None):
 *         super().__init__()
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exit_event = 0;
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_exe_name = 0;
  PyObject *__pyx_v_frame_width = 0;
  PyObject *__pyx_v_frame_height = 0;
  PyObject *__pyx_v_player_id = 0;
  PyObject *__pyx_v_hwnd_class = 0;
  PyObject *__pyx_v_global_config = 0;
  PyObject *__pyx_v_device_manager = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exit_event,&__pyx_n_s_title,&__pyx_n_s_exe_name,&__pyx_n_s_frame_width,&__pyx_n_s_frame_height,&__pyx_n_s_player_id,&__pyx_n_s_hwnd_class,&__pyx_n_s_global_config,&__pyx_n_s_device_manager,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_neg_1));
    values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "ok/Capture.pyx":529
 * 
 *     def __init__(self, exit_event, title, exe_name=None, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None,
 *                  global_config=None, device_manager=None):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         logger.info(f'HwndWindow init title:{title} player_id:{player_id} exe_name:{exe_name} hwnd_class:{hwnd_class}')
 */
    values[7] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[8] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_title)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 9, 1); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exe_name);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_width);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_height);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player_id);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_class);
          if (value) { values[6] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_global_config);
          if (value) { values[7] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device_manager);
          if (value) { values[8] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 528, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_exit_event = values[0];
    __pyx_v_title = values[1];
    __pyx_v_exe_name = values[2];
    __pyx_v_frame_width = values[3];
    __pyx_v_frame_height = values[4];
    __pyx_v_player_id = values[5];
    __pyx_v_hwnd_class = values[6];
    __pyx_v_global_config = values[7];
    __pyx_v_device_manager = values[8];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 9, __pyx_nargs); __PYX_ERR(0, 528, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow___init__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v_exit_event, __pyx_v_title, __pyx_v_exe_name, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_player_id, __pyx_v_hwnd_class, __pyx_v_global_config, __pyx_v_device_manager);

  /* "ok/Capture.pyx":528
 *     cdef public list monitors_bounds
 * 
 *     def __init__(self, exit_event, title, exe_name=None, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None,             # <<<<<<<<<<<<<<
 *                  global_config=None, device_manager=None):
 *         super().__init__()
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow___init__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_title, PyObject *__pyx_v_exe_name, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_hwnd_class, PyObject *__pyx_v_global_config, PyObject *__pyx_v_device_manager) {
  PyObject *__pyx_v_mute_config_option = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":530
 *     def __init__(self, exit_event, title, exe_name=None, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None,
 *                  global_config=None, device_manager=None):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         logger.info(f'HwndWindow init title:{title} player_id:{player_id} exe_name:{exe_name} hwnd_class:{hwnd_class}')
 *         self.app_exit_event = exit_event
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow))) __PYX_ERR(0, 530, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 530, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":531
 *                  global_config=None, device_manager=None):
 *         super().__init__()
 *         logger.info(f'HwndWindow init title:{title} player_id:{player_id} exe_name:{exe_name} hwnd_class:{hwnd_class}')             # <<<<<<<<<<<<<<
 *         self.app_exit_event = exit_event
 *         self.exe_name = exe_name
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_HwndWindow_init_title);
  __pyx_t_5 += 22;
  __Pyx_GIVEREF(__pyx_kp_u_HwndWindow_init_title);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_HwndWindow_init_title);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_title, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_player_id_2);
  __pyx_t_5 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_player_id_2);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_player_id_2);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_player_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_exe_name_2);
  __pyx_t_5 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_exe_name_2);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_exe_name_2);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_exe_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_hwnd_class_2);
  __pyx_t_5 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_hwnd_class_2);
  PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_hwnd_class_2);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_hwnd_class, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_2, 8, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":532
 *         super().__init__()
 *         logger.info(f'HwndWindow init title:{title} player_id:{player_id} exe_name:{exe_name} hwnd_class:{hwnd_class}')
 *         self.app_exit_event = exit_event             # <<<<<<<<<<<<<<
 *         self.exe_name = exe_name
 *         self.device_manager = device_manager
 */
  __Pyx_INCREF(__pyx_v_exit_event);
  __Pyx_GIVEREF(__pyx_v_exit_event);
  __Pyx_GOTREF(__pyx_v_self->app_exit_event);
  __Pyx_DECREF(__pyx_v_self->app_exit_event);
  __pyx_v_self->app_exit_event = __pyx_v_exit_event;

  /* "ok/Capture.pyx":533
 *         logger.info(f'HwndWindow init title:{title} player_id:{player_id} exe_name:{exe_name} hwnd_class:{hwnd_class}')
 *         self.app_exit_event = exit_event
 *         self.exe_name = exe_name             # <<<<<<<<<<<<<<
 *         self.device_manager = device_manager
 *         self.title = title
 */
  if (!(likely(PyString_CheckExact(__pyx_v_exe_name))||((__pyx_v_exe_name) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_exe_name))) __PYX_ERR(0, 533, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_exe_name;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->exe_name);
  __Pyx_DECREF(__pyx_v_self->exe_name);
  __pyx_v_self->exe_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":534
 *         self.app_exit_event = exit_event
 *         self.exe_name = exe_name
 *         self.device_manager = device_manager             # <<<<<<<<<<<<<<
 *         self.title = title
 *         self.stop_event = threading.Event()
 */
  __Pyx_INCREF(__pyx_v_device_manager);
  __Pyx_GIVEREF(__pyx_v_device_manager);
  __Pyx_GOTREF(__pyx_v_self->device_manager);
  __Pyx_DECREF(__pyx_v_self->device_manager);
  __pyx_v_self->device_manager = __pyx_v_device_manager;

  /* "ok/Capture.pyx":535
 *         self.exe_name = exe_name
 *         self.device_manager = device_manager
 *         self.title = title             # <<<<<<<<<<<<<<
 *         self.stop_event = threading.Event()
 *         self.visible = False
 */
  if (!(likely(PyString_CheckExact(__pyx_v_title))||((__pyx_v_title) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_title))) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_title;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->title);
  __Pyx_DECREF(__pyx_v_self->title);
  __pyx_v_self->title = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":536
 *         self.device_manager = device_manager
 *         self.title = title
 *         self.stop_event = threading.Event()             # <<<<<<<<<<<<<<
 *         self.visible = False
 *         self.player_id = player_id
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Event); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->stop_event);
  __Pyx_DECREF(__pyx_v_self->stop_event);
  __pyx_v_self->stop_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":537
 *         self.title = title
 *         self.stop_event = threading.Event()
 *         self.visible = False             # <<<<<<<<<<<<<<
 *         self.player_id = player_id
 *         self.window_width = 0
 */
  __pyx_v_self->visible = 0;

  /* "ok/Capture.pyx":538
 *         self.stop_event = threading.Event()
 *         self.visible = False
 *         self.player_id = player_id             # <<<<<<<<<<<<<<
 *         self.window_width = 0
 *         self.window_height = 0
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_player_id); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_v_self->player_id = __pyx_t_8;

  /* "ok/Capture.pyx":539
 *         self.visible = False
 *         self.player_id = player_id
 *         self.window_width = 0             # <<<<<<<<<<<<<<
 *         self.window_height = 0
 *         self.visible = True
 */
  __pyx_v_self->window_width = 0;

  /* "ok/Capture.pyx":540
 *         self.player_id = player_id
 *         self.window_width = 0
 *         self.window_height = 0             # <<<<<<<<<<<<<<
 *         self.visible = True
 *         self.x = 0
 */
  __pyx_v_self->window_height = 0;

  /* "ok/Capture.pyx":541
 *         self.window_width = 0
 *         self.window_height = 0
 *         self.visible = True             # <<<<<<<<<<<<<<
 *         self.x = 0
 *         self.y = 0
 */
  __pyx_v_self->visible = 1;

  /* "ok/Capture.pyx":542
 *         self.window_height = 0
 *         self.visible = True
 *         self.x = 0             # <<<<<<<<<<<<<<
 *         self.y = 0
 *         self.width = 0
 */
  __pyx_v_self->x = 0;

  /* "ok/Capture.pyx":543
 *         self.visible = True
 *         self.x = 0
 *         self.y = 0             # <<<<<<<<<<<<<<
 *         self.width = 0
 *         self.height = 0
 */
  __pyx_v_self->y = 0;

  /* "ok/Capture.pyx":544
 *         self.x = 0
 *         self.y = 0
 *         self.width = 0             # <<<<<<<<<<<<<<
 *         self.height = 0
 *         self.hwnd = None
 */
  __pyx_v_self->width = 0;

  /* "ok/Capture.pyx":545
 *         self.y = 0
 *         self.width = 0
 *         self.height = 0             # <<<<<<<<<<<<<<
 *         self.hwnd = None
 *         self.frame_width = 0
 */
  __pyx_v_self->height = 0;

  /* "ok/Capture.pyx":546
 *         self.width = 0
 *         self.height = 0
 *         self.hwnd = None             # <<<<<<<<<<<<<<
 *         self.frame_width = 0
 *         self.frame_height = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->hwnd);
  __Pyx_DECREF(__pyx_v_self->hwnd);
  __pyx_v_self->hwnd = Py_None;

  /* "ok/Capture.pyx":547
 *         self.height = 0
 *         self.hwnd = None
 *         self.frame_width = 0             # <<<<<<<<<<<<<<
 *         self.frame_height = 0
 *         self.exists = False
 */
  __pyx_v_self->frame_width = 0;

  /* "ok/Capture.pyx":548
 *         self.hwnd = None
 *         self.frame_width = 0
 *         self.frame_height = 0             # <<<<<<<<<<<<<<
 *         self.exists = False
 *         self.title = None
 */
  __pyx_v_self->frame_height = 0;

  /* "ok/Capture.pyx":549
 *         self.frame_width = 0
 *         self.frame_height = 0
 *         self.exists = False             # <<<<<<<<<<<<<<
 *         self.title = None
 *         self.exe_full_path = None
 */
  __pyx_v_self->exists = 0;

  /* "ok/Capture.pyx":550
 *         self.frame_height = 0
 *         self.exists = False
 *         self.title = None             # <<<<<<<<<<<<<<
 *         self.exe_full_path = None
 *         self.real_width = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->title);
  __Pyx_DECREF(__pyx_v_self->title);
  __pyx_v_self->title = ((PyObject*)Py_None);

  /* "ok/Capture.pyx":551
 *         self.exists = False
 *         self.title = None
 *         self.exe_full_path = None             # <<<<<<<<<<<<<<
 *         self.real_width = 0
 *         self.real_height = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->exe_full_path);
  __Pyx_DECREF(__pyx_v_self->exe_full_path);
  __pyx_v_self->exe_full_path = ((PyObject*)Py_None);

  /* "ok/Capture.pyx":552
 *         self.title = None
 *         self.exe_full_path = None
 *         self.real_width = 0             # <<<<<<<<<<<<<<
 *         self.real_height = 0
 *         self.real_x_offset = 0
 */
  __pyx_v_self->real_width = 0;

  /* "ok/Capture.pyx":553
 *         self.exe_full_path = None
 *         self.real_width = 0
 *         self.real_height = 0             # <<<<<<<<<<<<<<
 *         self.real_x_offset = 0
 *         self.real_y_offset = 0
 */
  __pyx_v_self->real_height = 0;

  /* "ok/Capture.pyx":554
 *         self.real_width = 0
 *         self.real_height = 0
 *         self.real_x_offset = 0             # <<<<<<<<<<<<<<
 *         self.real_y_offset = 0
 *         self.scaling = 1.0
 */
  __pyx_v_self->real_x_offset = 0;

  /* "ok/Capture.pyx":555
 *         self.real_height = 0
 *         self.real_x_offset = 0
 *         self.real_y_offset = 0             # <<<<<<<<<<<<<<
 *         self.scaling = 1.0
 *         self.frame_aspect_ratio = 0
 */
  __pyx_v_self->real_y_offset = 0;

  /* "ok/Capture.pyx":556
 *         self.real_x_offset = 0
 *         self.real_y_offset = 0
 *         self.scaling = 1.0             # <<<<<<<<<<<<<<
 *         self.frame_aspect_ratio = 0
 *         self.hwnd_class = hwnd_class
 */
  __pyx_v_self->scaling = 1.0;

  /* "ok/Capture.pyx":557
 *         self.real_y_offset = 0
 *         self.scaling = 1.0
 *         self.frame_aspect_ratio = 0             # <<<<<<<<<<<<<<
 *         self.hwnd_class = hwnd_class
 *         self.pos_valid = False
 */
  __pyx_v_self->frame_aspect_ratio = 0.0;

  /* "ok/Capture.pyx":558
 *         self.scaling = 1.0
 *         self.frame_aspect_ratio = 0
 *         self.hwnd_class = hwnd_class             # <<<<<<<<<<<<<<
 *         self.pos_valid = False
 *         self._hwnd_title = ""
 */
  if (!(likely(PyString_CheckExact(__pyx_v_hwnd_class))||((__pyx_v_hwnd_class) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_hwnd_class))) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_hwnd_class;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->hwnd_class);
  __Pyx_DECREF(__pyx_v_self->hwnd_class);
  __pyx_v_self->hwnd_class = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":559
 *         self.frame_aspect_ratio = 0
 *         self.hwnd_class = hwnd_class
 *         self.pos_valid = False             # <<<<<<<<<<<<<<
 *         self._hwnd_title = ""
 *         self.monitors_bounds = get_monitors_bounds()
 */
  __pyx_v_self->pos_valid = 0;

  /* "ok/Capture.pyx":560
 *         self.hwnd_class = hwnd_class
 *         self.pos_valid = False
 *         self._hwnd_title = ""             # <<<<<<<<<<<<<<
 *         self.monitors_bounds = get_monitors_bounds()
 *         mute_config_option = ConfigOption('Game Sound', {
 */
  __Pyx_INCREF(__pyx_kp_s__12);
  __Pyx_GIVEREF(__pyx_kp_s__12);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_title);
  __Pyx_DECREF(__pyx_v_self->_hwnd_title);
  __pyx_v_self->_hwnd_title = __pyx_kp_s__12;

  /* "ok/Capture.pyx":561
 *         self.pos_valid = False
 *         self._hwnd_title = ""
 *         self.monitors_bounds = get_monitors_bounds()             # <<<<<<<<<<<<<<
 *         mute_config_option = ConfigOption('Game Sound', {
 *             'Mute Game while in Background': False
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_get_monitors_bounds); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->monitors_bounds);
  __Pyx_DECREF(__pyx_v_self->monitors_bounds);
  __pyx_v_self->monitors_bounds = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":562
 *         self._hwnd_title = ""
 *         self.monitors_bounds = get_monitors_bounds()
 *         mute_config_option = ConfigOption('Game Sound', {             # <<<<<<<<<<<<<<
 *             'Mute Game while in Background': False
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ConfigOption); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "ok/Capture.pyx":563
 *         self.monitors_bounds = get_monitors_bounds()
 *         mute_config_option = ConfigOption('Game Sound', {
 *             'Mute Game while in Background': False             # <<<<<<<<<<<<<<
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)
 *         self.mute_option = global_config.get_config(mute_config_option)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_kp_s_Mute_Game_while_in_Background, Py_False) < 0) __PYX_ERR(0, 563, __pyx_L1_error)

  /* "ok/Capture.pyx":562
 *         self._hwnd_title = ""
 *         self.monitors_bounds = get_monitors_bounds()
 *         mute_config_option = ConfigOption('Game Sound', {             # <<<<<<<<<<<<<<
 *             'Mute Game while in Background': False
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_Game_Sound);
  __Pyx_GIVEREF(__pyx_kp_s_Game_Sound);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_Game_Sound)) __PYX_ERR(0, 562, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7)) __PYX_ERR(0, 562, __pyx_L1_error);
  __pyx_t_7 = 0;

  /* "ok/Capture.pyx":564
 *         mute_config_option = ConfigOption('Game Sound', {
 *             'Mute Game while in Background': False
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)             # <<<<<<<<<<<<<<
 *         self.mute_option = global_config.get_config(mute_config_option)
 *         self.update_window(title, exe_name, frame_width, frame_height, player_id, hwnd_class)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_validate_mute_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_validator, __pyx_t_2) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FluentIcon); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MUTE); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_icon, __pyx_t_9) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ok/Capture.pyx":562
 *         self._hwnd_title = ""
 *         self.monitors_bounds = get_monitors_bounds()
 *         mute_config_option = ConfigOption('Game Sound', {             # <<<<<<<<<<<<<<
 *             'Mute Game while in Background': False
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_mute_config_option = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "ok/Capture.pyx":565
 *             'Mute Game while in Background': False
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)
 *         self.mute_option = global_config.get_config(mute_config_option)             # <<<<<<<<<<<<<<
 *         self.update_window(title, exe_name, frame_width, frame_height, player_id, hwnd_class)
 *         self.thread = threading.Thread(target=self.update_window_size, name="update_window_size")
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_global_config, __pyx_n_s_get_config); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_mute_config_option};
    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->mute_option);
  __Pyx_DECREF(__pyx_v_self->mute_option);
  __pyx_v_self->mute_option = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "ok/Capture.pyx":566
 *         }, validator=self.validate_mute_config, icon=FluentIcon.MUTE)
 *         self.mute_option = global_config.get_config(mute_config_option)
 *         self.update_window(title, exe_name, frame_width, frame_height, player_id, hwnd_class)             # <<<<<<<<<<<<<<
 *         self.thread = threading.Thread(target=self.update_window_size, name="update_window_size")
 *         self.thread.start()
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_window); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[7] = {__pyx_t_3, __pyx_v_title, __pyx_v_exe_name, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_player_id, __pyx_v_hwnd_class};
    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 6+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ok/Capture.pyx":567
 *         self.mute_option = global_config.get_config(mute_config_option)
 *         self.update_window(title, exe_name, frame_width, frame_height, player_id, hwnd_class)
 *         self.thread = threading.Thread(target=self.update_window_size, name="update_window_size")             # <<<<<<<<<<<<<<
 *         self.thread.start()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_threading); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_Thread); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_window_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_target, __pyx_t_3) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_name_2, __pyx_n_s_update_window_size) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->thread);
  __Pyx_DECREF(__pyx_v_self->thread);
  __pyx_v_self->thread = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":568
 *         self.update_window(title, exe_name, frame_width, frame_height, player_id, hwnd_class)
 *         self.thread = threading.Thread(target=self.update_window_size, name="update_window_size")
 *         self.thread.start()             # <<<<<<<<<<<<<<
 * 
 *     def validate_mute_config(self, key, value):
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->thread, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":528
 *     cdef public list monitors_bounds
 * 
 *     def __init__(self, exit_event, title, exe_name=None, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None,             # <<<<<<<<<<<<<<
 *                  global_config=None, device_manager=None):
 *         super().__init__()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mute_config_option);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":570
 *         self.thread.start()
 * 
 *     def validate_mute_config(self, key, value):             # <<<<<<<<<<<<<<
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:
 *             logger.info('unmute game because option is turned off')
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_3validate_mute_config(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_3validate_mute_config = {"validate_mute_config", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_3validate_mute_config, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_3validate_mute_config(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_mute_config (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("validate_mute_config", 1, 2, 2, 1); __PYX_ERR(0, 570, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "validate_mute_config") < 0)) __PYX_ERR(0, 570, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("validate_mute_config", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 570, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.validate_mute_config", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_2validate_mute_config(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_2validate_mute_config(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("validate_mute_config", 1);

  /* "ok/Capture.pyx":571
 * 
 *     def validate_mute_config(self, key, value):
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:             # <<<<<<<<<<<<<<
 *             logger.info('unmute game because option is turned off')
 *             set_mute_state(self.hwnd, 0)
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_kp_s_Mute_Game_while_in_Background, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_self->hwnd); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":572
 *     def validate_mute_config(self, key, value):
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:
 *             logger.info('unmute game because option is turned off')             # <<<<<<<<<<<<<<
 *             set_mute_state(self.hwnd, 0)
 *         return True, None
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_s_unmute_game_because_option_is_tu};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":573
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:
 *             logger.info('unmute game because option is turned off')
 *             set_mute_state(self.hwnd, 0)             # <<<<<<<<<<<<<<
 *         return True, None
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_set_mute_state); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_self->hwnd, __pyx_int_0};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":571
 * 
 *     def validate_mute_config(self, key, value):
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:             # <<<<<<<<<<<<<<
 *             logger.info('unmute game because option is turned off')
 *             set_mute_state(self.hwnd, 0)
 */
  }

  /* "ok/Capture.pyx":574
 *             logger.info('unmute game because option is turned off')
 *             set_mute_state(self.hwnd, 0)
 *         return True, None             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__13);
  __pyx_r = __pyx_tuple__13;
  goto __pyx_L0;

  /* "ok/Capture.pyx":570
 *         self.thread.start()
 * 
 *     def validate_mute_config(self, key, value):             # <<<<<<<<<<<<<<
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:
 *             logger.info('unmute game because option is turned off')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.validate_mute_config", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":576
 *         return True, None
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         self.stop_event.set()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_5stop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_5stop = {"stop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_5stop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_5stop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("stop", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "stop", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_4stop(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_4stop(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop", 1);

  /* "ok/Capture.pyx":577
 * 
 *     def stop(self):
 *         self.stop_event.set()             # <<<<<<<<<<<<<<
 * 
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->stop_event, __pyx_n_s_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":576
 *         return True, None
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         self.stop_event.set()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":579
 *         self.stop_event.set()
 * 
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         self.player_id = player_id
 *         self.title = title
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_7update_window(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_7update_window = {"update_window", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_7update_window, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_7update_window(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_exe_name = 0;
  PyObject *__pyx_v_frame_width = 0;
  PyObject *__pyx_v_frame_height = 0;
  PyObject *__pyx_v_player_id = 0;
  PyObject *__pyx_v_hwnd_class = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_window (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_title,&__pyx_n_s_exe_name,&__pyx_n_s_frame_width,&__pyx_n_s_frame_height,&__pyx_n_s_player_id,&__pyx_n_s_hwnd_class,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_neg_1));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_title)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exe_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("update_window", 0, 4, 6, 1); __PYX_ERR(0, 579, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("update_window", 0, 4, 6, 2); __PYX_ERR(0, 579, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("update_window", 0, 4, 6, 3); __PYX_ERR(0, 579, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player_id);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_class);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_window") < 0)) __PYX_ERR(0, 579, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_title = values[0];
    __pyx_v_exe_name = values[1];
    __pyx_v_frame_width = values[2];
    __pyx_v_frame_height = values[3];
    __pyx_v_player_id = values[4];
    __pyx_v_hwnd_class = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_window", 0, 4, 6, __pyx_nargs); __PYX_ERR(0, 579, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.update_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6update_window(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v_title, __pyx_v_exe_name, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_player_id, __pyx_v_hwnd_class);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6update_window(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_title, PyObject *__pyx_v_exe_name, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_hwnd_class) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_window", 1);

  /* "ok/Capture.pyx":580
 * 
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):
 *         self.player_id = player_id             # <<<<<<<<<<<<<<
 *         self.title = title
 *         self.exe_name = exe_name
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_player_id); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_v_self->player_id = __pyx_t_1;

  /* "ok/Capture.pyx":581
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):
 *         self.player_id = player_id
 *         self.title = title             # <<<<<<<<<<<<<<
 *         self.exe_name = exe_name
 *         self.update_frame_size(frame_width, frame_height)
 */
  if (!(likely(PyString_CheckExact(__pyx_v_title))||((__pyx_v_title) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_title))) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_title;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->title);
  __Pyx_DECREF(__pyx_v_self->title);
  __pyx_v_self->title = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":582
 *         self.player_id = player_id
 *         self.title = title
 *         self.exe_name = exe_name             # <<<<<<<<<<<<<<
 *         self.update_frame_size(frame_width, frame_height)
 *         self.hwnd_class = hwnd_class
 */
  if (!(likely(PyString_CheckExact(__pyx_v_exe_name))||((__pyx_v_exe_name) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_exe_name))) __PYX_ERR(0, 582, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_exe_name;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->exe_name);
  __Pyx_DECREF(__pyx_v_self->exe_name);
  __pyx_v_self->exe_name = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":583
 *         self.title = title
 *         self.exe_name = exe_name
 *         self.update_frame_size(frame_width, frame_height)             # <<<<<<<<<<<<<<
 *         self.hwnd_class = hwnd_class
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_frame_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_frame_width, __pyx_v_frame_height};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":584
 *         self.exe_name = exe_name
 *         self.update_frame_size(frame_width, frame_height)
 *         self.hwnd_class = hwnd_class             # <<<<<<<<<<<<<<
 * 
 *     def update_frame_size(self, width, height):
 */
  if (!(likely(PyString_CheckExact(__pyx_v_hwnd_class))||((__pyx_v_hwnd_class) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_hwnd_class))) __PYX_ERR(0, 584, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_hwnd_class;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->hwnd_class);
  __Pyx_DECREF(__pyx_v_self->hwnd_class);
  __pyx_v_self->hwnd_class = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":579
 *         self.stop_event.set()
 * 
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         self.player_id = player_id
 *         self.title = title
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.update_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":586
 *         self.hwnd_class = hwnd_class
 * 
 *     def update_frame_size(self, width, height):             # <<<<<<<<<<<<<<
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_9update_frame_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_9update_frame_size = {"update_frame_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_9update_frame_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_9update_frame_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_frame_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("update_frame_size", 1, 2, 2, 1); __PYX_ERR(0, 586, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_frame_size") < 0)) __PYX_ERR(0, 586, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_frame_size", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 586, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.update_frame_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_8update_frame_size(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v_width, __pyx_v_height);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_8update_frame_size(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_frame_size", 1);

  /* "ok/Capture.pyx":587
 * 
 *     def update_frame_size(self, width, height):
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")             # <<<<<<<<<<<<<<
 *         if width != self.frame_width or height != self.frame_height:
 *             self.frame_width = width
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_update_frame_size_2);
  __pyx_t_4 += 18;
  __Pyx_GIVEREF(__pyx_kp_u_update_frame_size_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_update_frame_size_2);
  __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_self->frame_width, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_n_u_x);
  __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_self->frame_height, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_to);
  __pyx_t_4 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_to);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_to);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_n_u_x);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 8, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":588
 *     def update_frame_size(self, width, height):
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:             # <<<<<<<<<<<<<<
 *             self.frame_width = width
 *             self.frame_height = height
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->frame_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_width, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_9) {
  } else {
    __pyx_t_8 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->frame_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_height, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __pyx_t_9;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_8) {

    /* "ok/Capture.pyx":589
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:
 *             self.frame_width = width             # <<<<<<<<<<<<<<
 *             self.frame_height = height
 *             if width > 0 and height > 0:
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L1_error)
    __pyx_v_self->frame_width = __pyx_t_10;

    /* "ok/Capture.pyx":590
 *         if width != self.frame_width or height != self.frame_height:
 *             self.frame_width = width
 *             self.frame_height = height             # <<<<<<<<<<<<<<
 *             if width > 0 and height > 0:
 *                 self.frame_aspect_ratio = width / height
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 590, __pyx_L1_error)
    __pyx_v_self->frame_height = __pyx_t_10;

    /* "ok/Capture.pyx":591
 *             self.frame_width = width
 *             self.frame_height = height
 *             if width > 0 and height > 0:             # <<<<<<<<<<<<<<
 *                 self.frame_aspect_ratio = width / height
 *                 logger.debug(f"HwndWindow: frame ratio: width: {width}, height: {height}")
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_width, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_height, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_8) {

      /* "ok/Capture.pyx":592
 *             self.frame_height = height
 *             if width > 0 and height > 0:
 *                 self.frame_aspect_ratio = width / height             # <<<<<<<<<<<<<<
 *                 logger.debug(f"HwndWindow: frame ratio: width: {width}, height: {height}")
 *         self.hwnd = None
 */
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_width, __pyx_v_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->frame_aspect_ratio = __pyx_t_11;

      /* "ok/Capture.pyx":593
 *             if width > 0 and height > 0:
 *                 self.frame_aspect_ratio = width / height
 *                 logger.debug(f"HwndWindow: frame ratio: width: {width}, height: {height}")             # <<<<<<<<<<<<<<
 *         self.hwnd = None
 *         self.do_update_window_size()
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_debug); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_HwndWindow_frame_ratio_width);
      __pyx_t_4 += 32;
      __Pyx_GIVEREF(__pyx_kp_u_HwndWindow_frame_ratio_width);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_HwndWindow_frame_ratio_width);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_height_2);
      __pyx_t_4 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_height_2);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_height_2);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":591
 *             self.frame_width = width
 *             self.frame_height = height
 *             if width > 0 and height > 0:             # <<<<<<<<<<<<<<
 *                 self.frame_aspect_ratio = width / height
 *                 logger.debug(f"HwndWindow: frame ratio: width: {width}, height: {height}")
 */
    }

    /* "ok/Capture.pyx":588
 *     def update_frame_size(self, width, height):
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:             # <<<<<<<<<<<<<<
 *             self.frame_width = width
 *             self.frame_height = height
 */
  }

  /* "ok/Capture.pyx":594
 *                 self.frame_aspect_ratio = width / height
 *                 logger.debug(f"HwndWindow: frame ratio: width: {width}, height: {height}")
 *         self.hwnd = None             # <<<<<<<<<<<<<<
 *         self.do_update_window_size()
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->hwnd);
  __Pyx_DECREF(__pyx_v_self->hwnd);
  __pyx_v_self->hwnd = Py_None;

  /* "ok/Capture.pyx":595
 *                 logger.debug(f"HwndWindow: frame ratio: width: {width}, height: {height}")
 *         self.hwnd = None
 *         self.do_update_window_size()             # <<<<<<<<<<<<<<
 * 
 *     def update_window_size(self):
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_update_window_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":586
 *         self.hwnd_class = hwnd_class
 * 
 *     def update_frame_size(self, width, height):             # <<<<<<<<<<<<<<
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.update_frame_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":597
 *         self.do_update_window_size()
 * 
 *     def update_window_size(self):             # <<<<<<<<<<<<<<
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():
 *             self.do_update_window_size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11update_window_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_11update_window_size = {"update_window_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_11update_window_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11update_window_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_window_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("update_window_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "update_window_size", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10update_window_size(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10update_window_size(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_window_size", 1);

  /* "ok/Capture.pyx":598
 * 
 *     def update_window_size(self):
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():             # <<<<<<<<<<<<<<
 *             self.do_update_window_size()
 *             time.sleep(0.2)
 */
  while (1) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->app_exit_event, __pyx_n_s_is_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = (!__pyx_t_6);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->stop_event, __pyx_n_s_is_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = (!__pyx_t_7);
    __pyx_t_1 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "ok/Capture.pyx":599
 *     def update_window_size(self):
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():
 *             self.do_update_window_size()             # <<<<<<<<<<<<<<
 *             time.sleep(0.2)
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_update_window_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ok/Capture.pyx":600
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():
 *             self.do_update_window_size()
 *             time.sleep(0.2)             # <<<<<<<<<<<<<<
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             logger.info(f'exit reset mute state to 0')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sleep); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_float_0_2};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ok/Capture.pyx":601
 *             self.do_update_window_size()
 *             time.sleep(0.2)
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):             # <<<<<<<<<<<<<<
 *             logger.info(f'exit reset mute state to 0')
 *             set_mute_state(self.hwnd, 0)
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_self->hwnd); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 601, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->mute_option, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_s_Mute_Game_while_in_Background};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_6;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":602
 *             time.sleep(0.2)
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             logger.info(f'exit reset mute state to 0')             # <<<<<<<<<<<<<<
 *             set_mute_state(self.hwnd, 0)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_exit_reset_mute_state_to_0};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ok/Capture.pyx":603
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             logger.info(f'exit reset mute state to 0')
 *             set_mute_state(self.hwnd, 0)             # <<<<<<<<<<<<<<
 * 
 *     def get_abs_cords(self, x, y):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_set_mute_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_self->hwnd, __pyx_int_0};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ok/Capture.pyx":601
 *             self.do_update_window_size()
 *             time.sleep(0.2)
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):             # <<<<<<<<<<<<<<
 *             logger.info(f'exit reset mute state to 0')
 *             set_mute_state(self.hwnd, 0)
 */
  }

  /* "ok/Capture.pyx":597
 *         self.do_update_window_size()
 * 
 *     def update_window_size(self):             # <<<<<<<<<<<<<<
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():
 *             self.do_update_window_size()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.update_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":605
 *             set_mute_state(self.hwnd, 0)
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.x + x, self.y + y
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13get_abs_cords(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_13get_abs_cords = {"get_abs_cords", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_13get_abs_cords, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13get_abs_cords(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_abs_cords (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_abs_cords", 1, 2, 2, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_abs_cords") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_abs_cords", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.get_abs_cords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_12get_abs_cords(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_12get_abs_cords(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_abs_cords", 1);

  /* "ok/Capture.pyx":606
 * 
 *     def get_abs_cords(self, x, y):
 *         return self.x + x, self.y + y             # <<<<<<<<<<<<<<
 * 
 *     def do_update_window_size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":605
 *             set_mute_state(self.hwnd, 0)
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.x + x, self.y + y
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.get_abs_cords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":608
 *         return self.x + x, self.y + y
 * 
 *     def do_update_window_size(self):             # <<<<<<<<<<<<<<
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_15do_update_window_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_15do_update_window_size = {"do_update_window_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_15do_update_window_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_15do_update_window_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_update_window_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_update_window_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_update_window_size", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14do_update_window_size(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_14do_update_window_size(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_v_visible = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_window_width = NULL;
  PyObject *__pyx_v_window_height = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_scaling = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_window_ratio = NULL;
  PyObject *__pyx_v_cropped_window_height = NULL;
  PyObject *__pyx_v_pos_valid = NULL;
  int __pyx_v_changed;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_UCS4 __pyx_t_20;
  unsigned int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  double __pyx_t_26;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  char const *__pyx_t_29;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_update_window_size", 1);

  /* "ok/Capture.pyx":609
 * 
 *     def do_update_window_size(self):
 *         try:             # <<<<<<<<<<<<<<
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ok/Capture.pyx":610
 *     def do_update_window_size(self):
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling             # <<<<<<<<<<<<<<
 *             if self.hwnd is None:
 *                 name, self.hwnd, self.exe_full_path, self.real_x_offset, self.real_y_offset, self.real_width, self.real_height = find_hwnd(
 */
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->visible); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->window_width); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->window_height); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->scaling); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 610, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_v_visible = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_v_x = __pyx_t_5;
      __pyx_t_5 = 0;
      __pyx_v_y = __pyx_t_6;
      __pyx_t_6 = 0;
      __pyx_v_window_width = __pyx_t_7;
      __pyx_t_7 = 0;
      __pyx_v_window_height = __pyx_t_8;
      __pyx_t_8 = 0;
      __pyx_v_width = __pyx_t_9;
      __pyx_t_9 = 0;
      __pyx_v_height = __pyx_t_10;
      __pyx_t_10 = 0;
      __pyx_v_scaling = __pyx_t_11;
      __pyx_t_11 = 0;

      /* "ok/Capture.pyx":611
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:             # <<<<<<<<<<<<<<
 *                 name, self.hwnd, self.exe_full_path, self.real_x_offset, self.real_y_offset, self.real_width, self.real_height = find_hwnd(
 *                     self.title,
 */
      __pyx_t_12 = (__pyx_v_self->hwnd == Py_None);
      if (__pyx_t_12) {

        /* "ok/Capture.pyx":612
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:
 *                 name, self.hwnd, self.exe_full_path, self.real_x_offset, self.real_y_offset, self.real_width, self.real_height = find_hwnd(             # <<<<<<<<<<<<<<
 *                     self.title,
 *                     self.exe_name,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_find_hwnd); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);

        /* "ok/Capture.pyx":615
 *                     self.title,
 *                     self.exe_name,
 *                     self.frame_width, self.frame_height, player_id=self.player_id, class_name=self.hwnd_class)             # <<<<<<<<<<<<<<
 *                 if self.hwnd is not None:
 *                     logger.info(
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->frame_width); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 615, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->frame_height); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 615, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "ok/Capture.pyx":612
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:
 *                 name, self.hwnd, self.exe_full_path, self.real_x_offset, self.real_y_offset, self.real_width, self.real_height = find_hwnd(             # <<<<<<<<<<<<<<
 *                     self.title,
 *                     self.exe_name,
 */
        __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_self->title);
        __Pyx_GIVEREF(__pyx_v_self->title);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_self->title)) __PYX_ERR(0, 612, __pyx_L3_error);
        __Pyx_INCREF(__pyx_v_self->exe_name);
        __Pyx_GIVEREF(__pyx_v_self->exe_name);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_self->exe_name)) __PYX_ERR(0, 612, __pyx_L3_error);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_10)) __PYX_ERR(0, 612, __pyx_L3_error);
        __Pyx_GIVEREF(__pyx_t_9);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_9)) __PYX_ERR(0, 612, __pyx_L3_error);
        __pyx_t_10 = 0;
        __pyx_t_9 = 0;

        /* "ok/Capture.pyx":615
 *                     self.title,
 *                     self.exe_name,
 *                     self.frame_width, self.frame_height, player_id=self.player_id, class_name=self.hwnd_class)             # <<<<<<<<<<<<<<
 *                 if self.hwnd is not None:
 *                     logger.info(
 */
        __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 615, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->player_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 615, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_player_id, __pyx_t_10) < 0) __PYX_ERR(0, 615, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_class_name, __pyx_v_self->hwnd_class) < 0) __PYX_ERR(0, 615, __pyx_L3_error)

        /* "ok/Capture.pyx":612
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:
 *                 name, self.hwnd, self.exe_full_path, self.real_x_offset, self.real_y_offset, self.real_width, self.real_height = find_hwnd(             # <<<<<<<<<<<<<<
 *                     self.title,
 *                     self.exe_name,
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
          PyObject* sequence = __pyx_t_10;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 7)) {
            if (size > 7) __Pyx_RaiseTooManyValuesError(7);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 612, __pyx_L3_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 5); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 6); 
          } else {
            __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 5); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 6); 
          }
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[7] = {&__pyx_t_9,&__pyx_t_8,&__pyx_t_11,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_4};
            for (i=0; i < 7; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 612, __pyx_L3_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[7] = {&__pyx_t_9,&__pyx_t_8,&__pyx_t_11,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_4};
          __pyx_t_13 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 612, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13);
          for (index=0; index < 7; index++) {
            PyObject* item = __pyx_t_14(__pyx_t_13); if (unlikely(!item)) goto __pyx_L10_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 7) < 0) __PYX_ERR(0, 612, __pyx_L3_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          goto __pyx_L11_unpacking_done;
          __pyx_L10_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 612, __pyx_L3_error)
          __pyx_L11_unpacking_done:;
        }
        if (!(likely(PyString_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_11))) __PYX_ERR(0, 612, __pyx_L3_error)
        __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_name = __pyx_t_9;
        __pyx_t_9 = 0;
        __Pyx_GIVEREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_v_self->hwnd);
        __Pyx_DECREF(__pyx_v_self->hwnd);
        __pyx_v_self->hwnd = __pyx_t_8;
        __pyx_t_8 = 0;
        __Pyx_GIVEREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_v_self->exe_full_path);
        __Pyx_DECREF(__pyx_v_self->exe_full_path);
        __pyx_v_self->exe_full_path = ((PyObject*)__pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_v_self->real_x_offset = __pyx_t_15;
        __pyx_v_self->real_y_offset = __pyx_t_16;
        __pyx_v_self->real_width = __pyx_t_17;
        __pyx_v_self->real_height = __pyx_t_18;

        /* "ok/Capture.pyx":616
 *                     self.exe_name,
 *                     self.frame_width, self.frame_height, player_id=self.player_id, class_name=self.hwnd_class)
 *                 if self.hwnd is not None:             # <<<<<<<<<<<<<<
 *                     logger.info(
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')
 */
        __pyx_t_12 = (__pyx_v_self->hwnd != Py_None);
        if (__pyx_t_12) {

          /* "ok/Capture.pyx":617
 *                     self.frame_width, self.frame_height, player_id=self.player_id, class_name=self.hwnd_class)
 *                 if self.hwnd is not None:
 *                     logger.info(             # <<<<<<<<<<<<<<
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')
 *                 self.exists = self.hwnd is not None
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "ok/Capture.pyx":618
 *                 if self.hwnd is not None:
 *                     logger.info(
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')             # <<<<<<<<<<<<<<
 *                 self.exists = self.hwnd is not None
 *             if self.hwnd is not None:
 */
          __pyx_t_4 = PyTuple_New(14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_found_hwnd);
          __pyx_t_19 += 11;
          __Pyx_GIVEREF(__pyx_kp_u_found_hwnd);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_found_hwnd);
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_self->hwnd, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u__11);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__11);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__11);
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_self->exe_full_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u__11);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__11);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__11);
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GetClassName); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_self->hwnd};
            __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_INCREF(__pyx_kp_u_real);
          __pyx_t_19 += 6;
          __Pyx_GIVEREF(__pyx_kp_u_real);
          PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_real);
          __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_self->real_x_offset, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_INCREF(__pyx_kp_u__14);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__14);
          PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_kp_u__14);
          __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_self->real_y_offset, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_4, 9, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_INCREF(__pyx_kp_u__14);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__14);
          PyTuple_SET_ITEM(__pyx_t_4, 10, __pyx_kp_u__14);
          __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_self->real_width, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_4, 11, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_INCREF(__pyx_kp_u__14);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__14);
          PyTuple_SET_ITEM(__pyx_t_4, 12, __pyx_kp_u__14);
          __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_self->real_height, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_4, 13, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_4, 14, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_11};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 617, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ok/Capture.pyx":616
 *                     self.exe_name,
 *                     self.frame_width, self.frame_height, player_id=self.player_id, class_name=self.hwnd_class)
 *                 if self.hwnd is not None:             # <<<<<<<<<<<<<<
 *                     logger.info(
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')
 */
        }

        /* "ok/Capture.pyx":619
 *                     logger.info(
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')
 *                 self.exists = self.hwnd is not None             # <<<<<<<<<<<<<<
 *             if self.hwnd is not None:
 *                 self.exists = win32gui.IsWindow(self.hwnd)
 */
        __pyx_t_12 = (__pyx_v_self->hwnd != Py_None);
        __pyx_v_self->exists = __pyx_t_12;

        /* "ok/Capture.pyx":611
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:             # <<<<<<<<<<<<<<
 *                 name, self.hwnd, self.exe_full_path, self.real_x_offset, self.real_y_offset, self.real_width, self.real_height = find_hwnd(
 *                     self.title,
 */
      }

      /* "ok/Capture.pyx":620
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')
 *                 self.exists = self.hwnd is not None
 *             if self.hwnd is not None:             # <<<<<<<<<<<<<<
 *                 self.exists = win32gui.IsWindow(self.hwnd)
 *                 if self.exists:
 */
      __pyx_t_12 = (__pyx_v_self->hwnd != Py_None);
      if (__pyx_t_12) {

        /* "ok/Capture.pyx":621
 *                 self.exists = self.hwnd is not None
 *             if self.hwnd is not None:
 *                 self.exists = win32gui.IsWindow(self.hwnd)             # <<<<<<<<<<<<<<
 *                 if self.exists:
 *                     visible = is_foreground_window(self.hwnd)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 621, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_IsWindow); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 621, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_21 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_21 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_self->hwnd};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 621, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_self->exists = __pyx_t_12;

        /* "ok/Capture.pyx":622
 *             if self.hwnd is not None:
 *                 self.exists = win32gui.IsWindow(self.hwnd)
 *                 if self.exists:             # <<<<<<<<<<<<<<
 *                     visible = is_foreground_window(self.hwnd)
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(
 */
        if (__pyx_v_self->exists) {

          /* "ok/Capture.pyx":623
 *                 self.exists = win32gui.IsWindow(self.hwnd)
 *                 if self.exists:
 *                     visible = is_foreground_window(self.hwnd)             # <<<<<<<<<<<<<<
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(
 *                         self.hwnd)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_is_foreground_window); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 623, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_5 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_self->hwnd};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 623, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF_SET(__pyx_v_visible, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "ok/Capture.pyx":624
 *                 if self.exists:
 *                     visible = is_foreground_window(self.hwnd)
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(             # <<<<<<<<<<<<<<
 *                         self.hwnd)
 *                     if self.frame_aspect_ratio != 0 and height != 0:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_get_window_bounds); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 624, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);

          /* "ok/Capture.pyx":625
 *                     visible = is_foreground_window(self.hwnd)
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(
 *                         self.hwnd)             # <<<<<<<<<<<<<<
 *                     if self.frame_aspect_ratio != 0 and height != 0:
 *                         window_ratio = width / height
 */
          __pyx_t_5 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_self->hwnd};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 624, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
            PyObject* sequence = __pyx_t_10;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 7)) {
              if (size > 7) __Pyx_RaiseTooManyValuesError(7);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 624, __pyx_L3_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
              __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
              __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 6); 
            } else {
              __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
              __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
              __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
              __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
              __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
            }
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            #else
            {
              Py_ssize_t i;
              PyObject** temps[7] = {&__pyx_t_11,&__pyx_t_5,&__pyx_t_4,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
              for (i=0; i < 7; i++) {
                PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 624, __pyx_L3_error)
                __Pyx_GOTREF(item);
                *(temps[i]) = item;
              }
            }
            #endif
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else {
            Py_ssize_t index = -1;
            PyObject** temps[7] = {&__pyx_t_11,&__pyx_t_5,&__pyx_t_4,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
            __pyx_t_13 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 624, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13);
            for (index=0; index < 7; index++) {
              PyObject* item = __pyx_t_14(__pyx_t_13); if (unlikely(!item)) goto __pyx_L15_unpacking_failed;
              __Pyx_GOTREF(item);
              *(temps[index]) = item;
            }
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 7) < 0) __PYX_ERR(0, 624, __pyx_L3_error)
            __pyx_t_14 = NULL;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_14 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 624, __pyx_L3_error)
            __pyx_L16_unpacking_done:;
          }

          /* "ok/Capture.pyx":624
 *                 if self.exists:
 *                     visible = is_foreground_window(self.hwnd)
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(             # <<<<<<<<<<<<<<
 *                         self.hwnd)
 *                     if self.frame_aspect_ratio != 0 and height != 0:
 */
          __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_DECREF_SET(__pyx_v_y, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_DECREF_SET(__pyx_v_window_width, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_DECREF_SET(__pyx_v_window_height, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_DECREF_SET(__pyx_v_width, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_DECREF_SET(__pyx_v_height, __pyx_t_8);
          __pyx_t_8 = 0;
          __Pyx_DECREF_SET(__pyx_v_scaling, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "ok/Capture.pyx":626
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(
 *                         self.hwnd)
 *                     if self.frame_aspect_ratio != 0 and height != 0:             # <<<<<<<<<<<<<<
 *                         window_ratio = width / height
 *                         if window_ratio < self.frame_aspect_ratio:
 */
          __pyx_t_22 = (__pyx_v_self->frame_aspect_ratio != 0.0);
          if (__pyx_t_22) {
          } else {
            __pyx_t_12 = __pyx_t_22;
            goto __pyx_L18_bool_binop_done;
          }
          __pyx_t_22 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_height, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 626, __pyx_L3_error)
          __pyx_t_12 = __pyx_t_22;
          __pyx_L18_bool_binop_done:;
          if (__pyx_t_12) {

            /* "ok/Capture.pyx":627
 *                         self.hwnd)
 *                     if self.frame_aspect_ratio != 0 and height != 0:
 *                         window_ratio = width / height             # <<<<<<<<<<<<<<
 *                         if window_ratio < self.frame_aspect_ratio:
 *                             cropped_window_height = int(width / self.frame_aspect_ratio)
 */
            __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_v_width, __pyx_v_height); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 627, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_v_window_ratio = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "ok/Capture.pyx":628
 *                     if self.frame_aspect_ratio != 0 and height != 0:
 *                         window_ratio = width / height
 *                         if window_ratio < self.frame_aspect_ratio:             # <<<<<<<<<<<<<<
 *                             cropped_window_height = int(width / self.frame_aspect_ratio)
 *                             height = cropped_window_height
 */
            __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->frame_aspect_ratio); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 628, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_9 = PyObject_RichCompare(__pyx_v_window_ratio, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 628, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 628, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_12) {

              /* "ok/Capture.pyx":629
 *                         window_ratio = width / height
 *                         if window_ratio < self.frame_aspect_ratio:
 *                             cropped_window_height = int(width / self.frame_aspect_ratio)             # <<<<<<<<<<<<<<
 *                             height = cropped_window_height
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)
 */
              __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->frame_aspect_ratio); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_v_width, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 629, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_v_cropped_window_height = __pyx_t_9;
              __pyx_t_9 = 0;

              /* "ok/Capture.pyx":630
 *                         if window_ratio < self.frame_aspect_ratio:
 *                             cropped_window_height = int(width / self.frame_aspect_ratio)
 *                             height = cropped_window_height             # <<<<<<<<<<<<<<
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:
 */
              __Pyx_INCREF(__pyx_v_cropped_window_height);
              __Pyx_DECREF_SET(__pyx_v_height, __pyx_v_cropped_window_height);

              /* "ok/Capture.pyx":628
 *                     if self.frame_aspect_ratio != 0 and height != 0:
 *                         window_ratio = width / height
 *                         if window_ratio < self.frame_aspect_ratio:             # <<<<<<<<<<<<<<
 *                             cropped_window_height = int(width / self.frame_aspect_ratio)
 *                             height = cropped_window_height
 */
            }

            /* "ok/Capture.pyx":626
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(
 *                         self.hwnd)
 *                     if self.frame_aspect_ratio != 0 and height != 0:             # <<<<<<<<<<<<<<
 *                         window_ratio = width / height
 *                         if window_ratio < self.frame_aspect_ratio:
 */
          }

          /* "ok/Capture.pyx":631
 *                             cropped_window_height = int(width / self.frame_aspect_ratio)
 *                             height = cropped_window_height
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)             # <<<<<<<<<<<<<<
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:
 *                         if self.device_manager.executor.pause():
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_check_pos); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 631, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_8 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[6] = {__pyx_t_8, __pyx_v_x, __pyx_v_y, __pyx_v_width, __pyx_v_height, __pyx_v_self->monitors_bounds};
            __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_21, 5+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 631, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __pyx_v_pos_valid = __pyx_t_9;
          __pyx_t_9 = 0;

          /* "ok/Capture.pyx":632
 *                             height = cropped_window_height
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:             # <<<<<<<<<<<<<<
 *                         if self.device_manager.executor.pause():
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')
 */
          __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_pos_valid); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 632, __pyx_L3_error)
          __pyx_t_23 = (!__pyx_t_22);
          if (__pyx_t_23) {
          } else {
            __pyx_t_12 = __pyx_t_23;
            goto __pyx_L22_bool_binop_done;
          }
          __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_self->pos_valid); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 632, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = PyObject_RichCompare(__pyx_v_pos_valid, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 632, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 632, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_23) {
          } else {
            __pyx_t_12 = __pyx_t_23;
            goto __pyx_L22_bool_binop_done;
          }
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_executor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 632, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_23 = (__pyx_t_10 != Py_None);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_12 = __pyx_t_23;
          __pyx_L22_bool_binop_done:;
          if (__pyx_t_12) {

            /* "ok/Capture.pyx":633
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:
 *                         if self.device_manager.executor.pause():             # <<<<<<<<<<<<<<
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')
 *                             communicate.notification.emit('Paused because game window is minimized or out of screen!',
 */
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_executor); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 633, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_pause); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 633, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = NULL;
            __pyx_t_21 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_21 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
              __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_21, 0+__pyx_t_21);
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 633, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 633, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_12) {

              /* "ok/Capture.pyx":634
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:
 *                         if self.device_manager.executor.pause():
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')             # <<<<<<<<<<<<<<
 *                             communicate.notification.emit('Paused because game window is minimized or out of screen!',
 *                                                           None,
 */
              __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 634, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 634, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 634, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_INCREF(__pyx_v_x);
              __Pyx_GIVEREF(__pyx_v_x);
              if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_x)) __PYX_ERR(0, 634, __pyx_L3_error);
              __Pyx_INCREF(__pyx_v_y);
              __Pyx_GIVEREF(__pyx_v_y);
              if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_y)) __PYX_ERR(0, 634, __pyx_L3_error);
              __Pyx_INCREF(__pyx_v_width);
              __Pyx_GIVEREF(__pyx_v_width);
              if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_width)) __PYX_ERR(0, 634, __pyx_L3_error);
              __Pyx_INCREF(__pyx_v_height);
              __Pyx_GIVEREF(__pyx_v_height);
              if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_height)) __PYX_ERR(0, 634, __pyx_L3_error);
              __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 634, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_ok_gui_executor_pause_pos_invali, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 634, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_7 = NULL;
              __pyx_t_21 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_21 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_8};
                __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 634, __pyx_L3_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

              /* "ok/Capture.pyx":635
 *                         if self.device_manager.executor.pause():
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')
 *                             communicate.notification.emit('Paused because game window is minimized or out of screen!',             # <<<<<<<<<<<<<<
 *                                                           None,
 *                                                           True, True)
 */
              __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_communicate); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 635, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_notification); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 635, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_emit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 635, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

              /* "ok/Capture.pyx":637
 *                             communicate.notification.emit('Paused because game window is minimized or out of screen!',
 *                                                           None,
 *                                                           True, True)             # <<<<<<<<<<<<<<
 *                     if pos_valid != self.pos_valid:
 *                         self.pos_valid = pos_valid
 */
              __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 635, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

              /* "ok/Capture.pyx":633
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:
 *                         if self.device_manager.executor.pause():             # <<<<<<<<<<<<<<
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')
 *                             communicate.notification.emit('Paused because game window is minimized or out of screen!',
 */
            }

            /* "ok/Capture.pyx":632
 *                             height = cropped_window_height
 *                     pos_valid = check_pos(x, y, width, height, self.monitors_bounds)
 *                     if not pos_valid and pos_valid != self.pos_valid and self.device_manager.executor is not None:             # <<<<<<<<<<<<<<
 *                         if self.device_manager.executor.pause():
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')
 */
          }

          /* "ok/Capture.pyx":638
 *                                                           None,
 *                                                           True, True)
 *                     if pos_valid != self.pos_valid:             # <<<<<<<<<<<<<<
 *                         self.pos_valid = pos_valid
 *                 else:
 */
          __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_self->pos_valid); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 638, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = PyObject_RichCompare(__pyx_v_pos_valid, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 638, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 638, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_12) {

            /* "ok/Capture.pyx":639
 *                                                           True, True)
 *                     if pos_valid != self.pos_valid:
 *                         self.pos_valid = pos_valid             # <<<<<<<<<<<<<<
 *                 else:
 *                     if self.device_manager.executor is not None and self.device_manager.executor.pause():
 */
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_pos_valid); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L3_error)
            __pyx_v_self->pos_valid = __pyx_t_12;

            /* "ok/Capture.pyx":638
 *                                                           None,
 *                                                           True, True)
 *                     if pos_valid != self.pos_valid:             # <<<<<<<<<<<<<<
 *                         self.pos_valid = pos_valid
 *                 else:
 */
          }

          /* "ok/Capture.pyx":622
 *             if self.hwnd is not None:
 *                 self.exists = win32gui.IsWindow(self.hwnd)
 *                 if self.exists:             # <<<<<<<<<<<<<<
 *                     visible = is_foreground_window(self.hwnd)
 *                     x, y, window_width, window_height, width, height, scaling = get_window_bounds(
 */
          goto __pyx_L14;
        }

        /* "ok/Capture.pyx":641
 *                         self.pos_valid = pos_valid
 *                 else:
 *                     if self.device_manager.executor is not None and self.device_manager.executor.pause():             # <<<<<<<<<<<<<<
 *                         communicate.notification.emit('Paused because game exited', None, True, True)
 *                     self.hwnd = None
 */
        /*else*/ {
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_executor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 641, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_23 = (__pyx_t_10 != Py_None);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_23) {
          } else {
            __pyx_t_12 = __pyx_t_23;
            goto __pyx_L28_bool_binop_done;
          }
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_executor); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_pause); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 641, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_21, 0+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 641, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 641, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_12 = __pyx_t_23;
          __pyx_L28_bool_binop_done:;
          if (__pyx_t_12) {

            /* "ok/Capture.pyx":642
 *                 else:
 *                     if self.device_manager.executor is not None and self.device_manager.executor.pause():
 *                         communicate.notification.emit('Paused because game exited', None, True, True)             # <<<<<<<<<<<<<<
 *                     self.hwnd = None
 *                 changed = False
 */
            __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_communicate); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 642, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_notification); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 642, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_emit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 642, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 642, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "ok/Capture.pyx":641
 *                         self.pos_valid = pos_valid
 *                 else:
 *                     if self.device_manager.executor is not None and self.device_manager.executor.pause():             # <<<<<<<<<<<<<<
 *                         communicate.notification.emit('Paused because game exited', None, True, True)
 *                     self.hwnd = None
 */
          }

          /* "ok/Capture.pyx":643
 *                     if self.device_manager.executor is not None and self.device_manager.executor.pause():
 *                         communicate.notification.emit('Paused because game exited', None, True, True)
 *                     self.hwnd = None             # <<<<<<<<<<<<<<
 *                 changed = False
 *                 if visible != self.visible:
 */
          __Pyx_INCREF(Py_None);
          __Pyx_GIVEREF(Py_None);
          __Pyx_GOTREF(__pyx_v_self->hwnd);
          __Pyx_DECREF(__pyx_v_self->hwnd);
          __pyx_v_self->hwnd = Py_None;
        }
        __pyx_L14:;

        /* "ok/Capture.pyx":644
 *                         communicate.notification.emit('Paused because game exited', None, True, True)
 *                     self.hwnd = None
 *                 changed = False             # <<<<<<<<<<<<<<
 *                 if visible != self.visible:
 *                     self.visible = visible
 */
        __pyx_v_changed = 0;

        /* "ok/Capture.pyx":645
 *                     self.hwnd = None
 *                 changed = False
 *                 if visible != self.visible:             # <<<<<<<<<<<<<<
 *                     self.visible = visible
 *                     changed = True
 */
        __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_v_self->visible); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 645, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_visible, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 645, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 645, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_12) {

          /* "ok/Capture.pyx":646
 *                 changed = False
 *                 if visible != self.visible:
 *                     self.visible = visible             # <<<<<<<<<<<<<<
 *                     changed = True
 *                     self.handle_mute()
 */
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
          __pyx_v_self->visible = __pyx_t_12;

          /* "ok/Capture.pyx":647
 *                 if visible != self.visible:
 *                     self.visible = visible
 *                     changed = True             # <<<<<<<<<<<<<<
 *                     self.handle_mute()
 *                 if (window_width != self.window_width or window_height != self.window_height or
 */
          __pyx_v_changed = 1;

          /* "ok/Capture.pyx":648
 *                     self.visible = visible
 *                     changed = True
 *                     self.handle_mute()             # <<<<<<<<<<<<<<
 *                 if (window_width != self.window_width or window_height != self.window_height or
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_handle_mute); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 648, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_21, 0+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 648, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ok/Capture.pyx":645
 *                     self.hwnd = None
 *                 changed = False
 *                 if visible != self.visible:             # <<<<<<<<<<<<<<
 *                     self.visible = visible
 *                     changed = True
 */
        }

        /* "ok/Capture.pyx":649
 *                     changed = True
 *                     self.handle_mute()
 *                 if (window_width != self.window_width or window_height != self.window_height or             # <<<<<<<<<<<<<<
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (
 *                         (x >= -1 and y >= -1) or self.visible):
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->window_width); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 649, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_window_width, __pyx_t_10, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 649, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 649, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_23) {
        } else {
          goto __pyx_L33_next_and;
        }
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->window_height); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 649, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_window_height, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 649, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 649, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (!__pyx_t_23) {
        } else {
          goto __pyx_L33_next_and;
        }

        /* "ok/Capture.pyx":650
 *                     self.handle_mute()
 *                 if (window_width != self.window_width or window_height != self.window_height or
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (             # <<<<<<<<<<<<<<
 *                         (x >= -1 and y >= -1) or self.visible):
 *                     self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling = x, y, window_width, window_height, width, height, scaling
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->x); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_x, __pyx_t_10, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_23) {
        } else {
          goto __pyx_L33_next_and;
        }
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->y); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_y, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (!__pyx_t_23) {
        } else {
          goto __pyx_L33_next_and;
        }
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_width, __pyx_t_10, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_23) {
        } else {
          goto __pyx_L33_next_and;
        }
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_height, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (!__pyx_t_23) {
        } else {
          goto __pyx_L33_next_and;
        }
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->scaling); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_scaling, __pyx_t_10, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 650, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_23) {
        } else {
          __pyx_t_12 = __pyx_t_23;
          goto __pyx_L32_bool_binop_done;
        }
        __pyx_L33_next_and:;

        /* "ok/Capture.pyx":651
 *                 if (window_width != self.window_width or window_height != self.window_height or
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (
 *                         (x >= -1 and y >= -1) or self.visible):             # <<<<<<<<<<<<<<
 *                     self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling = x, y, window_width, window_height, width, height, scaling
 *                     changed = True
 */
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_x, __pyx_int_neg_1, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 651, __pyx_L3_error)
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 651, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_23) {
          goto __pyx_L40_next_or;
        } else {
        }
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_y, __pyx_int_neg_1, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 651, __pyx_L3_error)
        __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_23 < 0))) __PYX_ERR(0, 651, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_23) {
        } else {
          __pyx_t_12 = __pyx_t_23;
          goto __pyx_L32_bool_binop_done;
        }
        __pyx_L40_next_or:;
        __pyx_t_12 = __pyx_v_self->visible;
        __pyx_L32_bool_binop_done:;

        /* "ok/Capture.pyx":649
 *                     changed = True
 *                     self.handle_mute()
 *                 if (window_width != self.window_width or window_height != self.window_height or             # <<<<<<<<<<<<<<
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (
 *                         (x >= -1 and y >= -1) or self.visible):
 */
        if (__pyx_t_12) {

          /* "ok/Capture.pyx":652
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (
 *                         (x >= -1 and y >= -1) or self.visible):
 *                     self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling = x, y, window_width, window_height, width, height, scaling             # <<<<<<<<<<<<<<
 *                     changed = True
 *                 if changed:
 */
          __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_window_width); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_window_height); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_t_25 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_25 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_t_26 = __pyx_PyFloat_AsDouble(__pyx_v_scaling); if (unlikely((__pyx_t_26 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
          __pyx_v_self->x = __pyx_t_18;
          __pyx_v_self->y = __pyx_t_17;
          __pyx_v_self->window_width = __pyx_t_16;
          __pyx_v_self->window_height = __pyx_t_15;
          __pyx_v_self->width = __pyx_t_24;
          __pyx_v_self->height = __pyx_t_25;
          __pyx_v_self->scaling = __pyx_t_26;

          /* "ok/Capture.pyx":653
 *                         (x >= -1 and y >= -1) or self.visible):
 *                     self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling = x, y, window_width, window_height, width, height, scaling
 *                     changed = True             # <<<<<<<<<<<<<<
 *                 if changed:
 *                     logger.info(
 */
          __pyx_v_changed = 1;

          /* "ok/Capture.pyx":649
 *                     changed = True
 *                     self.handle_mute()
 *                 if (window_width != self.window_width or window_height != self.window_height or             # <<<<<<<<<<<<<<
 *                     x != self.x or y != self.y or width != self.width or height != self.height or scaling != self.scaling) and (
 *                         (x >= -1 and y >= -1) or self.visible):
 */
        }

        /* "ok/Capture.pyx":654
 *                     self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling = x, y, window_width, window_height, width, height, scaling
 *                     changed = True
 *                 if changed:             # <<<<<<<<<<<<<<
 *                     logger.info(
 *                         f"do_update_window_size changed,visible:{self.visible} x:{self.x} y:{self.y} window:{self.width}x{self.height} self.window:{self.window_width}x{self.window_height} real:{self.real_width}x{self.real_height}")
 */
        if (__pyx_v_changed) {

          /* "ok/Capture.pyx":655
 *                     changed = True
 *                 if changed:
 *                     logger.info(             # <<<<<<<<<<<<<<
 *                         f"do_update_window_size changed,visible:{self.visible} x:{self.x} y:{self.y} window:{self.width}x{self.height} self.window:{self.window_width}x{self.window_height} real:{self.real_width}x{self.real_height}")
 *                     communicate.window.emit(self.visible, self.x + self.real_x_offset, self.y + self.real_y_offset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_logger); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 655, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 655, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ok/Capture.pyx":656
 *                 if changed:
 *                     logger.info(
 *                         f"do_update_window_size changed,visible:{self.visible} x:{self.x} y:{self.y} window:{self.width}x{self.height} self.window:{self.window_width}x{self.window_height} real:{self.real_width}x{self.real_height}")             # <<<<<<<<<<<<<<
 *                     communicate.window.emit(self.visible, self.x + self.real_x_offset, self.y + self.real_y_offset,
 *                                             self.window_width, self.window_height,
 */
          __pyx_t_10 = PyTuple_New(18); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_do_update_window_size_changed_vi);
          __pyx_t_19 += 38;
          __Pyx_GIVEREF(__pyx_kp_u_do_update_window_size_changed_vi);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_do_update_window_size_changed_vi);
          __pyx_t_7 = __Pyx_PyUnicode_FromBInt_bint(__pyx_v_self->visible); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_kp_u_x_2);
          __pyx_t_19 += 3;
          __Pyx_GIVEREF(__pyx_kp_u_x_2);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_x_2);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->x, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_kp_u_y_2);
          __pyx_t_19 += 3;
          __Pyx_GIVEREF(__pyx_kp_u_y_2);
          PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u_y_2);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->y, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_kp_u_window);
          __pyx_t_19 += 8;
          __Pyx_GIVEREF(__pyx_kp_u_window);
          PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_kp_u_window);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->width, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_n_u_x);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_n_u_x);
          PyTuple_SET_ITEM(__pyx_t_10, 8, __pyx_n_u_x);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->height, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 9, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_kp_u_self_window);
          __pyx_t_19 += 13;
          __Pyx_GIVEREF(__pyx_kp_u_self_window);
          PyTuple_SET_ITEM(__pyx_t_10, 10, __pyx_kp_u_self_window);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->window_width, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 11, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_n_u_x);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_n_u_x);
          PyTuple_SET_ITEM(__pyx_t_10, 12, __pyx_n_u_x);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->window_height, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 13, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_kp_u_real);
          __pyx_t_19 += 6;
          __Pyx_GIVEREF(__pyx_kp_u_real);
          PyTuple_SET_ITEM(__pyx_t_10, 14, __pyx_kp_u_real);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->real_width, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 15, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_INCREF(__pyx_n_u_x);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_n_u_x);
          PyTuple_SET_ITEM(__pyx_t_10, 16, __pyx_n_u_x);
          __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->real_height, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 17, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_10, 18, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_7};
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_21, 1+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 655, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "ok/Capture.pyx":657
 *                     logger.info(
 *                         f"do_update_window_size changed,visible:{self.visible} x:{self.x} y:{self.y} window:{self.width}x{self.height} self.window:{self.window_width}x{self.window_height} real:{self.real_width}x{self.real_height}")
 *                     communicate.window.emit(self.visible, self.x + self.real_x_offset, self.y + self.real_y_offset,             # <<<<<<<<<<<<<<
 *                                             self.window_width, self.window_height,
 *                                             self.width,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_communicate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 657, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_window_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 657, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_emit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 657, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->visible); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 657, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = __Pyx_PyInt_From_int((__pyx_v_self->x + __pyx_v_self->real_x_offset)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 657, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->y + __pyx_v_self->real_y_offset)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 657, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_6);

          /* "ok/Capture.pyx":658
 *                         f"do_update_window_size changed,visible:{self.visible} x:{self.x} y:{self.y} window:{self.width}x{self.height} self.window:{self.window_width}x{self.window_height} real:{self.real_width}x{self.real_height}")
 *                     communicate.window.emit(self.visible, self.x + self.real_x_offset, self.y + self.real_y_offset,
 *                                             self.window_width, self.window_height,             # <<<<<<<<<<<<<<
 *                                             self.width,
 *                                             self.height, self.scaling)
 */
          __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->window_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->window_height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 658, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);

          /* "ok/Capture.pyx":659
 *                     communicate.window.emit(self.visible, self.x + self.real_x_offset, self.y + self.real_y_offset,
 *                                             self.window_width, self.window_height,
 *                                             self.width,             # <<<<<<<<<<<<<<
 *                                             self.height, self.scaling)
 *         except Exception as e:
 */
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 659, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);

          /* "ok/Capture.pyx":660
 *                                             self.window_width, self.window_height,
 *                                             self.width,
 *                                             self.height, self.scaling)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             logger.error(f"do_update_window_size exception", e)
 */
          __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 660, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_27 = PyFloat_FromDouble(__pyx_v_self->scaling); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 660, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_27);
          __pyx_t_28 = NULL;
          __pyx_t_21 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_28)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_28);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_21 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[9] = {__pyx_t_28, __pyx_t_7, __pyx_t_10, __pyx_t_6, __pyx_t_4, __pyx_t_5, __pyx_t_11, __pyx_t_13, __pyx_t_27};
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_21, 8+__pyx_t_21);
            __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 657, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "ok/Capture.pyx":654
 *                     self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling = x, y, window_width, window_height, width, height, scaling
 *                     changed = True
 *                 if changed:             # <<<<<<<<<<<<<<
 *                     logger.info(
 *                         f"do_update_window_size changed,visible:{self.visible} x:{self.x} y:{self.y} window:{self.width}x{self.height} self.window:{self.window_width}x{self.window_height} real:{self.real_width}x{self.real_height}")
 */
        }

        /* "ok/Capture.pyx":620
 *                         f'found hwnd {self.hwnd} {self.exe_full_path} {win32gui.GetClassName(self.hwnd)} real:{self.real_x_offset},{self.real_y_offset},{self.real_width},{self.real_height}')
 *                 self.exists = self.hwnd is not None
 *             if self.hwnd is not None:             # <<<<<<<<<<<<<<
 *                 self.exists = win32gui.IsWindow(self.hwnd)
 *                 if self.exists:
 */
      }

      /* "ok/Capture.pyx":609
 * 
 *     def do_update_window_size(self):
 *         try:             # <<<<<<<<<<<<<<
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
    __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ok/Capture.pyx":661
 *                                             self.width,
 *                                             self.height, self.scaling)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"do_update_window_size exception", e)
 * 
 */
    __pyx_t_25 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_25) {
      __Pyx_AddTraceback("ok.Capture.HwndWindow.do_update_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_27) < 0) __PYX_ERR(0, 661, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_27);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_e = __pyx_t_9;
      /*try:*/ {

        /* "ok/Capture.pyx":662
 *                                             self.height, self.scaling)
 *         except Exception as e:
 *             logger.error(f"do_update_window_size exception", e)             # <<<<<<<<<<<<<<
 * 
 *     def handle_mute(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 662, __pyx_L48_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L48_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_21 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_21 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_kp_u_do_update_window_size_exception, __pyx_v_e};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_21, 2+__pyx_t_21);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 662, __pyx_L48_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }

      /* "ok/Capture.pyx":661
 *                                             self.width,
 *                                             self.height, self.scaling)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"do_update_window_size exception", e)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L49;
        }
        __pyx_L48_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_30 = 0; __pyx_t_31 = 0; __pyx_t_32 = 0; __pyx_t_33 = 0; __pyx_t_34 = 0; __pyx_t_35 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_33, &__pyx_t_34, &__pyx_t_35);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_30, &__pyx_t_31, &__pyx_t_32) < 0)) __Pyx_ErrFetch(&__pyx_t_30, &__pyx_t_31, &__pyx_t_32);
          __Pyx_XGOTREF(__pyx_t_30);
          __Pyx_XGOTREF(__pyx_t_31);
          __Pyx_XGOTREF(__pyx_t_32);
          __Pyx_XGOTREF(__pyx_t_33);
          __Pyx_XGOTREF(__pyx_t_34);
          __Pyx_XGOTREF(__pyx_t_35);
          __pyx_t_25 = __pyx_lineno; __pyx_t_24 = __pyx_clineno; __pyx_t_29 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_33);
            __Pyx_XGIVEREF(__pyx_t_34);
            __Pyx_XGIVEREF(__pyx_t_35);
            __Pyx_ExceptionReset(__pyx_t_33, __pyx_t_34, __pyx_t_35);
          }
          __Pyx_XGIVEREF(__pyx_t_30);
          __Pyx_XGIVEREF(__pyx_t_31);
          __Pyx_XGIVEREF(__pyx_t_32);
          __Pyx_ErrRestore(__pyx_t_30, __pyx_t_31, __pyx_t_32);
          __pyx_t_30 = 0; __pyx_t_31 = 0; __pyx_t_32 = 0; __pyx_t_33 = 0; __pyx_t_34 = 0; __pyx_t_35 = 0;
          __pyx_lineno = __pyx_t_25; __pyx_clineno = __pyx_t_24; __pyx_filename = __pyx_t_29;
          goto __pyx_L5_except_error;
        }
        __pyx_L49:;
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":609
 * 
 *     def do_update_window_size(self):
 *         try:             # <<<<<<<<<<<<<<
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 *             if self.hwnd is None:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "ok/Capture.pyx":608
 *         return self.x + x, self.y + y
 * 
 *     def do_update_window_size(self):             # <<<<<<<<<<<<<<
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.do_update_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_visible);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_window_width);
  __Pyx_XDECREF(__pyx_v_window_height);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_scaling);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_window_ratio);
  __Pyx_XDECREF(__pyx_v_cropped_window_height);
  __Pyx_XDECREF(__pyx_v_pos_valid);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":664
 *             logger.error(f"do_update_window_size exception", e)
 * 
 *     def handle_mute(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_17handle_mute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_17handle_mute = {"handle_mute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_17handle_mute, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_17handle_mute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("handle_mute (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("handle_mute", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "handle_mute", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_16handle_mute(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_16handle_mute(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("handle_mute", 1);

  /* "ok/Capture.pyx":665
 * 
 *     def handle_mute(self):
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):             # <<<<<<<<<<<<<<
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->hwnd); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->mute_option, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_s_Mute_Game_while_in_Background};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":666
 *     def handle_mute(self):
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)             # <<<<<<<<<<<<<<
 * 
 *     def frame_ratio(self, size):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_set_mute_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_v_self->visible) {
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_5 = __pyx_int_0;
    } else {
      __Pyx_INCREF(__pyx_int_1);
      __pyx_t_5 = __pyx_int_1;
    }
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_v_self->hwnd, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":665
 * 
 *     def handle_mute(self):
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):             # <<<<<<<<<<<<<<
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 * 
 */
  }

  /* "ok/Capture.pyx":664
 *             logger.error(f"do_update_window_size exception", e)
 * 
 *     def handle_mute(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.handle_mute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":668
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 * 
 *     def frame_ratio(self, size):             # <<<<<<<<<<<<<<
 *         if self.frame_width > 0 and self.width > 0:
 *             return int(size / self.frame_width * self.width)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_19frame_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_19frame_ratio = {"frame_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_19frame_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_19frame_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_size = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_ratio (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "frame_ratio") < 0)) __PYX_ERR(0, 668, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_size = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("frame_ratio", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 668, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_18frame_ratio(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_18frame_ratio(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_ratio", 1);

  /* "ok/Capture.pyx":669
 * 
 *     def frame_ratio(self, size):
 *         if self.frame_width > 0 and self.width > 0:             # <<<<<<<<<<<<<<
 *             return int(size / self.frame_width * self.width)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_self->frame_width > 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->width > 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":670
 *     def frame_ratio(self, size):
 *         if self.frame_width > 0 and self.width > 0:
 *             return int(size / self.frame_width * self.width)             # <<<<<<<<<<<<<<
 *         else:
 *             return size
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->frame_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_size, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":669
 * 
 *     def frame_ratio(self, size):
 *         if self.frame_width > 0 and self.width > 0:             # <<<<<<<<<<<<<<
 *             return int(size / self.frame_width * self.width)
 *         else:
 */
  }

  /* "ok/Capture.pyx":672
 *             return int(size / self.frame_width * self.width)
 *         else:
 *             return size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_size);
    __pyx_r = __pyx_v_size;
    goto __pyx_L0;
  }

  /* "ok/Capture.pyx":668
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 * 
 *     def frame_ratio(self, size):             # <<<<<<<<<<<<<<
 *         if self.frame_width > 0 and self.width > 0:
 *             return int(size / self.frame_width * self.width)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":674
 *             return size
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hwnd_title(self):
 *         if not self._hwnd_title:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_title_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_title___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_title___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ok/Capture.pyx":676
 *     @property
 *     def hwnd_title(self):
 *         if not self._hwnd_title:             # <<<<<<<<<<<<<<
 *             if self.hwnd:
 *                 self._hwnd_title = win32gui.GetWindowText(self.hwnd)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_hwnd_title); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":677
 *     def hwnd_title(self):
 *         if not self._hwnd_title:
 *             if self.hwnd:             # <<<<<<<<<<<<<<
 *                 self._hwnd_title = win32gui.GetWindowText(self.hwnd)
 *         return self._hwnd_title
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->hwnd); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 677, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":678
 *         if not self._hwnd_title:
 *             if self.hwnd:
 *                 self._hwnd_title = win32gui.GetWindowText(self.hwnd)             # <<<<<<<<<<<<<<
 *         return self._hwnd_title
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GetWindowText); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_self->hwnd};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_3))) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_hwnd_title);
      __Pyx_DECREF(__pyx_v_self->_hwnd_title);
      __pyx_v_self->_hwnd_title = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "ok/Capture.pyx":677
 *     def hwnd_title(self):
 *         if not self._hwnd_title:
 *             if self.hwnd:             # <<<<<<<<<<<<<<
 *                 self._hwnd_title = win32gui.GetWindowText(self.hwnd)
 *         return self._hwnd_title
 */
    }

    /* "ok/Capture.pyx":676
 *     @property
 *     def hwnd_title(self):
 *         if not self._hwnd_title:             # <<<<<<<<<<<<<<
 *             if self.hwnd:
 *                 self._hwnd_title = win32gui.GetWindowText(self.hwnd)
 */
  }

  /* "ok/Capture.pyx":679
 *             if self.hwnd:
 *                 self._hwnd_title = win32gui.GetWindowText(self.hwnd)
 *         return self._hwnd_title             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_hwnd_title);
  __pyx_r = __pyx_v_self->_hwnd_title;
  goto __pyx_L0;

  /* "ok/Capture.pyx":674
 *             return size
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hwnd_title(self):
 *         if not self._hwnd_title:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.hwnd_title.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":681
 *         return self._hwnd_title
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return str(
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_21__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_21__str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_20__str__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_20__str__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "ok/Capture.pyx":682
 * 
 *     def __str__(self) -> str:
 *         return str(             # <<<<<<<<<<<<<<
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "ok/Capture.pyx":683
 *     def __str__(self) -> str:
 *         return str(
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")             # <<<<<<<<<<<<<<
 * 
 * def check_pos(x, y, width, height, monitors_bounds):
 */
  __pyx_t_1 = PyTuple_New(14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_n_u_title_2);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_n_u_title_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_title_2);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->title, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->exe_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->width, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_n_u_x);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->height, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->hwnd, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyUnicode_FromBInt_bint(__pyx_v_self->exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 11, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 12, __pyx_n_u__7);
  __pyx_t_4 = __Pyx_PyUnicode_FromBInt_bint(__pyx_v_self->visible); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 13, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 14, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":682
 * 
 *     def __str__(self) -> str:
 *         return str(             # <<<<<<<<<<<<<<
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":681
 *         return self._hwnd_title
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return str(
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":521
 * 
 * cdef class HwndWindow:
 *     cdef public object app_exit_event, stop_event, hwnd, mute_option, thread, device_manager             # <<<<<<<<<<<<<<
 *     cdef public str exe_name, title, exe_full_path, hwnd_class, _hwnd_title
 *     cdef public int player_id, window_width, window_height, x, y, width, height, frame_width, frame_height, real_width, real_height, real_x_offset, real_y_offset
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->app_exit_event);
  __pyx_r = __pyx_v_self->app_exit_event;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->app_exit_event);
  __Pyx_DECREF(__pyx_v_self->app_exit_event);
  __pyx_v_self->app_exit_event = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_14app_exit_event_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->app_exit_event);
  __Pyx_DECREF(__pyx_v_self->app_exit_event);
  __pyx_v_self->app_exit_event = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10stop_event___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->stop_event);
  __pyx_r = __pyx_v_self->stop_event;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->stop_event);
  __Pyx_DECREF(__pyx_v_self->stop_event);
  __pyx_v_self->stop_event = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_10stop_event_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->stop_event);
  __Pyx_DECREF(__pyx_v_self->stop_event);
  __pyx_v_self->stop_event = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_4hwnd___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->hwnd);
  __pyx_r = __pyx_v_self->hwnd;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->hwnd);
  __Pyx_DECREF(__pyx_v_self->hwnd);
  __pyx_v_self->hwnd = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_4hwnd_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->hwnd);
  __Pyx_DECREF(__pyx_v_self->hwnd);
  __pyx_v_self->hwnd = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11mute_option___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->mute_option);
  __pyx_r = __pyx_v_self->mute_option;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->mute_option);
  __Pyx_DECREF(__pyx_v_self->mute_option);
  __pyx_v_self->mute_option = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_11mute_option_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->mute_option);
  __Pyx_DECREF(__pyx_v_self->mute_option);
  __pyx_v_self->mute_option = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_6thread_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_6thread_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6thread___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6thread___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->thread);
  __pyx_r = __pyx_v_self->thread;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_6thread_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_6thread_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6thread_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_6thread_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->thread);
  __Pyx_DECREF(__pyx_v_self->thread);
  __pyx_v_self->thread = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_6thread_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_6thread_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6thread_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_6thread_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->thread);
  __Pyx_DECREF(__pyx_v_self->thread);
  __pyx_v_self->thread = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_14device_manager___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->device_manager);
  __pyx_r = __pyx_v_self->device_manager;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->device_manager);
  __Pyx_DECREF(__pyx_v_self->device_manager);
  __pyx_v_self->device_manager = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_14device_manager_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->device_manager);
  __Pyx_DECREF(__pyx_v_self->device_manager);
  __pyx_v_self->device_manager = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":522
 * cdef class HwndWindow:
 *     cdef public object app_exit_event, stop_event, hwnd, mute_option, thread, device_manager
 *     cdef public str exe_name, title, exe_full_path, hwnd_class, _hwnd_title             # <<<<<<<<<<<<<<
 *     cdef public int player_id, window_width, window_height, x, y, width, height, frame_width, frame_height, real_width, real_height, real_x_offset, real_y_offset
 *     cdef public bint visible, exists, pos_valid
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_8exe_name___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exe_name);
  __pyx_r = __pyx_v_self->exe_name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_value))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->exe_name);
  __Pyx_DECREF(__pyx_v_self->exe_name);
  __pyx_v_self->exe_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.exe_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_8exe_name_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->exe_name);
  __Pyx_DECREF(__pyx_v_self->exe_name);
  __pyx_v_self->exe_name = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_5title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_5title_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_5title___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_5title___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->title);
  __pyx_r = __pyx_v_self->title;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_5title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_5title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_5title_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_5title_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_value))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->title);
  __Pyx_DECREF(__pyx_v_self->title);
  __pyx_v_self->title = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.title.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_5title_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_5title_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_5title_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_5title_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->title);
  __Pyx_DECREF(__pyx_v_self->title);
  __pyx_v_self->title = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exe_full_path);
  __pyx_r = __pyx_v_self->exe_full_path;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_value))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->exe_full_path);
  __Pyx_DECREF(__pyx_v_self->exe_full_path);
  __pyx_v_self->exe_full_path = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.exe_full_path.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_13exe_full_path_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->exe_full_path);
  __Pyx_DECREF(__pyx_v_self->exe_full_path);
  __pyx_v_self->exe_full_path = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->hwnd_class);
  __pyx_r = __pyx_v_self->hwnd_class;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_value))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->hwnd_class);
  __Pyx_DECREF(__pyx_v_self->hwnd_class);
  __pyx_v_self->hwnd_class = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.hwnd_class.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_10hwnd_class_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->hwnd_class);
  __Pyx_DECREF(__pyx_v_self->hwnd_class);
  __pyx_v_self->hwnd_class = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_hwnd_title);
  __pyx_r = __pyx_v_self->_hwnd_title;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_value))) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_title);
  __Pyx_DECREF(__pyx_v_self->_hwnd_title);
  __pyx_v_self->_hwnd_title = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow._hwnd_title.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_11_hwnd_title_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_hwnd_title);
  __Pyx_DECREF(__pyx_v_self->_hwnd_title);
  __pyx_v_self->_hwnd_title = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":523
 *     cdef public object app_exit_event, stop_event, hwnd, mute_option, thread, device_manager
 *     cdef public str exe_name, title, exe_full_path, hwnd_class, _hwnd_title
 *     cdef public int player_id, window_width, window_height, x, y, width, height, frame_width, frame_height, real_width, real_height, real_x_offset, real_y_offset             # <<<<<<<<<<<<<<
 *     cdef public bint visible, exists, pos_valid
 *     cdef public double scaling, frame_aspect_ratio
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_9player_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_9player_id_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_9player_id___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_9player_id___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->player_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.player_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_9player_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_9player_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_9player_id_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_9player_id_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->player_id = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.player_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_12window_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_12window_width_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_12window_width___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_12window_width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->window_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.window_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_12window_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_12window_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_12window_width_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_12window_width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->window_width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.window_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13window_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13window_height_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13window_height___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13window_height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->window_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.window_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_13window_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_13window_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13window_height_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_13window_height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->window_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.window_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_1x_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_1x___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_1x___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_1x_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_1x_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_1y_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_1y___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_1y___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_1y_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_1y_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_5width_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_5width___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_5width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_5width_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_5width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_6height_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6height___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6height_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_6height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11frame_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11frame_width_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11frame_width___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11frame_width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->frame_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_11frame_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_11frame_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11frame_width_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_11frame_width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->frame_width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_12frame_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_12frame_height_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_12frame_height___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_12frame_height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->frame_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_12frame_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_12frame_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_12frame_height_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_12frame_height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->frame_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10real_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_10real_width_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10real_width___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_10real_width___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->real_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_10real_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_10real_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_10real_width_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_10real_width_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->real_width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11real_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_11real_height_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11real_height___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_11real_height___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->real_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_11real_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_11real_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_11real_height_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_11real_height_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->real_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13real_x_offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13real_x_offset_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13real_x_offset___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13real_x_offset___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->real_x_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_x_offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_13real_x_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_13real_x_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13real_x_offset_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_13real_x_offset_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->real_x_offset = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_x_offset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13real_y_offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_13real_y_offset_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13real_y_offset___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_13real_y_offset___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->real_y_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_y_offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_13real_y_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_13real_y_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_13real_y_offset_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_13real_y_offset_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_self->real_y_offset = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.real_y_offset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "ok/Capture.pyx":524
 *     cdef public str exe_name, title, exe_full_path, hwnd_class, _hwnd_title
 *     cdef public int player_id, window_width, window_height, x, y, width, height, frame_width, frame_height, real_width, real_height, real_x_offset, real_y_offset
 *     cdef public bint visible, exists, pos_valid             # <<<<<<<<<<<<<<
 *     cdef public double scaling, frame_aspect_ratio
 *     cdef public list monitors_bounds
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_7visible_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_7visible_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_7visible___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_7visible___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->visible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.visible.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_7visible_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_7visible_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_7visible_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_7visible_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  __pyx_v_self->visible = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.visible.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_6exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_6exists_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6exists___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_6exists___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_6exists_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_6exists_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  __pyx_v_self->exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_9pos_valid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_9pos_valid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_9pos_valid___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_9pos_valid___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->pos_valid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.pos_valid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_9pos_valid_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_9pos_valid_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_9pos_valid_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_9pos_valid_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  __pyx_v_self->pos_valid = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.pos_valid.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "ok/Capture.pyx":525
 *     cdef public int player_id, window_width, window_height, x, y, width, height, frame_width, frame_height, real_width, real_height, real_x_offset, real_y_offset
 *     cdef public bint visible, exists, pos_valid
 *     cdef public double scaling, frame_aspect_ratio             # <<<<<<<<<<<<<<
 *     cdef public list monitors_bounds
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_7scaling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_7scaling_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_7scaling___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_7scaling___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->scaling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.scaling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_7scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_7scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_7scaling_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_7scaling_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
  __pyx_v_self->scaling = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.scaling.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_18frame_aspect_ratio___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_18frame_aspect_ratio___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->frame_aspect_ratio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_aspect_ratio.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
  __pyx_v_self->frame_aspect_ratio = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ok.Capture.HwndWindow.frame_aspect_ratio.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "ok/Capture.pyx":526
 *     cdef public bint visible, exists, pos_valid
 *     cdef public double scaling, frame_aspect_ratio
 *     cdef public list monitors_bounds             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, exit_event, title, exe_name=None, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds___get__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds___get__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->monitors_bounds);
  __pyx_r = __pyx_v_self->monitors_bounds;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds_2__set__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds_2__set__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_value))) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->monitors_bounds);
  __Pyx_DECREF(__pyx_v_self->monitors_bounds);
  __pyx_v_self->monitors_bounds = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.monitors_bounds.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds_4__del__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_10HwndWindow_15monitors_bounds_4__del__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->monitors_bounds);
  __Pyx_DECREF(__pyx_v_self->monitors_bounds);
  __pyx_v_self->monitors_bounds = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_23__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_22__reduce_cython__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_22__reduce_cython__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._hwnd_title, self.app_exit_event, self.device_manager, self.exe_full_path, self.exe_name, self.exists, self.frame_aspect_ratio, self.frame_height, self.frame_width, self.height, self.hwnd, self.hwnd_class, self.monitors_bounds, self.mute_option, self.player_id, self.pos_valid, self.real_height, self.real_width, self.real_x_offset, self.real_y_offset, self.scaling, self.stop_event, self.thread, self.title, self.visible, self.width, self.window_height, self.window_width, self.x, self.y)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->frame_aspect_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->frame_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->frame_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->player_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->pos_valid); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->real_height); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->real_width); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->real_x_offset); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->real_y_offset); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->scaling); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyBool_FromLong(__pyx_v_self->visible); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_self->window_height); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_self->window_width); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_self->x); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_self->y); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyTuple_New(30); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_v_self->_hwnd_title);
  __Pyx_GIVEREF(__pyx_v_self->_hwnd_title);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_v_self->_hwnd_title)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->app_exit_event);
  __Pyx_GIVEREF(__pyx_v_self->app_exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_v_self->app_exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->device_manager);
  __Pyx_GIVEREF(__pyx_v_self->device_manager);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 2, __pyx_v_self->device_manager)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->exe_full_path);
  __Pyx_GIVEREF(__pyx_v_self->exe_full_path);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 3, __pyx_v_self->exe_full_path)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->exe_name);
  __Pyx_GIVEREF(__pyx_v_self->exe_name);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 4, __pyx_v_self->exe_name)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 5, __pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 6, __pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 7, __pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 8, __pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 9, __pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->hwnd);
  __Pyx_GIVEREF(__pyx_v_self->hwnd);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 10, __pyx_v_self->hwnd)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->hwnd_class);
  __Pyx_GIVEREF(__pyx_v_self->hwnd_class);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 11, __pyx_v_self->hwnd_class)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->monitors_bounds);
  __Pyx_GIVEREF(__pyx_v_self->monitors_bounds);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 12, __pyx_v_self->monitors_bounds)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->mute_option);
  __Pyx_GIVEREF(__pyx_v_self->mute_option);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 13, __pyx_v_self->mute_option)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 14, __pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 15, __pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 16, __pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 17, __pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 18, __pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 19, __pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 20, __pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->stop_event);
  __Pyx_GIVEREF(__pyx_v_self->stop_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 21, __pyx_v_self->stop_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->thread);
  __Pyx_GIVEREF(__pyx_v_self->thread);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 22, __pyx_v_self->thread)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->title);
  __Pyx_GIVEREF(__pyx_v_self->title);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 23, __pyx_v_self->title)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 24, __pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 25, __pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 26, __pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 27, __pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 28, __pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 29, __pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_19);
  __pyx_t_19 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._hwnd_title, self.app_exit_event, self.device_manager, self.exe_full_path, self.exe_name, self.exists, self.frame_aspect_ratio, self.frame_height, self.frame_width, self.height, self.hwnd, self.hwnd_class, self.monitors_bounds, self.mute_option, self.player_id, self.pos_valid, self.real_height, self.real_width, self.real_x_offset, self.real_y_offset, self.scaling, self.stop_event, self.thread, self.title, self.visible, self.width, self.window_height, self.window_width, self.x, self.y)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_19 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_v__dict = __pyx_t_19;
  __pyx_t_19 = 0;

  /* "(tree fragment)":7
 *     state = (self._hwnd_title, self.app_exit_event, self.device_manager, self.exe_full_path, self.exe_name, self.exists, self.frame_aspect_ratio, self.frame_height, self.frame_width, self.height, self.hwnd, self.hwnd_class, self.monitors_bounds, self.mute_option, self.player_id, self.pos_valid, self.real_height, self.real_width, self.real_x_offset, self.real_y_offset, self.scaling, self.stop_event, self.thread, self.title, self.visible, self.width, self.window_height, self.window_width, self.x, self.y)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_20 = (__pyx_v__dict != Py_None);
  if (__pyx_t_20) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_19 = PyTuple_New(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_18 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_18));
    __pyx_t_18 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._hwnd_title is not None or self.app_exit_event is not None or self.device_manager is not None or self.exe_full_path is not None or self.exe_name is not None or self.hwnd is not None or self.hwnd_class is not None or self.monitors_bounds is not None or self.mute_option is not None or self.stop_event is not None or self.thread is not None or self.title is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._hwnd_title, self.app_exit_event, self.device_manager, self.exe_full_path, self.exe_name, self.exists, self.frame_aspect_ratio, self.frame_height, self.frame_width, self.height, self.hwnd, self.hwnd_class, self.monitors_bounds, self.mute_option, self.player_id, self.pos_valid, self.real_height, self.real_width, self.real_x_offset, self.real_y_offset, self.scaling, self.stop_event, self.thread, self.title, self.visible, self.width, self.window_height, self.window_width, self.x, self.y)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._hwnd_title is not None or self.app_exit_event is not None or self.device_manager is not None or self.exe_full_path is not None or self.exe_name is not None or self.hwnd is not None or self.hwnd_class is not None or self.monitors_bounds is not None or self.mute_option is not None or self.stop_event is not None or self.thread is not None or self.title is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, None), state
 */
  /*else*/ {
    __pyx_t_21 = (__pyx_v_self->_hwnd_title != ((PyObject*)Py_None));
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->app_exit_event != Py_None);
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->device_manager != Py_None);
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->exe_full_path != ((PyObject*)Py_None));
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->exe_name != ((PyObject*)Py_None));
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->hwnd != Py_None);
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->hwnd_class != ((PyObject*)Py_None));
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->monitors_bounds != ((PyObject*)Py_None));
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->mute_option != Py_None);
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->stop_event != Py_None);
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->thread != Py_None);
    if (!__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_21 = (__pyx_v_self->title != ((PyObject*)Py_None));
    __pyx_t_20 = __pyx_t_21;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_20;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_title is not None or self.app_exit_event is not None or self.device_manager is not None or self.exe_full_path is not None or self.exe_name is not None or self.hwnd is not None or self.hwnd_class is not None or self.monitors_bounds is not None or self.mute_option is not None or self.stop_event is not None or self.thread is not None or self.title is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._hwnd_title is not None or self.app_exit_event is not None or self.device_manager is not None or self.exe_full_path is not None or self.exe_name is not None or self.hwnd is not None or self.hwnd_class is not None or self.monitors_bounds is not None or self.mute_option is not None or self.stop_event is not None or self.thread is not None or self.title is not None
 *     if use_setstate:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_pyx_unpickle_HwndWindow); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = PyTuple_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_147817759);
    __Pyx_GIVEREF(__pyx_int_147817759);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_int_147817759)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_17 = PyTuple_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_18)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_19);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_19)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_18 = 0;
    __pyx_t_19 = 0;
    __pyx_r = __pyx_t_17;
    __pyx_t_17 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_title is not None or self.app_exit_event is not None or self.device_manager is not None or self.exe_full_path is not None or self.exe_name is not None or self.hwnd is not None or self.hwnd_class is not None or self.monitors_bounds is not None or self.mute_option is not None or self.stop_event is not None or self.thread is not None or self.title is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, None), state
 *     else:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_HwndWindow__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_pyx_unpickle_HwndWindow); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_19 = PyTuple_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_147817759);
    __Pyx_GIVEREF(__pyx_int_147817759);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_int_147817759)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_19);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_19)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_17 = 0;
    __pyx_t_19 = 0;
    __pyx_r = __pyx_t_18;
    __pyx_t_18 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HwndWindow__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_10HwndWindow_25__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_10HwndWindow_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.HwndWindow.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_10HwndWindow_24__setstate_cython__(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10HwndWindow_24__setstate_cython__(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_HwndWindow__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_HwndWindow__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HwndWindow__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.HwndWindow.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":685
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 * 
 * def check_pos(x, y, width, height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_9check_pos(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_9check_pos = {"check_pos", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_9check_pos, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_9check_pos(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_monitors_bounds = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_pos (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_monitors_bounds,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("check_pos", 1, 5, 5, 1); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("check_pos", 1, 5, 5, 2); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("check_pos", 1, 5, 5, 3); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_monitors_bounds)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("check_pos", 1, 5, 5, 4); __PYX_ERR(0, 685, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "check_pos") < 0)) __PYX_ERR(0, 685, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_width = values[2];
    __pyx_v_height = values[3];
    __pyx_v_monitors_bounds = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_pos", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 685, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.check_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_8check_pos(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_width, __pyx_v_height, __pyx_v_monitors_bounds);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_8check_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_monitors_bounds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_pos", 1);

  /* "ok/Capture.pyx":686
 * 
 * def check_pos(x, y, width, height, monitors_bounds):
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)             # <<<<<<<<<<<<<<
 * 
 * def get_monitors_bounds():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_width, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 686, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_height, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 686, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_is_window_in_screen_bounds); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_5, __pyx_v_x, __pyx_v_y, __pyx_v_width, __pyx_v_height, __pyx_v_monitors_bounds};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 5+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":685
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 * 
 * def check_pos(x, y, width, height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.check_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":688
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 * def get_monitors_bounds():             # <<<<<<<<<<<<<<
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_11get_monitors_bounds(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_11get_monitors_bounds = {"get_monitors_bounds", (PyCFunction)__pyx_pw_2ok_7Capture_11get_monitors_bounds, METH_NOARGS, 0};
static PyObject *__pyx_pw_2ok_7Capture_11get_monitors_bounds(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_monitors_bounds (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2ok_7Capture_10get_monitors_bounds(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_10get_monitors_bounds(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_monitors_bounds = NULL;
  PyObject *__pyx_v_monitors = NULL;
  PyObject *__pyx_v_monitor = NULL;
  PyObject *__pyx_v_monitor_info = NULL;
  PyObject *__pyx_v_monitor_rect = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_monitors_bounds", 1);

  /* "ok/Capture.pyx":689
 * 
 * def get_monitors_bounds():
 *     monitors_bounds = []             # <<<<<<<<<<<<<<
 *     monitors = win32api.EnumDisplayMonitors()
 *     for monitor in monitors:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_monitors_bounds = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":690
 * def get_monitors_bounds():
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()             # <<<<<<<<<<<<<<
 *     for monitor in monitors:
 *         monitor_info = win32api.GetMonitorInfo(monitor[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32api); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_EnumDisplayMonitors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_monitors = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":691
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()
 *     for monitor in monitors:             # <<<<<<<<<<<<<<
 *         monitor_info = win32api.GetMonitorInfo(monitor[0])
 *         monitor_rect = monitor_info['Monitor']
 */
  if (likely(PyList_CheckExact(__pyx_v_monitors)) || PyTuple_CheckExact(__pyx_v_monitors)) {
    __pyx_t_1 = __pyx_v_monitors; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_monitors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 691, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 691, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 691, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 691, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 691, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 691, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_monitor, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":692
 *     monitors = win32api.EnumDisplayMonitors()
 *     for monitor in monitors:
 *         monitor_info = win32api.GetMonitorInfo(monitor[0])             # <<<<<<<<<<<<<<
 *         monitor_rect = monitor_info['Monitor']
 *         monitors_bounds.append(monitor_rect)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32api); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetMonitorInfo); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_monitor, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_monitor_info, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":693
 *     for monitor in monitors:
 *         monitor_info = win32api.GetMonitorInfo(monitor[0])
 *         monitor_rect = monitor_info['Monitor']             # <<<<<<<<<<<<<<
 *         monitors_bounds.append(monitor_rect)
 *     return monitors_bounds
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_monitor_info, __pyx_n_s_Monitor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_monitor_rect, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":694
 *         monitor_info = win32api.GetMonitorInfo(monitor[0])
 *         monitor_rect = monitor_info['Monitor']
 *         monitors_bounds.append(monitor_rect)             # <<<<<<<<<<<<<<
 *     return monitors_bounds
 * 
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_monitors_bounds, __pyx_v_monitor_rect); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 694, __pyx_L1_error)

    /* "ok/Capture.pyx":691
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()
 *     for monitor in monitors:             # <<<<<<<<<<<<<<
 *         monitor_info = win32api.GetMonitorInfo(monitor[0])
 *         monitor_rect = monitor_info['Monitor']
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":695
 *         monitor_rect = monitor_info['Monitor']
 *         monitors_bounds.append(monitor_rect)
 *     return monitors_bounds             # <<<<<<<<<<<<<<
 * 
 * def is_window_in_screen_bounds(window_left, window_top, window_width, window_height, monitors_bounds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_monitors_bounds);
  __pyx_r = __pyx_v_monitors_bounds;
  goto __pyx_L0;

  /* "ok/Capture.pyx":688
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 * def get_monitors_bounds():             # <<<<<<<<<<<<<<
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.get_monitors_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_monitors_bounds);
  __Pyx_XDECREF(__pyx_v_monitors);
  __Pyx_XDECREF(__pyx_v_monitor);
  __Pyx_XDECREF(__pyx_v_monitor_info);
  __Pyx_XDECREF(__pyx_v_monitor_rect);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":697
 *     return monitors_bounds
 * 
 * def is_window_in_screen_bounds(window_left, window_top, window_width, window_height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     window_right, window_bottom = window_left + window_width, window_top + window_height
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13is_window_in_screen_bounds(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13is_window_in_screen_bounds = {"is_window_in_screen_bounds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13is_window_in_screen_bounds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13is_window_in_screen_bounds(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_window_left = 0;
  PyObject *__pyx_v_window_top = 0;
  PyObject *__pyx_v_window_width = 0;
  PyObject *__pyx_v_window_height = 0;
  PyObject *__pyx_v_monitors_bounds = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_in_screen_bounds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_window_left,&__pyx_n_s_window_top,&__pyx_n_s_window_width,&__pyx_n_s_window_height,&__pyx_n_s_monitors_bounds,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_window_left)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_window_top)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("is_window_in_screen_bounds", 1, 5, 5, 1); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_window_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("is_window_in_screen_bounds", 1, 5, 5, 2); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_window_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("is_window_in_screen_bounds", 1, 5, 5, 3); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_monitors_bounds)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("is_window_in_screen_bounds", 1, 5, 5, 4); __PYX_ERR(0, 697, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_window_in_screen_bounds") < 0)) __PYX_ERR(0, 697, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_window_left = values[0];
    __pyx_v_window_top = values[1];
    __pyx_v_window_width = values[2];
    __pyx_v_window_height = values[3];
    __pyx_v_monitors_bounds = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_window_in_screen_bounds", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 697, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.is_window_in_screen_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_12is_window_in_screen_bounds(__pyx_self, __pyx_v_window_left, __pyx_v_window_top, __pyx_v_window_width, __pyx_v_window_height, __pyx_v_monitors_bounds);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_12is_window_in_screen_bounds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_window_left, PyObject *__pyx_v_window_top, PyObject *__pyx_v_window_width, PyObject *__pyx_v_window_height, PyObject *__pyx_v_monitors_bounds) {
  PyObject *__pyx_v_window_right = NULL;
  PyObject *__pyx_v_window_bottom = NULL;
  PyObject *__pyx_v_monitor_rect = NULL;
  PyObject *__pyx_v_monitor_left = NULL;
  PyObject *__pyx_v_monitor_top = NULL;
  PyObject *__pyx_v_monitor_right = NULL;
  PyObject *__pyx_v_monitor_bottom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_in_screen_bounds", 1);

  /* "ok/Capture.pyx":698
 * 
 * def is_window_in_screen_bounds(window_left, window_top, window_width, window_height, monitors_bounds):
 *     window_right, window_bottom = window_left + window_width, window_top + window_height             # <<<<<<<<<<<<<<
 * 
 *     for monitor_rect in monitors_bounds:
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_window_left, __pyx_v_window_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_window_top, __pyx_v_window_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_window_right = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_window_bottom = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":700
 *     window_right, window_bottom = window_left + window_width, window_top + window_height
 * 
 *     for monitor_rect in monitors_bounds:             # <<<<<<<<<<<<<<
 *         monitor_left, monitor_top, monitor_right, monitor_bottom = monitor_rect
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_monitors_bounds)) || PyTuple_CheckExact(__pyx_v_monitors_bounds)) {
    __pyx_t_2 = __pyx_v_monitors_bounds; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_monitors_bounds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 700, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 700, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 700, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 700, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 700, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 700, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_monitor_rect, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":701
 * 
 *     for monitor_rect in monitors_bounds:
 *         monitor_left, monitor_top, monitor_right, monitor_bottom = monitor_rect             # <<<<<<<<<<<<<<
 * 
 *         # Check if the window is within the monitor bounds
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_monitor_rect))) || (PyList_CheckExact(__pyx_v_monitor_rect))) {
      PyObject* sequence = __pyx_v_monitor_rect;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 701, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 701, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      __pyx_t_8 = PyObject_GetIter(__pyx_v_monitor_rect); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 701, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 701, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_monitor_left, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_monitor_top, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_monitor_right, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_monitor_bottom, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ok/Capture.pyx":704
 * 
 *         # Check if the window is within the monitor bounds
 *         if (window_left >= monitor_left and window_top >= monitor_top and             # <<<<<<<<<<<<<<
 *                 window_right <= monitor_right and window_bottom <= monitor_bottom):
 *             return True
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_window_left, __pyx_v_monitor_left, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_window_top, __pyx_v_monitor_top, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L8_bool_binop_done;
    }

    /* "ok/Capture.pyx":705
 *         # Check if the window is within the monitor bounds
 *         if (window_left >= monitor_left and window_top >= monitor_top and
 *                 window_right <= monitor_right and window_bottom <= monitor_bottom):             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_window_right, __pyx_v_monitor_right, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 705, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_window_bottom, __pyx_v_monitor_bottom, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 705, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_t_11;
    __pyx_L8_bool_binop_done:;

    /* "ok/Capture.pyx":704
 * 
 *         # Check if the window is within the monitor bounds
 *         if (window_left >= monitor_left and window_top >= monitor_top and             # <<<<<<<<<<<<<<
 *                 window_right <= monitor_right and window_bottom <= monitor_bottom):
 *             return True
 */
    if (__pyx_t_10) {

      /* "ok/Capture.pyx":706
 *         if (window_left >= monitor_left and window_top >= monitor_top and
 *                 window_right <= monitor_right and window_bottom <= monitor_bottom):
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "ok/Capture.pyx":704
 * 
 *         # Check if the window is within the monitor bounds
 *         if (window_left >= monitor_left and window_top >= monitor_top and             # <<<<<<<<<<<<<<
 *                 window_right <= monitor_right and window_bottom <= monitor_bottom):
 *             return True
 */
    }

    /* "ok/Capture.pyx":700
 *     window_right, window_bottom = window_left + window_width, window_top + window_height
 * 
 *     for monitor_rect in monitors_bounds:             # <<<<<<<<<<<<<<
 *         monitor_left, monitor_top, monitor_right, monitor_bottom = monitor_rect
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":708
 *             return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "ok/Capture.pyx":697
 *     return monitors_bounds
 * 
 * def is_window_in_screen_bounds(window_left, window_top, window_width, window_height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     window_right, window_bottom = window_left + window_width, window_top + window_height
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.is_window_in_screen_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_window_right);
  __Pyx_XDECREF(__pyx_v_window_bottom);
  __Pyx_XDECREF(__pyx_v_monitor_rect);
  __Pyx_XDECREF(__pyx_v_monitor_left);
  __Pyx_XDECREF(__pyx_v_monitor_top);
  __Pyx_XDECREF(__pyx_v_monitor_right);
  __Pyx_XDECREF(__pyx_v_monitor_bottom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":710
 *     return False
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):             # <<<<<<<<<<<<<<
 *     results = []
 *     if exe_name is None and title is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_15find_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_15find_hwnd = {"find_hwnd", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_15find_hwnd, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_15find_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_exe_name = 0;
  PyObject *__pyx_v_frame_width = 0;
  PyObject *__pyx_v_frame_height = 0;
  PyObject *__pyx_v_player_id = 0;
  PyObject *__pyx_v_class_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_hwnd (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_title,&__pyx_n_s_exe_name,&__pyx_n_s_frame_width,&__pyx_n_s_frame_height,&__pyx_n_s_player_id,&__pyx_n_s_class_name,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_neg_1)));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_title)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exe_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_hwnd", 0, 4, 6, 1); __PYX_ERR(0, 710, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_hwnd", 0, 4, 6, 2); __PYX_ERR(0, 710, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_height)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_hwnd", 0, 4, 6, 3); __PYX_ERR(0, 710, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player_id);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_class_name);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "find_hwnd") < 0)) __PYX_ERR(0, 710, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_title = values[0];
    __pyx_v_exe_name = values[1];
    __pyx_v_frame_width = values[2];
    __pyx_v_frame_height = values[3];
    __pyx_v_player_id = values[4];
    __pyx_v_class_name = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_hwnd", 0, 4, 6, __pyx_nargs); __PYX_ERR(0, 710, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.find_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_14find_hwnd(__pyx_self, __pyx_v_title, __pyx_v_exe_name, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_player_id, __pyx_v_class_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":716
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 * 
 *     def callback(hwnd, lParam):             # <<<<<<<<<<<<<<
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_9find_hwnd_1callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_9find_hwnd_1callback = {"callback", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_9find_hwnd_1callback, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_9find_hwnd_1callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  CYTHON_UNUSED PyObject *__pyx_v_lParam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("callback (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,&__pyx_n_s_lParam,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lParam)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("callback", 1, 2, 2, 1); __PYX_ERR(0, 716, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "callback") < 0)) __PYX_ERR(0, 716, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_hwnd = values[0];
    __pyx_v_lParam = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("callback", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 716, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.find_hwnd.callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_9find_hwnd_callback(__pyx_self, __pyx_v_hwnd, __pyx_v_lParam);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_9find_hwnd_callback(PyObject *__pyx_self, PyObject *__pyx_v_hwnd, CYTHON_UNUSED PyObject *__pyx_v_lParam) {
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *__pyx_cur_scope;
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *__pyx_outer_scope;
  PyObject *__pyx_v_text = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_full_path = NULL;
  PyObject *__pyx_v_cmdline = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_scaling = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("callback", 1);
  __pyx_outer_scope = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ok/Capture.pyx":717
 * 
 *     def callback(hwnd, lParam):
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):             # <<<<<<<<<<<<<<
 *             text = win32gui.GetWindowText(hwnd)
 *             if title:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_IsWindow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_IsWindowEnabled); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_hwnd};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_IsWindowVisible); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":718
 *     def callback(hwnd, lParam):
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)             # <<<<<<<<<<<<<<
 *             if title:
 *                 if isinstance(title, str):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GetWindowText); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_hwnd};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_text = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":719
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)
 *             if title:             # <<<<<<<<<<<<<<
 *                 if isinstance(title, str):
 *                     if title != text:
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_title)) { __Pyx_RaiseClosureNameError("title"); __PYX_ERR(0, 719, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_title); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 719, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":720
 *             text = win32gui.GetWindowText(hwnd)
 *             if title:
 *                 if isinstance(title, str):             # <<<<<<<<<<<<<<
 *                     if title != text:
 *                         return True
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_title)) { __Pyx_RaiseClosureNameError("title"); __PYX_ERR(0, 720, __pyx_L1_error) }
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_title;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = PyString_Check(__pyx_t_2); 
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ok/Capture.pyx":721
 *             if title:
 *                 if isinstance(title, str):
 *                     if title != text:             # <<<<<<<<<<<<<<
 *                         return True
 *                 elif not re.search(title, text):
 */
        if (unlikely(!__pyx_cur_scope->__pyx_v_title)) { __Pyx_RaiseClosureNameError("title"); __PYX_ERR(0, 721, __pyx_L1_error) }
        __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_title, __pyx_v_text, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_1) {

          /* "ok/Capture.pyx":722
 *                 if isinstance(title, str):
 *                     if title != text:
 *                         return True             # <<<<<<<<<<<<<<
 *                 elif not re.search(title, text):
 *                     return True
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_True);
          __pyx_r = Py_True;
          goto __pyx_L0;

          /* "ok/Capture.pyx":721
 *             if title:
 *                 if isinstance(title, str):
 *                     if title != text:             # <<<<<<<<<<<<<<
 *                         return True
 *                 elif not re.search(title, text):
 */
        }

        /* "ok/Capture.pyx":720
 *             text = win32gui.GetWindowText(hwnd)
 *             if title:
 *                 if isinstance(title, str):             # <<<<<<<<<<<<<<
 *                     if title != text:
 *                         return True
 */
        goto __pyx_L8;
      }

      /* "ok/Capture.pyx":723
 *                     if title != text:
 *                         return True
 *                 elif not re.search(title, text):             # <<<<<<<<<<<<<<
 *                     return True
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_re); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_search); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_v_title)) { __Pyx_RaiseClosureNameError("title"); __PYX_ERR(0, 723, __pyx_L1_error) }
      __pyx_t_3 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_title, __pyx_v_text};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = (!__pyx_t_1);
      if (__pyx_t_6) {

        /* "ok/Capture.pyx":724
 *                         return True
 *                 elif not re.search(title, text):
 *                     return True             # <<<<<<<<<<<<<<
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)
 *             if not name:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "ok/Capture.pyx":723
 *                     if title != text:
 *                         return True
 *                 elif not re.search(title, text):             # <<<<<<<<<<<<<<
 *                     return True
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)
 */
      }
      __pyx_L8:;

      /* "ok/Capture.pyx":719
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)
 *             if title:             # <<<<<<<<<<<<<<
 *                 if isinstance(title, str):
 *                     if title != text:
 */
    }

    /* "ok/Capture.pyx":725
 *                 elif not re.search(title, text):
 *                     return True
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)             # <<<<<<<<<<<<<<
 *             if not name:
 *                 return True
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_exe_by_hwnd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 725, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_3 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 725, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __pyx_v_name = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_full_path = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_cmdline = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ok/Capture.pyx":726
 *                     return True
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)
 *             if not name:             # <<<<<<<<<<<<<<
 *                 return True
 *             x, y, _, _, width, height, scaling = get_window_bounds(
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_name); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 726, __pyx_L1_error)
    __pyx_t_1 = (!__pyx_t_6);
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":727
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)
 *             if not name:
 *                 return True             # <<<<<<<<<<<<<<
 *             x, y, _, _, width, height, scaling = get_window_bounds(
 *                 hwnd)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "ok/Capture.pyx":726
 *                     return True
 *             name, full_path, cmdline = get_exe_by_hwnd(hwnd)
 *             if not name:             # <<<<<<<<<<<<<<
 *                 return True
 *             x, y, _, _, width, height, scaling = get_window_bounds(
 */
    }

    /* "ok/Capture.pyx":728
 *             if not name:
 *                 return True
 *             x, y, _, _, width, height, scaling = get_window_bounds(             # <<<<<<<<<<<<<<
 *                 hwnd)
 *             ret = (hwnd, full_path, width, height, x, y, text)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_get_window_bounds); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "ok/Capture.pyx":729
 *                 return True
 *             x, y, _, _, width, height, scaling = get_window_bounds(
 *                 hwnd)             # <<<<<<<<<<<<<<
 *             ret = (hwnd, full_path, width, height, x, y, text)
 *             if exe_name:
 */
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 7)) {
        if (size > 7) __Pyx_RaiseTooManyValuesError(7);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 728, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 6); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 6); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[7] = {&__pyx_t_7,&__pyx_t_3,&__pyx_t_4,&__pyx_t_8,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12};
        for (i=0; i < 7; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 728, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[7] = {&__pyx_t_7,&__pyx_t_3,&__pyx_t_4,&__pyx_t_8,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12};
      __pyx_t_13 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13);
      for (index=0; index < 7; index++) {
        PyObject* item = __pyx_t_9(__pyx_t_13); if (unlikely(!item)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_13), 7) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L14_unpacking_done;
      __pyx_L13_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 728, __pyx_L1_error)
      __pyx_L14_unpacking_done:;
    }

    /* "ok/Capture.pyx":728
 *             if not name:
 *                 return True
 *             x, y, _, _, width, height, scaling = get_window_bounds(             # <<<<<<<<<<<<<<
 *                 hwnd)
 *             ret = (hwnd, full_path, width, height, x, y, text)
 */
    __pyx_v_x = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_v_y = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v__ = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_width = __pyx_t_10;
    __pyx_t_10 = 0;
    __pyx_v_height = __pyx_t_11;
    __pyx_t_11 = 0;
    __pyx_v_scaling = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "ok/Capture.pyx":730
 *             x, y, _, _, width, height, scaling = get_window_bounds(
 *                 hwnd)
 *             ret = (hwnd, full_path, width, height, x, y, text)             # <<<<<<<<<<<<<<
 *             if exe_name:
 *                 if name != exe_name and exe_name != full_path:
 */
    __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_hwnd);
    __Pyx_GIVEREF(__pyx_v_hwnd);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_hwnd)) __PYX_ERR(0, 730, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_full_path);
    __Pyx_GIVEREF(__pyx_v_full_path);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_full_path)) __PYX_ERR(0, 730, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_width);
    __Pyx_GIVEREF(__pyx_v_width);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_width)) __PYX_ERR(0, 730, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_height);
    __Pyx_GIVEREF(__pyx_v_height);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_height)) __PYX_ERR(0, 730, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_x)) __PYX_ERR(0, 730, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_y)) __PYX_ERR(0, 730, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_text);
    __Pyx_GIVEREF(__pyx_v_text);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_v_text)) __PYX_ERR(0, 730, __pyx_L1_error);
    __pyx_v_ret = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":731
 *                 hwnd)
 *             ret = (hwnd, full_path, width, height, x, y, text)
 *             if exe_name:             # <<<<<<<<<<<<<<
 *                 if name != exe_name and exe_name != full_path:
 *                     return True
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_exe_name)) { __Pyx_RaiseClosureNameError("exe_name"); __PYX_ERR(0, 731, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_exe_name); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 731, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":732
 *             ret = (hwnd, full_path, width, height, x, y, text)
 *             if exe_name:
 *                 if name != exe_name and exe_name != full_path:             # <<<<<<<<<<<<<<
 *                     return True
 *             if player_id != -1:
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_exe_name)) { __Pyx_RaiseClosureNameError("exe_name"); __PYX_ERR(0, 732, __pyx_L1_error) }
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_name, __pyx_cur_scope->__pyx_v_exe_name, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 732, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L17_bool_binop_done;
      }
      if (unlikely(!__pyx_cur_scope->__pyx_v_exe_name)) { __Pyx_RaiseClosureNameError("exe_name"); __PYX_ERR(0, 732, __pyx_L1_error) }
      __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_exe_name, __pyx_v_full_path, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 732, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __pyx_t_6;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_1) {

        /* "ok/Capture.pyx":733
 *             if exe_name:
 *                 if name != exe_name and exe_name != full_path:
 *                     return True             # <<<<<<<<<<<<<<
 *             if player_id != -1:
 *                 if player_id != get_player_id_from_cmdline(cmdline):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "ok/Capture.pyx":732
 *             ret = (hwnd, full_path, width, height, x, y, text)
 *             if exe_name:
 *                 if name != exe_name and exe_name != full_path:             # <<<<<<<<<<<<<<
 *                     return True
 *             if player_id != -1:
 */
      }

      /* "ok/Capture.pyx":731
 *                 hwnd)
 *             ret = (hwnd, full_path, width, height, x, y, text)
 *             if exe_name:             # <<<<<<<<<<<<<<
 *                 if name != exe_name and exe_name != full_path:
 *                     return True
 */
    }

    /* "ok/Capture.pyx":734
 *                 if name != exe_name and exe_name != full_path:
 *                     return True
 *             if player_id != -1:             # <<<<<<<<<<<<<<
 *                 if player_id != get_player_id_from_cmdline(cmdline):
 *                     logger.debug(
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_player_id)) { __Pyx_RaiseClosureNameError("player_id"); __PYX_ERR(0, 734, __pyx_L1_error) }
    __pyx_t_1 = (__Pyx_PyInt_BoolNeObjC(__pyx_cur_scope->__pyx_v_player_id, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 734, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":735
 *                     return True
 *             if player_id != -1:
 *                 if player_id != get_player_id_from_cmdline(cmdline):             # <<<<<<<<<<<<<<
 *                     logger.debug(
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_player_id)) { __Pyx_RaiseClosureNameError("player_id"); __PYX_ERR(0, 735, __pyx_L1_error) }
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_get_player_id_from_cmdline); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_cmdline};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __pyx_t_12 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_player_id, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_1) {

        /* "ok/Capture.pyx":736
 *             if player_id != -1:
 *                 if player_id != get_player_id_from_cmdline(cmdline):
 *                     logger.debug(             # <<<<<<<<<<<<<<
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')
 *                     return True
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":737
 *                 if player_id != get_player_id_from_cmdline(cmdline):
 *                     logger.debug(
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')             # <<<<<<<<<<<<<<
 *                     return True
 *             if class_name is not None:
 */
        __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_player_id_check_failed_cmdline);
        __pyx_t_14 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_player_id_check_failed_cmdline);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_player_id_check_failed_cmdline);
        __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_v_cmdline, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_kp_u__11);
        __pyx_t_14 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__11);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__11);
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_get_player_id_from_cmdline); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_cmdline};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u__17);
        __pyx_t_14 += 4;
        __Pyx_GIVEREF(__pyx_kp_u__17);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__17);
        if (unlikely(!__pyx_cur_scope->__pyx_v_player_id)) { __Pyx_RaiseClosureNameError("player_id"); __PYX_ERR(0, 737, __pyx_L1_error) }
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_player_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_2, 6, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_8};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 736, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "ok/Capture.pyx":738
 *                     logger.debug(
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')
 *                     return True             # <<<<<<<<<<<<<<
 *             if class_name is not None:
 *                 if win32gui.GetClassName(hwnd) != class_name:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "ok/Capture.pyx":735
 *                     return True
 *             if player_id != -1:
 *                 if player_id != get_player_id_from_cmdline(cmdline):             # <<<<<<<<<<<<<<
 *                     logger.debug(
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')
 */
      }

      /* "ok/Capture.pyx":734
 *                 if name != exe_name and exe_name != full_path:
 *                     return True
 *             if player_id != -1:             # <<<<<<<<<<<<<<
 *                 if player_id != get_player_id_from_cmdline(cmdline):
 *                     logger.debug(
 */
    }

    /* "ok/Capture.pyx":739
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')
 *                     return True
 *             if class_name is not None:             # <<<<<<<<<<<<<<
 *                 if win32gui.GetClassName(hwnd) != class_name:
 *                     return True
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_class_name)) { __Pyx_RaiseClosureNameError("class_name"); __PYX_ERR(0, 739, __pyx_L1_error) }
    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_class_name != Py_None);
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":740
 *                     return True
 *             if class_name is not None:
 *                 if win32gui.GetClassName(hwnd) != class_name:             # <<<<<<<<<<<<<<
 *                     return True
 *             results.append(ret)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_GetClassName); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_hwnd};
        __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (unlikely(!__pyx_cur_scope->__pyx_v_class_name)) { __Pyx_RaiseClosureNameError("class_name"); __PYX_ERR(0, 740, __pyx_L1_error) }
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_12, __pyx_cur_scope->__pyx_v_class_name, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_1) {

        /* "ok/Capture.pyx":741
 *             if class_name is not None:
 *                 if win32gui.GetClassName(hwnd) != class_name:
 *                     return True             # <<<<<<<<<<<<<<
 *             results.append(ret)
 *         return True
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "ok/Capture.pyx":740
 *                     return True
 *             if class_name is not None:
 *                 if win32gui.GetClassName(hwnd) != class_name:             # <<<<<<<<<<<<<<
 *                     return True
 *             results.append(ret)
 */
      }

      /* "ok/Capture.pyx":739
 *                         f'player id check failed,cmdline {cmdline} {get_player_id_from_cmdline(cmdline)} != {player_id}')
 *                     return True
 *             if class_name is not None:             # <<<<<<<<<<<<<<
 *                 if win32gui.GetClassName(hwnd) != class_name:
 *                     return True
 */
    }

    /* "ok/Capture.pyx":742
 *                 if win32gui.GetClassName(hwnd) != class_name:
 *                     return True
 *             results.append(ret)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_results)) { __Pyx_RaiseClosureNameError("results"); __PYX_ERR(0, 742, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_results == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 742, __pyx_L1_error)
    }
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_results, __pyx_v_ret); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 742, __pyx_L1_error)

    /* "ok/Capture.pyx":717
 * 
 *     def callback(hwnd, lParam):
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):             # <<<<<<<<<<<<<<
 *             text = win32gui.GetWindowText(hwnd)
 *             if title:
 */
  }

  /* "ok/Capture.pyx":743
 *                     return True
 *             results.append(ret)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     win32gui.EnumWindows(callback, None)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":716
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 * 
 *     def callback(hwnd, lParam):             # <<<<<<<<<<<<<<
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.find_hwnd.callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_full_path);
  __Pyx_XDECREF(__pyx_v_cmdline);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_scaling);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":710
 *     return False
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):             # <<<<<<<<<<<<<<
 *     results = []
 *     if exe_name is None and title is None:
 */

static PyObject *__pyx_pf_2ok_7Capture_14find_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_exe_name, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_class_name) {
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *__pyx_cur_scope;
  PyObject *__pyx_v_frame_aspect_ratio = NULL;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_biggest = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_x_offset = NULL;
  PyObject *__pyx_v_y_offset = NULL;
  PyObject *__pyx_v_real_width = NULL;
  PyObject *__pyx_v_real_height = NULL;
  PyObject *__pyx_v_matching_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_hwnd", 0);
  __pyx_cur_scope = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *)__pyx_tp_new_2ok_7Capture___pyx_scope_struct__find_hwnd(__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 710, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_title = __pyx_v_title;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_title);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_title);
  __pyx_cur_scope->__pyx_v_exe_name = __pyx_v_exe_name;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_exe_name);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_exe_name);
  __pyx_cur_scope->__pyx_v_player_id = __pyx_v_player_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_player_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_player_id);
  __pyx_cur_scope->__pyx_v_class_name = __pyx_v_class_name;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_class_name);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_class_name);

  /* "ok/Capture.pyx":711
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):
 *     results = []             # <<<<<<<<<<<<<<
 *     if exe_name is None and title is None:
 *         return None, None, None, 0, 0, 0, 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":712
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):
 *     results = []
 *     if exe_name is None and title is None:             # <<<<<<<<<<<<<<
 *         return None, None, None, 0, 0, 0, 0
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 */
  __pyx_t_3 = (__pyx_cur_scope->__pyx_v_exe_name == Py_None);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_cur_scope->__pyx_v_title == Py_None);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":713
 *     results = []
 *     if exe_name is None and title is None:
 *         return None, None, None, 0, 0, 0, 0             # <<<<<<<<<<<<<<
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__18);
    __pyx_r = __pyx_tuple__18;
    goto __pyx_L0;

    /* "ok/Capture.pyx":712
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):
 *     results = []
 *     if exe_name is None and title is None:             # <<<<<<<<<<<<<<
 *         return None, None, None, 0, 0, 0, 0
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 */
  }

  /* "ok/Capture.pyx":714
 *     if exe_name is None and title is None:
 *         return None, None, None, 0, 0, 0, 0
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0             # <<<<<<<<<<<<<<
 * 
 *     def callback(hwnd, lParam):
 */
  __pyx_t_2 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_frame_height, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 714, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_frame_width, __pyx_v_frame_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
  }
  __pyx_v_frame_aspect_ratio = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":716
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 * 
 *     def callback(hwnd, lParam):             # <<<<<<<<<<<<<<
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_9find_hwnd_1callback, 0, __pyx_n_s_find_hwnd_locals_callback, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_callback = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":745
 *         return True
 * 
 *     win32gui.EnumWindows(callback, None)             # <<<<<<<<<<<<<<
 *     if len(results) > 0:
 *         logger.info(f'find_hwnd {results}')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_EnumWindows); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_callback, Py_None};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":746
 * 
 *     win32gui.EnumWindows(callback, None)
 *     if len(results) > 0:             # <<<<<<<<<<<<<<
 *         logger.info(f'find_hwnd {results}')
 *         biggest = None
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_results;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_7 > 0);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":747
 *     win32gui.EnumWindows(callback, None)
 *     if len(results) > 0:
 *         logger.info(f'find_hwnd {results}')             # <<<<<<<<<<<<<<
 *         biggest = None
 *         for result in results:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_results, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_find_hwnd_2, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":748
 *     if len(results) > 0:
 *         logger.info(f'find_hwnd {results}')
 *         biggest = None             # <<<<<<<<<<<<<<
 *         for result in results:
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_biggest = Py_None;

    /* "ok/Capture.pyx":749
 *         logger.info(f'find_hwnd {results}')
 *         biggest = None
 *         for result in results:             # <<<<<<<<<<<<<<
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:
 *                 biggest = result
 */
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_results; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 749, __pyx_L1_error)
        #endif
        if (__pyx_t_7 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 749, __pyx_L1_error)
      #else
      __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":750
 *         biggest = None
 *         for result in results:
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:             # <<<<<<<<<<<<<<
 *                 biggest = result
 *         x_offset = 0
 */
      __pyx_t_3 = (__pyx_v_biggest == Py_None);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_result, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_result, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_biggest, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biggest, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = PyNumber_Multiply(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_9, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __pyx_t_3;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":751
 *         for result in results:
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:
 *                 biggest = result             # <<<<<<<<<<<<<<
 *         x_offset = 0
 *         y_offset = 0
 */
        __Pyx_INCREF(__pyx_v_result);
        __Pyx_DECREF_SET(__pyx_v_biggest, __pyx_v_result);

        /* "ok/Capture.pyx":750
 *         biggest = None
 *         for result in results:
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:             # <<<<<<<<<<<<<<
 *                 biggest = result
 *         x_offset = 0
 */
      }

      /* "ok/Capture.pyx":749
 *         logger.info(f'find_hwnd {results}')
 *         biggest = None
 *         for result in results:             # <<<<<<<<<<<<<<
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:
 *                 biggest = result
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":752
 *             if biggest is None or (result[2] * result[3]) > biggest[2] * biggest[3]:
 *                 biggest = result
 *         x_offset = 0             # <<<<<<<<<<<<<<
 *         y_offset = 0
 *         real_width = 0
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_x_offset = __pyx_int_0;

    /* "ok/Capture.pyx":753
 *                 biggest = result
 *         x_offset = 0
 *         y_offset = 0             # <<<<<<<<<<<<<<
 *         real_width = 0
 *         real_height = 0
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_y_offset = __pyx_int_0;

    /* "ok/Capture.pyx":754
 *         x_offset = 0
 *         y_offset = 0
 *         real_width = 0             # <<<<<<<<<<<<<<
 *         real_height = 0
 *         if frame_aspect_ratio != 0:
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_real_width = __pyx_int_0;

    /* "ok/Capture.pyx":755
 *         y_offset = 0
 *         real_width = 0
 *         real_height = 0             # <<<<<<<<<<<<<<
 *         if frame_aspect_ratio != 0:
 *             real_width, real_height = biggest[2], biggest[3]
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_real_height = __pyx_int_0;

    /* "ok/Capture.pyx":756
 *         real_width = 0
 *         real_height = 0
 *         if frame_aspect_ratio != 0:             # <<<<<<<<<<<<<<
 *             real_width, real_height = biggest[2], biggest[3]
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)
 */
    __pyx_t_2 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_frame_aspect_ratio, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 756, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":757
 *         real_height = 0
 *         if frame_aspect_ratio != 0:
 *             real_width, real_height = biggest[2], biggest[3]             # <<<<<<<<<<<<<<
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)
 *             if matching_child is not None:
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_biggest, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biggest, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_real_width, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_real_height, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":758
 *         if frame_aspect_ratio != 0:
 *             real_width, real_height = biggest[2], biggest[3]
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)             # <<<<<<<<<<<<<<
 *             if matching_child is not None:
 *                 x_offset, y_offset, real_width, real_height = matching_child
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_enum_child_windows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_v_biggest, __pyx_v_frame_aspect_ratio};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_v_matching_child = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":759
 *             real_width, real_height = biggest[2], biggest[3]
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)
 *             if matching_child is not None:             # <<<<<<<<<<<<<<
 *                 x_offset, y_offset, real_width, real_height = matching_child
 *             logger.info(
 */
      __pyx_t_2 = (__pyx_v_matching_child != Py_None);
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":760
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)
 *             if matching_child is not None:
 *                 x_offset, y_offset, real_width, real_height = matching_child             # <<<<<<<<<<<<<<
 *             logger.info(
 *                 f'find_hwnd {frame_width, frame_height} {biggest} {x_offset, y_offset, real_width, real_height}')
 */
        if ((likely(PyTuple_CheckExact(__pyx_v_matching_child))) || (PyList_CheckExact(__pyx_v_matching_child))) {
          PyObject* sequence = __pyx_v_matching_child;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 4)) {
            if (size > 4) __Pyx_RaiseTooManyValuesError(4);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 760, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
          } else {
            __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
          }
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_5);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_1,&__pyx_t_9,&__pyx_t_5};
            for (i=0; i < 4; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 760, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_1,&__pyx_t_9,&__pyx_t_5};
          __pyx_t_8 = PyObject_GetIter(__pyx_v_matching_child); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
          for (index=0; index < 4; index++) {
            PyObject* item = __pyx_t_10(__pyx_t_8); if (unlikely(!item)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_8), 4) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
          __pyx_t_10 = NULL;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L16_unpacking_done;
          __pyx_L15_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_10 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 760, __pyx_L1_error)
          __pyx_L16_unpacking_done:;
        }
        __Pyx_DECREF_SET(__pyx_v_x_offset, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_y_offset, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_real_width, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_real_height, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "ok/Capture.pyx":759
 *             real_width, real_height = biggest[2], biggest[3]
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)
 *             if matching_child is not None:             # <<<<<<<<<<<<<<
 *                 x_offset, y_offset, real_width, real_height = matching_child
 *             logger.info(
 */
      }

      /* "ok/Capture.pyx":761
 *             if matching_child is not None:
 *                 x_offset, y_offset, real_width, real_height = matching_child
 *             logger.info(             # <<<<<<<<<<<<<<
 *                 f'find_hwnd {frame_width, frame_height} {biggest} {x_offset, y_offset, real_width, real_height}')
 *         return biggest[6], biggest[0], biggest[1], x_offset, y_offset, real_width, real_height
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ok/Capture.pyx":762
 *                 x_offset, y_offset, real_width, real_height = matching_child
 *             logger.info(
 *                 f'find_hwnd {frame_width, frame_height} {biggest} {x_offset, y_offset, real_width, real_height}')             # <<<<<<<<<<<<<<
 *         return biggest[6], biggest[0], biggest[1], x_offset, y_offset, real_width, real_height
 * 
 */
      __pyx_t_9 = PyTuple_New(6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_find_hwnd_2);
      __pyx_t_7 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_find_hwnd_2);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_find_hwnd_2);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_frame_width);
      __Pyx_GIVEREF(__pyx_v_frame_width);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_frame_width)) __PYX_ERR(0, 762, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_frame_height);
      __Pyx_GIVEREF(__pyx_v_frame_height);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_frame_height)) __PYX_ERR(0, 762, __pyx_L1_error);
      __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_11;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u__11);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__11);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u__11);
      __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_biggest, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_11;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u__11);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__11);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_kp_u__11);
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_x_offset);
      __Pyx_GIVEREF(__pyx_v_x_offset);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_x_offset)) __PYX_ERR(0, 762, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_y_offset);
      __Pyx_GIVEREF(__pyx_v_y_offset);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_y_offset)) __PYX_ERR(0, 762, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_real_width);
      __Pyx_GIVEREF(__pyx_v_real_width);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_real_width)) __PYX_ERR(0, 762, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_real_height);
      __Pyx_GIVEREF(__pyx_v_real_height);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_real_height)) __PYX_ERR(0, 762, __pyx_L1_error);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_11;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_9, 6, __pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ok/Capture.pyx":756
 *         real_width = 0
 *         real_height = 0
 *         if frame_aspect_ratio != 0:             # <<<<<<<<<<<<<<
 *             real_width, real_height = biggest[2], biggest[3]
 *             matching_child = enum_child_windows(biggest, frame_aspect_ratio)
 */
    }

    /* "ok/Capture.pyx":763
 *             logger.info(
 *                 f'find_hwnd {frame_width, frame_height} {biggest} {x_offset, y_offset, real_width, real_height}')
 *         return biggest[6], biggest[0], biggest[1], x_offset, y_offset, real_width, real_height             # <<<<<<<<<<<<<<
 * 
 *     return None, None, None, 0, 0, 0, 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_biggest, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_biggest, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biggest, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = PyTuple_New(7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5)) __PYX_ERR(0, 763, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_4)) __PYX_ERR(0, 763, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_x_offset);
    __Pyx_GIVEREF(__pyx_v_x_offset);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_v_x_offset)) __PYX_ERR(0, 763, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_y_offset);
    __Pyx_GIVEREF(__pyx_v_y_offset);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_v_y_offset)) __PYX_ERR(0, 763, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_real_width);
    __Pyx_GIVEREF(__pyx_v_real_width);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_v_real_width)) __PYX_ERR(0, 763, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_real_height);
    __Pyx_GIVEREF(__pyx_v_real_height);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_v_real_height)) __PYX_ERR(0, 763, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":746
 * 
 *     win32gui.EnumWindows(callback, None)
 *     if len(results) > 0:             # <<<<<<<<<<<<<<
 *         logger.info(f'find_hwnd {results}')
 *         biggest = None
 */
  }

  /* "ok/Capture.pyx":765
 *         return biggest[6], biggest[0], biggest[1], x_offset, y_offset, real_width, real_height
 * 
 *     return None, None, None, 0, 0, 0, 0             # <<<<<<<<<<<<<<
 * 
 * def get_mute_state(hwnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__18);
  __pyx_r = __pyx_tuple__18;
  goto __pyx_L0;

  /* "ok/Capture.pyx":710
 *     return False
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):             # <<<<<<<<<<<<<<
 *     results = []
 *     if exe_name is None and title is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ok.Capture.find_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frame_aspect_ratio);
  __Pyx_XDECREF(__pyx_v_callback);
  __Pyx_XDECREF(__pyx_v_biggest);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_x_offset);
  __Pyx_XDECREF(__pyx_v_y_offset);
  __Pyx_XDECREF(__pyx_v_real_width);
  __Pyx_XDECREF(__pyx_v_real_height);
  __Pyx_XDECREF(__pyx_v_matching_child);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":767
 *     return None, None, None, 0, 0, 0, 0
 * 
 * def get_mute_state(hwnd):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_17get_mute_state(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_17get_mute_state = {"get_mute_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17get_mute_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_17get_mute_state(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mute_state (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_mute_state") < 0)) __PYX_ERR(0, 767, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_hwnd = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_mute_state", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 767, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_mute_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_16get_mute_state(__pyx_self, __pyx_v_hwnd);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_16get_mute_state(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd) {
  PyObject *__pyx_v_ISimpleAudioVolume = NULL;
  PyObject *__pyx_v_AudioUtilities = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_sessions = NULL;
  PyObject *__pyx_v_session = NULL;
  PyObject *__pyx_v_volume = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mute_state", 1);

  /* "ok/Capture.pyx":768
 * 
 * def get_mute_state(hwnd):
 *     from pycaw.api.audioclient import ISimpleAudioVolume             # <<<<<<<<<<<<<<
 *     from pycaw.utils import AudioUtilities
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ISimpleAudioVolume);
  __Pyx_GIVEREF(__pyx_n_s_ISimpleAudioVolume);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ISimpleAudioVolume)) __PYX_ERR(0, 768, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycaw_api_audioclient, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ISimpleAudioVolume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ISimpleAudioVolume = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":769
 * def get_mute_state(hwnd):
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities             # <<<<<<<<<<<<<<
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_AudioUtilities);
  __Pyx_GIVEREF(__pyx_n_s_AudioUtilities);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_AudioUtilities)) __PYX_ERR(0, 769, __pyx_L1_error);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycaw_utils, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AudioUtilities); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_AudioUtilities = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":770
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)             # <<<<<<<<<<<<<<
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetWindowThreadProcessId); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 770, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 770, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 770, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_pid = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":771
 *     from pycaw.utils import AudioUtilities
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()             # <<<<<<<<<<<<<<
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_AudioUtilities, __pyx_n_s_GetAllSessions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_sessions = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":772
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:             # <<<<<<<<<<<<<<
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 */
  if (likely(PyList_CheckExact(__pyx_v_sessions)) || PyTuple_CheckExact(__pyx_v_sessions)) {
    __pyx_t_1 = __pyx_v_sessions; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_sessions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 772, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 772, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 772, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 772, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 772, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 772, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_session, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":773
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:             # <<<<<<<<<<<<<<
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             return volume.GetMute()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_session, __pyx_n_s_Process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_session, __pyx_n_s_Process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_pid, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_9) {

      /* "ok/Capture.pyx":774
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)             # <<<<<<<<<<<<<<
 *             return volume.GetMute()
 *     return 0
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_session, __pyx_n_s_ctl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_QueryInterface); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_ISimpleAudioVolume};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_volume = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "ok/Capture.pyx":775
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             return volume.GetMute()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_volume, __pyx_n_s_GetMute); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "ok/Capture.pyx":773
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:             # <<<<<<<<<<<<<<
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             return volume.GetMute()
 */
    }

    /* "ok/Capture.pyx":772
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:             # <<<<<<<<<<<<<<
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":776
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             return volume.GetMute()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * # Function to get the mute state
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":767
 *     return None, None, None, 0, 0, 0, 0
 * 
 * def get_mute_state(hwnd):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.get_mute_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ISimpleAudioVolume);
  __Pyx_XDECREF(__pyx_v_AudioUtilities);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_sessions);
  __Pyx_XDECREF(__pyx_v_session);
  __Pyx_XDECREF(__pyx_v_volume);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":779
 * 
 * # Function to get the mute state
 * def set_mute_state(hwnd, mute):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_19set_mute_state(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_19set_mute_state = {"set_mute_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19set_mute_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_19set_mute_state(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  PyObject *__pyx_v_mute = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mute_state (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,&__pyx_n_s_mute,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mute)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_mute_state", 1, 2, 2, 1); __PYX_ERR(0, 779, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_mute_state") < 0)) __PYX_ERR(0, 779, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_hwnd = values[0];
    __pyx_v_mute = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_mute_state", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 779, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.set_mute_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_18set_mute_state(__pyx_self, __pyx_v_hwnd, __pyx_v_mute);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18set_mute_state(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_mute) {
  PyObject *__pyx_v_ISimpleAudioVolume = NULL;
  PyObject *__pyx_v_AudioUtilities = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_sessions = NULL;
  PyObject *__pyx_v_session = NULL;
  PyObject *__pyx_v_volume = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_mute_state", 1);

  /* "ok/Capture.pyx":780
 * # Function to get the mute state
 * def set_mute_state(hwnd, mute):
 *     from pycaw.api.audioclient import ISimpleAudioVolume             # <<<<<<<<<<<<<<
 *     from pycaw.utils import AudioUtilities
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ISimpleAudioVolume);
  __Pyx_GIVEREF(__pyx_n_s_ISimpleAudioVolume);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ISimpleAudioVolume)) __PYX_ERR(0, 780, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycaw_api_audioclient, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ISimpleAudioVolume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ISimpleAudioVolume = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":781
 * def set_mute_state(hwnd, mute):
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities             # <<<<<<<<<<<<<<
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_AudioUtilities);
  __Pyx_GIVEREF(__pyx_n_s_AudioUtilities);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_AudioUtilities)) __PYX_ERR(0, 781, __pyx_L1_error);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycaw_utils, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AudioUtilities); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_AudioUtilities = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":782
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)             # <<<<<<<<<<<<<<
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetWindowThreadProcessId); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 782, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 782, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_pid = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":783
 *     from pycaw.utils import AudioUtilities
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()             # <<<<<<<<<<<<<<
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_AudioUtilities, __pyx_n_s_GetAllSessions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_sessions = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":784
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:             # <<<<<<<<<<<<<<
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 */
  if (likely(PyList_CheckExact(__pyx_v_sessions)) || PyTuple_CheckExact(__pyx_v_sessions)) {
    __pyx_t_1 = __pyx_v_sessions; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_sessions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 784, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 784, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 784, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 784, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 784, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 784, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_session, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":785
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:             # <<<<<<<<<<<<<<
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             volume.SetMute(mute, None)  # 0 to unmute, 1 to mute
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_session, __pyx_n_s_Process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_session, __pyx_n_s_Process); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_pid, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_9) {

      /* "ok/Capture.pyx":786
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)             # <<<<<<<<<<<<<<
 *             volume.SetMute(mute, None)  # 0 to unmute, 1 to mute
 *             break
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_session, __pyx_n_s_ctl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_QueryInterface); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_ISimpleAudioVolume};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_volume = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "ok/Capture.pyx":787
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             volume.SetMute(mute, None)  # 0 to unmute, 1 to mute             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_volume, __pyx_n_s_SetMute); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_mute, Py_None};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ok/Capture.pyx":788
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             volume.SetMute(mute, None)  # 0 to unmute, 1 to mute
 *             break             # <<<<<<<<<<<<<<
 * 
 * def get_player_id_from_cmdline(cmdline):
 */
      goto __pyx_L6_break;

      /* "ok/Capture.pyx":785
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:
 *         if session.Process and session.Process.pid == pid:             # <<<<<<<<<<<<<<
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 *             volume.SetMute(mute, None)  # 0 to unmute, 1 to mute
 */
    }

    /* "ok/Capture.pyx":784
 *     _, pid = win32process.GetWindowThreadProcessId(hwnd)
 *     sessions = AudioUtilities.GetAllSessions()
 *     for session in sessions:             # <<<<<<<<<<<<<<
 *         if session.Process and session.Process.pid == pid:
 *             volume = session._ctl.QueryInterface(ISimpleAudioVolume)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L10_for_end;
  __pyx_L6_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L10_for_end;
  __pyx_L10_for_end:;

  /* "ok/Capture.pyx":779
 * 
 * # Function to get the mute state
 * def set_mute_state(hwnd, mute):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.set_mute_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ISimpleAudioVolume);
  __Pyx_XDECREF(__pyx_v_AudioUtilities);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_sessions);
  __Pyx_XDECREF(__pyx_v_session);
  __Pyx_XDECREF(__pyx_v_volume);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":790
 *             break
 * 
 * def get_player_id_from_cmdline(cmdline):             # <<<<<<<<<<<<<<
 *     for i in range(len(cmdline)):
 *         if i != 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_21get_player_id_from_cmdline(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_21get_player_id_from_cmdline = {"get_player_id_from_cmdline", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_21get_player_id_from_cmdline, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_21get_player_id_from_cmdline(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cmdline = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_player_id_from_cmdline (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cmdline,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cmdline)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_player_id_from_cmdline") < 0)) __PYX_ERR(0, 790, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cmdline = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_player_id_from_cmdline", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 790, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_player_id_from_cmdline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_20get_player_id_from_cmdline(__pyx_self, __pyx_v_cmdline);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20get_player_id_from_cmdline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cmdline) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_player_id_from_cmdline", 1);

  /* "ok/Capture.pyx":791
 * 
 * def get_player_id_from_cmdline(cmdline):
 *     for i in range(len(cmdline)):             # <<<<<<<<<<<<<<
 *         if i != 0:
 *             if cmdline[i].isdigit():
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_cmdline); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ok/Capture.pyx":792
 * def get_player_id_from_cmdline(cmdline):
 *     for i in range(len(cmdline)):
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             if cmdline[i].isdigit():
 *                 return int(cmdline[i])
 */
    __pyx_t_4 = (__pyx_v_i != 0);
    if (__pyx_t_4) {

      /* "ok/Capture.pyx":793
 *     for i in range(len(cmdline)):
 *         if i != 0:
 *             if cmdline[i].isdigit():             # <<<<<<<<<<<<<<
 *                 return int(cmdline[i])
 *     for i in range(len(cmdline)):
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_cmdline, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isdigit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_4) {

        /* "ok/Capture.pyx":794
 *         if i != 0:
 *             if cmdline[i].isdigit():
 *                 return int(cmdline[i])             # <<<<<<<<<<<<<<
 *     for i in range(len(cmdline)):
 *         if i != 0:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_cmdline, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 794, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_7;
        __pyx_t_7 = 0;
        goto __pyx_L0;

        /* "ok/Capture.pyx":793
 *     for i in range(len(cmdline)):
 *         if i != 0:
 *             if cmdline[i].isdigit():             # <<<<<<<<<<<<<<
 *                 return int(cmdline[i])
 *     for i in range(len(cmdline)):
 */
      }

      /* "ok/Capture.pyx":792
 * def get_player_id_from_cmdline(cmdline):
 *     for i in range(len(cmdline)):
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             if cmdline[i].isdigit():
 *                 return int(cmdline[i])
 */
    }
  }

  /* "ok/Capture.pyx":795
 *             if cmdline[i].isdigit():
 *                 return int(cmdline[i])
 *     for i in range(len(cmdline)):             # <<<<<<<<<<<<<<
 *         if i != 0:
 *             value = re.search(r'index=(\d+)', cmdline[i])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_cmdline); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ok/Capture.pyx":796
 *                 return int(cmdline[i])
 *     for i in range(len(cmdline)):
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             value = re.search(r'index=(\d+)', cmdline[i])
 *             # Return the value if it exists, otherwise return None
 */
    __pyx_t_4 = (__pyx_v_i != 0);
    if (__pyx_t_4) {

      /* "ok/Capture.pyx":797
 *     for i in range(len(cmdline)):
 *         if i != 0:
 *             value = re.search(r'index=(\d+)', cmdline[i])             # <<<<<<<<<<<<<<
 *             # Return the value if it exists, otherwise return None
 *             if value is not None:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_re); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_search); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_cmdline, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_kp_s_index_d, __pyx_t_5};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 797, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ok/Capture.pyx":799
 *             value = re.search(r'index=(\d+)', cmdline[i])
 *             # Return the value if it exists, otherwise return None
 *             if value is not None:             # <<<<<<<<<<<<<<
 *                 return int(value.group(1))
 *     return 0
 */
      __pyx_t_4 = (__pyx_v_value != Py_None);
      if (__pyx_t_4) {

        /* "ok/Capture.pyx":800
 *             # Return the value if it exists, otherwise return None
 *             if value is not None:
 *                 return int(value.group(1))             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_group); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_int_1};
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_r = __pyx_t_6;
        __pyx_t_6 = 0;
        goto __pyx_L0;

        /* "ok/Capture.pyx":799
 *             value = re.search(r'index=(\d+)', cmdline[i])
 *             # Return the value if it exists, otherwise return None
 *             if value is not None:             # <<<<<<<<<<<<<<
 *                 return int(value.group(1))
 *     return 0
 */
      }

      /* "ok/Capture.pyx":796
 *                 return int(cmdline[i])
 *     for i in range(len(cmdline)):
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             value = re.search(r'index=(\d+)', cmdline[i])
 *             # Return the value if it exists, otherwise return None
 */
    }
  }

  /* "ok/Capture.pyx":801
 *             if value is not None:
 *                 return int(value.group(1))
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":790
 *             break
 * 
 * def get_player_id_from_cmdline(cmdline):             # <<<<<<<<<<<<<<
 *     for i in range(len(cmdline)):
 *         if i != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ok.Capture.get_player_id_from_cmdline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":803
 *     return 0
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):             # <<<<<<<<<<<<<<
 *     ratio_match = []
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_23enum_child_windows(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_23enum_child_windows = {"enum_child_windows", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_23enum_child_windows, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_23enum_child_windows(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_biggest = 0;
  PyObject *__pyx_v_frame_aspect_ratio = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enum_child_windows (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_biggest,&__pyx_n_s_frame_aspect_ratio,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_biggest)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_aspect_ratio)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("enum_child_windows", 1, 2, 2, 1); __PYX_ERR(0, 803, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "enum_child_windows") < 0)) __PYX_ERR(0, 803, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_biggest = values[0];
    __pyx_v_frame_aspect_ratio = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enum_child_windows", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 803, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.enum_child_windows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_22enum_child_windows(__pyx_self, __pyx_v_biggest, __pyx_v_frame_aspect_ratio);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":810
 *     """
 * 
 *     def child_callback(hwnd, _):             # <<<<<<<<<<<<<<
 *         visible = win32gui.IsWindowVisible(hwnd)
 *         parent = win32gui.GetParent(hwnd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_18enum_child_windows_1child_callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_18enum_child_windows_1child_callback = {"child_callback", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18enum_child_windows_1child_callback, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_18enum_child_windows_1child_callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  CYTHON_UNUSED PyObject *__pyx_v__ = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("child_callback (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,&__pyx_n_s__7,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s__7)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("child_callback", 1, 2, 2, 1); __PYX_ERR(0, 810, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "child_callback") < 0)) __PYX_ERR(0, 810, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_hwnd = values[0];
    __pyx_v__ = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("child_callback", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 810, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.enum_child_windows.child_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_18enum_child_windows_child_callback(__pyx_self, __pyx_v_hwnd, __pyx_v__);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18enum_child_windows_child_callback(PyObject *__pyx_self, PyObject *__pyx_v_hwnd, CYTHON_UNUSED PyObject *__pyx_v__) {
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *__pyx_cur_scope;
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *__pyx_outer_scope;
  PyObject *__pyx_v_visible = NULL;
  PyObject *__pyx_v_parent = NULL;
  PyObject *__pyx_v_rect = NULL;
  PyObject *__pyx_v_real_width = NULL;
  PyObject *__pyx_v_real_height = NULL;
  PyObject *__pyx_v_ratio = NULL;
  PyObject *__pyx_v_difference = NULL;
  PyObject *__pyx_v_support = NULL;
  PyObject *__pyx_v_percent = NULL;
  PyObject *__pyx_v_x_offset = NULL;
  PyObject *__pyx_v_y_offset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("child_callback", 1);
  __pyx_outer_scope = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ok/Capture.pyx":811
 * 
 *     def child_callback(hwnd, _):
 *         visible = win32gui.IsWindowVisible(hwnd)             # <<<<<<<<<<<<<<
 *         parent = win32gui.GetParent(hwnd)
 *         rect = win32gui.GetWindowRect(hwnd)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsWindowVisible); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_visible = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":812
 *     def child_callback(hwnd, _):
 *         visible = win32gui.IsWindowVisible(hwnd)
 *         parent = win32gui.GetParent(hwnd)             # <<<<<<<<<<<<<<
 *         rect = win32gui.GetWindowRect(hwnd)
 *         real_width = rect[2] - rect[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GetParent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_parent = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":813
 *         visible = win32gui.IsWindowVisible(hwnd)
 *         parent = win32gui.GetParent(hwnd)
 *         rect = win32gui.GetWindowRect(hwnd)             # <<<<<<<<<<<<<<
 *         real_width = rect[2] - rect[0]
 *         real_height = rect[3] - rect[1]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetWindowRect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_rect = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":814
 *         parent = win32gui.GetParent(hwnd)
 *         rect = win32gui.GetWindowRect(hwnd)
 *         real_width = rect[2] - rect[0]             # <<<<<<<<<<<<<<
 *         real_height = rect[3] - rect[1]
 *         logger.info(f'find_hwnd child_callback {visible} {biggest[0]} {parent} {rect} {real_width} {real_height}')
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rect, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rect, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_real_width = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":815
 *         rect = win32gui.GetWindowRect(hwnd)
 *         real_width = rect[2] - rect[0]
 *         real_height = rect[3] - rect[1]             # <<<<<<<<<<<<<<
 *         logger.info(f'find_hwnd child_callback {visible} {biggest[0]} {parent} {rect} {real_width} {real_height}')
 *         if visible and parent == biggest[0]:
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rect, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rect, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_real_height = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":816
 *         real_width = rect[2] - rect[0]
 *         real_height = rect[3] - rect[1]
 *         logger.info(f'find_hwnd child_callback {visible} {biggest[0]} {parent} {rect} {real_width} {real_height}')             # <<<<<<<<<<<<<<
 *         if visible and parent == biggest[0]:
 *             ratio = real_width / real_height
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_find_hwnd_child_callback);
  __pyx_t_5 += 25;
  __Pyx_GIVEREF(__pyx_kp_u_find_hwnd_child_callback);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_find_hwnd_child_callback);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_visible, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__11);
  if (unlikely(!__pyx_cur_scope->__pyx_v_biggest)) { __Pyx_RaiseClosureNameError("biggest"); __PYX_ERR(0, 816, __pyx_L1_error) }
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__11);
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_parent, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u__11);
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_rect, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u__11);
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_real_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_kp_u__11);
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_real_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 11, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 12, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":817
 *         real_height = rect[3] - rect[1]
 *         logger.info(f'find_hwnd child_callback {visible} {biggest[0]} {parent} {rect} {real_width} {real_height}')
 *         if visible and parent == biggest[0]:             # <<<<<<<<<<<<<<
 *             ratio = real_width / real_height
 *             difference = abs(ratio - frame_aspect_ratio)
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_biggest)) { __Pyx_RaiseClosureNameError("biggest"); __PYX_ERR(0, 817, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_parent, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_9) {

    /* "ok/Capture.pyx":818
 *         logger.info(f'find_hwnd child_callback {visible} {biggest[0]} {parent} {rect} {real_width} {real_height}')
 *         if visible and parent == biggest[0]:
 *             ratio = real_width / real_height             # <<<<<<<<<<<<<<
 *             difference = abs(ratio - frame_aspect_ratio)
 *             support = difference <= 0.01 * frame_aspect_ratio
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_real_width, __pyx_v_real_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_ratio = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":819
 *         if visible and parent == biggest[0]:
 *             ratio = real_width / real_height
 *             difference = abs(ratio - frame_aspect_ratio)             # <<<<<<<<<<<<<<
 *             support = difference <= 0.01 * frame_aspect_ratio
 *             percent = (real_width * real_height) / (biggest[2] * biggest[3])
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_frame_aspect_ratio)) { __Pyx_RaiseClosureNameError("frame_aspect_ratio"); __PYX_ERR(0, 819, __pyx_L1_error) }
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_ratio, __pyx_cur_scope->__pyx_v_frame_aspect_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_difference = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":820
 *             ratio = real_width / real_height
 *             difference = abs(ratio - frame_aspect_ratio)
 *             support = difference <= 0.01 * frame_aspect_ratio             # <<<<<<<<<<<<<<
 *             percent = (real_width * real_height) / (biggest[2] * biggest[3])
 *             if support and percent >= 0.7:
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_frame_aspect_ratio)) { __Pyx_RaiseClosureNameError("frame_aspect_ratio"); __PYX_ERR(0, 820, __pyx_L1_error) }
    __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_01, __pyx_cur_scope->__pyx_v_frame_aspect_ratio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_difference, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_support = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":821
 *             difference = abs(ratio - frame_aspect_ratio)
 *             support = difference <= 0.01 * frame_aspect_ratio
 *             percent = (real_width * real_height) / (biggest[2] * biggest[3])             # <<<<<<<<<<<<<<
 *             if support and percent >= 0.7:
 *                 x_offset = rect[0] - biggest[4]
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_real_width, __pyx_v_real_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(!__pyx_cur_scope->__pyx_v_biggest)) { __Pyx_RaiseClosureNameError("biggest"); __PYX_ERR(0, 821, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_cur_scope->__pyx_v_biggest)) { __Pyx_RaiseClosureNameError("biggest"); __PYX_ERR(0, 821, __pyx_L1_error) }
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_percent = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "ok/Capture.pyx":822
 *             support = difference <= 0.01 * frame_aspect_ratio
 *             percent = (real_width * real_height) / (biggest[2] * biggest[3])
 *             if support and percent >= 0.7:             # <<<<<<<<<<<<<<
 *                 x_offset = rect[0] - biggest[4]
 *                 y_offset = rect[1] - biggest[5]
 */
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_support); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 822, __pyx_L1_error)
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_8 = PyObject_RichCompare(__pyx_v_percent, __pyx_float_0_7, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 822, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_9) {

      /* "ok/Capture.pyx":823
 *             percent = (real_width * real_height) / (biggest[2] * biggest[3])
 *             if support and percent >= 0.7:
 *                 x_offset = rect[0] - biggest[4]             # <<<<<<<<<<<<<<
 *                 y_offset = rect[1] - biggest[5]
 *                 ratio_match.append((x_offset, y_offset, real_width, real_height))
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_rect, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(!__pyx_cur_scope->__pyx_v_biggest)) { __Pyx_RaiseClosureNameError("biggest"); __PYX_ERR(0, 823, __pyx_L1_error) }
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_x_offset = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "ok/Capture.pyx":824
 *             if support and percent >= 0.7:
 *                 x_offset = rect[0] - biggest[4]
 *                 y_offset = rect[1] - biggest[5]             # <<<<<<<<<<<<<<
 *                 ratio_match.append((x_offset, y_offset, real_width, real_height))
 *         return True
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rect, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(!__pyx_cur_scope->__pyx_v_biggest)) { __Pyx_RaiseClosureNameError("biggest"); __PYX_ERR(0, 824, __pyx_L1_error) }
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_y_offset = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "ok/Capture.pyx":825
 *                 x_offset = rect[0] - biggest[4]
 *                 y_offset = rect[1] - biggest[5]
 *                 ratio_match.append((x_offset, y_offset, real_width, real_height))             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_ratio_match)) { __Pyx_RaiseClosureNameError("ratio_match"); __PYX_ERR(0, 825, __pyx_L1_error) }
      if (unlikely(__pyx_cur_scope->__pyx_v_ratio_match == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 825, __pyx_L1_error)
      }
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_x_offset);
      __Pyx_GIVEREF(__pyx_v_x_offset);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_x_offset)) __PYX_ERR(0, 825, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_y_offset);
      __Pyx_GIVEREF(__pyx_v_y_offset);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_y_offset)) __PYX_ERR(0, 825, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_real_width);
      __Pyx_GIVEREF(__pyx_v_real_width);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_real_width)) __PYX_ERR(0, 825, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_real_height);
      __Pyx_GIVEREF(__pyx_v_real_height);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_real_height)) __PYX_ERR(0, 825, __pyx_L1_error);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ratio_match, __pyx_t_8); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "ok/Capture.pyx":822
 *             support = difference <= 0.01 * frame_aspect_ratio
 *             percent = (real_width * real_height) / (biggest[2] * biggest[3])
 *             if support and percent >= 0.7:             # <<<<<<<<<<<<<<
 *                 x_offset = rect[0] - biggest[4]
 *                 y_offset = rect[1] - biggest[5]
 */
    }

    /* "ok/Capture.pyx":817
 *         real_height = rect[3] - rect[1]
 *         logger.info(f'find_hwnd child_callback {visible} {biggest[0]} {parent} {rect} {real_width} {real_height}')
 *         if visible and parent == biggest[0]:             # <<<<<<<<<<<<<<
 *             ratio = real_width / real_height
 *             difference = abs(ratio - frame_aspect_ratio)
 */
  }

  /* "ok/Capture.pyx":826
 *                 y_offset = rect[1] - biggest[5]
 *                 ratio_match.append((x_offset, y_offset, real_width, real_height))
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     win32gui.EnumChildWindows(biggest[0], child_callback, None)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":810
 *     """
 * 
 *     def child_callback(hwnd, _):             # <<<<<<<<<<<<<<
 *         visible = win32gui.IsWindowVisible(hwnd)
 *         parent = win32gui.GetParent(hwnd)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.enum_child_windows.child_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_visible);
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XDECREF(__pyx_v_rect);
  __Pyx_XDECREF(__pyx_v_real_width);
  __Pyx_XDECREF(__pyx_v_real_height);
  __Pyx_XDECREF(__pyx_v_ratio);
  __Pyx_XDECREF(__pyx_v_difference);
  __Pyx_XDECREF(__pyx_v_support);
  __Pyx_XDECREF(__pyx_v_percent);
  __Pyx_XDECREF(__pyx_v_x_offset);
  __Pyx_XDECREF(__pyx_v_y_offset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":803
 *     return 0
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):             # <<<<<<<<<<<<<<
 *     ratio_match = []
 *     """
 */

static PyObject *__pyx_pf_2ok_7Capture_22enum_child_windows(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_biggest, PyObject *__pyx_v_frame_aspect_ratio) {
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *__pyx_cur_scope;
  PyObject *__pyx_v_child_callback = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("enum_child_windows", 0);
  __pyx_cur_scope = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *)__pyx_tp_new_2ok_7Capture___pyx_scope_struct_1_enum_child_windows(__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 803, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_biggest = __pyx_v_biggest;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_biggest);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_biggest);
  __pyx_cur_scope->__pyx_v_frame_aspect_ratio = __pyx_v_frame_aspect_ratio;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_frame_aspect_ratio);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_frame_aspect_ratio);

  /* "ok/Capture.pyx":804
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):
 *     ratio_match = []             # <<<<<<<<<<<<<<
 *     """
 *     A function to enumerate all child windows of the given parent window handle
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_ratio_match = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":810
 *     """
 * 
 *     def child_callback(hwnd, _):             # <<<<<<<<<<<<<<
 *         visible = win32gui.IsWindowVisible(hwnd)
 *         parent = win32gui.GetParent(hwnd)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_18enum_child_windows_1child_callback, 0, __pyx_n_s_enum_child_windows_locals_child, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_child_callback = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":828
 *         return True
 * 
 *     win32gui.EnumChildWindows(biggest[0], child_callback, None)             # <<<<<<<<<<<<<<
 *     if len(ratio_match) > 0:
 *         return ratio_match[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_EnumChildWindows); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_biggest, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_t_2, __pyx_v_child_callback, Py_None};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":829
 * 
 *     win32gui.EnumChildWindows(biggest[0], child_callback, None)
 *     if len(ratio_match) > 0:             # <<<<<<<<<<<<<<
 *         return ratio_match[0]
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_ratio_match;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (__pyx_t_6 > 0);
  if (__pyx_t_7) {

    /* "ok/Capture.pyx":830
 *     win32gui.EnumChildWindows(biggest[0], child_callback, None)
 *     if len(ratio_match) > 0:
 *         return ratio_match[0]             # <<<<<<<<<<<<<<
 * 
 * def get_exe_by_hwnd(hwnd):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_ratio_match, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":829
 * 
 *     win32gui.EnumChildWindows(biggest[0], child_callback, None)
 *     if len(ratio_match) > 0:             # <<<<<<<<<<<<<<
 *         return ratio_match[0]
 * 
 */
  }

  /* "ok/Capture.pyx":803
 *     return 0
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):             # <<<<<<<<<<<<<<
 *     ratio_match = []
 *     """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.enum_child_windows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_child_callback);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":832
 *         return ratio_match[0]
 * 
 * def get_exe_by_hwnd(hwnd):             # <<<<<<<<<<<<<<
 *     # Get the process ID associated with the window
 *     try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_25get_exe_by_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_25get_exe_by_hwnd = {"get_exe_by_hwnd", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_25get_exe_by_hwnd, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_25get_exe_by_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_exe_by_hwnd (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 832, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_exe_by_hwnd") < 0)) __PYX_ERR(0, 832, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_hwnd = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_exe_by_hwnd", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 832, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_exe_by_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_24get_exe_by_hwnd(__pyx_self, __pyx_v_hwnd);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_24get_exe_by_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_process = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_exe_by_hwnd", 1);

  /* "ok/Capture.pyx":834
 * def get_exe_by_hwnd(hwnd):
 *     # Get the process ID associated with the window
 *     try:             # <<<<<<<<<<<<<<
 *         _, pid = win32process.GetWindowThreadProcessId(hwnd)
 * 
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ok/Capture.pyx":835
 *     # Get the process ID associated with the window
 *     try:
 *         _, pid = win32process.GetWindowThreadProcessId(hwnd)             # <<<<<<<<<<<<<<
 * 
 *         # Get the process name and executable path
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_win32process); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GetWindowThreadProcessId); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_hwnd};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 835, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 835, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 835, __pyx_L3_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 835, __pyx_L3_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_v__ = __pyx_t_6;
      __pyx_t_6 = 0;
      __pyx_v_pid = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "ok/Capture.pyx":838
 * 
 *         # Get the process name and executable path
 *         if pid > 0:             # <<<<<<<<<<<<<<
 *             process = psutil.Process(pid)
 *             return process.name(), process.exe(), process.cmdline()
 */
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_pid, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L3_error)
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 838, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_10) {

        /* "ok/Capture.pyx":839
 *         # Get the process name and executable path
 *         if pid > 0:
 *             process = psutil.Process(pid)             # <<<<<<<<<<<<<<
 *             return process.name(), process.exe(), process.cmdline()
 *         else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_psutil); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Process); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 839, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_pid};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 839, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_v_process = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "ok/Capture.pyx":840
 *         if pid > 0:
 *             process = psutil.Process(pid)
 *             return process.name(), process.exe(), process.cmdline()             # <<<<<<<<<<<<<<
 *         else:
 *             return None, None, None
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_process, __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 840, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_process, __pyx_n_s_exe); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_process, __pyx_n_s_cmdline); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 840, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 840, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4)) __PYX_ERR(0, 840, __pyx_L3_error);
        __Pyx_GIVEREF(__pyx_t_6);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6)) __PYX_ERR(0, 840, __pyx_L3_error);
        __Pyx_GIVEREF(__pyx_t_5);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5)) __PYX_ERR(0, 840, __pyx_L3_error);
        __pyx_t_4 = 0;
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L7_try_return;

        /* "ok/Capture.pyx":838
 * 
 *         # Get the process name and executable path
 *         if pid > 0:             # <<<<<<<<<<<<<<
 *             process = psutil.Process(pid)
 *             return process.name(), process.exe(), process.cmdline()
 */
      }

      /* "ok/Capture.pyx":842
 *             return process.name(), process.exe(), process.cmdline()
 *         else:
 *             return None, None, None             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error('get_exe_by_hwnd error', e)
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__23);
        __pyx_r = __pyx_tuple__23;
        goto __pyx_L7_try_return;
      }

      /* "ok/Capture.pyx":834
 * def get_exe_by_hwnd(hwnd):
 *     # Get the process ID associated with the window
 *     try:             # <<<<<<<<<<<<<<
 *         _, pid = win32process.GetWindowThreadProcessId(hwnd)
 * 
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "ok/Capture.pyx":843
 *         else:
 *             return None, None, None
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error('get_exe_by_hwnd error', e)
 *         return None, None, None
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("ok.Capture.get_exe_by_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 843, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "ok/Capture.pyx":844
 *             return None, None, None
 *     except Exception as e:
 *         logger.error('get_exe_by_hwnd error', e)             # <<<<<<<<<<<<<<
 *         return None, None, None
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 844, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_error); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 844, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_kp_s_get_exe_by_hwnd_error, __pyx_v_e};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ok/Capture.pyx":845
 *     except Exception as e:
 *         logger.error('get_exe_by_hwnd error', e)
 *         return None, None, None             # <<<<<<<<<<<<<<
 * 
 * # orignal https://github.com/Toufool/AutoSplit/blob/master/src/capture_method/DesktopDuplicationCaptureMethod.py
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__23);
        __pyx_r = __pyx_tuple__23;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L16_return;
      }

      /* "ok/Capture.pyx":843
 *         else:
 *             return None, None, None
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error('get_exe_by_hwnd error', e)
 *         return None, None, None
 */
      /*finally:*/ {
        __pyx_L17_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_12 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L16_return: {
          __pyx_t_21 = __pyx_r;
          __pyx_r = 0;
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          __pyx_r = __pyx_t_21;
          __pyx_t_21 = 0;
          goto __pyx_L6_except_return;
        }
      }
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":834
 * def get_exe_by_hwnd(hwnd):
 *     # Get the process ID associated with the window
 *     try:             # <<<<<<<<<<<<<<
 *         _, pid = win32process.GetWindowThreadProcessId(hwnd)
 * 
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "ok/Capture.pyx":832
 *         return ratio_match[0]
 * 
 * def get_exe_by_hwnd(hwnd):             # <<<<<<<<<<<<<<
 *     # Get the process ID associated with the window
 *     try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.get_exe_by_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_process);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":861
 *     cdef object desktop_duplication
 * 
 *     def __init__(self, hwnd_window: HwndWindow):             # <<<<<<<<<<<<<<
 *         super().__init__(hwnd_window)
 *         import d3dshot
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd_window,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_window)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 861, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_hwnd_window = ((struct __pyx_obj_2ok_7Capture_HwndWindow *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 861, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hwnd_window), __pyx_ptype_2ok_7Capture_HwndWindow, 0, "hwnd_window", 0))) __PYX_ERR(0, 861, __pyx_L1_error)
  __pyx_r = __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)__pyx_v_self), __pyx_v_hwnd_window);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self, struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v_hwnd_window) {
  PyObject *__pyx_v_d3dshot = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":862
 * 
 *     def __init__(self, hwnd_window: HwndWindow):
 *         super().__init__(hwnd_window)             # <<<<<<<<<<<<<<
 *         import d3dshot
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod))) __PYX_ERR(0, 862, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 862, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_hwnd_window)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":863
 *     def __init__(self, hwnd_window: HwndWindow):
 *         super().__init__(hwnd_window)
 *         import d3dshot             # <<<<<<<<<<<<<<
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")
 * 
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_d3dshot, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d3dshot = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":864
 *         super().__init__(hwnd_window)
 *         import d3dshot
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")             # <<<<<<<<<<<<<<
 * 
 *     cpdef object do_get_frame(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d3dshot, __pyx_n_s_create); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_capture_output, __pyx_n_s_numpy) < 0) __PYX_ERR(0, 864, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->desktop_duplication);
  __Pyx_DECREF(__pyx_v_self->desktop_duplication);
  __pyx_v_self->desktop_duplication = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":861
 *     cdef object desktop_duplication
 * 
 *     def __init__(self, hwnd_window: HwndWindow):             # <<<<<<<<<<<<<<
 *         super().__init__(hwnd_window)
 *         import d3dshot
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d3dshot);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":866
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 * 
 *         hwnd = self.hwnd_window.hwnd
 */

static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_31DesktopDuplicationCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_hwnd = NULL;
  PyObject *__pyx_v_hmonitor = NULL;
  int __pyx_v_left;
  int __pyx_v_top;
  int __pyx_v_right;
  int __pyx_v_bottom;
  PyObject *__pyx_v_screenshot = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":868
 *     cpdef object do_get_frame(self):
 * 
 *         hwnd = self.hwnd_window.hwnd             # <<<<<<<<<<<<<<
 *         if hwnd is None:
 *             return None
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hwnd = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":869
 * 
 *         hwnd = self.hwnd_window.hwnd
 *         if hwnd is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_6 = (__pyx_v_hwnd == Py_None);
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":870
 *         hwnd = self.hwnd_window.hwnd
 *         if hwnd is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         hmonitor = win32api.MonitorFromWindow(hwnd, win32con.MONITOR_DEFAULTTONEAREST)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":869
 * 
 *         hwnd = self.hwnd_window.hwnd
 *         if hwnd is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "ok/Capture.pyx":872
 *             return None
 * 
 *         hmonitor = win32api.MonitorFromWindow(hwnd, win32con.MONITOR_DEFAULTTONEAREST)             # <<<<<<<<<<<<<<
 *         if not hmonitor:
 *             return None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_win32api); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MonitorFromWindow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_win32con); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MONITOR_DEFAULTTONEAREST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_hwnd, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_hmonitor = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":873
 * 
 *         hmonitor = win32api.MonitorFromWindow(hwnd, win32con.MONITOR_DEFAULTTONEAREST)
 *         if not hmonitor:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_hmonitor); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 873, __pyx_L1_error)
  __pyx_t_7 = (!__pyx_t_6);
  if (__pyx_t_7) {

    /* "ok/Capture.pyx":874
 *         hmonitor = win32api.MonitorFromWindow(hwnd, win32con.MONITOR_DEFAULTTONEAREST)
 *         if not hmonitor:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         self.desktop_duplication.display = find_display(hmonitor, self.desktop_duplication.displays)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":873
 * 
 *         hmonitor = win32api.MonitorFromWindow(hwnd, win32con.MONITOR_DEFAULTTONEAREST)
 *         if not hmonitor:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "ok/Capture.pyx":876
 *             return None
 * 
 *         self.desktop_duplication.display = find_display(hmonitor, self.desktop_duplication.displays)             # <<<<<<<<<<<<<<
 * 
 *         cdef int left, top, right, bottom
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->desktop_duplication, __pyx_n_s_displays); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_2ok_7Capture_find_display(__pyx_v_hmonitor, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self->desktop_duplication, __pyx_n_s_display, __pyx_t_3) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":880
 *         cdef int left, top, right, bottom
 *         cdef object screenshot
 *         left = self.hwnd_window.x             # <<<<<<<<<<<<<<
 *         top = self.hwnd_window.y
 *         right = left + self.hwnd_window.width
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_left = __pyx_t_8;

  /* "ok/Capture.pyx":881
 *         cdef object screenshot
 *         left = self.hwnd_window.x
 *         top = self.hwnd_window.y             # <<<<<<<<<<<<<<
 *         right = left + self.hwnd_window.width
 *         bottom = top + self.hwnd_window.height
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_top = __pyx_t_8;

  /* "ok/Capture.pyx":882
 *         left = self.hwnd_window.x
 *         top = self.hwnd_window.y
 *         right = left + self.hwnd_window.width             # <<<<<<<<<<<<<<
 *         bottom = top + self.hwnd_window.height
 *         screenshot = self.desktop_duplication.screenshot((left, top, right, bottom))
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_left); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_right = __pyx_t_8;

  /* "ok/Capture.pyx":883
 *         top = self.hwnd_window.y
 *         right = left + self.hwnd_window.width
 *         bottom = top + self.hwnd_window.height             # <<<<<<<<<<<<<<
 *         screenshot = self.desktop_duplication.screenshot((left, top, right, bottom))
 *         if screenshot is None:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_top); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hwnd_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bottom = __pyx_t_8;

  /* "ok/Capture.pyx":884
 *         right = left + self.hwnd_window.width
 *         bottom = top + self.hwnd_window.height
 *         screenshot = self.desktop_duplication.screenshot((left, top, right, bottom))             # <<<<<<<<<<<<<<
 *         if screenshot is None:
 *             return None
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->desktop_duplication, __pyx_n_s_screenshot); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_top); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_right); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_bottom); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_9)) __PYX_ERR(0, 884, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_10)) __PYX_ERR(0, 884, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_11};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_screenshot = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ok/Capture.pyx":885
 *         bottom = top + self.hwnd_window.height
 *         screenshot = self.desktop_duplication.screenshot((left, top, right, bottom))
 *         if screenshot is None:             # <<<<<<<<<<<<<<
 *             return None
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 */
  __pyx_t_7 = (__pyx_v_screenshot == Py_None);
  if (__pyx_t_7) {

    /* "ok/Capture.pyx":886
 *         screenshot = self.desktop_duplication.screenshot((left, top, right, bottom))
 *         if screenshot is None:
 *             return None             # <<<<<<<<<<<<<<
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":885
 *         bottom = top + self.hwnd_window.height
 *         screenshot = self.desktop_duplication.screenshot((left, top, right, bottom))
 *         if screenshot is None:             # <<<<<<<<<<<<<<
 *             return None
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 */
  }

  /* "ok/Capture.pyx":887
 *         if screenshot is None:
 *             return None
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cv2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cvtColor); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cv2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_COLOR_RGB2BGR); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_screenshot, __pyx_t_10};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":866
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 * 
 *         hwnd = self.hwnd_window.hwnd
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hwnd);
  __Pyx_XDECREF(__pyx_v_hmonitor);
  __Pyx_XDECREF(__pyx_v_screenshot);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_2do_get_frame(((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_2do_get_frame(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_31DesktopDuplicationCaptureMethod_do_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":889
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.desktop_duplication is not None:
 *             self.desktop_duplication.stop()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_5close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_5close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_5close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_5close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_4close(((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_4close(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);

  /* "ok/Capture.pyx":890
 * 
 *     def close(self):
 *         if self.desktop_duplication is not None:             # <<<<<<<<<<<<<<
 *             self.desktop_duplication.stop()
 * 
 */
  __pyx_t_1 = (__pyx_v_self->desktop_duplication != Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":891
 *     def close(self):
 *         if self.desktop_duplication is not None:
 *             self.desktop_duplication.stop()             # <<<<<<<<<<<<<<
 * 
 * cdef find_display(hmonitor, displays):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->desktop_duplication, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ok/Capture.pyx":890
 * 
 *     def close(self):
 *         if self.desktop_duplication is not None:             # <<<<<<<<<<<<<<
 *             self.desktop_duplication.stop()
 * 
 */
  }

  /* "ok/Capture.pyx":889
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.desktop_duplication is not None:
 *             self.desktop_duplication.stop()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_6__reduce_cython__(((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_6__reduce_cython__(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.desktop_duplication, self.exit_event)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._hwnd_window);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._hwnd_window);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->__pyx_base._hwnd_window)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->__pyx_base.__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->desktop_duplication);
  __Pyx_GIVEREF(__pyx_v_self->desktop_duplication);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->desktop_duplication)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_self->__pyx_base.__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._hwnd_window, self._size, self.desktop_duplication, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.desktop_duplication, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.desktop_duplication is not None or self.exit_event is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._hwnd_window, self._size, self.desktop_duplication, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.desktop_duplication is not None or self.exit_event is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base._hwnd_window != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->desktop_duplication != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.__pyx_base.exit_event != Py_None);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.desktop_duplication is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.desktop_duplication is not None or self.exit_event is not None
 *     if use_setstate:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_DesktopDuplicatio); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_55865105);
    __Pyx_GIVEREF(__pyx_int_55865105);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_55865105)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._hwnd_window is not None or self._size is not None or self.desktop_duplication is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, None), state
 *     else:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_DesktopDuplicatio); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_55865105);
    __Pyx_GIVEREF(__pyx_int_55865105);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_55865105)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_8__setstate_cython__(((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_31DesktopDuplicationCaptureMethod_8__setstate_cython__(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.DesktopDuplicationCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":893
 *             self.desktop_duplication.stop()
 * 
 * cdef find_display(hmonitor, displays):             # <<<<<<<<<<<<<<
 *     for display in displays:
 *         if display.hmonitor == hmonitor:
 */

static PyObject *__pyx_f_2ok_7Capture_find_display(PyObject *__pyx_v_hmonitor, PyObject *__pyx_v_displays) {
  PyObject *__pyx_v_display = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_display", 1);

  /* "ok/Capture.pyx":894
 * 
 * cdef find_display(hmonitor, displays):
 *     for display in displays:             # <<<<<<<<<<<<<<
 *         if display.hmonitor == hmonitor:
 *             return display
 */
  if (likely(PyList_CheckExact(__pyx_v_displays)) || PyTuple_CheckExact(__pyx_v_displays)) {
    __pyx_t_1 = __pyx_v_displays; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_displays); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 894, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 894, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 894, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 894, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 894, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 894, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 894, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_display, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ok/Capture.pyx":895
 * cdef find_display(hmonitor, displays):
 *     for display in displays:
 *         if display.hmonitor == hmonitor:             # <<<<<<<<<<<<<<
 *             return display
 *     raise ValueError("Display not found")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_display, __pyx_n_s_hmonitor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_hmonitor, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "ok/Capture.pyx":896
 *     for display in displays:
 *         if display.hmonitor == hmonitor:
 *             return display             # <<<<<<<<<<<<<<
 *     raise ValueError("Display not found")
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_display);
      __pyx_r = __pyx_v_display;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "ok/Capture.pyx":895
 * cdef find_display(hmonitor, displays):
 *     for display in displays:
 *         if display.hmonitor == hmonitor:             # <<<<<<<<<<<<<<
 *             return display
 *     raise ValueError("Display not found")
 */
    }

    /* "ok/Capture.pyx":894
 * 
 * cdef find_display(hmonitor, displays):
 *     for display in displays:             # <<<<<<<<<<<<<<
 *         if display.hmonitor == hmonitor:
 *             return display
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":897
 *         if display.hmonitor == hmonitor:
 *             return display
 *     raise ValueError("Display not found")             # <<<<<<<<<<<<<<
 * 
 * DWMWA_EXTENDED_FRAME_BOUNDS = 9
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 897, __pyx_L1_error)

  /* "ok/Capture.pyx":893
 *             self.desktop_duplication.stop()
 * 
 * cdef find_display(hmonitor, displays):             # <<<<<<<<<<<<<<
 *     for display in displays:
 *         if display.hmonitor == hmonitor:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.find_display", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_display);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":920
 * 
 * 
 * def decimal(value: float):             # <<<<<<<<<<<<<<
 *     # Using ljust instead of :2f because of python float rounding errors
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_27decimal(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_27decimal = {"decimal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_27decimal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_27decimal(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_value;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decimal (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 920, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decimal") < 0)) __PYX_ERR(0, 920, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 920, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decimal", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 920, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.decimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_26decimal(__pyx_self, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_26decimal(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decimal", 1);

  /* "ok/Capture.pyx":922
 * def decimal(value: float):
 *     # Using ljust instead of :2f because of python float rounding errors
 *     return f"{int(value * 100) / 100}".ljust(4, "0")             # <<<<<<<<<<<<<<
 * 
 * def is_digit(value: str | int | None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromDouble((__pyx_v_value * 100.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_1, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ljust); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":920
 * 
 * 
 * def decimal(value: float):             # <<<<<<<<<<<<<<
 *     # Using ljust instead of :2f because of python float rounding errors
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ok.Capture.decimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":924
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 * 
 * def is_digit(value: str | int | None):             # <<<<<<<<<<<<<<
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_29is_digit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2ok_7Capture_28is_digit, "Checks if `value` is a single-digit string from 0-9.");
static PyMethodDef __pyx_mdef_2ok_7Capture_29is_digit = {"is_digit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_29is_digit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2ok_7Capture_28is_digit};
static PyObject *__pyx_pw_2ok_7Capture_29is_digit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_digit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 924, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_digit") < 0)) __PYX_ERR(0, 924, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_digit", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 924, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.is_digit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_28is_digit(__pyx_self, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_28is_digit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_digit", 1);

  /* "ok/Capture.pyx":926
 * def is_digit(value: str | int | None):
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:             # <<<<<<<<<<<<<<
 *         return False
 *     try:
 */
  __pyx_t_1 = (__pyx_v_value == Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":927
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:
 *         return False             # <<<<<<<<<<<<<<
 *     try:
 *         return 0 <= int(value) <= 9  # noqa: PLR2004
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "ok/Capture.pyx":926
 * def is_digit(value: str | int | None):
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:             # <<<<<<<<<<<<<<
 *         return False
 *     try:
 */
  }

  /* "ok/Capture.pyx":928
 *     if value is None:
 *         return False
 *     try:             # <<<<<<<<<<<<<<
 *         return 0 <= int(value) <= 9  # noqa: PLR2004
 *     except (ValueError, TypeError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "ok/Capture.pyx":929
 *         return False
 *     try:
 *         return 0 <= int(value) <= 9  # noqa: PLR2004             # <<<<<<<<<<<<<<
 *     except (ValueError, TypeError):
 *         return False
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_v_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 929, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_RichCompare(__pyx_int_0, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L4_error)
      if (__Pyx_PyObject_IsTrue(__pyx_t_6)) {
        __Pyx_DECREF(__pyx_t_6);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_int_9, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L8_try_return;

      /* "ok/Capture.pyx":928
 *     if value is None:
 *         return False
 *     try:             # <<<<<<<<<<<<<<
 *         return 0 <= int(value) <= 9  # noqa: PLR2004
 *     except (ValueError, TypeError):
 */
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":930
 *     try:
 *         return 0 <= int(value) <= 9  # noqa: PLR2004
 *     except (ValueError, TypeError):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches2(__pyx_builtin_ValueError, __pyx_builtin_TypeError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("ok.Capture.is_digit", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 930, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "ok/Capture.pyx":931
 *         return 0 <= int(value) <= 9  # noqa: PLR2004
 *     except (ValueError, TypeError):
 *         return False             # <<<<<<<<<<<<<<
 * 
 * def is_valid_hwnd(hwnd: int):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_except_return;
    }
    goto __pyx_L6_except_error;

    /* "ok/Capture.pyx":928
 *     if value is None:
 *         return False
 *     try:             # <<<<<<<<<<<<<<
 *         return 0 <= int(value) <= 9  # noqa: PLR2004
 *     except (ValueError, TypeError):
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "ok/Capture.pyx":924
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 * 
 * def is_digit(value: str | int | None):             # <<<<<<<<<<<<<<
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.is_digit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":933
 *         return False
 * 
 * def is_valid_hwnd(hwnd: int):             # <<<<<<<<<<<<<<
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_31is_valid_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2ok_7Capture_30is_valid_hwnd, "Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `\"\"`.");
static PyMethodDef __pyx_mdef_2ok_7Capture_31is_valid_hwnd = {"is_valid_hwnd", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31is_valid_hwnd, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2ok_7Capture_30is_valid_hwnd};
static PyObject *__pyx_pw_2ok_7Capture_31is_valid_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid_hwnd (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 933, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_valid_hwnd") < 0)) __PYX_ERR(0, 933, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_hwnd = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_valid_hwnd", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 933, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.is_valid_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hwnd), (&PyInt_Type), 0, "hwnd", 1))) __PYX_ERR(0, 933, __pyx_L1_error)
  __pyx_r = __pyx_pf_2ok_7Capture_30is_valid_hwnd(__pyx_self, __pyx_v_hwnd);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_30is_valid_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_valid_hwnd", 1);

  /* "ok/Capture.pyx":935
 * def is_valid_hwnd(hwnd: int):
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:             # <<<<<<<<<<<<<<
 *         return False
 *     if sys.platform == "win32":
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_hwnd); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 935, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":936
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:
 *         return False             # <<<<<<<<<<<<<<
 *     if sys.platform == "win32":
 *         return bool(win32gui.IsWindow(hwnd) and win32gui.GetWindowText(hwnd))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "ok/Capture.pyx":935
 * def is_valid_hwnd(hwnd: int):
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:             # <<<<<<<<<<<<<<
 *         return False
 *     if sys.platform == "win32":
 */
  }

  /* "ok/Capture.pyx":937
 *     if not hwnd:
 *         return False
 *     if sys.platform == "win32":             # <<<<<<<<<<<<<<
 *         return bool(win32gui.IsWindow(hwnd) and win32gui.GetWindowText(hwnd))
 *     return True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_platform); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_win32, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":938
 *         return False
 *     if sys.platform == "win32":
 *         return bool(win32gui.IsWindow(hwnd) and win32gui.GetWindowText(hwnd))             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_IsWindow); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L5_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GetWindowText); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_hwnd};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":937
 *     if not hwnd:
 *         return False
 *     if sys.platform == "win32":             # <<<<<<<<<<<<<<
 *         return bool(win32gui.IsWindow(hwnd) and win32gui.GetWindowText(hwnd))
 *     return True
 */
  }

  /* "ok/Capture.pyx":939
 *     if sys.platform == "win32":
 *         return bool(win32gui.IsWindow(hwnd) and win32gui.GetWindowText(hwnd))
 *     return True             # <<<<<<<<<<<<<<
 * 
 * def try_delete_dc(dc):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":933
 *         return False
 * 
 * def is_valid_hwnd(hwnd: int):             # <<<<<<<<<<<<<<
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.is_valid_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":941
 *     return True
 * 
 * def try_delete_dc(dc):             # <<<<<<<<<<<<<<
 *     try:
 *         dc.DeleteDC()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_33try_delete_dc(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_33try_delete_dc = {"try_delete_dc", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_33try_delete_dc, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_33try_delete_dc(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("try_delete_dc (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dc,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dc)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 941, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "try_delete_dc") < 0)) __PYX_ERR(0, 941, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_dc = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("try_delete_dc", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 941, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.try_delete_dc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_32try_delete_dc(__pyx_self, __pyx_v_dc);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_32try_delete_dc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("try_delete_dc", 1);

  /* "ok/Capture.pyx":942
 * 
 * def try_delete_dc(dc):
 *     try:             # <<<<<<<<<<<<<<
 *         dc.DeleteDC()
 *     except win32ui.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ok/Capture.pyx":943
 * def try_delete_dc(dc):
 *     try:
 *         dc.DeleteDC()             # <<<<<<<<<<<<<<
 *     except win32ui.error:
 *         pass
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dc, __pyx_n_s_DeleteDC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 943, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 943, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ok/Capture.pyx":942
 * 
 * def try_delete_dc(dc):
 *     try:             # <<<<<<<<<<<<<<
 *         dc.DeleteDC()
 *     except win32ui.error:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":944
 *     try:
 *         dc.DeleteDC()
 *     except win32ui.error:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_win32ui); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 944, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 944, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;
    if (__pyx_t_10) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":942
 * 
 * def try_delete_dc(dc):
 *     try:             # <<<<<<<<<<<<<<
 *         dc.DeleteDC()
 *     except win32ui.error:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "ok/Capture.pyx":941
 *     return True
 * 
 * def try_delete_dc(dc):             # <<<<<<<<<<<<<<
 *     try:
 *         dc.DeleteDC()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ok.Capture.try_delete_dc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":953
 *     cdef object device_manager
 * 
 *     def __init__(self, device_manager, exit_event, width=0, height=0):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.exit_event = exit_event
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_16ADBCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_16ADBCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_device_manager = 0;
  PyObject *__pyx_v_exit_event = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_device_manager,&__pyx_n_s_exit_event,&__pyx_n_s_width,&__pyx_n_s_height,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device_manager)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 953, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_width);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_height);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 953, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_device_manager = values[0];
    __pyx_v_exit_event = values[1];
    __pyx_v_width = values[2];
    __pyx_v_height = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 953, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_16ADBCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self), __pyx_v_device_manager, __pyx_v_exit_event, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_16ADBCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self, PyObject *__pyx_v_device_manager, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":954
 * 
 *     def __init__(self, device_manager, exit_event, width=0, height=0):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self.exit_event = exit_event
 *         self._connected = (width != 0 and height != 0)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod))) __PYX_ERR(0, 954, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 954, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":955
 *     def __init__(self, device_manager, exit_event, width=0, height=0):
 *         super().__init__()
 *         self.exit_event = exit_event             # <<<<<<<<<<<<<<
 *         self._connected = (width != 0 and height != 0)
 *         self.device_manager = device_manager
 */
  __Pyx_INCREF(__pyx_v_exit_event);
  __Pyx_GIVEREF(__pyx_v_exit_event);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.exit_event);
  __pyx_v_self->__pyx_base.exit_event = __pyx_v_exit_event;

  /* "ok/Capture.pyx":956
 *         super().__init__()
 *         self.exit_event = exit_event
 *         self._connected = (width != 0 and height != 0)             # <<<<<<<<<<<<<<
 *         self.device_manager = device_manager
 * 
 */
  __pyx_t_6 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_width, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_6 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_height, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_t_5 = __pyx_t_6;
  __pyx_L3_bool_binop_done:;
  __pyx_v_self->_connected = __pyx_t_5;

  /* "ok/Capture.pyx":957
 *         self.exit_event = exit_event
 *         self._connected = (width != 0 and height != 0)
 *         self.device_manager = device_manager             # <<<<<<<<<<<<<<
 * 
 *     cpdef object do_get_frame(self):
 */
  __Pyx_INCREF(__pyx_v_device_manager);
  __Pyx_GIVEREF(__pyx_v_device_manager);
  __Pyx_GOTREF(__pyx_v_self->device_manager);
  __Pyx_DECREF(__pyx_v_self->device_manager);
  __pyx_v_self->device_manager = __pyx_v_device_manager;

  /* "ok/Capture.pyx":953
 *     cdef object device_manager
 * 
 *     def __init__(self, device_manager, exit_event, width=0, height=0):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.exit_event = exit_event
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":959
 *         self.device_manager = device_manager
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         return self.screencap()
 * 
 */

static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_3do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_16ADBCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_16ADBCaptureMethod_3do_get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 959, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":960
 * 
 *     cpdef object do_get_frame(self):
 *         return self.screencap()             # <<<<<<<<<<<<<<
 * 
 *     cdef object screencap(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_vtab)->screencap(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":959
 *         self.device_manager = device_manager
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         return self.screencap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_3do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_16ADBCaptureMethod_3do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_3do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_3do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_16ADBCaptureMethod_2do_get_frame(((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_2do_get_frame(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_16ADBCaptureMethod_do_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":962
 *         return self.screencap()
 * 
 *     cdef object screencap(self):             # <<<<<<<<<<<<<<
 *         if self.exit_event.is_set():
 *             return None
 */

static PyObject *__pyx_f_2ok_7Capture_16ADBCaptureMethod_screencap(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_frame = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("screencap", 1);

  /* "ok/Capture.pyx":963
 * 
 *     cdef object screencap(self):
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return None
 *         cdef object frame
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.exit_event, __pyx_n_s_is_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":964
 *     cdef object screencap(self):
 *         if self.exit_event.is_set():
 *             return None             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         frame = self.device_manager.do_screencap(self.device_manager.device)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":963
 * 
 *     cdef object screencap(self):
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return None
 *         cdef object frame
 */
  }

  /* "ok/Capture.pyx":966
 *             return None
 *         cdef object frame
 *         frame = self.device_manager.do_screencap(self.device_manager.device)             # <<<<<<<<<<<<<<
 *         if frame is not None:
 *             self._connected = True
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_do_screencap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_device); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_frame = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":967
 *         cdef object frame
 *         frame = self.device_manager.do_screencap(self.device_manager.device)
 *         if frame is not None:             # <<<<<<<<<<<<<<
 *             self._connected = True
 *         else:
 */
  __pyx_t_5 = (__pyx_v_frame != Py_None);
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":968
 *         frame = self.device_manager.do_screencap(self.device_manager.device)
 *         if frame is not None:
 *             self._connected = True             # <<<<<<<<<<<<<<
 *         else:
 *             self._connected = False
 */
    __pyx_v_self->_connected = 1;

    /* "ok/Capture.pyx":967
 *         cdef object frame
 *         frame = self.device_manager.do_screencap(self.device_manager.device)
 *         if frame is not None:             # <<<<<<<<<<<<<<
 *             self._connected = True
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ok/Capture.pyx":970
 *             self._connected = True
 *         else:
 *             self._connected = False             # <<<<<<<<<<<<<<
 *         return frame
 * 
 */
  /*else*/ {
    __pyx_v_self->_connected = 0;
  }
  __pyx_L4:;

  /* "ok/Capture.pyx":971
 *         else:
 *             self._connected = False
 *         return frame             # <<<<<<<<<<<<<<
 * 
 *     def connected(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_frame);
  __pyx_r = __pyx_v_frame;
  goto __pyx_L0;

  /* "ok/Capture.pyx":962
 *         return self.screencap()
 * 
 *     cdef object screencap(self):             # <<<<<<<<<<<<<<
 *         if self.exit_event.is_set():
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.screencap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":973
 *         return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         if not self._connected and self.device_manager.device is not None:
 *             self.screencap()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_5connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_16ADBCaptureMethod_5connected = {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_5connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_5connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("connected", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "connected", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_16ADBCaptureMethod_4connected(((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_4connected(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connected", 1);

  /* "ok/Capture.pyx":974
 * 
 *     def connected(self):
 *         if not self._connected and self.device_manager.device is not None:             # <<<<<<<<<<<<<<
 *             self.screencap()
 *         return self._connected and self.device_manager.device is not None
 */
  __pyx_t_2 = (!__pyx_v_self->_connected);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_device); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_t_3 != Py_None);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":975
 *     def connected(self):
 *         if not self._connected and self.device_manager.device is not None:
 *             self.screencap()             # <<<<<<<<<<<<<<
 *         return self._connected and self.device_manager.device is not None
 * 
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_vtab)->screencap(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":974
 * 
 *     def connected(self):
 *         if not self._connected and self.device_manager.device is not None:             # <<<<<<<<<<<<<<
 *             self.screencap()
 *         return self._connected and self.device_manager.device is not None
 */
  }

  /* "ok/Capture.pyx":976
 *         if not self._connected and self.device_manager.device is not None:
 *             self.screencap()
 *         return self._connected and self.device_manager.device is not None             # <<<<<<<<<<<<<<
 * 
 * cdef class ImageCaptureMethod(BaseCaptureMethod):
 */
  __Pyx_XDECREF(__pyx_r);
  if (__pyx_v_self->_connected) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->_connected); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->device_manager, __pyx_n_s_device); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L6_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":973
 *         return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         if not self._connected and self.device_manager.device is not None:
 *             self.screencap()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_16ADBCaptureMethod_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_16ADBCaptureMethod_6__reduce_cython__(((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_6__reduce_cython__(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._connected, self._size, self.device_manager, self.exit_event)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_connected); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->device_manager);
  __Pyx_GIVEREF(__pyx_v_self->device_manager);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->device_manager)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_self->__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._connected, self._size, self.device_manager, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._connected, self._size, self.device_manager, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.exit_event is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._connected, self._size, self.device_manager, self.exit_event)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.exit_event is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->device_manager != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.exit_event != Py_None);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._size is not None or self.device_manager is not None or self.exit_event is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_ADBCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_37823798);
    __Pyx_GIVEREF(__pyx_int_37823798);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_37823798)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.exit_event is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, None), state
 *     else:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ADBCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ADBCaptureMethod); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_37823798);
    __Pyx_GIVEREF(__pyx_int_37823798);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_37823798)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ADBCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_16ADBCaptureMethod_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_16ADBCaptureMethod_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_16ADBCaptureMethod_8__setstate_cython__(((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_16ADBCaptureMethod_8__setstate_cython__(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ADBCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_ADBCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ADBCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.ADBCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":983
 *     cdef list images
 * 
 *     def __init__(self, images):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.images = []
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_18ImageCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_18ImageCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_images = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_images,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_images)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 983, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_images = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 983, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_18ImageCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self), __pyx_v_images);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_18ImageCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, PyObject *__pyx_v_images) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":984
 * 
 *     def __init__(self, images):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self.images = []
 *         self.set_images(images)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod))) __PYX_ERR(0, 984, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 984, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":985
 *     def __init__(self, images):
 *         super().__init__()
 *         self.images = []             # <<<<<<<<<<<<<<
 *         self.set_images(images)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->images);
  __Pyx_DECREF(__pyx_v_self->images);
  __pyx_v_self->images = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":986
 *         super().__init__()
 *         self.images = []
 *         self.set_images(images)             # <<<<<<<<<<<<<<
 * 
 *     def set_images(self, images):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_images); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_images};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":983
 *     cdef list images
 * 
 *     def __init__(self, images):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.images = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":988
 *         self.set_images(images)
 * 
 *     def set_images(self, images):             # <<<<<<<<<<<<<<
 *         self.images = list(reversed(images))
 *         self.get_frame()  # fill size
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_3set_images(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_18ImageCaptureMethod_3set_images = {"set_images", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_3set_images, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_3set_images(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_images = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_images (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_images,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_images)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_images") < 0)) __PYX_ERR(0, 988, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_images = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_images", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 988, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.set_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_18ImageCaptureMethod_2set_images(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self), __pyx_v_images);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_2set_images(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, PyObject *__pyx_v_images) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_images", 1);

  /* "ok/Capture.pyx":989
 * 
 *     def set_images(self, images):
 *         self.images = list(reversed(images))             # <<<<<<<<<<<<<<
 *         self.get_frame()  # fill size
 *         self.images = list(reversed(images))
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_v_images); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->images);
  __Pyx_DECREF(__pyx_v_self->images);
  __pyx_v_self->images = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ok/Capture.pyx":990
 *     def set_images(self, images):
 *         self.images = list(reversed(images))
 *         self.get_frame()  # fill size             # <<<<<<<<<<<<<<
 *         self.images = list(reversed(images))
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_frame(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v_self), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":991
 *         self.images = list(reversed(images))
 *         self.get_frame()  # fill size
 *         self.images = list(reversed(images))             # <<<<<<<<<<<<<<
 * 
 *     cpdef object do_get_frame(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_v_images); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->images);
  __Pyx_DECREF(__pyx_v_self->images);
  __pyx_v_self->images = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":988
 *         self.set_images(images)
 * 
 *     def set_images(self, images):             # <<<<<<<<<<<<<<
 *         self.images = list(reversed(images))
 *         self.get_frame()  # fill size
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.set_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":993
 *         self.images = list(reversed(images))
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef str image_path
 *         if len(self.images) > 0:
 */

static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_5do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_18ImageCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_image_path = 0;
  PyObject *__pyx_v_frame = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_18ImageCaptureMethod_5do_get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 993, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":995
 *     cpdef object do_get_frame(self):
 *         cdef str image_path
 *         if len(self.images) > 0:             # <<<<<<<<<<<<<<
 *             image_path = self.images.pop()
 *             if image_path:
 */
  __pyx_t_1 = __pyx_v_self->images;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 995, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (__pyx_t_6 > 0);
  if (__pyx_t_7) {

    /* "ok/Capture.pyx":996
 *         cdef str image_path
 *         if len(self.images) > 0:
 *             image_path = self.images.pop()             # <<<<<<<<<<<<<<
 *             if image_path:
 *                 frame = cv2.imdecode(np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_UNCHANGED)
 */
    if (unlikely(__pyx_v_self->images == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
      __PYX_ERR(0, 996, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyList_Pop(__pyx_v_self->images); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(0, 996, __pyx_L1_error)
    __pyx_v_image_path = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":997
 *         if len(self.images) > 0:
 *             image_path = self.images.pop()
 *             if image_path:             # <<<<<<<<<<<<<<
 *                 frame = cv2.imdecode(np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_UNCHANGED)
 *                 return frame
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_image_path); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 997, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "ok/Capture.pyx":998
 *             image_path = self.images.pop()
 *             if image_path:
 *                 frame = cv2.imdecode(np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_UNCHANGED)             # <<<<<<<<<<<<<<
 *                 return frame
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_cv2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_imdecode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fromfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_image_path);
      __Pyx_GIVEREF(__pyx_v_image_path);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_image_path)) __PYX_ERR(0, 998, __pyx_L1_error);
      __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_uint8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_cv2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_IMREAD_UNCHANGED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_10, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_v_frame = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "ok/Capture.pyx":999
 *             if image_path:
 *                 frame = cv2.imdecode(np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_UNCHANGED)
 *                 return frame             # <<<<<<<<<<<<<<
 * 
 *     def connected(self):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_frame);
      __pyx_r = __pyx_v_frame;
      goto __pyx_L0;

      /* "ok/Capture.pyx":997
 *         if len(self.images) > 0:
 *             image_path = self.images.pop()
 *             if image_path:             # <<<<<<<<<<<<<<
 *                 frame = cv2.imdecode(np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_UNCHANGED)
 *                 return frame
 */
    }

    /* "ok/Capture.pyx":995
 *     cpdef object do_get_frame(self):
 *         cdef str image_path
 *         if len(self.images) > 0:             # <<<<<<<<<<<<<<
 *             image_path = self.images.pop()
 *             if image_path:
 */
  }

  /* "ok/Capture.pyx":993
 *         self.images = list(reversed(images))
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef str image_path
 *         if len(self.images) > 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_image_path);
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_5do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_18ImageCaptureMethod_5do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_5do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_5do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_18ImageCaptureMethod_4do_get_frame(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_4do_get_frame(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_18ImageCaptureMethod_do_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1001
 *                 return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_7connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_18ImageCaptureMethod_7connected = {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_7connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_7connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("connected", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "connected", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_18ImageCaptureMethod_6connected(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_6connected(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected", 1);

  /* "ok/Capture.pyx":1002
 * 
 *     def connected(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1001
 *                 return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_18ImageCaptureMethod_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_18ImageCaptureMethod_8__reduce_cython__(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_8__reduce_cython__(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._size, self.exit_event, self.images)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->images);
  __Pyx_GIVEREF(__pyx_v_self->images);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->images)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._size, self.exit_event, self.images)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self._size, self.exit_event, self.images)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None or self.images is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._size, self.exit_event, self.images)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None or self.images is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.exit_event != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->images != ((PyObject*)Py_None));
    __pyx_t_2 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None or self.images is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._size is not None or self.exit_event is not None or self.images is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_ImageCaptureMetho); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_166164177);
    __Pyx_GIVEREF(__pyx_int_166164177);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_166164177)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.exit_event is not None or self.images is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, None), state
 *     else:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImageCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ImageCaptureMetho); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_166164177);
    __Pyx_GIVEREF(__pyx_int_166164177);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_166164177)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_18ImageCaptureMethod_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_18ImageCaptureMethod_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_18ImageCaptureMethod_10__setstate_cython__(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_18ImageCaptureMethod_10__setstate_cython__(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImageCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_ImageCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.ImageCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1007
 * class DeviceManager:
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):             # <<<<<<<<<<<<<<
 *         logger.info('__init__ start')
 *         self._device = None
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_app_config = 0;
  PyObject *__pyx_v_exit_event = 0;
  PyObject *__pyx_v_global_config = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_app_config,&__pyx_n_s_exit_event,&__pyx_n_s_global_config,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1007, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_app_config)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1007, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 1007, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1007, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_global_config);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1007, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1007, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_app_config = values[1];
    __pyx_v_exit_event = values[2];
    __pyx_v_global_config = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1007, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager___init__(__pyx_self, __pyx_v_self, __pyx_v_app_config, __pyx_v_exit_event, __pyx_v_global_config);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_app_config, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_global_config) {
  PyObject *__pyx_v_supported_resolution = NULL;
  PyObject *__pyx_v_PostMessageInteraction = NULL;
  PyObject *__pyx_v_PyDirectInteraction = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":1008
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):
 *         logger.info('__init__ start')             # <<<<<<<<<<<<<<
 *         self._device = None
 *         self._adb = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s_init___start};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1009
 *     def __init__(self, app_config, exit_event=None, global_config=None):
 *         logger.info('__init__ start')
 *         self._device = None             # <<<<<<<<<<<<<<
 *         self._adb = None
 *         self.executor = None
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_device_2, Py_None) < 0) __PYX_ERR(0, 1009, __pyx_L1_error)

  /* "ok/Capture.pyx":1010
 *         logger.info('__init__ start')
 *         self._device = None
 *         self._adb = None             # <<<<<<<<<<<<<<
 *         self.executor = None
 *         self.global_config = global_config
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_adb, Py_None) < 0) __PYX_ERR(0, 1010, __pyx_L1_error)

  /* "ok/Capture.pyx":1011
 *         self._device = None
 *         self._adb = None
 *         self.executor = None             # <<<<<<<<<<<<<<
 *         self.global_config = global_config
 *         self._adb_lock = threading.Lock()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_executor, Py_None) < 0) __PYX_ERR(0, 1011, __pyx_L1_error)

  /* "ok/Capture.pyx":1012
 *         self._adb = None
 *         self.executor = None
 *         self.global_config = global_config             # <<<<<<<<<<<<<<
 *         self._adb_lock = threading.Lock()
 *         supported_resolution = app_config.get(
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_global_config, __pyx_v_global_config) < 0) __PYX_ERR(0, 1012, __pyx_L1_error)

  /* "ok/Capture.pyx":1013
 *         self.executor = None
 *         self.global_config = global_config
 *         self._adb_lock = threading.Lock()             # <<<<<<<<<<<<<<
 *         supported_resolution = app_config.get(
 *             'supported_resolution', {})
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Lock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_adb_lock, __pyx_t_1) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1014
 *         self.global_config = global_config
 *         self._adb_lock = threading.Lock()
 *         supported_resolution = app_config.get(             # <<<<<<<<<<<<<<
 *             'supported_resolution', {})
 *         self.supported_ratio = parse_ratio(supported_resolution.get('ratio'))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_app_config, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "ok/Capture.pyx":1015
 *         self._adb_lock = threading.Lock()
 *         supported_resolution = app_config.get(
 *             'supported_resolution', {})             # <<<<<<<<<<<<<<
 *         self.supported_ratio = parse_ratio(supported_resolution.get('ratio'))
 *         self.windows_capture_config = app_config.get('windows')
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_n_s_supported_resolution, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_supported_resolution = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1016
 *         supported_resolution = app_config.get(
 *             'supported_resolution', {})
 *         self.supported_ratio = parse_ratio(supported_resolution.get('ratio'))             # <<<<<<<<<<<<<<
 *         self.windows_capture_config = app_config.get('windows')
 *         self.adb_capture_config = app_config.get('adb')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_parse_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_supported_resolution, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_ratio};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_supported_ratio, __pyx_t_1) < 0) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1017
 *             'supported_resolution', {})
 *         self.supported_ratio = parse_ratio(supported_resolution.get('ratio'))
 *         self.windows_capture_config = app_config.get('windows')             # <<<<<<<<<<<<<<
 *         self.adb_capture_config = app_config.get('adb')
 *         self.debug = app_config.get('debug')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_app_config, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_windows};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config, __pyx_t_1) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1018
 *         self.supported_ratio = parse_ratio(supported_resolution.get('ratio'))
 *         self.windows_capture_config = app_config.get('windows')
 *         self.adb_capture_config = app_config.get('adb')             # <<<<<<<<<<<<<<
 *         self.debug = app_config.get('debug')
 *         self.interaction = None
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_app_config, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_adb_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_adb_capture_config, __pyx_t_1) < 0) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1019
 *         self.windows_capture_config = app_config.get('windows')
 *         self.adb_capture_config = app_config.get('adb')
 *         self.debug = app_config.get('debug')             # <<<<<<<<<<<<<<
 *         self.interaction = None
 *         self.device_dict = {}
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_app_config, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_debug};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_debug, __pyx_t_1) < 0) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1020
 *         self.adb_capture_config = app_config.get('adb')
 *         self.debug = app_config.get('debug')
 *         self.interaction = None             # <<<<<<<<<<<<<<
 *         self.device_dict = {}
 *         self.exit_event = exit_event
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_interaction, Py_None) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)

  /* "ok/Capture.pyx":1021
 *         self.debug = app_config.get('debug')
 *         self.interaction = None
 *         self.device_dict = {}             # <<<<<<<<<<<<<<
 *         self.exit_event = exit_event
 *         self.resolution_dict = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_device_dict, __pyx_t_1) < 0) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1022
 *         self.interaction = None
 *         self.device_dict = {}
 *         self.exit_event = exit_event             # <<<<<<<<<<<<<<
 *         self.resolution_dict = {}
 *         if self.windows_capture_config is not None:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_exit_event, __pyx_v_exit_event) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)

  /* "ok/Capture.pyx":1023
 *         self.device_dict = {}
 *         self.exit_event = exit_event
 *         self.resolution_dict = {}             # <<<<<<<<<<<<<<
 *         if self.windows_capture_config is not None:
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_resolution_dict, __pyx_t_1) < 0) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1024
 *         self.exit_event = exit_event
 *         self.resolution_dict = {}
 *         if self.windows_capture_config is not None:             # <<<<<<<<<<<<<<
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),
 *                                    self.windows_capture_config.get('exe'),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "ok/Capture.pyx":1025
 *         self.resolution_dict = {}
 *         if self.windows_capture_config is not None:
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),             # <<<<<<<<<<<<<<
 *                                    self.windows_capture_config.get('exe'),
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_title};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "ok/Capture.pyx":1026
 *         if self.windows_capture_config is not None:
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),
 *                                    self.windows_capture_config.get('exe'),             # <<<<<<<<<<<<<<
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 *                                    global_config=self.global_config, device_manager=self)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_exe};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "ok/Capture.pyx":1025
 *         self.resolution_dict = {}
 *         if self.windows_capture_config is not None:
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),             # <<<<<<<<<<<<<<
 *                                    self.windows_capture_config.get('exe'),
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 */
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_exit_event);
    __Pyx_GIVEREF(__pyx_v_exit_event);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_exit_event)) __PYX_ERR(0, 1025, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(0, 1025, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3)) __PYX_ERR(0, 1025, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1027
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),
 *                                    self.windows_capture_config.get('exe'),
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),             # <<<<<<<<<<<<<<
 *                                    global_config=self.global_config, device_manager=self)
 *             if self.windows_capture_config.get(
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_hwnd_class};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_hwnd_class, __pyx_t_1) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1028
 *                                    self.windows_capture_config.get('exe'),
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 *                                    global_config=self.global_config, device_manager=self)             # <<<<<<<<<<<<<<
 *             if self.windows_capture_config.get(
 *                     'interaction') == 'PostMessage':
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_global_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_global_config, __pyx_t_1) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_device_manager, __pyx_v_self) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)

    /* "ok/Capture.pyx":1025
 *         self.resolution_dict = {}
 *         if self.windows_capture_config is not None:
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),             # <<<<<<<<<<<<<<
 *                                    self.windows_capture_config.get('exe'),
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow), __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_hwnd, __pyx_t_1) < 0) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1029
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 *                                    global_config=self.global_config, device_manager=self)
 *             if self.windows_capture_config.get(             # <<<<<<<<<<<<<<
 *                     'interaction') == 'PostMessage':
 *                 from ok.interaction.PostMessageInteraction import PostMessageInteraction
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_interaction};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_PostMessage, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "ok/Capture.pyx":1031
 *             if self.windows_capture_config.get(
 *                     'interaction') == 'PostMessage':
 *                 from ok.interaction.PostMessageInteraction import PostMessageInteraction             # <<<<<<<<<<<<<<
 *                 self.win_interaction_class = PostMessageInteraction
 *             else:
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_PostMessageInteraction);
      __Pyx_GIVEREF(__pyx_n_s_PostMessageInteraction);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PostMessageInteraction)) __PYX_ERR(0, 1031, __pyx_L1_error);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_ok_interaction_PostMessageIntera, __pyx_t_1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_PostMessageInteraction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_PostMessageInteraction = __pyx_t_1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ok/Capture.pyx":1032
 *                     'interaction') == 'PostMessage':
 *                 from ok.interaction.PostMessageInteraction import PostMessageInteraction
 *                 self.win_interaction_class = PostMessageInteraction             # <<<<<<<<<<<<<<
 *             else:
 *                 from ok.interaction.PyDirectInteraction import PyDirectInteraction
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_win_interaction_class, __pyx_v_PostMessageInteraction) < 0) __PYX_ERR(0, 1032, __pyx_L1_error)

      /* "ok/Capture.pyx":1029
 *                                    hwnd_class=self.windows_capture_config.get('hwnd_class'),
 *                                    global_config=self.global_config, device_manager=self)
 *             if self.windows_capture_config.get(             # <<<<<<<<<<<<<<
 *                     'interaction') == 'PostMessage':
 *                 from ok.interaction.PostMessageInteraction import PostMessageInteraction
 */
      goto __pyx_L4;
    }

    /* "ok/Capture.pyx":1034
 *                 self.win_interaction_class = PostMessageInteraction
 *             else:
 *                 from ok.interaction.PyDirectInteraction import PyDirectInteraction             # <<<<<<<<<<<<<<
 *                 self.win_interaction_class = PyDirectInteraction
 *         else:
 */
    /*else*/ {
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_PyDirectInteraction);
      __Pyx_GIVEREF(__pyx_n_s_PyDirectInteraction);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_PyDirectInteraction)) __PYX_ERR(0, 1034, __pyx_L1_error);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_ok_interaction_PyDirectInteracti, __pyx_t_5, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PyDirectInteraction); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_PyDirectInteraction = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1035
 *             else:
 *                 from ok.interaction.PyDirectInteraction import PyDirectInteraction
 *                 self.win_interaction_class = PyDirectInteraction             # <<<<<<<<<<<<<<
 *         else:
 *             self.hwnd = None
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_win_interaction_class, __pyx_v_PyDirectInteraction) < 0) __PYX_ERR(0, 1035, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "ok/Capture.pyx":1024
 *         self.exit_event = exit_event
 *         self.resolution_dict = {}
 *         if self.windows_capture_config is not None:             # <<<<<<<<<<<<<<
 *             self.hwnd = HwndWindow(exit_event, self.windows_capture_config.get('title'),
 *                                    self.windows_capture_config.get('exe'),
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":1037
 *                 self.win_interaction_class = PyDirectInteraction
 *         else:
 *             self.hwnd = None             # <<<<<<<<<<<<<<
 *         self.config = Config("devices", {"preferred": "none", "pc_full_path": "none", 'capture': 'windows'})
 *         self.capture_method = None
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_hwnd, Py_None) < 0) __PYX_ERR(0, 1037, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":1038
 *         else:
 *             self.hwnd = None
 *         self.config = Config("devices", {"preferred": "none", "pc_full_path": "none", 'capture': 'windows'})             # <<<<<<<<<<<<<<
 *         self.capture_method = None
 *         self.handler = Handler(exit_event, 'RefreshAdb')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_preferred, __pyx_n_s_none) < 0) __PYX_ERR(0, 1038, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_pc_full_path, __pyx_n_s_none) < 0) __PYX_ERR(0, 1038, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_capture, __pyx_n_s_windows) < 0) __PYX_ERR(0, 1038, __pyx_L1_error)
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_n_s_devices, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_config, __pyx_t_1) < 0) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1039
 *             self.hwnd = None
 *         self.config = Config("devices", {"preferred": "none", "pc_full_path": "none", 'capture': 'windows'})
 *         self.capture_method = None             # <<<<<<<<<<<<<<
 *         self.handler = Handler(exit_event, 'RefreshAdb')
 *         logger.info('__init__ end')
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_capture_method, Py_None) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)

  /* "ok/Capture.pyx":1040
 *         self.config = Config("devices", {"preferred": "none", "pc_full_path": "none", 'capture': 'windows'})
 *         self.capture_method = None
 *         self.handler = Handler(exit_event, 'RefreshAdb')             # <<<<<<<<<<<<<<
 *         logger.info('__init__ end')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Handler); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_exit_event, __pyx_n_s_RefreshAdb};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_handler, __pyx_t_1) < 0) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1041
 *         self.capture_method = None
 *         self.handler = Handler(exit_event, 'RefreshAdb')
 *         logger.info('__init__ end')             # <<<<<<<<<<<<<<
 * 
 *     def refresh(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_s_init___end};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1007
 * class DeviceManager:
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):             # <<<<<<<<<<<<<<
 *         logger.info('__init__ start')
 *         self._device = None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_supported_resolution);
  __Pyx_XDECREF(__pyx_v_PostMessageInteraction);
  __Pyx_XDECREF(__pyx_v_PyDirectInteraction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1043
 *         logger.info('__init__ end')
 * 
 *     def refresh(self):             # <<<<<<<<<<<<<<
 *         logger.debug('calling refresh')
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_3refresh(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_3refresh = {"refresh", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_3refresh, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_3refresh(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refresh (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "refresh") < 0)) __PYX_ERR(0, 1043, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refresh", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1043, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.refresh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_2refresh(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_2refresh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refresh", 1);

  /* "ok/Capture.pyx":1044
 * 
 *     def refresh(self):
 *         logger.debug('calling refresh')             # <<<<<<<<<<<<<<
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s_calling_refresh};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1045
 *     def refresh(self):
 *         logger.debug('calling refresh')
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_handler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_post); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_do_refresh); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_remove_existing, Py_True) < 0) __PYX_ERR(0, 1045, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_skip_if_running, Py_True) < 0) __PYX_ERR(0, 1045, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1043
 *         logger.info('__init__ end')
 * 
 *     def refresh(self):             # <<<<<<<<<<<<<<
 *         logger.debug('calling refresh')
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.refresh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1047
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def adb(self):
 *         with self._adb_lock:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_5adb(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_5adb = {"adb", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_5adb, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_5adb(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1047, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb") < 0)) __PYX_ERR(0, 1047, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1047, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_4adb(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_4adb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_adbutils = NULL;
  PyObject *__pyx_v__get_bin_dir = NULL;
  PyObject *__pyx_v_bin_dir = NULL;
  PyObject *__pyx_v_exe = NULL;
  PyObject *__pyx_v__is_valid_exe = NULL;
  PyObject *__pyx_v_AdbError = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb", 1);

  /* "ok/Capture.pyx":1049
 *     @property
 *     def adb(self):
 *         with self._adb_lock:             # <<<<<<<<<<<<<<
 *             if self._adb is None:
 *                 import adbutils
 */
  /*with:*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_lock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "ok/Capture.pyx":1050
 *     def adb(self):
 *         with self._adb_lock:
 *             if self._adb is None:             # <<<<<<<<<<<<<<
 *                 import adbutils
 *                 logger.debug(f'init adb')
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = (__pyx_t_1 == Py_None);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_10) {

            /* "ok/Capture.pyx":1051
 *         with self._adb_lock:
 *             if self._adb is None:
 *                 import adbutils             # <<<<<<<<<<<<<<
 *                 logger.debug(f'init adb')
 *                 from adbutils._utils import _get_bin_dir
 */
            __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_adbutils, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_v_adbutils = __pyx_t_1;
            __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1052
 *             if self._adb is None:
 *                 import adbutils
 *                 logger.debug(f'init adb')             # <<<<<<<<<<<<<<
 *                 from adbutils._utils import _get_bin_dir
 *                 bin_dir = _get_bin_dir()
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1052, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_debug); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1052, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_init_adb};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1052, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1053
 *                 import adbutils
 *                 logger.debug(f'init adb')
 *                 from adbutils._utils import _get_bin_dir             # <<<<<<<<<<<<<<
 *                 bin_dir = _get_bin_dir()
 *                 exe = os.path.join(bin_dir, "adb.exe" if os.name == 'nt' else 'adb')
 */
            __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_n_s_get_bin_dir);
            __Pyx_GIVEREF(__pyx_n_s_get_bin_dir);
            if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_get_bin_dir)) __PYX_ERR(0, 1053, __pyx_L7_error);
            __pyx_t_4 = __Pyx_Import(__pyx_n_s_adbutils__utils, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_get_bin_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_1);
            __pyx_v__get_bin_dir = __pyx_t_1;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "ok/Capture.pyx":1054
 *                 logger.debug(f'init adb')
 *                 from adbutils._utils import _get_bin_dir
 *                 bin_dir = _get_bin_dir()             # <<<<<<<<<<<<<<
 *                 exe = os.path.join(bin_dir, "adb.exe" if os.name == 'nt' else 'adb')
 *                 from adbutils._utils import _is_valid_exe
 */
            __Pyx_INCREF(__pyx_v__get_bin_dir);
            __pyx_t_1 = __pyx_v__get_bin_dir; __pyx_t_3 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_v_bin_dir = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "ok/Capture.pyx":1055
 *                 from adbutils._utils import _get_bin_dir
 *                 bin_dir = _get_bin_dir()
 *                 exe = os.path.join(bin_dir, "adb.exe" if os.name == 'nt' else 'adb')             # <<<<<<<<<<<<<<
 *                 from adbutils._utils import _is_valid_exe
 *                 if os.path.isfile(exe) and _is_valid_exe(exe):
 */
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1055, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1055, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_11, __pyx_n_s_nt, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1055, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_10) {
              __Pyx_INCREF(__pyx_kp_s_adb_exe);
              __pyx_t_3 = __pyx_kp_s_adb_exe;
            } else {
              __Pyx_INCREF(__pyx_n_s_adb_2);
              __pyx_t_3 = __pyx_n_s_adb_2;
            }
            __pyx_t_11 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_v_bin_dir, __pyx_t_3};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_v_exe = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "ok/Capture.pyx":1056
 *                 bin_dir = _get_bin_dir()
 *                 exe = os.path.join(bin_dir, "adb.exe" if os.name == 'nt' else 'adb')
 *                 from adbutils._utils import _is_valid_exe             # <<<<<<<<<<<<<<
 *                 if os.path.isfile(exe) and _is_valid_exe(exe):
 *                     os.environ['ADBUTILS_ADB_PATH'] = exe
 */
            __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1056, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_n_s_is_valid_exe);
            __Pyx_GIVEREF(__pyx_n_s_is_valid_exe);
            if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_is_valid_exe)) __PYX_ERR(0, 1056, __pyx_L7_error);
            __pyx_t_1 = __Pyx_Import(__pyx_n_s_adbutils__utils, __pyx_t_4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_is_valid_exe); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1056, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_4);
            __pyx_v__is_valid_exe = __pyx_t_4;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1057
 *                 exe = os.path.join(bin_dir, "adb.exe" if os.name == 'nt' else 'adb')
 *                 from adbutils._utils import _is_valid_exe
 *                 if os.path.isfile(exe) and _is_valid_exe(exe):             # <<<<<<<<<<<<<<
 *                     os.environ['ADBUTILS_ADB_PATH'] = exe
 *                     logger.info(f'set ADBUTILS_ADB_PATH {os.getenv("ADBUTILS_ADB_PATH")}')
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_exe};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1057, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_12) {
            } else {
              __pyx_t_10 = __pyx_t_12;
              goto __pyx_L15_bool_binop_done;
            }
            __Pyx_INCREF(__pyx_v__is_valid_exe);
            __pyx_t_4 = __pyx_v__is_valid_exe; __pyx_t_3 = NULL;
            __pyx_t_6 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_6 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_exe};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1057, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_10 = __pyx_t_12;
            __pyx_L15_bool_binop_done:;
            if (__pyx_t_10) {

              /* "ok/Capture.pyx":1058
 *                 from adbutils._utils import _is_valid_exe
 *                 if os.path.isfile(exe) and _is_valid_exe(exe):
 *                     os.environ['ADBUTILS_ADB_PATH'] = exe             # <<<<<<<<<<<<<<
 *                     logger.info(f'set ADBUTILS_ADB_PATH {os.getenv("ADBUTILS_ADB_PATH")}')
 *                 else:
 */
              __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_environ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1058, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely((PyObject_SetItem(__pyx_t_4, __pyx_n_s_ADBUTILS_ADB_PATH, __pyx_v_exe) < 0))) __PYX_ERR(0, 1058, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "ok/Capture.pyx":1059
 *                 if os.path.isfile(exe) and _is_valid_exe(exe):
 *                     os.environ['ADBUTILS_ADB_PATH'] = exe
 *                     logger.info(f'set ADBUTILS_ADB_PATH {os.getenv("ADBUTILS_ADB_PATH")}')             # <<<<<<<<<<<<<<
 *                 else:
 *                     logger.error(f'set ADBUTILS_ADB_PATH failed {exe}')
 */
              __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1059, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_os); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1059, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_getenv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1059, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = NULL;
              __pyx_t_6 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_11)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_11);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                  __pyx_t_6 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_n_s_ADBUTILS_ADB_PATH};
                __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              }
              __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1059, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_set_ADBUTILS_ADB_PATH, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = NULL;
              __pyx_t_6 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_5)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_5);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                  __pyx_t_6 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_1};
                __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1059, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "ok/Capture.pyx":1057
 *                 exe = os.path.join(bin_dir, "adb.exe" if os.name == 'nt' else 'adb')
 *                 from adbutils._utils import _is_valid_exe
 *                 if os.path.isfile(exe) and _is_valid_exe(exe):             # <<<<<<<<<<<<<<
 *                     os.environ['ADBUTILS_ADB_PATH'] = exe
 *                     logger.info(f'set ADBUTILS_ADB_PATH {os.getenv("ADBUTILS_ADB_PATH")}')
 */
              goto __pyx_L14;
            }

            /* "ok/Capture.pyx":1061
 *                     logger.info(f'set ADBUTILS_ADB_PATH {os.getenv("ADBUTILS_ADB_PATH")}')
 *                 else:
 *                     logger.error(f'set ADBUTILS_ADB_PATH failed {exe}')             # <<<<<<<<<<<<<<
 *                 self._adb = adbutils.AdbClient(host="127.0.0.1", socket_timeout=4)
 *                 from adbutils import AdbError
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_exe, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_set_ADBUTILS_ADB_PATH_failed, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_3 = NULL;
              __pyx_t_6 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                  __pyx_t_6 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
                __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_L14:;

            /* "ok/Capture.pyx":1062
 *                 else:
 *                     logger.error(f'set ADBUTILS_ADB_PATH failed {exe}')
 *                 self._adb = adbutils.AdbClient(host="127.0.0.1", socket_timeout=4)             # <<<<<<<<<<<<<<
 *                 from adbutils import AdbError
 *                 try:
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_adbutils, __pyx_n_s_AdbClient); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1062, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_host, __pyx_kp_s_127_0_0_1) < 0) __PYX_ERR(0, 1062, __pyx_L7_error)
            if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_socket_timeout, __pyx_int_4) < 0) __PYX_ERR(0, 1062, __pyx_L7_error)
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1062, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_adb, __pyx_t_5) < 0) __PYX_ERR(0, 1062, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "ok/Capture.pyx":1063
 *                     logger.error(f'set ADBUTILS_ADB_PATH failed {exe}')
 *                 self._adb = adbutils.AdbClient(host="127.0.0.1", socket_timeout=4)
 *                 from adbutils import AdbError             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._adb.device_list()
 */
            __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1063, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_n_s_AdbError);
            __Pyx_GIVEREF(__pyx_n_s_AdbError);
            if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_AdbError)) __PYX_ERR(0, 1063, __pyx_L7_error);
            __pyx_t_1 = __Pyx_Import(__pyx_n_s_adbutils, __pyx_t_5, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AdbError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1063, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_5);
            __pyx_v_AdbError = __pyx_t_5;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1064
 *                 self._adb = adbutils.AdbClient(host="127.0.0.1", socket_timeout=4)
 *                 from adbutils import AdbError
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._adb.device_list()
 *                 except AdbError as e:
 */
            {
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
              __Pyx_XGOTREF(__pyx_t_13);
              __Pyx_XGOTREF(__pyx_t_14);
              __Pyx_XGOTREF(__pyx_t_15);
              /*try:*/ {

                /* "ok/Capture.pyx":1065
 *                 from adbutils import AdbError
 *                 try:
 *                     self._adb.device_list()             # <<<<<<<<<<<<<<
 *                 except AdbError as e:
 *                     self.try_kill_adb(e)
 */
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1065, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_device_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1065, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = NULL;
                __pyx_t_6 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_4))) {
                  __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
                  if (likely(__pyx_t_5)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                    __Pyx_INCREF(__pyx_t_5);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_4, function);
                    __pyx_t_6 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
                  __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                /* "ok/Capture.pyx":1064
 *                 self._adb = adbutils.AdbClient(host="127.0.0.1", socket_timeout=4)
 *                 from adbutils import AdbError
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._adb.device_list()
 *                 except AdbError as e:
 */
              }
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              goto __pyx_L22_try_end;
              __pyx_L17_error:;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "ok/Capture.pyx":1066
 *                 try:
 *                     self._adb.device_list()
 *                 except AdbError as e:             # <<<<<<<<<<<<<<
 *                     self.try_kill_adb(e)
 *             return self._adb
 */
              __pyx_t_16 = __Pyx_PyErr_ExceptionMatches(__pyx_v_AdbError);
              if (__pyx_t_16) {
                __Pyx_AddTraceback("ok.Capture.DeviceManager.adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 1066, __pyx_L19_except_error)
                __Pyx_XGOTREF(__pyx_t_1);
                __Pyx_XGOTREF(__pyx_t_4);
                __Pyx_XGOTREF(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_4);
                __pyx_v_e = __pyx_t_4;
                /*try:*/ {

                  /* "ok/Capture.pyx":1067
 *                     self._adb.device_list()
 *                 except AdbError as e:
 *                     self.try_kill_adb(e)             # <<<<<<<<<<<<<<
 *             return self._adb
 * 
 */
                  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_try_kill_adb); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1067, __pyx_L28_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __pyx_t_17 = NULL;
                  __pyx_t_6 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_11))) {
                    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_11);
                    if (likely(__pyx_t_17)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                      __Pyx_INCREF(__pyx_t_17);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_11, function);
                      __pyx_t_6 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_v_e};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
                    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L28_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }

                /* "ok/Capture.pyx":1066
 *                 try:
 *                     self._adb.device_list()
 *                 except AdbError as e:             # <<<<<<<<<<<<<<
 *                     self.try_kill_adb(e)
 *             return self._adb
 */
                /*finally:*/ {
                  /*normal exit:*/{
                    __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
                    goto __pyx_L29;
                  }
                  __pyx_L28_error:;
                  /*exception exit:*/{
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
                    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                    if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_24, &__pyx_t_25);
                    if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
                    __Pyx_XGOTREF(__pyx_t_20);
                    __Pyx_XGOTREF(__pyx_t_21);
                    __Pyx_XGOTREF(__pyx_t_22);
                    __Pyx_XGOTREF(__pyx_t_23);
                    __Pyx_XGOTREF(__pyx_t_24);
                    __Pyx_XGOTREF(__pyx_t_25);
                    __pyx_t_16 = __pyx_lineno; __pyx_t_18 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
                    {
                      __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
                    }
                    if (PY_MAJOR_VERSION >= 3) {
                      __Pyx_XGIVEREF(__pyx_t_23);
                      __Pyx_XGIVEREF(__pyx_t_24);
                      __Pyx_XGIVEREF(__pyx_t_25);
                      __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_24, __pyx_t_25);
                    }
                    __Pyx_XGIVEREF(__pyx_t_20);
                    __Pyx_XGIVEREF(__pyx_t_21);
                    __Pyx_XGIVEREF(__pyx_t_22);
                    __Pyx_ErrRestore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
                    __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
                    __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_18; __pyx_filename = __pyx_t_19;
                    goto __pyx_L19_except_error;
                  }
                  __pyx_L29:;
                }
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                goto __pyx_L18_exception_handled;
              }
              goto __pyx_L19_except_error;

              /* "ok/Capture.pyx":1064
 *                 self._adb = adbutils.AdbClient(host="127.0.0.1", socket_timeout=4)
 *                 from adbutils import AdbError
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._adb.device_list()
 *                 except AdbError as e:
 */
              __pyx_L19_except_error:;
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
              goto __pyx_L7_error;
              __pyx_L18_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
              __pyx_L22_try_end:;
            }

            /* "ok/Capture.pyx":1050
 *     def adb(self):
 *         with self._adb_lock:
 *             if self._adb is None:             # <<<<<<<<<<<<<<
 *                 import adbutils
 *                 logger.debug(f'init adb')
 */
          }

          /* "ok/Capture.pyx":1068
 *                 except AdbError as e:
 *                     self.try_kill_adb(e)
 *             return self._adb             # <<<<<<<<<<<<<<
 * 
 *     def try_kill_adb(self, e=None):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_r = __pyx_t_5;
          __pyx_t_5 = 0;
          goto __pyx_L11_try_return;

          /* "ok/Capture.pyx":1049
 *     @property
 *     def adb(self):
 *         with self._adb_lock:             # <<<<<<<<<<<<<<
 *             if self._adb is None:
 *                 import adbutils
 */
        }
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("ok.Capture.DeviceManager.adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_1) < 0) __PYX_ERR(0, 1049, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1049, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 1049, __pyx_L9_except_error)
          __pyx_t_12 = (!__pyx_t_10);
          if (unlikely(__pyx_t_12)) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_1);
            __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 1049, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L11_try_return:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L4_return;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_2) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__23, NULL);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L4_return: {
        __pyx_t_9 = __pyx_r;
        __pyx_r = 0;
        if (__pyx_t_2) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__23, NULL);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_r = __pyx_t_9;
        __pyx_t_9 = 0;
        goto __pyx_L0;
      }
      __pyx_L6:;
    }
    goto __pyx_L37;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L1_error;
    __pyx_L37:;
  }

  /* "ok/Capture.pyx":1047
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def adb(self):
 *         with self._adb_lock:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_adbutils);
  __Pyx_XDECREF(__pyx_v__get_bin_dir);
  __Pyx_XDECREF(__pyx_v_bin_dir);
  __Pyx_XDECREF(__pyx_v_exe);
  __Pyx_XDECREF(__pyx_v__is_valid_exe);
  __Pyx_XDECREF(__pyx_v_AdbError);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1070
 *             return self._adb
 * 
 *     def try_kill_adb(self, e=None):             # <<<<<<<<<<<<<<
 *         logger.error('try kill adb server', e)
 *         import psutil
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_7try_kill_adb(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_7try_kill_adb = {"try_kill_adb", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_7try_kill_adb, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_7try_kill_adb(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_e = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("try_kill_adb (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_e,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_e);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "try_kill_adb") < 0)) __PYX_ERR(0, 1070, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_e = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("try_kill_adb", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1070, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.try_kill_adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_6try_kill_adb(__pyx_self, __pyx_v_self, __pyx_v_e);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_6try_kill_adb(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_v_psutil = NULL;
  PyObject *__pyx_v_proc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  char const *__pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("try_kill_adb", 0);
  __Pyx_INCREF(__pyx_v_e);

  /* "ok/Capture.pyx":1071
 * 
 *     def try_kill_adb(self, e=None):
 *         logger.error('try kill adb server', e)             # <<<<<<<<<<<<<<
 *         import psutil
 *         for proc in psutil.process_iter():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_kp_s_try_kill_adb_server, __pyx_v_e};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1072
 *     def try_kill_adb(self, e=None):
 *         logger.error('try kill adb server', e)
 *         import psutil             # <<<<<<<<<<<<<<
 *         for proc in psutil.process_iter():
 *             # Check whether the process name matches
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_psutil, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_psutil = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1073
 *         logger.error('try kill adb server', e)
 *         import psutil
 *         for proc in psutil.process_iter():             # <<<<<<<<<<<<<<
 *             # Check whether the process name matches
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_psutil, __pyx_n_s_process_iter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1073, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1073, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1073, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1073, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1073, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1073, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_proc, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1075
 *         for proc in psutil.process_iter():
 *             # Check whether the process name matches
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':             # <<<<<<<<<<<<<<
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')
 *                 try:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proc, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_adb_exe, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proc, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_adb_2, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "ok/Capture.pyx":1076
 *             # Check whether the process name matches
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')             # <<<<<<<<<<<<<<
 *                 try:
 *                     proc.kill()
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1076, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_proc, __pyx_n_s_cmdline); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1076, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1076, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_kill_adb_by_process_name, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1077
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')
 *                 try:             # <<<<<<<<<<<<<<
 *                     proc.kill()
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        /*try:*/ {

          /* "ok/Capture.pyx":1078
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')
 *                 try:
 *                     proc.kill()             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     logger.error(f'kill adb server failed', e)
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_proc, __pyx_n_s_kill); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1078, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "ok/Capture.pyx":1077
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')
 *                 try:             # <<<<<<<<<<<<<<
 *                     proc.kill()
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ok/Capture.pyx":1079
 *                 try:
 *                     proc.kill()
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     logger.error(f'kill adb server failed', e)
 *         logger.info('try kill adb end')
 */
        __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_15) {
          __Pyx_AddTraceback("ok.Capture.DeviceManager.try_kill_adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_8, &__pyx_t_2) < 0) __PYX_ERR(0, 1079, __pyx_L10_except_error)
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_8);
          /*try:*/ {

            /* "ok/Capture.pyx":1080
 *                     proc.kill()
 *                 except Exception as e:
 *                     logger.error(f'kill adb server failed', e)             # <<<<<<<<<<<<<<
 *         logger.info('try kill adb end')
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1080, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_error); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1080, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_kp_u_kill_adb_server_failed, __pyx_v_e};
              __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1080, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }

          /* "ok/Capture.pyx":1079
 *                 try:
 *                     proc.kill()
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     logger.error(f'kill adb server failed', e)
 *         logger.info('try kill adb end')
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
              goto __pyx_L22;
            }
            __pyx_L21_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_22);
              __Pyx_XGOTREF(__pyx_t_23);
              __Pyx_XGOTREF(__pyx_t_24);
              __pyx_t_15 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_18 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_22);
                __Pyx_XGIVEREF(__pyx_t_23);
                __Pyx_XGIVEREF(__pyx_t_24);
                __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);
              }
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_ErrRestore(__pyx_t_19, __pyx_t_20, __pyx_t_21);
              __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
              __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_18;
              goto __pyx_L10_except_error;
            }
            __pyx_L22:;
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L9_exception_handled;
        }
        goto __pyx_L10_except_error;

        /* "ok/Capture.pyx":1077
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')
 *                 try:             # <<<<<<<<<<<<<<
 *                     proc.kill()
 *                 except Exception as e:
 */
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        __pyx_L15_try_end:;
      }

      /* "ok/Capture.pyx":1075
 *         for proc in psutil.process_iter():
 *             # Check whether the process name matches
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':             # <<<<<<<<<<<<<<
 *                 logger.info(f'kill adb by process name {proc.cmdline()}')
 *                 try:
 */
    }

    /* "ok/Capture.pyx":1073
 *         logger.error('try kill adb server', e)
 *         import psutil
 *         for proc in psutil.process_iter():             # <<<<<<<<<<<<<<
 *             # Check whether the process name matches
 *             if proc.name() == 'adb.exe' or proc.name() == 'adb':
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1081
 *                 except Exception as e:
 *                     logger.error(f'kill adb server failed', e)
 *         logger.info('try kill adb end')             # <<<<<<<<<<<<<<
 * 
 *     def adb_connect(self, addr, try_connect=True):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_s_try_kill_adb_end};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1070
 *             return self._adb
 * 
 *     def try_kill_adb(self, e=None):             # <<<<<<<<<<<<<<
 *         logger.error('try kill adb server', e)
 *         import psutil
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.try_kill_adb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_psutil);
  __Pyx_XDECREF(__pyx_v_proc);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1083
 *         logger.info('try kill adb end')
 * 
 *     def adb_connect(self, addr, try_connect=True):             # <<<<<<<<<<<<<<
 *         from adbutils import AdbError
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_9adb_connect(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_9adb_connect = {"adb_connect", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_9adb_connect, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_9adb_connect(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_addr = 0;
  PyObject *__pyx_v_try_connect = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_connect (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_addr,&__pyx_n_s_try_connect,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_addr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adb_connect", 0, 2, 3, 1); __PYX_ERR(0, 1083, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_try_connect);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_connect") < 0)) __PYX_ERR(0, 1083, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_addr = values[1];
    __pyx_v_try_connect = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_connect", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1083, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_8adb_connect(__pyx_self, __pyx_v_self, __pyx_v_addr, __pyx_v_try_connect);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_8adb_connect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_addr, PyObject *__pyx_v_try_connect) {
  PyObject *__pyx_v_AdbError = NULL;
  PyObject *__pyx_v_device = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  char const *__pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  char const *__pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_connect", 1);

  /* "ok/Capture.pyx":1084
 * 
 *     def adb_connect(self, addr, try_connect=True):
 *         from adbutils import AdbError             # <<<<<<<<<<<<<<
 *         try:
 *             for device in self.adb.list():
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AdbError);
  __Pyx_GIVEREF(__pyx_n_s_AdbError);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AdbError)) __PYX_ERR(0, 1084, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_adbutils, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AdbError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_AdbError = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":1085
 *     def adb_connect(self, addr, try_connect=True):
 *         from adbutils import AdbError
 *         try:             # <<<<<<<<<<<<<<
 *             for device in self.adb.list():
 *                 if self.exit_event.is_set():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "ok/Capture.pyx":1086
 *         from adbutils import AdbError
 *         try:
 *             for device in self.adb.list():             # <<<<<<<<<<<<<<
 *                 if self.exit_event.is_set():
 *                     logger.error(f"adb_connect exit_event is set")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_list); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6);
        __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1086, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1086, __pyx_L3_error)
              #endif
              if (__pyx_t_8 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1086, __pyx_L3_error)
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1086, __pyx_L3_error)
              #endif
              if (__pyx_t_8 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1086, __pyx_L3_error)
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1086, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_device, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "ok/Capture.pyx":1087
 *         try:
 *             for device in self.adb.list():
 *                 if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *                     logger.error(f"adb_connect exit_event is set")
 *                     return None
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exit_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_set); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1087, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1087, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_11) {

          /* "ok/Capture.pyx":1088
 *             for device in self.adb.list():
 *                 if self.exit_event.is_set():
 *                     logger.error(f"adb_connect exit_event is set")             # <<<<<<<<<<<<<<
 *                     return None
 *                 if device.serial == addr:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_logger); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1088, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_kp_u_adb_connect_exit_event_is_set};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1088, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "ok/Capture.pyx":1089
 *                 if self.exit_event.is_set():
 *                     logger.error(f"adb_connect exit_event is set")
 *                     return None             # <<<<<<<<<<<<<<
 *                 if device.serial == addr:
 *                     if device.state == 'offline':
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L7_try_return;

          /* "ok/Capture.pyx":1087
 *         try:
 *             for device in self.adb.list():
 *                 if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *                     logger.error(f"adb_connect exit_event is set")
 *                     return None
 */
        }

        /* "ok/Capture.pyx":1090
 *                     logger.error(f"adb_connect exit_event is set")
 *                     return None
 *                 if device.serial == addr:             # <<<<<<<<<<<<<<
 *                     if device.state == 'offline':
 *                         logger.debug(f'adb_connect offline disconnect first {addr}')
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_serial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_addr, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1090, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1090, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_11) {

          /* "ok/Capture.pyx":1091
 *                     return None
 *                 if device.serial == addr:
 *                     if device.state == 'offline':             # <<<<<<<<<<<<<<
 *                         logger.debug(f'adb_connect offline disconnect first {addr}')
 *                         self.adb.disconnect(addr)
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_offline, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1091, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_11) {

            /* "ok/Capture.pyx":1092
 *                 if device.serial == addr:
 *                     if device.state == 'offline':
 *                         logger.debug(f'adb_connect offline disconnect first {addr}')             # <<<<<<<<<<<<<<
 *                         self.adb.disconnect(addr)
 *                     else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1092, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1092, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_addr, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1092, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_connect_offline_disconnect_f, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1092, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_12};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1092, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1093
 *                     if device.state == 'offline':
 *                         logger.debug(f'adb_connect offline disconnect first {addr}')
 *                         self.adb.disconnect(addr)             # <<<<<<<<<<<<<<
 *                     else:
 *                         logger.debug(f'adb_connect already connected {addr}')
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1093, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_disconnect); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1093, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_addr};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1091
 *                     return None
 *                 if device.serial == addr:
 *                     if device.state == 'offline':             # <<<<<<<<<<<<<<
 *                         logger.debug(f'adb_connect offline disconnect first {addr}')
 *                         self.adb.disconnect(addr)
 */
            goto __pyx_L13;
          }

          /* "ok/Capture.pyx":1095
 *                         self.adb.disconnect(addr)
 *                     else:
 *                         logger.debug(f'adb_connect already connected {addr}')             # <<<<<<<<<<<<<<
 *                         return self.adb.device(serial=addr)
 *             if try_connect:
 */
          /*else*/ {
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1095, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_debug); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1095, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_addr, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1095, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_connect_already_connected, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1095, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_2};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ok/Capture.pyx":1096
 *                     else:
 *                         logger.debug(f'adb_connect already connected {addr}')
 *                         return self.adb.device(serial=addr)             # <<<<<<<<<<<<<<
 *             if try_connect:
 *                 ret = self.adb.connect(addr, timeout=5)
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_device); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1096, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_serial, __pyx_v_addr) < 0) __PYX_ERR(0, 1096, __pyx_L3_error)
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_r = __pyx_t_2;
            __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            goto __pyx_L7_try_return;
          }
          __pyx_L13:;

          /* "ok/Capture.pyx":1090
 *                     logger.error(f"adb_connect exit_event is set")
 *                     return None
 *                 if device.serial == addr:             # <<<<<<<<<<<<<<
 *                     if device.state == 'offline':
 *                         logger.debug(f'adb_connect offline disconnect first {addr}')
 */
        }

        /* "ok/Capture.pyx":1086
 *         from adbutils import AdbError
 *         try:
 *             for device in self.adb.list():             # <<<<<<<<<<<<<<
 *                 if self.exit_event.is_set():
 *                     logger.error(f"adb_connect exit_event is set")
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ok/Capture.pyx":1097
 *                         logger.debug(f'adb_connect already connected {addr}')
 *                         return self.adb.device(serial=addr)
 *             if try_connect:             # <<<<<<<<<<<<<<
 *                 ret = self.adb.connect(addr, timeout=5)
 *                 logger.debug(f'adb_connect try_connect {addr} {ret}')
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_try_connect); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1097, __pyx_L3_error)
      if (__pyx_t_11) {

        /* "ok/Capture.pyx":1098
 *                         return self.adb.device(serial=addr)
 *             if try_connect:
 *                 ret = self.adb.connect(addr, timeout=5)             # <<<<<<<<<<<<<<
 *                 logger.debug(f'adb_connect try_connect {addr} {ret}')
 *                 return self.adb_connect(addr, try_connect=False)
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_connect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_addr);
        __Pyx_GIVEREF(__pyx_v_addr);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_addr)) __PYX_ERR(0, 1098, __pyx_L3_error);
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_timeout, __pyx_int_5) < 0) __PYX_ERR(0, 1098, __pyx_L3_error)
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1098, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_ret = __pyx_t_10;
        __pyx_t_10 = 0;

        /* "ok/Capture.pyx":1099
 *             if try_connect:
 *                 ret = self.adb.connect(addr, timeout=5)
 *                 logger.debug(f'adb_connect try_connect {addr} {ret}')             # <<<<<<<<<<<<<<
 *                 return self.adb_connect(addr, try_connect=False)
 *             else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1099, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_debug); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1099, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1099, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_adb_connect_try_connect);
        __pyx_t_8 += 24;
        __Pyx_GIVEREF(__pyx_kp_u_adb_connect_try_connect);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_adb_connect_try_connect);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_addr, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_13;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u__11);
        __pyx_t_8 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__11);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__11);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_ret, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_13;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_8, __pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_2};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1099, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "ok/Capture.pyx":1100
 *                 ret = self.adb.connect(addr, timeout=5)
 *                 logger.debug(f'adb_connect try_connect {addr} {ret}')
 *                 return self.adb_connect(addr, try_connect=False)             # <<<<<<<<<<<<<<
 *             else:
 *                 logger.debug(f'adb_connect {addr} not in device list {self.adb.list()}')
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_connect); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1100, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1100, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_addr);
        __Pyx_GIVEREF(__pyx_v_addr);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_addr)) __PYX_ERR(0, 1100, __pyx_L3_error);
        __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1100, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_try_connect, Py_False) < 0) __PYX_ERR(0, 1100, __pyx_L3_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L7_try_return;

        /* "ok/Capture.pyx":1097
 *                         logger.debug(f'adb_connect already connected {addr}')
 *                         return self.adb.device(serial=addr)
 *             if try_connect:             # <<<<<<<<<<<<<<
 *                 ret = self.adb.connect(addr, timeout=5)
 *                 logger.debug(f'adb_connect try_connect {addr} {ret}')
 */
      }

      /* "ok/Capture.pyx":1102
 *                 return self.adb_connect(addr, try_connect=False)
 *             else:
 *                 logger.debug(f'adb_connect {addr} not in device list {self.adb.list()}')             # <<<<<<<<<<<<<<
 *         except AdbError as e:
 *             logger.error(f"adb connect error {addr}", e)
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_adb_connect_2);
        __pyx_t_8 += 12;
        __Pyx_GIVEREF(__pyx_kp_u_adb_connect_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_adb_connect_2);
        __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_v_addr, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_13;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_kp_u_not_in_device_list);
        __pyx_t_8 += 20;
        __Pyx_GIVEREF(__pyx_kp_u_not_in_device_list);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_in_device_list);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_list); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1102, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_8, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1102, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_14};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1102, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }

      /* "ok/Capture.pyx":1085
 *     def adb_connect(self, addr, try_connect=True):
 *         from adbutils import AdbError
 *         try:             # <<<<<<<<<<<<<<
 *             for device in self.adb.list():
 *                 if self.exit_event.is_set():
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":1103
 *             else:
 *                 logger.debug(f'adb_connect {addr} not in device list {self.adb.list()}')
 *         except AdbError as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"adb connect error {addr}", e)
 *             self.try_kill_adb(e)
 */
    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_v_AdbError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_6, &__pyx_t_14) < 0) __PYX_ERR(0, 1103, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;
      /*try:*/ {

        /* "ok/Capture.pyx":1104
 *                 logger.debug(f'adb_connect {addr} not in device list {self.adb.list()}')
 *         except AdbError as e:
 *             logger.error(f"adb connect error {addr}", e)             # <<<<<<<<<<<<<<
 *             self.try_kill_adb(e)
 *         except Exception as e:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_logger); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1104, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_error); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1104, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_v_addr, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1104, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_connect_error, __pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1104, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_16, __pyx_v_e};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1104, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":1105
 *         except AdbError as e:
 *             logger.error(f"adb connect error {addr}", e)
 *             self.try_kill_adb(e)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             logger.error(f"adb connect error return none {addr}", e)
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_try_kill_adb); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1105, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_16 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_e};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1105, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "ok/Capture.pyx":1103
 *             else:
 *                 logger.debug(f'adb_connect {addr} not in device list {self.adb.list()}')
 *         except AdbError as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"adb connect error {addr}", e)
 *             self.try_kill_adb(e)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L22;
        }
        __pyx_L21_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_24);
          __pyx_t_15 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_18 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);
          }
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_21);
          __Pyx_ErrRestore(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
          __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_18;
          goto __pyx_L5_except_error;
        }
        __pyx_L22:;
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L4_exception_handled;
    }

    /* "ok/Capture.pyx":1106
 *             logger.error(f"adb connect error {addr}", e)
 *             self.try_kill_adb(e)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"adb connect error return none {addr}", e)
 * 
 */
    __pyx_t_17 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_17) {
      __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(0, 1106, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;
      /*try:*/ {

        /* "ok/Capture.pyx":1107
 *             self.try_kill_adb(e)
 *         except Exception as e:
 *             logger.error(f"adb connect error return none {addr}", e)             # <<<<<<<<<<<<<<
 * 
 *     def get_devices(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1107, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_error); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1107, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_addr, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1107, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_connect_error_return_none, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1107, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_t_10, __pyx_v_e};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "ok/Capture.pyx":1106
 *             logger.error(f"adb connect error {addr}", e)
 *             self.try_kill_adb(e)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"adb connect error return none {addr}", e)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L33;
        }
        __pyx_L32_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_24 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_24, &__pyx_t_23, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_24, &__pyx_t_23, &__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_17 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_25 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_24);
          __Pyx_XGIVEREF(__pyx_t_23);
          __Pyx_XGIVEREF(__pyx_t_22);
          __Pyx_ErrRestore(__pyx_t_24, __pyx_t_23, __pyx_t_22);
          __pyx_t_24 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_17; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_25;
          goto __pyx_L5_except_error;
        }
        __pyx_L33:;
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":1085
 *     def adb_connect(self, addr, try_connect=True):
 *         from adbutils import AdbError
 *         try:             # <<<<<<<<<<<<<<
 *             for device in self.adb.list():
 *                 if self.exit_event.is_set():
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L8_try_end:;
  }

  /* "ok/Capture.pyx":1083
 *         logger.info('try kill adb end')
 * 
 *     def adb_connect(self, addr, try_connect=True):             # <<<<<<<<<<<<<<
 *         from adbutils import AdbError
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_AdbError);
  __Pyx_XDECREF(__pyx_v_device);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1109
 *             logger.error(f"adb connect error return none {addr}", e)
 * 
 *     def get_devices(self):             # <<<<<<<<<<<<<<
 *         return list(self.device_dict.values())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_11get_devices(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_11get_devices = {"get_devices", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_11get_devices, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_11get_devices(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_devices (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1109, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_devices") < 0)) __PYX_ERR(0, 1109, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_devices", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1109, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_devices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_10get_devices(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_10get_devices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_devices", 1);

  /* "ok/Capture.pyx":1110
 * 
 *     def get_devices(self):
 *         return list(self.device_dict.values())             # <<<<<<<<<<<<<<
 * 
 *     def update_pc_device(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1109
 *             logger.error(f"adb connect error return none {addr}", e)
 * 
 *     def get_devices(self):             # <<<<<<<<<<<<<<
 *         return list(self.device_dict.values())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_devices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1112
 *         return list(self.device_dict.values())
 * 
 *     def update_pc_device(self):             # <<<<<<<<<<<<<<
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_13update_pc_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_13update_pc_device = {"update_pc_device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_13update_pc_device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_13update_pc_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_pc_device (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1112, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_pc_device") < 0)) __PYX_ERR(0, 1112, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_pc_device", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1112, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.update_pc_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_12update_pc_device(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_12update_pc_device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_hwnd = NULL;
  PyObject *__pyx_v_full_path = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_x = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_nick = NULL;
  PyObject *__pyx_v_pc_device = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_pc_device", 1);

  /* "ok/Capture.pyx":1113
 * 
 *     def update_pc_device(self):
 *         if self.windows_capture_config is not None:             # <<<<<<<<<<<<<<
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1114
 *     def update_pc_device(self):
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),             # <<<<<<<<<<<<<<
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,
 *                                                                    class_name=self.windows_capture_config.get(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_find_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_n_s_title};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "ok/Capture.pyx":1115
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,             # <<<<<<<<<<<<<<
 *                                                                    class_name=self.windows_capture_config.get(
 *                                                                        'hwnd_class'), player_id=-1)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_n_s_exe};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "ok/Capture.pyx":1114
 *     def update_pc_device(self):
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),             # <<<<<<<<<<<<<<
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,
 *                                                                    class_name=self.windows_capture_config.get(
 */
    __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5)) __PYX_ERR(0, 1114, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_int_0)) __PYX_ERR(0, 1114, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_int_0)) __PYX_ERR(0, 1114, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;

    /* "ok/Capture.pyx":1116
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,
 *                                                                    class_name=self.windows_capture_config.get(             # <<<<<<<<<<<<<<
 *                                                                        'hwnd_class'), player_id=-1)
 *             nick = name or self.windows_capture_config.get('exe')
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_n_s_hwnd_class};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_class_name, __pyx_t_3) < 0) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_player_id, __pyx_int_neg_1) < 0) __PYX_ERR(0, 1116, __pyx_L1_error)

    /* "ok/Capture.pyx":1114
 *     def update_pc_device(self):
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),             # <<<<<<<<<<<<<<
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,
 *                                                                    class_name=self.windows_capture_config.get(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 7)) {
        if (size > 7) __Pyx_RaiseTooManyValuesError(7);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1114, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 6); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 6); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[7] = {&__pyx_t_5,&__pyx_t_7,&__pyx_t_1,&__pyx_t_8,&__pyx_t_4,&__pyx_t_9,&__pyx_t_10};
        for (i=0; i < 7; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1114, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[7] = {&__pyx_t_5,&__pyx_t_7,&__pyx_t_1,&__pyx_t_8,&__pyx_t_4,&__pyx_t_9,&__pyx_t_10};
      __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
      for (index=0; index < 7; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 7) < 0) __PYX_ERR(0, 1114, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1114, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_name = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_hwnd = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_v_full_path = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_x = __pyx_t_8;
    __pyx_t_8 = 0;
    __pyx_v_y = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_width = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_v_height = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "ok/Capture.pyx":1118
 *                                                                    class_name=self.windows_capture_config.get(
 *                                                                        'hwnd_class'), player_id=-1)
 *             nick = name or self.windows_capture_config.get('exe')             # <<<<<<<<<<<<<<
 *             pc_device = {"address": "", "imei": 'pc', "device": "windows",
 *                          "model": "", "nick": nick, "width": width,
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_name); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1118, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __Pyx_INCREF(__pyx_v_name);
      __pyx_t_3 = __pyx_v_name;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_n_s_exe};
      __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_3 = __pyx_t_10;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_v_nick = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1119
 *                                                                        'hwnd_class'), player_id=-1)
 *             nick = name or self.windows_capture_config.get('exe')
 *             pc_device = {"address": "", "imei": 'pc', "device": "windows",             # <<<<<<<<<<<<<<
 *                          "model": "", "nick": nick, "width": width,
 *                          "height": height,
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_address, __pyx_kp_s__12) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_imei, __pyx_n_s_pc) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_device, __pyx_n_s_windows) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_model, __pyx_kp_s__12) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)

    /* "ok/Capture.pyx":1120
 *             nick = name or self.windows_capture_config.get('exe')
 *             pc_device = {"address": "", "imei": 'pc', "device": "windows",
 *                          "model": "", "nick": nick, "width": width,             # <<<<<<<<<<<<<<
 *                          "height": height,
 *                          "hwnd": nick, "capture": "windows",
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_nick, __pyx_v_nick) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_width, __pyx_v_width) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)

    /* "ok/Capture.pyx":1121
 *             pc_device = {"address": "", "imei": 'pc', "device": "windows",
 *                          "model": "", "nick": nick, "width": width,
 *                          "height": height,             # <<<<<<<<<<<<<<
 *                          "hwnd": nick, "capture": "windows",
 *                          "connected": hwnd is not None,
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_height, __pyx_v_height) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)

    /* "ok/Capture.pyx":1122
 *                          "model": "", "nick": nick, "width": width,
 *                          "height": height,
 *                          "hwnd": nick, "capture": "windows",             # <<<<<<<<<<<<<<
 *                          "connected": hwnd is not None,
 *                          "full_path": full_path or self.config.get('pc_full_path')
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_hwnd, __pyx_v_nick) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_capture, __pyx_n_s_windows) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)

    /* "ok/Capture.pyx":1123
 *                          "height": height,
 *                          "hwnd": nick, "capture": "windows",
 *                          "connected": hwnd is not None,             # <<<<<<<<<<<<<<
 *                          "full_path": full_path or self.config.get('pc_full_path')
 *                          }
 */
    __pyx_t_2 = (__pyx_v_hwnd != Py_None);
    __pyx_t_10 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_connected, __pyx_t_10) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "ok/Capture.pyx":1124
 *                          "hwnd": nick, "capture": "windows",
 *                          "connected": hwnd is not None,
 *                          "full_path": full_path or self.config.get('pc_full_path')             # <<<<<<<<<<<<<<
 *                          }
 *             if full_path and full_path != self.config.get('pc_full_path'):
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_full_path); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1124, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __Pyx_INCREF(__pyx_v_full_path);
      __pyx_t_10 = __pyx_v_full_path;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_n_s_pc_full_path};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L8_bool_binop_done:;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_full_path, __pyx_t_10) < 0) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_pc_device = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1126
 *                          "full_path": full_path or self.config.get('pc_full_path')
 *                          }
 *             if full_path and full_path != self.config.get('pc_full_path'):             # <<<<<<<<<<<<<<
 *                 self.config['pc_full_path'] = full_path
 * 
 */
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_full_path); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1126, __pyx_L1_error)
    if (__pyx_t_13) {
    } else {
      __pyx_t_2 = __pyx_t_13;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_n_s_pc_full_path};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_full_path, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_13;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":1127
 *                          }
 *             if full_path and full_path != self.config.get('pc_full_path'):
 *                 self.config['pc_full_path'] = full_path             # <<<<<<<<<<<<<<
 * 
 *             if width != 0:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely((PyObject_SetItem(__pyx_t_4, __pyx_n_s_pc_full_path, __pyx_v_full_path) < 0))) __PYX_ERR(0, 1127, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1126
 *                          "full_path": full_path or self.config.get('pc_full_path')
 *                          }
 *             if full_path and full_path != self.config.get('pc_full_path'):             # <<<<<<<<<<<<<<
 *                 self.config['pc_full_path'] = full_path
 * 
 */
    }

    /* "ok/Capture.pyx":1129
 *                 self.config['pc_full_path'] = full_path
 * 
 *             if width != 0:             # <<<<<<<<<<<<<<
 *                 pc_device["resolution"] = f"{width}x{height}"
 *             self.device_dict['pc'] = pc_device
 */
    __pyx_t_2 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_width, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1129, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":1130
 * 
 *             if width != 0:
 *                 pc_device["resolution"] = f"{width}x{height}"             # <<<<<<<<<<<<<<
 *             self.device_dict['pc'] = pc_device
 * 
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = 0;
      __pyx_t_15 = 127;
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_15;
      __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_n_u_x);
      __pyx_t_14 += 1;
      __Pyx_GIVEREF(__pyx_n_u_x);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_u_x);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_15;
      __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_pc_device, __pyx_n_s_resolution, __pyx_t_3) < 0))) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":1129
 *                 self.config['pc_full_path'] = full_path
 * 
 *             if width != 0:             # <<<<<<<<<<<<<<
 *                 pc_device["resolution"] = f"{width}x{height}"
 *             self.device_dict['pc'] = pc_device
 */
    }

    /* "ok/Capture.pyx":1131
 *             if width != 0:
 *                 pc_device["resolution"] = f"{width}x{height}"
 *             self.device_dict['pc'] = pc_device             # <<<<<<<<<<<<<<
 * 
 *     def do_refresh(self, current=False):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_SetItem(__pyx_t_3, __pyx_n_s_pc, __pyx_v_pc_device) < 0))) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1113
 * 
 *     def update_pc_device(self):
 *         if self.windows_capture_config is not None:             # <<<<<<<<<<<<<<
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 *                                                                    self.windows_capture_config.get('exe'), 0, 0,
 */
  }

  /* "ok/Capture.pyx":1112
 *         return list(self.device_dict.values())
 * 
 *     def update_pc_device(self):             # <<<<<<<<<<<<<<
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.update_pc_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_hwnd);
  __Pyx_XDECREF(__pyx_v_full_path);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_nick);
  __Pyx_XDECREF(__pyx_v_pc_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1133
 *             self.device_dict['pc'] = pc_device
 * 
 *     def do_refresh(self, current=False):             # <<<<<<<<<<<<<<
 *         self.update_pc_device()
 *         self.refresh_emulators(current)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_15do_refresh(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_15do_refresh = {"do_refresh", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_15do_refresh, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_15do_refresh(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_current = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_refresh (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_current,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_current);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "do_refresh") < 0)) __PYX_ERR(0, 1133, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_current = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_refresh", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1133, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.do_refresh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_14do_refresh(__pyx_self, __pyx_v_self, __pyx_v_current);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_14do_refresh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_current) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_refresh", 1);

  /* "ok/Capture.pyx":1134
 * 
 *     def do_refresh(self, current=False):
 *         self.update_pc_device()             # <<<<<<<<<<<<<<
 *         self.refresh_emulators(current)
 *         self.refresh_phones(current)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_update_pc_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1135
 *     def do_refresh(self, current=False):
 *         self.update_pc_device()
 *         self.refresh_emulators(current)             # <<<<<<<<<<<<<<
 *         self.refresh_phones(current)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_refresh_emulators); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_current};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1136
 *         self.update_pc_device()
 *         self.refresh_emulators(current)
 *         self.refresh_phones(current)             # <<<<<<<<<<<<<<
 * 
 *         if self.exit_event.is_set():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_refresh_phones); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_current};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1138
 *         self.refresh_phones(current)
 * 
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return
 *         self.do_start()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exit_event); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1139
 * 
 *         if self.exit_event.is_set():
 *             return             # <<<<<<<<<<<<<<
 *         self.do_start()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":1138
 *         self.refresh_phones(current)
 * 
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return
 *         self.do_start()
 */
  }

  /* "ok/Capture.pyx":1140
 *         if self.exit_event.is_set():
 *             return
 *         self.do_start()             # <<<<<<<<<<<<<<
 * 
 *         logger.debug(f'refresh {self.device_dict}')
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_do_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1142
 *         self.do_start()
 * 
 *         logger.debug(f'refresh {self.device_dict}')             # <<<<<<<<<<<<<<
 * 
 *     def refresh_phones(self, current=False):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_debug); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_refresh, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1133
 *             self.device_dict['pc'] = pc_device
 * 
 *     def do_refresh(self, current=False):             # <<<<<<<<<<<<<<
 *         self.update_pc_device()
 *         self.refresh_emulators(current)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.do_refresh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1144
 *         logger.debug(f'refresh {self.device_dict}')
 * 
 *     def refresh_phones(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_17refresh_phones(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_17refresh_phones = {"refresh_phones", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_17refresh_phones, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_17refresh_phones(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_current = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refresh_phones (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_current,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_current);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "refresh_phones") < 0)) __PYX_ERR(0, 1144, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_current = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refresh_phones", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1144, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.refresh_phones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_16refresh_phones(__pyx_self, __pyx_v_self, __pyx_v_current);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_16refresh_phones(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_current) {
  PyObject *__pyx_v_adb_device = NULL;
  PyObject *__pyx_v_imei = NULL;
  PyObject *__pyx_v_preferred = NULL;
  int __pyx_v_found;
  PyObject *__pyx_v_device = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_phone_device = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refresh_phones", 1);

  /* "ok/Capture.pyx":1145
 * 
 *     def refresh_phones(self, current=False):
 *         if self.adb_capture_config is None:             # <<<<<<<<<<<<<<
 *             return
 *         for adb_device in self.adb.iter_device():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_capture_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1146
 *     def refresh_phones(self, current=False):
 *         if self.adb_capture_config is None:
 *             return             # <<<<<<<<<<<<<<
 *         for adb_device in self.adb.iter_device():
 *             imei = self.adb_get_imei(adb_device)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":1145
 * 
 *     def refresh_phones(self, current=False):
 *         if self.adb_capture_config is None:             # <<<<<<<<<<<<<<
 *             return
 *         for adb_device in self.adb.iter_device():
 */
  }

  /* "ok/Capture.pyx":1147
 *         if self.adb_capture_config is None:
 *             return
 *         for adb_device in self.adb.iter_device():             # <<<<<<<<<<<<<<
 *             imei = self.adb_get_imei(adb_device)
 *             if imei is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iter_device); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1147, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1147, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 1147, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1147, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 1147, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1147, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_adb_device, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1148
 *             return
 *         for adb_device in self.adb.iter_device():
 *             imei = self.adb_get_imei(adb_device)             # <<<<<<<<<<<<<<
 *             if imei is not None:
 *                 preferred = self.get_preferred_device()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_get_imei); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_adb_device};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_imei, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1149
 *         for adb_device in self.adb.iter_device():
 *             imei = self.adb_get_imei(adb_device)
 *             if imei is not None:             # <<<<<<<<<<<<<<
 *                 preferred = self.get_preferred_device()
 *                 if current and preferred is not None and preferred['imei'] != imei:
 */
    __pyx_t_2 = (__pyx_v_imei != Py_None);
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":1150
 *             imei = self.adb_get_imei(adb_device)
 *             if imei is not None:
 *                 preferred = self.get_preferred_device()             # <<<<<<<<<<<<<<
 *                 if current and preferred is not None and preferred['imei'] != imei:
 *                     logger.debug(f"refresh current only skip others {preferred['imei']} != {imei}")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_preferred, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1151
 *             if imei is not None:
 *                 preferred = self.get_preferred_device()
 *                 if current and preferred is not None and preferred['imei'] != imei:             # <<<<<<<<<<<<<<
 *                     logger.debug(f"refresh current only skip others {preferred['imei']} != {imei}")
 *                     continue
 */
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_current); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1151, __pyx_L1_error)
      if (__pyx_t_9) {
      } else {
        __pyx_t_2 = __pyx_t_9;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_9 = (__pyx_v_preferred != Py_None);
      if (__pyx_t_9) {
      } else {
        __pyx_t_2 = __pyx_t_9;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_imei); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_imei, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1151, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1151, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_2 = __pyx_t_9;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":1152
 *                 preferred = self.get_preferred_device()
 *                 if current and preferred is not None and preferred['imei'] != imei:
 *                     logger.debug(f"refresh current only skip others {preferred['imei']} != {imei}")             # <<<<<<<<<<<<<<
 *                     continue
 *                 found = False
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_debug); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = 0;
        __pyx_t_11 = 127;
        __Pyx_INCREF(__pyx_kp_u_refresh_current_only_skip_others);
        __pyx_t_10 += 33;
        __Pyx_GIVEREF(__pyx_kp_u_refresh_current_only_skip_others);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_refresh_current_only_skip_others);
        __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_imei); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_t_12, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u__17);
        __pyx_t_10 += 4;
        __Pyx_GIVEREF(__pyx_kp_u__17);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__17);
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_imei, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_13};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":1153
 *                 if current and preferred is not None and preferred['imei'] != imei:
 *                     logger.debug(f"refresh current only skip others {preferred['imei']} != {imei}")
 *                     continue             # <<<<<<<<<<<<<<
 *                 found = False
 *                 for device in self.device_dict.values():
 */
        goto __pyx_L4_continue;

        /* "ok/Capture.pyx":1151
 *             if imei is not None:
 *                 preferred = self.get_preferred_device()
 *                 if current and preferred is not None and preferred['imei'] != imei:             # <<<<<<<<<<<<<<
 *                     logger.debug(f"refresh current only skip others {preferred['imei']} != {imei}")
 *                     continue
 */
      }

      /* "ok/Capture.pyx":1154
 *                     logger.debug(f"refresh current only skip others {preferred['imei']} != {imei}")
 *                     continue
 *                 found = False             # <<<<<<<<<<<<<<
 *                 for device in self.device_dict.values():
 *                     if device.get('adb_imei') == imei:
 */
      __pyx_v_found = 0;

      /* "ok/Capture.pyx":1155
 *                     continue
 *                 found = False
 *                 for device in self.device_dict.values():             # <<<<<<<<<<<<<<
 *                     if device.get('adb_imei') == imei:
 *                         found = True
 */
      __pyx_t_10 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__pyx_t_8 == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
        __PYX_ERR(0, 1155, __pyx_L1_error)
      }
      __pyx_t_13 = __Pyx_dict_iterator(__pyx_t_8, 0, __pyx_n_s_values, (&__pyx_t_14), (&__pyx_t_15)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_13;
      __pyx_t_13 = 0;
      while (1) {
        __pyx_t_16 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_14, &__pyx_t_10, NULL, &__pyx_t_13, NULL, __pyx_t_15);
        if (unlikely(__pyx_t_16 == 0)) break;
        if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 1155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_XDECREF_SET(__pyx_v_device, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "ok/Capture.pyx":1156
 *                 found = False
 *                 for device in self.device_dict.values():
 *                     if device.get('adb_imei') == imei:             # <<<<<<<<<<<<<<
 *                         found = True
 *                         break
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1156, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_n_s_adb_imei};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = PyObject_RichCompare(__pyx_t_13, __pyx_v_imei, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1156, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1156, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_2) {

          /* "ok/Capture.pyx":1157
 *                 for device in self.device_dict.values():
 *                     if device.get('adb_imei') == imei:
 *                         found = True             # <<<<<<<<<<<<<<
 *                         break
 *                 if not found:
 */
          __pyx_v_found = 1;

          /* "ok/Capture.pyx":1158
 *                     if device.get('adb_imei') == imei:
 *                         found = True
 *                         break             # <<<<<<<<<<<<<<
 *                 if not found:
 *                     width, height = self.get_resolution(adb_device)
 */
          goto __pyx_L12_break;

          /* "ok/Capture.pyx":1156
 *                 found = False
 *                 for device in self.device_dict.values():
 *                     if device.get('adb_imei') == imei:             # <<<<<<<<<<<<<<
 *                         found = True
 *                         break
 */
        }
      }
      __pyx_L12_break:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":1159
 *                         found = True
 *                         break
 *                 if not found:             # <<<<<<<<<<<<<<
 *                     width, height = self.get_resolution(adb_device)
 *                     logger.debug(f'refresh_phones found an phone {adb_device}')
 */
      __pyx_t_2 = (!__pyx_v_found);
      if (__pyx_t_2) {

        /* "ok/Capture.pyx":1160
 *                         break
 *                 if not found:
 *                     width, height = self.get_resolution(adb_device)             # <<<<<<<<<<<<<<
 *                     logger.debug(f'refresh_phones found an phone {adb_device}')
 *                     phone_device = {"address": adb_device.serial, "device": "adb", "connected": True, "imei": imei,
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_resolution); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_v_adb_device};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1160, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_13);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
          index = 0; __pyx_t_8 = __pyx_t_17(__pyx_t_1); if (unlikely(!__pyx_t_8)) goto __pyx_L15_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_13 = __pyx_t_17(__pyx_t_1); if (unlikely(!__pyx_t_13)) goto __pyx_L15_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_13);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1160, __pyx_L1_error)
          __pyx_t_17 = NULL;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L16_unpacking_done;
          __pyx_L15_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_17 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1160, __pyx_L1_error)
          __pyx_L16_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_width, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_height, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "ok/Capture.pyx":1161
 *                 if not found:
 *                     width, height = self.get_resolution(adb_device)
 *                     logger.debug(f'refresh_phones found an phone {adb_device}')             # <<<<<<<<<<<<<<
 *                     phone_device = {"address": adb_device.serial, "device": "adb", "connected": True, "imei": imei,
 *                                     "nick": adb_device.prop.model or imei, "player_id": -1,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_logger); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_debug); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_adb_device, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_refresh_phones_found_an_phone, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_1};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":1162
 *                     width, height = self.get_resolution(adb_device)
 *                     logger.debug(f'refresh_phones found an phone {adb_device}')
 *                     phone_device = {"address": adb_device.serial, "device": "adb", "connected": True, "imei": imei,             # <<<<<<<<<<<<<<
 *                                     "nick": adb_device.prop.model or imei, "player_id": -1,
 *                                     "resolution": f'{width}x{height}'}
 */
        __pyx_t_3 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_adb_device, __pyx_n_s_serial); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_address, __pyx_t_8) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_device, __pyx_n_s_adb_2) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_connected, Py_True) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_imei, __pyx_v_imei) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)

        /* "ok/Capture.pyx":1163
 *                     logger.debug(f'refresh_phones found an phone {adb_device}')
 *                     phone_device = {"address": adb_device.serial, "device": "adb", "connected": True, "imei": imei,
 *                                     "nick": adb_device.prop.model or imei, "player_id": -1,             # <<<<<<<<<<<<<<
 *                                     "resolution": f'{width}x{height}'}
 *                     self.device_dict[imei] = phone_device
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_adb_device, __pyx_n_s_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_model); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1163, __pyx_L1_error)
        if (!__pyx_t_2) {
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_13);
          __pyx_t_8 = __pyx_t_13;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          goto __pyx_L17_bool_binop_done;
        }
        __Pyx_INCREF(__pyx_v_imei);
        __pyx_t_8 = __pyx_v_imei;
        __pyx_L17_bool_binop_done:;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_nick, __pyx_t_8) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_player_id, __pyx_int_neg_1) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)

        /* "ok/Capture.pyx":1164
 *                     phone_device = {"address": adb_device.serial, "device": "adb", "connected": True, "imei": imei,
 *                                     "nick": adb_device.prop.model or imei, "player_id": -1,
 *                                     "resolution": f'{width}x{height}'}             # <<<<<<<<<<<<<<
 *                     self.device_dict[imei] = phone_device
 *         logger.debug(f'refresh_phones done')
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = 0;
        __pyx_t_11 = 127;
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_n_u_x);
        __pyx_t_14 += 1;
        __Pyx_GIVEREF(__pyx_n_u_x);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_u_x);
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_14, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_resolution, __pyx_t_13) < 0) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_phone_device, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "ok/Capture.pyx":1165
 *                                     "nick": adb_device.prop.model or imei, "player_id": -1,
 *                                     "resolution": f'{width}x{height}'}
 *                     self.device_dict[imei] = phone_device             # <<<<<<<<<<<<<<
 *         logger.debug(f'refresh_phones done')
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely((PyObject_SetItem(__pyx_t_3, __pyx_v_imei, __pyx_v_phone_device) < 0))) __PYX_ERR(0, 1165, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ok/Capture.pyx":1159
 *                         found = True
 *                         break
 *                 if not found:             # <<<<<<<<<<<<<<
 *                     width, height = self.get_resolution(adb_device)
 *                     logger.debug(f'refresh_phones found an phone {adb_device}')
 */
      }

      /* "ok/Capture.pyx":1149
 *         for adb_device in self.adb.iter_device():
 *             imei = self.adb_get_imei(adb_device)
 *             if imei is not None:             # <<<<<<<<<<<<<<
 *                 preferred = self.get_preferred_device()
 *                 if current and preferred is not None and preferred['imei'] != imei:
 */
    }

    /* "ok/Capture.pyx":1147
 *         if self.adb_capture_config is None:
 *             return
 *         for adb_device in self.adb.iter_device():             # <<<<<<<<<<<<<<
 *             imei = self.adb_get_imei(adb_device)
 *             if imei is not None:
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1166
 *                                     "resolution": f'{width}x{height}'}
 *                     self.device_dict[imei] = phone_device
 *         logger.debug(f'refresh_phones done')             # <<<<<<<<<<<<<<
 * 
 *     def refresh_emulators(self, current=False):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_debug); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_refresh_phones_done};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1144
 *         logger.debug(f'refresh {self.device_dict}')
 * 
 *     def refresh_phones(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.refresh_phones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_adb_device);
  __Pyx_XDECREF(__pyx_v_imei);
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XDECREF(__pyx_v_device);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_phone_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1168
 *         logger.debug(f'refresh_phones done')
 * 
 *     def refresh_emulators(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_19refresh_emulators(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_19refresh_emulators = {"refresh_emulators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_19refresh_emulators, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_19refresh_emulators(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_current = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refresh_emulators (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_current,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1168, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_current);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1168, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "refresh_emulators") < 0)) __PYX_ERR(0, 1168, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_current = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refresh_emulators", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1168, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.refresh_emulators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_18refresh_emulators(__pyx_self, __pyx_v_self, __pyx_v_current);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_18refresh_emulators(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_current) {
  PyObject *__pyx_v_EmulatorManager = NULL;
  PyObject *__pyx_v_manager = NULL;
  PyObject *__pyx_v_installed_emulators = NULL;
  PyObject *__pyx_v_emulator = NULL;
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_v_adb_device = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_name = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_hwnd = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_full_path = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_x = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_connected = NULL;
  PyObject *__pyx_v_emulator_device = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refresh_emulators", 1);

  /* "ok/Capture.pyx":1169
 * 
 *     def refresh_emulators(self, current=False):
 *         if self.adb_capture_config is None:             # <<<<<<<<<<<<<<
 *             return
 *         from ok.alas.emulator_windows import EmulatorManager
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_capture_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1170
 *     def refresh_emulators(self, current=False):
 *         if self.adb_capture_config is None:
 *             return             # <<<<<<<<<<<<<<
 *         from ok.alas.emulator_windows import EmulatorManager
 *         manager = EmulatorManager()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":1169
 * 
 *     def refresh_emulators(self, current=False):
 *         if self.adb_capture_config is None:             # <<<<<<<<<<<<<<
 *             return
 *         from ok.alas.emulator_windows import EmulatorManager
 */
  }

  /* "ok/Capture.pyx":1171
 *         if self.adb_capture_config is None:
 *             return
 *         from ok.alas.emulator_windows import EmulatorManager             # <<<<<<<<<<<<<<
 *         manager = EmulatorManager()
 *         installed_emulators = manager.all_emulator_instances
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_EmulatorManager);
  __Pyx_GIVEREF(__pyx_n_s_EmulatorManager);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_EmulatorManager)) __PYX_ERR(0, 1171, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_alas_emulator_windows, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_EmulatorManager); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_EmulatorManager = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1172
 *             return
 *         from ok.alas.emulator_windows import EmulatorManager
 *         manager = EmulatorManager()             # <<<<<<<<<<<<<<
 *         installed_emulators = manager.all_emulator_instances
 *         logger.info(f'installed emulators {installed_emulators}')
 */
  __Pyx_INCREF(__pyx_v_EmulatorManager);
  __pyx_t_1 = __pyx_v_EmulatorManager; __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_v_manager = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1173
 *         from ok.alas.emulator_windows import EmulatorManager
 *         manager = EmulatorManager()
 *         installed_emulators = manager.all_emulator_instances             # <<<<<<<<<<<<<<
 *         logger.info(f'installed emulators {installed_emulators}')
 *         for emulator in installed_emulators:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_manager, __pyx_n_s_all_emulator_instances); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_installed_emulators = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1174
 *         manager = EmulatorManager()
 *         installed_emulators = manager.all_emulator_instances
 *         logger.info(f'installed emulators {installed_emulators}')             # <<<<<<<<<<<<<<
 *         for emulator in installed_emulators:
 *             preferred = self.get_preferred_device()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_installed_emulators, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_installed_emulators, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1175
 *         installed_emulators = manager.all_emulator_instances
 *         logger.info(f'installed emulators {installed_emulators}')
 *         for emulator in installed_emulators:             # <<<<<<<<<<<<<<
 *             preferred = self.get_preferred_device()
 *             if current and preferred is not None and preferred['imei'] != emulator.name:
 */
  if (likely(PyList_CheckExact(__pyx_v_installed_emulators)) || PyTuple_CheckExact(__pyx_v_installed_emulators)) {
    __pyx_t_3 = __pyx_v_installed_emulators; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_installed_emulators); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1175, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1175, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1175, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1175, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1175, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1175, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_emulator, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1176
 *         logger.info(f'installed emulators {installed_emulators}')
 *         for emulator in installed_emulators:
 *             preferred = self.get_preferred_device()             # <<<<<<<<<<<<<<
 *             if current and preferred is not None and preferred['imei'] != emulator.name:
 *                 logger.debug(f"refresh current only skip others {preferred['imei']} != {emulator.name}")
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_preferred, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1177
 *         for emulator in installed_emulators:
 *             preferred = self.get_preferred_device()
 *             if current and preferred is not None and preferred['imei'] != emulator.name:             # <<<<<<<<<<<<<<
 *                 logger.debug(f"refresh current only skip others {preferred['imei']} != {emulator.name}")
 *                 continue
 */
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_current); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1177, __pyx_L1_error)
    if (__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_preferred != Py_None);
    if (__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_imei); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":1178
 *             preferred = self.get_preferred_device()
 *             if current and preferred is not None and preferred['imei'] != emulator.name:
 *                 logger.debug(f"refresh current only skip others {preferred['imei']} != {emulator.name}")             # <<<<<<<<<<<<<<
 *                 continue
 *             adb_device = self.adb_connect(emulator.serial)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_debug); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_refresh_current_only_skip_others);
      __pyx_t_10 += 33;
      __Pyx_GIVEREF(__pyx_kp_u_refresh_current_only_skip_others);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_refresh_current_only_skip_others);
      __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_imei); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_t_12, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_INCREF(__pyx_kp_u__17);
      __pyx_t_10 += 4;
      __Pyx_GIVEREF(__pyx_kp_u__17);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u__17);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_name_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_13, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_6, 4, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_12};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1179
 *             if current and preferred is not None and preferred['imei'] != emulator.name:
 *                 logger.debug(f"refresh current only skip others {preferred['imei']} != {emulator.name}")
 *                 continue             # <<<<<<<<<<<<<<
 *             adb_device = self.adb_connect(emulator.serial)
 *             logger.info(f'adb_connect emulator result {emulator.type} {adb_device}')
 */
      goto __pyx_L4_continue;

      /* "ok/Capture.pyx":1177
 *         for emulator in installed_emulators:
 *             preferred = self.get_preferred_device()
 *             if current and preferred is not None and preferred['imei'] != emulator.name:             # <<<<<<<<<<<<<<
 *                 logger.debug(f"refresh current only skip others {preferred['imei']} != {emulator.name}")
 *                 continue
 */
    }

    /* "ok/Capture.pyx":1180
 *                 logger.debug(f"refresh current only skip others {preferred['imei']} != {emulator.name}")
 *                 continue
 *             adb_device = self.adb_connect(emulator.serial)             # <<<<<<<<<<<<<<
 *             logger.info(f'adb_connect emulator result {emulator.type} {adb_device}')
 *             width, height = self.get_resolution(adb_device) if adb_device is not None else 0, 0
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_connect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_serial); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_12};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_adb_device, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1181
 *                 continue
 *             adb_device = self.adb_connect(emulator.serial)
 *             logger.info(f'adb_connect emulator result {emulator.type} {adb_device}')             # <<<<<<<<<<<<<<
 *             width, height = self.get_resolution(adb_device) if adb_device is not None else 0, 0
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(None,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = 0;
    __pyx_t_11 = 127;
    __Pyx_INCREF(__pyx_kp_u_adb_connect_emulator_result);
    __pyx_t_10 += 28;
    __Pyx_GIVEREF(__pyx_kp_u_adb_connect_emulator_result);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_adb_connect_emulator_result);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_13);
    __pyx_t_13 = 0;
    __Pyx_INCREF(__pyx_kp_u__11);
    __pyx_t_10 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__11);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__11);
    __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_adb_device, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_11;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_13};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1182
 *             adb_device = self.adb_connect(emulator.serial)
 *             logger.info(f'adb_connect emulator result {emulator.type} {adb_device}')
 *             width, height = self.get_resolution(adb_device) if adb_device is not None else 0, 0             # <<<<<<<<<<<<<<
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(None,
 *                                                                    emulator.path, width, height, emulator.player_id)
 */
    __pyx_t_2 = (__pyx_v_adb_device != Py_None);
    if (__pyx_t_2) {
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_resolution); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1182, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_adb_device};
        __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1182, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __pyx_t_1 = __pyx_t_12;
      __pyx_t_12 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_1 = __pyx_int_0;
    }
    __pyx_t_12 = __pyx_int_0;
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_XDECREF_SET(__pyx_v_width, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_height, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "ok/Capture.pyx":1183
 *             logger.info(f'adb_connect emulator result {emulator.type} {adb_device}')
 *             width, height = self.get_resolution(adb_device) if adb_device is not None else 0, 0
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(None,             # <<<<<<<<<<<<<<
 *                                                                    emulator.path, width, height, emulator.player_id)
 *             connected = adb_device is not None and name is not None
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_find_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "ok/Capture.pyx":1184
 *             width, height = self.get_resolution(adb_device) if adb_device is not None else 0, 0
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(None,
 *                                                                    emulator.path, width, height, emulator.player_id)             # <<<<<<<<<<<<<<
 *             connected = adb_device is not None and name is not None
 *             emulator_device = {"address": emulator.serial, "device": "adb", "full_path": emulator.path,
 */
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_path); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_player_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[6] = {__pyx_t_6, Py_None, __pyx_t_13, __pyx_v_width, __pyx_v_height, __pyx_t_4};
      __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 5+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_12))) || (PyList_CheckExact(__pyx_t_12))) {
      PyObject* sequence = __pyx_t_12;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 7)) {
        if (size > 7) __Pyx_RaiseTooManyValuesError(7);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1183, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_15 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 6); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_13 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_15 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_16 = PyList_GET_ITEM(sequence, 6); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_16);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[7] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_13,&__pyx_t_6,&__pyx_t_14,&__pyx_t_15,&__pyx_t_16};
        for (i=0; i < 7; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1183, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[7] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_13,&__pyx_t_6,&__pyx_t_14,&__pyx_t_15,&__pyx_t_16};
      __pyx_t_17 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_17);
      for (index=0; index < 7; index++) {
        PyObject* item = __pyx_t_18(__pyx_t_17); if (unlikely(!item)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_17), 7) < 0) __PYX_ERR(0, 1183, __pyx_L1_error)
      __pyx_t_18 = NULL;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_18 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1183, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }

    /* "ok/Capture.pyx":1183
 *             logger.info(f'adb_connect emulator result {emulator.type} {adb_device}')
 *             width, height = self.get_resolution(adb_device) if adb_device is not None else 0, 0
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(None,             # <<<<<<<<<<<<<<
 *                                                                    emulator.path, width, height, emulator.player_id)
 *             connected = adb_device is not None and name is not None
 */
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_hwnd, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_full_path, __pyx_t_13);
    __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_DECREF_SET(__pyx_v_width, __pyx_t_15);
    __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_height, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "ok/Capture.pyx":1185
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(None,
 *                                                                    emulator.path, width, height, emulator.player_id)
 *             connected = adb_device is not None and name is not None             # <<<<<<<<<<<<<<
 *             emulator_device = {"address": emulator.serial, "device": "adb", "full_path": emulator.path,
 *                                "connected": connected, "imei": emulator.name, "player_id": emulator.player_id,
 */
    __pyx_t_2 = (__pyx_v_adb_device != Py_None);
    if (__pyx_t_2) {
    } else {
      __pyx_t_16 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_12 = __pyx_t_16;
      __pyx_t_16 = 0;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_name != Py_None);
    __pyx_t_16 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_12 = __pyx_t_16;
    __pyx_t_16 = 0;
    __pyx_L12_bool_binop_done:;
    __Pyx_XDECREF_SET(__pyx_v_connected, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "ok/Capture.pyx":1186
 *                                                                    emulator.path, width, height, emulator.player_id)
 *             connected = adb_device is not None and name is not None
 *             emulator_device = {"address": emulator.serial, "device": "adb", "full_path": emulator.path,             # <<<<<<<<<<<<<<
 *                                "connected": connected, "imei": emulator.name, "player_id": emulator.player_id,
 *                                "nick": name or emulator.name, "emulator": emulator}
 */
    __pyx_t_12 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_serial); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_address, __pyx_t_16) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_device, __pyx_n_s_adb_2) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_path); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_full_path, __pyx_t_16) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "ok/Capture.pyx":1187
 *             connected = adb_device is not None and name is not None
 *             emulator_device = {"address": emulator.serial, "device": "adb", "full_path": emulator.path,
 *                                "connected": connected, "imei": emulator.name, "player_id": emulator.player_id,             # <<<<<<<<<<<<<<
 *                                "nick": name or emulator.name, "emulator": emulator}
 *             if adb_device is not None:
 */
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_connected, __pyx_v_connected) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_name_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_imei, __pyx_t_16) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_player_id); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_player_id, __pyx_t_16) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "ok/Capture.pyx":1188
 *             emulator_device = {"address": emulator.serial, "device": "adb", "full_path": emulator.path,
 *                                "connected": connected, "imei": emulator.name, "player_id": emulator.player_id,
 *                                "nick": name or emulator.name, "emulator": emulator}             # <<<<<<<<<<<<<<
 *             if adb_device is not None:
 *                 emulator_device["resolution"] = f"{width}x{height}"
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_name); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1188, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __Pyx_INCREF(__pyx_v_name);
      __pyx_t_16 = __pyx_v_name;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_name_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_t_15);
    __pyx_t_16 = __pyx_t_15;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_L14_bool_binop_done:;
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_nick, __pyx_t_16) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_emulator, __pyx_v_emulator) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_emulator_device, ((PyObject*)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "ok/Capture.pyx":1189
 *                                "connected": connected, "imei": emulator.name, "player_id": emulator.player_id,
 *                                "nick": name or emulator.name, "emulator": emulator}
 *             if adb_device is not None:             # <<<<<<<<<<<<<<
 *                 emulator_device["resolution"] = f"{width}x{height}"
 *                 emulator_device["adb_imei"] = self.adb_get_imei(adb_device)
 */
    __pyx_t_2 = (__pyx_v_adb_device != Py_None);
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":1190
 *                                "nick": name or emulator.name, "emulator": emulator}
 *             if adb_device is not None:
 *                 emulator_device["resolution"] = f"{width}x{height}"             # <<<<<<<<<<<<<<
 *                 emulator_device["adb_imei"] = self.adb_get_imei(adb_device)
 *             self.device_dict[emulator.name] = emulator_device
 */
      __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_INCREF(__pyx_n_u_x);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_n_u_x);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_n_u_x);
      __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_12, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_emulator_device, __pyx_n_s_resolution, __pyx_t_16) < 0))) __PYX_ERR(0, 1190, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "ok/Capture.pyx":1191
 *             if adb_device is not None:
 *                 emulator_device["resolution"] = f"{width}x{height}"
 *                 emulator_device["adb_imei"] = self.adb_get_imei(adb_device)             # <<<<<<<<<<<<<<
 *             self.device_dict[emulator.name] = emulator_device
 *         logger.info(f'refresh emulators {self.device_dict}')
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_get_imei); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_15 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_v_adb_device};
        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      if (unlikely((PyDict_SetItem(__pyx_v_emulator_device, __pyx_n_s_adb_imei, __pyx_t_16) < 0))) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "ok/Capture.pyx":1189
 *                                "connected": connected, "imei": emulator.name, "player_id": emulator.player_id,
 *                                "nick": name or emulator.name, "emulator": emulator}
 *             if adb_device is not None:             # <<<<<<<<<<<<<<
 *                 emulator_device["resolution"] = f"{width}x{height}"
 *                 emulator_device["adb_imei"] = self.adb_get_imei(adb_device)
 */
    }

    /* "ok/Capture.pyx":1192
 *                 emulator_device["resolution"] = f"{width}x{height}"
 *                 emulator_device["adb_imei"] = self.adb_get_imei(adb_device)
 *             self.device_dict[emulator.name] = emulator_device             # <<<<<<<<<<<<<<
 *         logger.info(f'refresh emulators {self.device_dict}')
 * 
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_emulator, __pyx_n_s_name_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (unlikely((PyObject_SetItem(__pyx_t_16, __pyx_t_12, __pyx_v_emulator_device) < 0))) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "ok/Capture.pyx":1175
 *         installed_emulators = manager.all_emulator_instances
 *         logger.info(f'installed emulators {installed_emulators}')
 *         for emulator in installed_emulators:             # <<<<<<<<<<<<<<
 *             preferred = self.get_preferred_device()
 *             if current and preferred is not None and preferred['imei'] != emulator.name:
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1193
 *                 emulator_device["adb_imei"] = self.adb_get_imei(adb_device)
 *             self.device_dict[emulator.name] = emulator_device
 *         logger.info(f'refresh emulators {self.device_dict}')             # <<<<<<<<<<<<<<
 * 
 *     def get_resolution(self, device=None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_12, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_kp_u_refresh_emulators_2, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_12};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1168
 *         logger.debug(f'refresh_phones done')
 * 
 *     def refresh_emulators(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.refresh_emulators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_EmulatorManager);
  __Pyx_XDECREF(__pyx_v_manager);
  __Pyx_XDECREF(__pyx_v_installed_emulators);
  __Pyx_XDECREF(__pyx_v_emulator);
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XDECREF(__pyx_v_adb_device);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_hwnd);
  __Pyx_XDECREF(__pyx_v_full_path);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_connected);
  __Pyx_XDECREF(__pyx_v_emulator_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1195
 *         logger.info(f'refresh emulators {self.device_dict}')
 * 
 *     def get_resolution(self, device=None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = self.device
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_21get_resolution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_21get_resolution = {"get_resolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_21get_resolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_21get_resolution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_device = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_resolution (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_device,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_resolution") < 0)) __PYX_ERR(0, 1195, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_device = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_resolution", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1195, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_20get_resolution(__pyx_self, __pyx_v_self, __pyx_v_device);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_20get_resolution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device) {
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_frame = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_resolution = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_resolution", 0);
  __Pyx_INCREF(__pyx_v_device);

  /* "ok/Capture.pyx":1196
 * 
 *     def get_resolution(self, device=None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = self.device
 *         width, height = 0, 0
 */
  __pyx_t_1 = (__pyx_v_device == Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1197
 *     def get_resolution(self, device=None):
 *         if device is None:
 *             device = self.device             # <<<<<<<<<<<<<<
 *         width, height = 0, 0
 *         if device is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_device, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":1196
 * 
 *     def get_resolution(self, device=None):
 *         if device is None:             # <<<<<<<<<<<<<<
 *             device = self.device
 *         width, height = 0, 0
 */
  }

  /* "ok/Capture.pyx":1198
 *         if device is None:
 *             device = self.device
 *         width, height = 0, 0             # <<<<<<<<<<<<<<
 *         if device is not None:
 *             if resolution := self.resolution_dict.get(device.serial):
 */
  __pyx_t_2 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_width = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_height = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1199
 *             device = self.device
 *         width, height = 0, 0
 *         if device is not None:             # <<<<<<<<<<<<<<
 *             if resolution := self.resolution_dict.get(device.serial):
 *                 return resolution
 */
  __pyx_t_1 = (__pyx_v_device != Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1200
 *         width, height = 0, 0
 *         if device is not None:
 *             if resolution := self.resolution_dict.get(device.serial):             # <<<<<<<<<<<<<<
 *                 return resolution
 *             frame = self.do_screencap(device)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_resolution_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_serial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_resolution = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":1201
 *         if device is not None:
 *             if resolution := self.resolution_dict.get(device.serial):
 *                 return resolution             # <<<<<<<<<<<<<<
 *             frame = self.do_screencap(device)
 *             if frame is not None:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_resolution);
      __pyx_r = __pyx_v_resolution;
      goto __pyx_L0;

      /* "ok/Capture.pyx":1200
 *         width, height = 0, 0
 *         if device is not None:
 *             if resolution := self.resolution_dict.get(device.serial):             # <<<<<<<<<<<<<<
 *                 return resolution
 *             frame = self.do_screencap(device)
 */
    }

    /* "ok/Capture.pyx":1202
 *             if resolution := self.resolution_dict.get(device.serial):
 *                 return resolution
 *             frame = self.do_screencap(device)             # <<<<<<<<<<<<<<
 *             if frame is not None:
 *                 height, width, _ = frame.shape
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_do_screencap); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_device};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_frame = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1203
 *                 return resolution
 *             frame = self.do_screencap(device)
 *             if frame is not None:             # <<<<<<<<<<<<<<
 *                 height, width, _ = frame.shape
 *                 if self.supported_ratio is None or abs(width / height - self.supported_ratio) < 0.01:
 */
    __pyx_t_1 = (__pyx_v_frame != Py_None);
    if (__pyx_t_1) {

      /* "ok/Capture.pyx":1204
 *             frame = self.do_screencap(device)
 *             if frame is not None:
 *                 height, width, _ = frame.shape             # <<<<<<<<<<<<<<
 *                 if self.supported_ratio is None or abs(width / height - self.supported_ratio) < 0.01:
 *                     self.resolution_dict[device.serial] = (width, height)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1204, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1204, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1204, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1204, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1204, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
        index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 2; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) __PYX_ERR(0, 1204, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1204, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_height, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_width, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_v__ = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "ok/Capture.pyx":1205
 *             if frame is not None:
 *                 height, width, _ = frame.shape
 *                 if self.supported_ratio is None or abs(width / height - self.supported_ratio) < 0.01:             # <<<<<<<<<<<<<<
 *                     self.resolution_dict[device.serial] = (width, height)
 *                 else:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_supported_ratio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = (__pyx_t_3 == Py_None);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_width, __pyx_v_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_supported_ratio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_float_0_01, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __pyx_t_9;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_1) {

        /* "ok/Capture.pyx":1206
 *                 height, width, _ = frame.shape
 *                 if self.supported_ratio is None or abs(width / height - self.supported_ratio) < 0.01:
 *                     self.resolution_dict[device.serial] = (width, height)             # <<<<<<<<<<<<<<
 *                 else:
 *                     logger.warning(f'resolution error {device.serial} {self.supported_ratio} {width, height}')
 */
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_width);
        __Pyx_GIVEREF(__pyx_v_width);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_width)) __PYX_ERR(0, 1206, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_height);
        __Pyx_GIVEREF(__pyx_v_height);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_height)) __PYX_ERR(0, 1206, __pyx_L1_error);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_resolution_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_serial); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely((PyObject_SetItem(__pyx_t_5, __pyx_t_3, __pyx_t_2) < 0))) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":1205
 *             if frame is not None:
 *                 height, width, _ = frame.shape
 *                 if self.supported_ratio is None or abs(width / height - self.supported_ratio) < 0.01:             # <<<<<<<<<<<<<<
 *                     self.resolution_dict[device.serial] = (width, height)
 *                 else:
 */
        goto __pyx_L9;
      }

      /* "ok/Capture.pyx":1208
 *                     self.resolution_dict[device.serial] = (width, height)
 *                 else:
 *                     logger.warning(f'resolution error {device.serial} {self.supported_ratio} {width, height}')             # <<<<<<<<<<<<<<
 *         return width, height
 * 
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = 0;
        __pyx_t_11 = 127;
        __Pyx_INCREF(__pyx_kp_u_resolution_error);
        __pyx_t_10 += 17;
        __Pyx_GIVEREF(__pyx_kp_u_resolution_error);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_resolution_error);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_serial); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__11);
        __pyx_t_10 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__11);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__11);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_supported_ratio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__11);
        __pyx_t_10 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__11);
        PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__11);
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_width);
        __Pyx_GIVEREF(__pyx_v_width);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_width)) __PYX_ERR(0, 1208, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_height);
        __Pyx_GIVEREF(__pyx_v_height);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_height)) __PYX_ERR(0, 1208, __pyx_L1_error);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 6, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_7};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L9:;

      /* "ok/Capture.pyx":1203
 *                 return resolution
 *             frame = self.do_screencap(device)
 *             if frame is not None:             # <<<<<<<<<<<<<<
 *                 height, width, _ = frame.shape
 *                 if self.supported_ratio is None or abs(width / height - self.supported_ratio) < 0.01:
 */
    }

    /* "ok/Capture.pyx":1199
 *             device = self.device
 *         width, height = 0, 0
 *         if device is not None:             # <<<<<<<<<<<<<<
 *             if resolution := self.resolution_dict.get(device.serial):
 *                 return resolution
 */
  }

  /* "ok/Capture.pyx":1209
 *                 else:
 *                     logger.warning(f'resolution error {device.serial} {self.supported_ratio} {width, height}')
 *         return width, height             # <<<<<<<<<<<<<<
 * 
 *     def set_preferred_device(self, imei=None, index=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_width);
  __Pyx_GIVEREF(__pyx_v_width);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_width)) __PYX_ERR(0, 1209, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_height);
  __Pyx_GIVEREF(__pyx_v_height);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_height)) __PYX_ERR(0, 1209, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1195
 *         logger.info(f'refresh emulators {self.device_dict}')
 * 
 *     def get_resolution(self, device=None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = self.device
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_frame);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_resolution);
  __Pyx_XDECREF(__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1211
 *         return width, height
 * 
 *     def set_preferred_device(self, imei=None, index=-1):             # <<<<<<<<<<<<<<
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_23set_preferred_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_23set_preferred_device = {"set_preferred_device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_23set_preferred_device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_23set_preferred_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_imei = 0;
  PyObject *__pyx_v_index = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_preferred_device (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_imei,&__pyx_n_s_index,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_neg_1)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_imei);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_preferred_device") < 0)) __PYX_ERR(0, 1211, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_imei = values[1];
    __pyx_v_index = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_preferred_device", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 1211, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.set_preferred_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_22set_preferred_device(__pyx_self, __pyx_v_self, __pyx_v_imei, __pyx_v_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_22set_preferred_device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_imei, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_v_connected_device = NULL;
  PyObject *__pyx_v_device = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_preferred_device", 0);
  __Pyx_INCREF(__pyx_v_imei);

  /* "ok/Capture.pyx":1212
 * 
 *     def set_preferred_device(self, imei=None, index=-1):
 *         logger.debug(f"set_preferred_device {imei} {index}")             # <<<<<<<<<<<<<<
 *         if index != -1:
 *             imei = self.get_devices()[index]['imei']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_set_preferred_device);
  __pyx_t_4 += 21;
  __Pyx_GIVEREF(__pyx_kp_u_set_preferred_device);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_set_preferred_device);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_imei, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__11);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_index, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1213
 *     def set_preferred_device(self, imei=None, index=-1):
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:             # <<<<<<<<<<<<<<
 *             imei = self.get_devices()[index]['imei']
 *         elif imei is None:
 */
  __pyx_t_8 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_index, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1213, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "ok/Capture.pyx":1214
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:
 *             imei = self.get_devices()[index]['imei']             # <<<<<<<<<<<<<<
 *         elif imei is None:
 *             imei = self.config.get("preferred")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_devices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_imei); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_imei, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1213
 *     def set_preferred_device(self, imei=None, index=-1):
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:             # <<<<<<<<<<<<<<
 *             imei = self.get_devices()[index]['imei']
 *         elif imei is None:
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":1215
 *         if index != -1:
 *             imei = self.get_devices()[index]['imei']
 *         elif imei is None:             # <<<<<<<<<<<<<<
 *             imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 */
  __pyx_t_8 = (__pyx_v_imei == Py_None);
  if (__pyx_t_8) {

    /* "ok/Capture.pyx":1216
 *             imei = self.get_devices()[index]['imei']
 *         elif imei is None:
 *             imei = self.config.get("preferred")             # <<<<<<<<<<<<<<
 *         preferred = self.device_dict.get(imei)
 *         if preferred is None:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_preferred};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_imei, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1215
 *         if index != -1:
 *             imei = self.get_devices()[index]['imei']
 *         elif imei is None:             # <<<<<<<<<<<<<<
 *             imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 */
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":1217
 *         elif imei is None:
 *             imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)             # <<<<<<<<<<<<<<
 *         if preferred is None:
 *             if len(self.device_dict) > 0:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_imei};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_preferred = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1218
 *             imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 *         if preferred is None:             # <<<<<<<<<<<<<<
 *             if len(self.device_dict) > 0:
 *                 connected_device = None
 */
  __pyx_t_8 = (__pyx_v_preferred == Py_None);
  if (__pyx_t_8) {

    /* "ok/Capture.pyx":1219
 *         preferred = self.device_dict.get(imei)
 *         if preferred is None:
 *             if len(self.device_dict) > 0:             # <<<<<<<<<<<<<<
 *                 connected_device = None
 *                 for device in self.device_dict.values():
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__pyx_t_4 > 0);
    if (__pyx_t_8) {

      /* "ok/Capture.pyx":1220
 *         if preferred is None:
 *             if len(self.device_dict) > 0:
 *                 connected_device = None             # <<<<<<<<<<<<<<
 *                 for device in self.device_dict.values():
 *                     if device.get('connected') or connected_device is None:
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_connected_device = Py_None;

      /* "ok/Capture.pyx":1221
 *             if len(self.device_dict) > 0:
 *                 connected_device = None
 *                 for device in self.device_dict.values():             # <<<<<<<<<<<<<<
 *                     if device.get('connected') or connected_device is None:
 *                         connected_device = device
 */
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_t_3 == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
        __PYX_ERR(0, 1221, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_dict_iterator(__pyx_t_3, 0, __pyx_n_s_values, (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_6;
      __pyx_t_6 = 0;
      while (1) {
        __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_9, &__pyx_t_4, NULL, &__pyx_t_6, NULL, __pyx_t_10);
        if (unlikely(__pyx_t_11 == 0)) break;
        if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1221, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_device, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "ok/Capture.pyx":1222
 *                 connected_device = None
 *                 for device in self.device_dict.values():
 *                     if device.get('connected') or connected_device is None:             # <<<<<<<<<<<<<<
 *                         connected_device = device
 *                 logger.info(f'first start use first or connected device {connected_device}')
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_connected};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1222, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1222, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (!__pyx_t_12) {
        } else {
          __pyx_t_8 = __pyx_t_12;
          goto __pyx_L9_bool_binop_done;
        }
        __pyx_t_12 = (__pyx_v_connected_device == Py_None);
        __pyx_t_8 = __pyx_t_12;
        __pyx_L9_bool_binop_done:;
        if (__pyx_t_8) {

          /* "ok/Capture.pyx":1223
 *                 for device in self.device_dict.values():
 *                     if device.get('connected') or connected_device is None:
 *                         connected_device = device             # <<<<<<<<<<<<<<
 *                 logger.info(f'first start use first or connected device {connected_device}')
 *                 preferred = connected_device
 */
          __Pyx_INCREF(__pyx_v_device);
          __Pyx_DECREF_SET(__pyx_v_connected_device, __pyx_v_device);

          /* "ok/Capture.pyx":1222
 *                 connected_device = None
 *                 for device in self.device_dict.values():
 *                     if device.get('connected') or connected_device is None:             # <<<<<<<<<<<<<<
 *                         connected_device = device
 *                 logger.info(f'first start use first or connected device {connected_device}')
 */
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1224
 *                     if device.get('connected') or connected_device is None:
 *                         connected_device = device
 *                 logger.info(f'first start use first or connected device {connected_device}')             # <<<<<<<<<<<<<<
 *                 preferred = connected_device
 *                 imei = preferred['imei']
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_connected_device, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_first_start_use_first_or_connect, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1225
 *                         connected_device = device
 *                 logger.info(f'first start use first or connected device {connected_device}')
 *                 preferred = connected_device             # <<<<<<<<<<<<<<
 *                 imei = preferred['imei']
 *             else:
 */
      __Pyx_INCREF(__pyx_v_connected_device);
      __Pyx_DECREF_SET(__pyx_v_preferred, __pyx_v_connected_device);

      /* "ok/Capture.pyx":1226
 *                 logger.info(f'first start use first or connected device {connected_device}')
 *                 preferred = connected_device
 *                 imei = preferred['imei']             # <<<<<<<<<<<<<<
 *             else:
 *                 logger.warning(f'no devices')
 */
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_imei); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_imei, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1219
 *         preferred = self.device_dict.get(imei)
 *         if preferred is None:
 *             if len(self.device_dict) > 0:             # <<<<<<<<<<<<<<
 *                 connected_device = None
 *                 for device in self.device_dict.values():
 */
      goto __pyx_L5;
    }

    /* "ok/Capture.pyx":1228
 *                 imei = preferred['imei']
 *             else:
 *                 logger.warning(f'no devices')             # <<<<<<<<<<<<<<
 *                 return
 *         if self.config.get("preferred") != imei:
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_no_devices};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1229
 *             else:
 *                 logger.warning(f'no devices')
 *                 return             # <<<<<<<<<<<<<<
 *         if self.config.get("preferred") != imei:
 *             logger.info(f'preferred device did change {imei}')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }
    __pyx_L5:;

    /* "ok/Capture.pyx":1218
 *             imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 *         if preferred is None:             # <<<<<<<<<<<<<<
 *             if len(self.device_dict) > 0:
 *                 connected_device = None
 */
  }

  /* "ok/Capture.pyx":1230
 *                 logger.warning(f'no devices')
 *                 return
 *         if self.config.get("preferred") != imei:             # <<<<<<<<<<<<<<
 *             logger.info(f'preferred device did change {imei}')
 *             self.config["preferred"] = imei
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_preferred};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_imei, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "ok/Capture.pyx":1231
 *                 return
 *         if self.config.get("preferred") != imei:
 *             logger.info(f'preferred device did change {imei}')             # <<<<<<<<<<<<<<
 *             self.config["preferred"] = imei
 *             self.start()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_imei, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_preferred_device_did_change, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1232
 *         if self.config.get("preferred") != imei:
 *             logger.info(f'preferred device did change {imei}')
 *             self.config["preferred"] = imei             # <<<<<<<<<<<<<<
 *             self.start()
 *         logger.debug(f'preferred device: {preferred}')
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_SetItem(__pyx_t_3, __pyx_n_s_preferred, __pyx_v_imei) < 0))) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1233
 *             logger.info(f'preferred device did change {imei}')
 *             self.config["preferred"] = imei
 *             self.start()             # <<<<<<<<<<<<<<
 *         logger.debug(f'preferred device: {preferred}')
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1230
 *                 logger.warning(f'no devices')
 *                 return
 *         if self.config.get("preferred") != imei:             # <<<<<<<<<<<<<<
 *             logger.info(f'preferred device did change {imei}')
 *             self.config["preferred"] = imei
 */
  }

  /* "ok/Capture.pyx":1234
 *             self.config["preferred"] = imei
 *             self.start()
 *         logger.debug(f'preferred device: {preferred}')             # <<<<<<<<<<<<<<
 * 
 *     def shell_device(self, device, *args, **kwargs):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_preferred, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_preferred_device, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1211
 *         return width, height
 * 
 *     def set_preferred_device(self, imei=None, index=-1):             # <<<<<<<<<<<<<<
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.set_preferred_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XDECREF(__pyx_v_connected_device);
  __Pyx_XDECREF(__pyx_v_device);
  __Pyx_XDECREF(__pyx_v_imei);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1236
 *         logger.debug(f'preferred device: {preferred}')
 * 
 *     def shell_device(self, device, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         kwargs.setdefault('timeout', 5)
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_25shell_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_25shell_device = {"shell_device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_25shell_device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_25shell_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_device = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shell_device (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 2, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_device,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("shell_device", 0, 2, 2, 1); __PYX_ERR(0, 1236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 2) ? kwd_pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "shell_device") < 0)) __PYX_ERR(0, 1236, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_device = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shell_device", 0, 2, 2, __pyx_nargs); __PYX_ERR(0, 1236, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("ok.Capture.DeviceManager.shell_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_24shell_device(__pyx_self, __pyx_v_self, __pyx_v_device, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_24shell_device(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_device, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  unsigned int __pyx_t_12;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shell_device", 1);

  /* "ok/Capture.pyx":1237
 * 
 *     def shell_device(self, device, *args, **kwargs):
 *         kwargs.setdefault('timeout', 5)             # <<<<<<<<<<<<<<
 *         try:
 *             return device.shell(*args, **kwargs)
 */
  __pyx_t_1 = __Pyx_PyDict_SetDefault(__pyx_v_kwargs, __pyx_n_s_timeout, __pyx_int_5, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1238
 *     def shell_device(self, device, *args, **kwargs):
 *         kwargs.setdefault('timeout', 5)
 *         try:             # <<<<<<<<<<<<<<
 *             return device.shell(*args, **kwargs)
 *         except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "ok/Capture.pyx":1239
 *         kwargs.setdefault('timeout', 5)
 *         try:
 *             return device.shell(*args, **kwargs)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             logger.error(f"adb shell error maybe offline {device}", e)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_shell); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1239, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1239, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L7_try_return;

      /* "ok/Capture.pyx":1238
 *     def shell_device(self, device, *args, **kwargs):
 *         kwargs.setdefault('timeout', 5)
 *         try:             # <<<<<<<<<<<<<<
 *             return device.shell(*args, **kwargs)
 *         except Exception as e:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":1240
 *         try:
 *             return device.shell(*args, **kwargs)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"adb shell error maybe offline {device}", e)
 *             return None
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_7) {
      __Pyx_AddTraceback("ok.Capture.DeviceManager.shell_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(0, 1240, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "ok/Capture.pyx":1241
 *             return device.shell(*args, **kwargs)
 *         except Exception as e:
 *             logger.error(f"adb shell error maybe offline {device}", e)             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1241, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1241, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_device, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1241, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_shell_error_maybe_offline, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1241, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_12 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_12 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_11, __pyx_v_e};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_12, 2+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1241, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ok/Capture.pyx":1242
 *         except Exception as e:
 *             logger.error(f"adb shell error maybe offline {device}", e)
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def adb_get_imei(self, device):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L13_return;
      }

      /* "ok/Capture.pyx":1240
 *         try:
 *             return device.shell(*args, **kwargs)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error(f"adb shell error maybe offline {device}", e)
 *             return None
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_7 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
          goto __pyx_L5_except_error;
        }
        __pyx_L13_return: {
          __pyx_t_20 = __pyx_r;
          __pyx_r = 0;
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          __pyx_r = __pyx_t_20;
          __pyx_t_20 = 0;
          goto __pyx_L6_except_return;
        }
      }
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":1238
 *     def shell_device(self, device, *args, **kwargs):
 *         kwargs.setdefault('timeout', 5)
 *         try:             # <<<<<<<<<<<<<<
 *             return device.shell(*args, **kwargs)
 *         except Exception as e:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "ok/Capture.pyx":1236
 *         logger.debug(f'preferred device: {preferred}')
 * 
 *     def shell_device(self, device, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         kwargs.setdefault('timeout', 5)
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.shell_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1244
 *             return None
 * 
 *     def adb_get_imei(self, device):             # <<<<<<<<<<<<<<
 *         return (self.shell_device(device, "settings get secure android_id") or
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_27adb_get_imei(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_27adb_get_imei = {"adb_get_imei", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_27adb_get_imei, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_27adb_get_imei(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_device = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_get_imei (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_device,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1244, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1244, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adb_get_imei", 1, 2, 2, 1); __PYX_ERR(0, 1244, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_get_imei") < 0)) __PYX_ERR(0, 1244, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_device = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_get_imei", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1244, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_get_imei", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_26adb_get_imei(__pyx_self, __pyx_v_self, __pyx_v_device);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_26adb_get_imei(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_get_imei", 1);

  /* "ok/Capture.pyx":1245
 * 
 *     def adb_get_imei(self, device):
 *         return (self.shell_device(device, "settings get secure android_id") or             # <<<<<<<<<<<<<<
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell_device); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_device, __pyx_kp_s_settings_get_secure_android_id};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1245, __pyx_L1_error)
  if (!__pyx_t_6) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ok/Capture.pyx":1246
 *     def adb_get_imei(self, device):
 *         return (self.shell_device(device, "settings get secure android_id") or
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)             # <<<<<<<<<<<<<<
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell_device); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_device, __pyx_kp_s_service_call_iphonesubinfo_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1246, __pyx_L1_error)
  if (!__pyx_t_6) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_prop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_model); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1244
 *             return None
 * 
 *     def adb_get_imei(self, device):             # <<<<<<<<<<<<<<
 *         return (self.shell_device(device, "settings get secure android_id") or
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_get_imei", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1248
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:             # <<<<<<<<<<<<<<
 *         if device is None:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_29do_screencap(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_29do_screencap = {"do_screencap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_29do_screencap, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_29do_screencap(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_device = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_screencap (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_device,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("do_screencap", 1, 2, 2, 1); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "do_screencap") < 0)) __PYX_ERR(0, 1248, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_device = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_screencap", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1248, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.do_screencap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_28do_screencap(__pyx_self, __pyx_v_self, __pyx_v_device);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_28do_screencap(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device) {
  PyObject *__pyx_v_png_bytes = NULL;
  PyObject *__pyx_v_image_data = NULL;
  PyObject *__pyx_v_image = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  unsigned int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_screencap", 1);

  /* "ok/Capture.pyx":1249
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:
 *         if device is None:             # <<<<<<<<<<<<<<
 *             return None
 *         try:
 */
  __pyx_t_1 = (__pyx_v_device == Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1250
 *     def do_screencap(self, device) -> np.ndarray | None:
 *         if device is None:
 *             return None             # <<<<<<<<<<<<<<
 *         try:
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":1249
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:
 *         if device is None:             # <<<<<<<<<<<<<<
 *             return None
 *         try:
 */
  }

  /* "ok/Capture.pyx":1251
 *         if device is None:
 *             return None
 *         try:             # <<<<<<<<<<<<<<
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 *             if png_bytes is not None and len(png_bytes) > 0:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "ok/Capture.pyx":1252
 *             return None
 *         try:
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)             # <<<<<<<<<<<<<<
 *             if png_bytes is not None and len(png_bytes) > 0:
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell_device); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1252, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1252, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_device);
      __Pyx_GIVEREF(__pyx_v_device);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_device)) __PYX_ERR(0, 1252, __pyx_L4_error);
      __Pyx_INCREF(__pyx_kp_s_screencap_p);
      __Pyx_GIVEREF(__pyx_kp_s_screencap_p);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s_screencap_p)) __PYX_ERR(0, 1252, __pyx_L4_error);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1252, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_encoding, Py_None) < 0) __PYX_ERR(0, 1252, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1252, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_png_bytes = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "ok/Capture.pyx":1253
 *         try:
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 *             if png_bytes is not None and len(png_bytes) > 0:             # <<<<<<<<<<<<<<
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
 */
      __pyx_t_9 = (__pyx_v_png_bytes != Py_None);
      if (__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PyObject_Length(__pyx_v_png_bytes); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1253, __pyx_L4_error)
      __pyx_t_9 = (__pyx_t_10 > 0);
      __pyx_t_1 = __pyx_t_9;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_1) {

        /* "ok/Capture.pyx":1254
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 *             if png_bytes is not None and len(png_bytes) > 0:
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)             # <<<<<<<<<<<<<<
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
 *                 if image is not None:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_frombuffer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_png_bytes);
        __Pyx_GIVEREF(__pyx_v_png_bytes);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_png_bytes)) __PYX_ERR(0, 1254, __pyx_L4_error);
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1254, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_image_data = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "ok/Capture.pyx":1255
 *             if png_bytes is not None and len(png_bytes) > 0:
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)             # <<<<<<<<<<<<<<
 *                 if image is not None:
 *                     return image
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_cv2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1255, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_imdecode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1255, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_cv2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1255, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_IMREAD_COLOR); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1255, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        __pyx_t_12 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_12 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_image_data, __pyx_t_7};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_12, 2+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1255, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_v_image = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "ok/Capture.pyx":1256
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
 *                 if image is not None:             # <<<<<<<<<<<<<<
 *                     return image
 *                 else:
 */
        __pyx_t_1 = (__pyx_v_image != Py_None);
        if (__pyx_t_1) {

          /* "ok/Capture.pyx":1257
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
 *                 if image is not None:
 *                     return image             # <<<<<<<<<<<<<<
 *                 else:
 *                     logger.error(f"Screencap image decode error, probably disconnected")
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_v_image);
          __pyx_r = __pyx_v_image;
          goto __pyx_L8_try_return;

          /* "ok/Capture.pyx":1256
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
 *                 if image is not None:             # <<<<<<<<<<<<<<
 *                     return image
 *                 else:
 */
        }

        /* "ok/Capture.pyx":1259
 *                     return image
 *                 else:
 *                     logger.error(f"Screencap image decode error, probably disconnected")             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             logger.error('screencap', e)
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1259, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1259, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          __pyx_t_12 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_12 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_kp_u_Screencap_image_decode_error_pro};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1259, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }

        /* "ok/Capture.pyx":1253
 *         try:
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 *             if png_bytes is not None and len(png_bytes) > 0:             # <<<<<<<<<<<<<<
 *                 image_data = np.frombuffer(png_bytes, dtype=np.uint8)
 *                 image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
 */
      }

      /* "ok/Capture.pyx":1251
 *         if device is None:
 *             return None
 *         try:             # <<<<<<<<<<<<<<
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 *             if png_bytes is not None and len(png_bytes) > 0:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "ok/Capture.pyx":1260
 *                 else:
 *                     logger.error(f"Screencap image decode error, probably disconnected")
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error('screencap', e)
 * 
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("ok.Capture.DeviceManager.do_screencap", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1260, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;
      /*try:*/ {

        /* "ok/Capture.pyx":1261
 *                     logger.error(f"Screencap image decode error, probably disconnected")
 *         except Exception as e:
 *             logger.error('screencap', e)             # <<<<<<<<<<<<<<
 * 
 *     def get_preferred_device(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1261, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1261, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_12 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_12 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_n_s_screencap, __pyx_v_e};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_12, 2+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1261, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "ok/Capture.pyx":1260
 *                 else:
 *                     logger.error(f"Screencap image decode error, probably disconnected")
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             logger.error('screencap', e)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L20;
        }
        __pyx_L19_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __pyx_t_13 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
          }
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_16;
          goto __pyx_L6_except_error;
        }
        __pyx_L20:;
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;

    /* "ok/Capture.pyx":1251
 *         if device is None:
 *             return None
 *         try:             # <<<<<<<<<<<<<<
 *             png_bytes = self.shell_device(device, "screencap -p", encoding=None)
 *             if png_bytes is not None and len(png_bytes) > 0:
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L9_try_end:;
  }

  /* "ok/Capture.pyx":1248
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:             # <<<<<<<<<<<<<<
 *         if device is None:
 *             return None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.do_screencap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_png_bytes);
  __Pyx_XDECREF(__pyx_v_image_data);
  __Pyx_XDECREF(__pyx_v_image);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1263
 *             logger.error('screencap', e)
 * 
 *     def get_preferred_device(self):             # <<<<<<<<<<<<<<
 *         imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_31get_preferred_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_31get_preferred_device = {"get_preferred_device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_31get_preferred_device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_31get_preferred_device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_preferred_device (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1263, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_preferred_device") < 0)) __PYX_ERR(0, 1263, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_preferred_device", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1263, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_preferred_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_30get_preferred_device(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_30get_preferred_device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_imei = NULL;
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_preferred_device", 1);

  /* "ok/Capture.pyx":1264
 * 
 *     def get_preferred_device(self):
 *         imei = self.config.get("preferred")             # <<<<<<<<<<<<<<
 *         preferred = self.device_dict.get(imei)
 *         return preferred
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_preferred};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_imei = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1265
 *     def get_preferred_device(self):
 *         imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)             # <<<<<<<<<<<<<<
 *         return preferred
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_imei};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_preferred = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1266
 *         imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 *         return preferred             # <<<<<<<<<<<<<<
 * 
 *     def get_preferred_capture(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_preferred);
  __pyx_r = __pyx_v_preferred;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1263
 *             logger.error('screencap', e)
 * 
 *     def get_preferred_device(self):             # <<<<<<<<<<<<<<
 *         imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_preferred_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_imei);
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1268
 *         return preferred
 * 
 *     def get_preferred_capture(self):             # <<<<<<<<<<<<<<
 *         return self.config.get("capture")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_33get_preferred_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_33get_preferred_capture = {"get_preferred_capture", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_33get_preferred_capture, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_33get_preferred_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_preferred_capture (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1268, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_preferred_capture") < 0)) __PYX_ERR(0, 1268, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_preferred_capture", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1268, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_preferred_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_32get_preferred_capture(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_32get_preferred_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_preferred_capture", 1);

  /* "ok/Capture.pyx":1269
 * 
 *     def get_preferred_capture(self):
 *         return self.config.get("capture")             # <<<<<<<<<<<<<<
 * 
 *     def set_hwnd_name(self, hwnd_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_capture};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1268
 *         return preferred
 * 
 *     def get_preferred_capture(self):             # <<<<<<<<<<<<<<
 *         return self.config.get("capture")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_preferred_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1271
 *         return self.config.get("capture")
 * 
 *     def set_hwnd_name(self, hwnd_name):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_35set_hwnd_name(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_35set_hwnd_name = {"set_hwnd_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_35set_hwnd_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_35set_hwnd_name(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_hwnd_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_hwnd_name (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_hwnd_name,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_hwnd_name", 1, 2, 2, 1); __PYX_ERR(0, 1271, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_hwnd_name") < 0)) __PYX_ERR(0, 1271, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_hwnd_name = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_hwnd_name", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1271, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.set_hwnd_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_34set_hwnd_name(__pyx_self, __pyx_v_self, __pyx_v_hwnd_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_34set_hwnd_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_hwnd_name) {
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_hwnd_name", 1);

  /* "ok/Capture.pyx":1272
 * 
 *     def set_hwnd_name(self, hwnd_name):
 *         preferred = self.get_preferred_device()             # <<<<<<<<<<<<<<
 *         if preferred.get("hwnd") != hwnd_name:
 *             preferred['hwnd'] = hwnd_name
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_preferred = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1273
 *     def set_hwnd_name(self, hwnd_name):
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:             # <<<<<<<<<<<<<<
 *             preferred['hwnd'] = hwnd_name
 *             if self.hwnd:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_hwnd_name, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1274
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:
 *             preferred['hwnd'] = hwnd_name             # <<<<<<<<<<<<<<
 *             if self.hwnd:
 *                 self.hwnd.title = hwnd_name
 */
    if (unlikely((PyObject_SetItem(__pyx_v_preferred, __pyx_n_s_hwnd, __pyx_v_hwnd_name) < 0))) __PYX_ERR(0, 1274, __pyx_L1_error)

    /* "ok/Capture.pyx":1275
 *         if preferred.get("hwnd") != hwnd_name:
 *             preferred['hwnd'] = hwnd_name
 *             if self.hwnd:             # <<<<<<<<<<<<<<
 *                 self.hwnd.title = hwnd_name
 *             self.config.save_file()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1276
 *             preferred['hwnd'] = hwnd_name
 *             if self.hwnd:
 *                 self.hwnd.title = hwnd_name             # <<<<<<<<<<<<<<
 *             self.config.save_file()
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_title, __pyx_v_hwnd_name) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ok/Capture.pyx":1275
 *         if preferred.get("hwnd") != hwnd_name:
 *             preferred['hwnd'] = hwnd_name
 *             if self.hwnd:             # <<<<<<<<<<<<<<
 *                 self.hwnd.title = hwnd_name
 *             self.config.save_file()
 */
    }

    /* "ok/Capture.pyx":1277
 *             if self.hwnd:
 *                 self.hwnd.title = hwnd_name
 *             self.config.save_file()             # <<<<<<<<<<<<<<
 * 
 *     def set_capture(self, capture):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_save_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ok/Capture.pyx":1273
 *     def set_hwnd_name(self, hwnd_name):
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:             # <<<<<<<<<<<<<<
 *             preferred['hwnd'] = hwnd_name
 *             if self.hwnd:
 */
  }

  /* "ok/Capture.pyx":1271
 *         return self.config.get("capture")
 * 
 *     def set_hwnd_name(self, hwnd_name):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.set_hwnd_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1279
 *             self.config.save_file()
 * 
 *     def set_capture(self, capture):             # <<<<<<<<<<<<<<
 *         if self.config.get("capture") != capture:
 *             self.config['capture'] = capture
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_37set_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_37set_capture = {"set_capture", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_37set_capture, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_37set_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_capture = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_capture (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_capture,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1279, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_capture)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1279, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_capture", 1, 2, 2, 1); __PYX_ERR(0, 1279, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_capture") < 0)) __PYX_ERR(0, 1279, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_capture = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_capture", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1279, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.set_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_36set_capture(__pyx_self, __pyx_v_self, __pyx_v_capture);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_36set_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_capture) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_capture", 1);

  /* "ok/Capture.pyx":1280
 * 
 *     def set_capture(self, capture):
 *         if self.config.get("capture") != capture:             # <<<<<<<<<<<<<<
 *             self.config['capture'] = capture
 *             self.start()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_capture};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_capture, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1281
 *     def set_capture(self, capture):
 *         if self.config.get("capture") != capture:
 *             self.config['capture'] = capture             # <<<<<<<<<<<<<<
 *             self.start()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_SetItem(__pyx_t_3, __pyx_n_s_capture, __pyx_v_capture) < 0))) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1282
 *         if self.config.get("capture") != capture:
 *             self.config['capture'] = capture
 *             self.start()             # <<<<<<<<<<<<<<
 * 
 *     def get_hwnd_name(self):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1280
 * 
 *     def set_capture(self, capture):
 *         if self.config.get("capture") != capture:             # <<<<<<<<<<<<<<
 *             self.config['capture'] = capture
 *             self.start()
 */
  }

  /* "ok/Capture.pyx":1279
 *             self.config.save_file()
 * 
 *     def set_capture(self, capture):             # <<<<<<<<<<<<<<
 *         if self.config.get("capture") != capture:
 *             self.config['capture'] = capture
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.set_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1284
 *             self.start()
 * 
 *     def get_hwnd_name(self):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         return preferred.get('hwnd')
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_39get_hwnd_name(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_39get_hwnd_name = {"get_hwnd_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_39get_hwnd_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_39get_hwnd_name(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_hwnd_name (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1284, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_hwnd_name") < 0)) __PYX_ERR(0, 1284, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_hwnd_name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1284, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_hwnd_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_38get_hwnd_name(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_38get_hwnd_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_hwnd_name", 1);

  /* "ok/Capture.pyx":1285
 * 
 *     def get_hwnd_name(self):
 *         preferred = self.get_preferred_device()             # <<<<<<<<<<<<<<
 *         return preferred.get('hwnd')
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_preferred = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1286
 *     def get_hwnd_name(self):
 *         preferred = self.get_preferred_device()
 *         return preferred.get('hwnd')             # <<<<<<<<<<<<<<
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_hwnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1284
 *             self.start()
 * 
 *     def get_hwnd_name(self):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         return preferred.get('hwnd')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_hwnd_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1288
 *         return preferred.get('hwnd')
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_41ensure_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_41ensure_hwnd = {"ensure_hwnd", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_41ensure_hwnd, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_41ensure_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_exe = 0;
  PyObject *__pyx_v_frame_width = 0;
  PyObject *__pyx_v_frame_height = 0;
  PyObject *__pyx_v_player_id = 0;
  PyObject *__pyx_v_hwnd_class = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ensure_hwnd (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_title,&__pyx_n_s_exe,&__pyx_n_s_frame_width,&__pyx_n_s_frame_height,&__pyx_n_s_player_id,&__pyx_n_s_hwnd_class,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_0)));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_0)));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_neg_1)));
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_title)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("ensure_hwnd", 0, 3, 7, 1); __PYX_ERR(0, 1288, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exe)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("ensure_hwnd", 0, 3, 7, 2); __PYX_ERR(0, 1288, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_width);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frame_height);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player_id);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd_class);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ensure_hwnd") < 0)) __PYX_ERR(0, 1288, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_title = values[1];
    __pyx_v_exe = values[2];
    __pyx_v_frame_width = values[3];
    __pyx_v_frame_height = values[4];
    __pyx_v_player_id = values[5];
    __pyx_v_hwnd_class = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ensure_hwnd", 0, 3, 7, __pyx_nargs); __PYX_ERR(0, 1288, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.ensure_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_40ensure_hwnd(__pyx_self, __pyx_v_self, __pyx_v_title, __pyx_v_exe, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_player_id, __pyx_v_hwnd_class);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_40ensure_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_title, PyObject *__pyx_v_exe, PyObject *__pyx_v_frame_width, PyObject *__pyx_v_frame_height, PyObject *__pyx_v_player_id, PyObject *__pyx_v_hwnd_class) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ensure_hwnd", 1);

  /* "ok/Capture.pyx":1289
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):
 *         if self.hwnd is None:             # <<<<<<<<<<<<<<
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 *                                    hwnd_class, global_config=self.global_config, device_manager=self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1290
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,             # <<<<<<<<<<<<<<
 *                                    hwnd_class, global_config=self.global_config, device_manager=self)
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exit_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "ok/Capture.pyx":1291
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 *                                    hwnd_class, global_config=self.global_config, device_manager=self)             # <<<<<<<<<<<<<<
 *         else:
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)
 */
    __pyx_t_3 = PyTuple_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_title);
    __Pyx_GIVEREF(__pyx_v_title);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_title)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_exe);
    __Pyx_GIVEREF(__pyx_v_exe);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_exe)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_frame_width);
    __Pyx_GIVEREF(__pyx_v_frame_width);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_frame_width)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_frame_height);
    __Pyx_GIVEREF(__pyx_v_frame_height);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_frame_height)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_player_id);
    __Pyx_GIVEREF(__pyx_v_player_id);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_player_id)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_hwnd_class);
    __Pyx_GIVEREF(__pyx_v_hwnd_class);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_v_hwnd_class)) __PYX_ERR(0, 1290, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_global_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_global_config, __pyx_t_4) < 0) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_device_manager, __pyx_v_self) < 0) __PYX_ERR(0, 1291, __pyx_L1_error)

    /* "ok/Capture.pyx":1290
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,             # <<<<<<<<<<<<<<
 *                                    hwnd_class, global_config=self.global_config, device_manager=self)
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow), __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_hwnd, __pyx_t_4) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1289
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):
 *         if self.hwnd is None:             # <<<<<<<<<<<<<<
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 *                                    hwnd_class, global_config=self.global_config, device_manager=self)
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":1293
 *                                    hwnd_class, global_config=self.global_config, device_manager=self)
 *         else:
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)             # <<<<<<<<<<<<<<
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_update_window); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[7] = {__pyx_t_1, __pyx_v_title, __pyx_v_exe, __pyx_v_frame_width, __pyx_v_frame_height, __pyx_v_player_id, __pyx_v_hwnd_class};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 6+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":1288
 *         return preferred.get('hwnd')
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.ensure_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1295
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                             bit_blt_render_full=False):
 *         if not override_config:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_43use_windows_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_43use_windows_capture = {"use_windows_capture", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_43use_windows_capture, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_43use_windows_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_override_config = 0;
  PyObject *__pyx_v_require_bg = 0;
  PyObject *__pyx_v_use_bit_blt_only = 0;
  PyObject *__pyx_v_bit_blt_render_full = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("use_windows_capture (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_override_config,&__pyx_n_s_require_bg,&__pyx_n_s_use_bit_blt_only,&__pyx_n_s_bit_blt_render_full,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));

    /* "ok/Capture.pyx":1296
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,
 *                             bit_blt_render_full=False):             # <<<<<<<<<<<<<<
 *         if not override_config:
 *             override_config = self.windows_capture_config
 */
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_override_config);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_require_bg);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_use_bit_blt_only);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bit_blt_render_full);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "use_windows_capture") < 0)) __PYX_ERR(0, 1295, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_override_config = values[1];
    __pyx_v_require_bg = values[2];
    __pyx_v_use_bit_blt_only = values[3];
    __pyx_v_bit_blt_render_full = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("use_windows_capture", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 1295, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.use_windows_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_42use_windows_capture(__pyx_self, __pyx_v_self, __pyx_v_override_config, __pyx_v_require_bg, __pyx_v_use_bit_blt_only, __pyx_v_bit_blt_render_full);

  /* "ok/Capture.pyx":1295
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                             bit_blt_render_full=False):
 *         if not override_config:
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_42use_windows_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_override_config, PyObject *__pyx_v_require_bg, PyObject *__pyx_v_use_bit_blt_only, PyObject *__pyx_v_bit_blt_render_full) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("use_windows_capture", 0);
  __Pyx_INCREF(__pyx_v_override_config);

  /* "ok/Capture.pyx":1297
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,
 *                             bit_blt_render_full=False):
 *         if not override_config:             # <<<<<<<<<<<<<<
 *             override_config = self.windows_capture_config
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_override_config); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1298
 *                             bit_blt_render_full=False):
 *         if not override_config:
 *             override_config = self.windows_capture_config             # <<<<<<<<<<<<<<
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_override_config, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1297
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,
 *                             bit_blt_render_full=False):
 *         if not override_config:             # <<<<<<<<<<<<<<
 *             override_config = self.windows_capture_config
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,
 */
  }

  /* "ok/Capture.pyx":1299
 *         if not override_config:
 *             override_config = self.windows_capture_config
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,             # <<<<<<<<<<<<<<
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_update_capture_method); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "ok/Capture.pyx":1300
 *             override_config = self.windows_capture_config
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,             # <<<<<<<<<<<<<<
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)
 *         if self.capture_method is None:
 */
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_override_config);
  __Pyx_GIVEREF(__pyx_v_override_config);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_override_config)) __PYX_ERR(0, 1299, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(0, 1299, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_require_bg);
  __Pyx_GIVEREF(__pyx_v_require_bg);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_require_bg)) __PYX_ERR(0, 1299, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_use_bit_blt_only, __pyx_v_use_bit_blt_only) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)

  /* "ok/Capture.pyx":1301
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)             # <<<<<<<<<<<<<<
 *         if self.capture_method is None:
 *             logger.error(f'cant find a usable windows capture')
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_bit_blt_render_full, __pyx_v_bit_blt_render_full) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exit_event); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_exit_event, __pyx_t_4) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1299
 *         if not override_config:
 *             override_config = self.windows_capture_config
 *         self.capture_method = update_capture_method(override_config, self.capture_method, self.hwnd,             # <<<<<<<<<<<<<<
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_capture_method, __pyx_t_4) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1302
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)
 *         if self.capture_method is None:             # <<<<<<<<<<<<<<
 *             logger.error(f'cant find a usable windows capture')
 *         else:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 == Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1303
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)
 *         if self.capture_method is None:
 *             logger.error(f'cant find a usable windows capture')             # <<<<<<<<<<<<<<
 *         else:
 *             logger.info(f'capture method {type(self.capture_method)}')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_cant_find_a_usable_windows_captu};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1302
 *                                                     require_bg, use_bit_blt_only=use_bit_blt_only,
 *                                                     bit_blt_render_full=bit_blt_render_full, exit_event=self.exit_event)
 *         if self.capture_method is None:             # <<<<<<<<<<<<<<
 *             logger.error(f'cant find a usable windows capture')
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ok/Capture.pyx":1305
 *             logger.error(f'cant find a usable windows capture')
 *         else:
 *             logger.info(f'capture method {type(self.capture_method)}')             # <<<<<<<<<<<<<<
 * 
 *     def start(self):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_t_6)), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_capture_method_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "ok/Capture.pyx":1295
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                             bit_blt_render_full=False):
 *         if not override_config:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.use_windows_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_override_config);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1307
 *             logger.info(f'capture method {type(self.capture_method)}')
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_45start(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_45start = {"start", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_45start, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_45start(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1307, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "start") < 0)) __PYX_ERR(0, 1307, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1307, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_44start(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_44start(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start", 1);

  /* "ok/Capture.pyx":1308
 * 
 *     def start(self):
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)             # <<<<<<<<<<<<<<
 * 
 *     def do_start(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_handler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_post); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_do_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_remove_existing, Py_True) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_skip_if_running, Py_True) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1307
 *             logger.info(f'capture method {type(self.capture_method)}')
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1310
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 *     def do_start(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_47do_start(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_47do_start = {"do_start", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_47do_start, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_47do_start(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_start (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1310, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "do_start") < 0)) __PYX_ERR(0, 1310, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_start", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1310, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.do_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_46do_start(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_46do_start(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_v_ADBBaseInteraction = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_start", 1);

  /* "ok/Capture.pyx":1311
 * 
 *     def do_start(self):
 *         logger.debug(f'do_start')             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         if preferred is None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_do_start};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1312
 *     def do_start(self):
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()             # <<<<<<<<<<<<<<
 *         if preferred is None:
 *             if self.device_dict:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_preferred = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1313
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()
 *         if preferred is None:             # <<<<<<<<<<<<<<
 *             if self.device_dict:
 *                 self.set_preferred_device()
 */
  __pyx_t_5 = (__pyx_v_preferred == Py_None);
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1314
 *         preferred = self.get_preferred_device()
 *         if preferred is None:
 *             if self.device_dict:             # <<<<<<<<<<<<<<
 *                 self.set_preferred_device()
 *             return
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1315
 *         if preferred is None:
 *             if self.device_dict:
 *                 self.set_preferred_device()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set_preferred_device_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1314
 *         preferred = self.get_preferred_device()
 *         if preferred is None:
 *             if self.device_dict:             # <<<<<<<<<<<<<<
 *                 self.set_preferred_device()
 *             return
 */
    }

    /* "ok/Capture.pyx":1316
 *             if self.device_dict:
 *                 self.set_preferred_device()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if preferred['device'] == 'windows':
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":1313
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()
 *         if preferred is None:             # <<<<<<<<<<<<<<
 *             if self.device_dict:
 *                 self.set_preferred_device()
 */
  }

  /* "ok/Capture.pyx":1318
 *             return
 * 
 *         if preferred['device'] == 'windows':             # <<<<<<<<<<<<<<
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_windows, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1319
 * 
 *         if preferred['device'] == 'windows':
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),             # <<<<<<<<<<<<<<
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 *             self.use_windows_capture(self.windows_capture_config,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ensure_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_title};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_exe};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6)) __PYX_ERR(0, 1319, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;

    /* "ok/Capture.pyx":1320
 *         if preferred['device'] == 'windows':
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))             # <<<<<<<<<<<<<<
 *             self.use_windows_capture(self.windows_capture_config,
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))
 */
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_hwnd_class};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_hwnd_class, __pyx_t_3) < 0) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1319
 * 
 *         if preferred['device'] == 'windows':
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),             # <<<<<<<<<<<<<<
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 *             self.use_windows_capture(self.windows_capture_config,
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1321
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 *             self.use_windows_capture(self.windows_capture_config,             # <<<<<<<<<<<<<<
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))
 *             if not isinstance(self.interaction, self.win_interaction_class):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_use_windows_capture); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6)) __PYX_ERR(0, 1321, __pyx_L1_error);
    __pyx_t_6 = 0;

    /* "ok/Capture.pyx":1322
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 *             self.use_windows_capture(self.windows_capture_config,
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))             # <<<<<<<<<<<<<<
 *             if not isinstance(self.interaction, self.win_interaction_class):
 *                 self.interaction = self.win_interaction_class(self.capture_method, self.hwnd)
 */
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_n_s_bit_blt_render_full};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_bit_blt_render_full, __pyx_t_1) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1321
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 *             self.use_windows_capture(self.windows_capture_config,             # <<<<<<<<<<<<<<
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))
 *             if not isinstance(self.interaction, self.win_interaction_class):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1323
 *             self.use_windows_capture(self.windows_capture_config,
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))
 *             if not isinstance(self.interaction, self.win_interaction_class):             # <<<<<<<<<<<<<<
 *                 self.interaction = self.win_interaction_class(self.capture_method, self.hwnd)
 *             preferred['connected'] = self.capture_method is not None and self.capture_method.connected()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_interaction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_win_interaction_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_IsInstance(__pyx_t_1, __pyx_t_6); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = (!__pyx_t_5);
    if (__pyx_t_9) {

      /* "ok/Capture.pyx":1324
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))
 *             if not isinstance(self.interaction, self.win_interaction_class):
 *                 self.interaction = self.win_interaction_class(self.capture_method, self.hwnd)             # <<<<<<<<<<<<<<
 *             preferred['connected'] = self.capture_method is not None and self.capture_method.connected()
 *         else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_win_interaction_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_7, __pyx_t_3};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1324, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_interaction, __pyx_t_6) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ok/Capture.pyx":1323
 *             self.use_windows_capture(self.windows_capture_config,
 *                                      bit_blt_render_full=self.windows_capture_config.get('bit_blt_render_full'))
 *             if not isinstance(self.interaction, self.win_interaction_class):             # <<<<<<<<<<<<<<
 *                 self.interaction = self.win_interaction_class(self.capture_method, self.hwnd)
 *             preferred['connected'] = self.capture_method is not None and self.capture_method.connected()
 */
    }

    /* "ok/Capture.pyx":1325
 *             if not isinstance(self.interaction, self.win_interaction_class):
 *                 self.interaction = self.win_interaction_class(self.capture_method, self.hwnd)
 *             preferred['connected'] = self.capture_method is not None and self.capture_method.connected()             # <<<<<<<<<<<<<<
 *         else:
 *             width, height = self.get_resolution()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {
    } else {
      __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_connected); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_L7_bool_binop_done:;
    if (unlikely((PyObject_SetItem(__pyx_v_preferred, __pyx_n_s_connected, __pyx_t_6) < 0))) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":1318
 *             return
 * 
 *         if preferred['device'] == 'windows':             # <<<<<<<<<<<<<<
 *             self.ensure_hwnd(self.windows_capture_config.get('title'), self.windows_capture_config.get('exe'),
 *                              hwnd_class=self.windows_capture_config.get('hwnd_class'))
 */
    goto __pyx_L5;
  }

  /* "ok/Capture.pyx":1327
 *             preferred['connected'] = self.capture_method is not None and self.capture_method.connected()
 *         else:
 *             width, height = self.get_resolution()             # <<<<<<<<<<<<<<
 *             if self.config.get('capture') == "windows":
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_resolution); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1327, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3);
      index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_3); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_3), 2) < 0) __PYX_ERR(0, 1327, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1327, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __pyx_v_width = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_height = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ok/Capture.pyx":1328
 *         else:
 *             width, height = self.get_resolution()
 *             if self.config.get('capture') == "windows":             # <<<<<<<<<<<<<<
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_n_s_capture};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_n_s_windows, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_9) {

      /* "ok/Capture.pyx":1329
 *             width, height = self.get_resolution()
 *             if self.config.get('capture') == "windows":
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])             # <<<<<<<<<<<<<<
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ensure_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_full_path};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_player_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[6] = {__pyx_t_2, Py_None, __pyx_t_7, __pyx_v_width, __pyx_v_height, __pyx_t_3};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ok/Capture.pyx":1330
 *             if self.config.get('capture') == "windows":
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')             # <<<<<<<<<<<<<<
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,
 *                                          bit_blt_render_full=False)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_title); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_do_start_use_windows_capture, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_7};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ok/Capture.pyx":1331
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,             # <<<<<<<<<<<<<<
 *                                          bit_blt_render_full=False)
 *             elif self.config.get('capture') == 'ipc':
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_use_windows_capture); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_can_bit_blt, Py_True) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3)) __PYX_ERR(0, 1331, __pyx_L1_error);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_require_bg, Py_True) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_use_bit_blt_only, Py_True) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)

      /* "ok/Capture.pyx":1332
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,
 *                                          bit_blt_render_full=False)             # <<<<<<<<<<<<<<
 *             elif self.config.get('capture') == 'ipc':
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):
 */
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_bit_blt_render_full, Py_False) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)

      /* "ok/Capture.pyx":1331
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,             # <<<<<<<<<<<<<<
 *                                          bit_blt_render_full=False)
 *             elif self.config.get('capture') == 'ipc':
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1328
 *         else:
 *             width, height = self.get_resolution()
 *             if self.config.get('capture') == "windows":             # <<<<<<<<<<<<<<
 *                 self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 logger.info(f'do_start use windows capture {self.hwnd.title}')
 */
      goto __pyx_L11;
    }

    /* "ok/Capture.pyx":1333
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,
 *                                          bit_blt_render_full=False)
 *             elif self.config.get('capture') == 'ipc':             # <<<<<<<<<<<<<<
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):
 *                     if self.capture_method is not None:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_capture};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_ipc, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "ok/Capture.pyx":1334
 *                                          bit_blt_render_full=False)
 *             elif self.config.get('capture') == 'ipc':
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):             # <<<<<<<<<<<<<<
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod); 
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = (!__pyx_t_9);
      if (__pyx_t_5) {

        /* "ok/Capture.pyx":1335
 *             elif self.config.get('capture') == 'ipc':
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):
 *                     if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *                         self.capture_method.close()
 *                     self.capture_method = NemuIpcCaptureMethod(self, self.exit_event)
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = (__pyx_t_1 != Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_5) {

          /* "ok/Capture.pyx":1336
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()             # <<<<<<<<<<<<<<
 *                     self.capture_method = NemuIpcCaptureMethod(self, self.exit_event)
 *                 self.capture_method.update_emulator(self.get_preferred_device()['emulator'])
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1336, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1336, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1336, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "ok/Capture.pyx":1335
 *             elif self.config.get('capture') == 'ipc':
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):
 *                     if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *                         self.capture_method.close()
 *                     self.capture_method = NemuIpcCaptureMethod(self, self.exit_event)
 */
        }

        /* "ok/Capture.pyx":1337
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()
 *                     self.capture_method = NemuIpcCaptureMethod(self, self.exit_event)             # <<<<<<<<<<<<<<
 *                 self.capture_method.update_emulator(self.get_preferred_device()['emulator'])
 *             else:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exit_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_self);
        __Pyx_GIVEREF(__pyx_v_self);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self)) __PYX_ERR(0, 1337, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_1);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(0, 1337, __pyx_L1_error);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_capture_method, __pyx_t_1) < 0) __PYX_ERR(0, 1337, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "ok/Capture.pyx":1334
 *                                          bit_blt_render_full=False)
 *             elif self.config.get('capture') == 'ipc':
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):             # <<<<<<<<<<<<<<
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()
 */
      }

      /* "ok/Capture.pyx":1338
 *                         self.capture_method.close()
 *                     self.capture_method = NemuIpcCaptureMethod(self, self.exit_event)
 *                 self.capture_method.update_emulator(self.get_preferred_device()['emulator'])             # <<<<<<<<<<<<<<
 *             else:
 *                 if not isinstance(self.capture_method, ADBCaptureMethod):
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_update_emulator); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_emulator); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1333
 *                 self.use_windows_capture({'can_bit_blt': True}, require_bg=True, use_bit_blt_only=True,
 *                                          bit_blt_render_full=False)
 *             elif self.config.get('capture') == 'ipc':             # <<<<<<<<<<<<<<
 *                 if not isinstance(self.capture_method, NemuIpcCaptureMethod):
 *                     if self.capture_method is not None:
 */
      goto __pyx_L11;
    }

    /* "ok/Capture.pyx":1340
 *                 self.capture_method.update_emulator(self.get_preferred_device()['emulator'])
 *             else:
 *                 if not isinstance(self.capture_method, ADBCaptureMethod):             # <<<<<<<<<<<<<<
 *                     logger.debug(f'use adb capture')
 *                     if self.capture_method is not None:
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_2ok_7Capture_ADBCaptureMethod); 
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = (!__pyx_t_5);
      if (__pyx_t_9) {

        /* "ok/Capture.pyx":1341
 *             else:
 *                 if not isinstance(self.capture_method, ADBCaptureMethod):
 *                     logger.debug(f'use adb capture')             # <<<<<<<<<<<<<<
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_debug); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_use_adb_capture};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "ok/Capture.pyx":1342
 *                 if not isinstance(self.capture_method, ADBCaptureMethod):
 *                     logger.debug(f'use adb capture')
 *                     if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *                         self.capture_method.close()
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = (__pyx_t_1 != Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_9) {

          /* "ok/Capture.pyx":1343
 *                     logger.debug(f'use adb capture')
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()             # <<<<<<<<<<<<<<
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,
 *                                                            height=height)
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1343, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_close); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1343, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1343, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "ok/Capture.pyx":1342
 *                 if not isinstance(self.capture_method, ADBCaptureMethod):
 *                     logger.debug(f'use adb capture')
 *                     if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *                         self.capture_method.close()
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,
 */
        }

        /* "ok/Capture.pyx":1344
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,             # <<<<<<<<<<<<<<
 *                                                            height=height)
 *                 if self.debug and preferred.get('full_path'):
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exit_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_self);
        __Pyx_GIVEREF(__pyx_v_self);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_self)) __PYX_ERR(0, 1344, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_1);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1)) __PYX_ERR(0, 1344, __pyx_L1_error);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_width, __pyx_v_width) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)

        /* "ok/Capture.pyx":1345
 *                         self.capture_method.close()
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,
 *                                                            height=height)             # <<<<<<<<<<<<<<
 *                 if self.debug and preferred.get('full_path'):
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 */
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_height, __pyx_v_height) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)

        /* "ok/Capture.pyx":1344
 *                     if self.capture_method is not None:
 *                         self.capture_method.close()
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,             # <<<<<<<<<<<<<<
 *                                                            height=height)
 *                 if self.debug and preferred.get('full_path'):
 */
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod), __pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_capture_method, __pyx_t_6) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ok/Capture.pyx":1340
 *                 self.capture_method.update_emulator(self.get_preferred_device()['emulator'])
 *             else:
 *                 if not isinstance(self.capture_method, ADBCaptureMethod):             # <<<<<<<<<<<<<<
 *                     logger.debug(f'use adb capture')
 *                     if self.capture_method is not None:
 */
      }

      /* "ok/Capture.pyx":1346
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,
 *                                                            height=height)
 *                 if self.debug and preferred.get('full_path'):             # <<<<<<<<<<<<<<
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 elif self.hwnd is not None:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_debug); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1346, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_9 = __pyx_t_5;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_n_s_full_path};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1346, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1346, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __pyx_t_5;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_9) {

        /* "ok/Capture.pyx":1347
 *                                                            height=height)
 *                 if self.debug and preferred.get('full_path'):
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])             # <<<<<<<<<<<<<<
 *                 elif self.hwnd is not None:
 *                     self.hwnd.stop()
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ensure_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_full_path};
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_preferred, __pyx_n_s_player_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[6] = {__pyx_t_2, Py_None, __pyx_t_7, __pyx_v_width, __pyx_v_height, __pyx_t_3};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ok/Capture.pyx":1346
 *                     self.capture_method = ADBCaptureMethod(self, self.exit_event, width=width,
 *                                                            height=height)
 *                 if self.debug and preferred.get('full_path'):             # <<<<<<<<<<<<<<
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 elif self.hwnd is not None:
 */
        goto __pyx_L16;
      }

      /* "ok/Capture.pyx":1348
 *                 if self.debug and preferred.get('full_path'):
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 elif self.hwnd is not None:             # <<<<<<<<<<<<<<
 *                     self.hwnd.stop()
 *                     self.hwnd = None
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = (__pyx_t_6 != Py_None);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_9) {

        /* "ok/Capture.pyx":1349
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 elif self.hwnd is not None:
 *                     self.hwnd.stop()             # <<<<<<<<<<<<<<
 *                     self.hwnd = None
 *             from ok.interaction.ADBInteraction import ADBBaseInteraction
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ok/Capture.pyx":1350
 *                 elif self.hwnd is not None:
 *                     self.hwnd.stop()
 *                     self.hwnd = None             # <<<<<<<<<<<<<<
 *             from ok.interaction.ADBInteraction import ADBBaseInteraction
 *             if not isinstance(self.interaction, ADBBaseInteraction):
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_hwnd, Py_None) < 0) __PYX_ERR(0, 1350, __pyx_L1_error)

        /* "ok/Capture.pyx":1348
 *                 if self.debug and preferred.get('full_path'):
 *                     self.ensure_hwnd(None, preferred.get('full_path'), width, height, preferred['player_id'])
 *                 elif self.hwnd is not None:             # <<<<<<<<<<<<<<
 *                     self.hwnd.stop()
 *                     self.hwnd = None
 */
      }
      __pyx_L16:;
    }
    __pyx_L11:;

    /* "ok/Capture.pyx":1351
 *                     self.hwnd.stop()
 *                     self.hwnd = None
 *             from ok.interaction.ADBInteraction import ADBBaseInteraction             # <<<<<<<<<<<<<<
 *             if not isinstance(self.interaction, ADBBaseInteraction):
 *                 self.interaction = ADBBaseInteraction(self, self.capture_method, width, height)
 */
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_ADBBaseInteraction);
    __Pyx_GIVEREF(__pyx_n_s_ADBBaseInteraction);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_ADBBaseInteraction)) __PYX_ERR(0, 1351, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_interaction_ADBInteraction, __pyx_t_6, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ADBBaseInteraction); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_ADBBaseInteraction = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1352
 *                     self.hwnd = None
 *             from ok.interaction.ADBInteraction import ADBBaseInteraction
 *             if not isinstance(self.interaction, ADBBaseInteraction):             # <<<<<<<<<<<<<<
 *                 self.interaction = ADBBaseInteraction(self, self.capture_method, width, height)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_interaction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyObject_IsInstance(__pyx_t_3, __pyx_v_ADBBaseInteraction); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (!__pyx_t_9);
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1353
 *             from ok.interaction.ADBInteraction import ADBBaseInteraction
 *             if not isinstance(self.interaction, ADBBaseInteraction):
 *                 self.interaction = ADBBaseInteraction(self, self.capture_method, width, height)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.interaction.capture = self.capture_method
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_ADBBaseInteraction);
      __pyx_t_1 = __pyx_v_ADBBaseInteraction; __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_7, __pyx_v_self, __pyx_t_6, __pyx_v_width, __pyx_v_height};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_interaction, __pyx_t_3) < 0) __PYX_ERR(0, 1353, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":1352
 *                     self.hwnd = None
 *             from ok.interaction.ADBInteraction import ADBBaseInteraction
 *             if not isinstance(self.interaction, ADBBaseInteraction):             # <<<<<<<<<<<<<<
 *                 self.interaction = ADBBaseInteraction(self, self.capture_method, width, height)
 *             else:
 */
      goto __pyx_L19;
    }

    /* "ok/Capture.pyx":1355
 *                 self.interaction = ADBBaseInteraction(self, self.capture_method, width, height)
 *             else:
 *                 self.interaction.capture = self.capture_method             # <<<<<<<<<<<<<<
 *                 self.interaction.width = width
 *                 self.interaction.height = height
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_interaction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_1, __pyx_n_s_capture, __pyx_t_3) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1356
 *             else:
 *                 self.interaction.capture = self.capture_method
 *                 self.interaction.width = width             # <<<<<<<<<<<<<<
 *                 self.interaction.height = height
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_interaction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_1, __pyx_n_s_width, __pyx_v_width) < 0) __PYX_ERR(0, 1356, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1357
 *                 self.interaction.capture = self.capture_method
 *                 self.interaction.width = width
 *                 self.interaction.height = height             # <<<<<<<<<<<<<<
 * 
 *         communicate.adb_devices.emit(True)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_interaction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_1, __pyx_n_s_height, __pyx_v_height) < 0) __PYX_ERR(0, 1357, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L19:;
  }
  __pyx_L5:;

  /* "ok/Capture.pyx":1359
 *                 self.interaction.height = height
 * 
 *         communicate.adb_devices.emit(True)             # <<<<<<<<<<<<<<
 * 
 *     def update_resolution_for_hwnd(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_communicate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_adb_devices); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_emit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, Py_True};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1310
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 *     def do_start(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.do_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XDECREF(__pyx_v_ADBBaseInteraction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1361
 *         communicate.adb_devices.emit(True)
 * 
 *     def update_resolution_for_hwnd(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:
 *             width, height = self.get_resolution()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_49update_resolution_for_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_49update_resolution_for_hwnd = {"update_resolution_for_hwnd", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_49update_resolution_for_hwnd, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_49update_resolution_for_hwnd(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_resolution_for_hwnd (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1361, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_resolution_for_hwnd") < 0)) __PYX_ERR(0, 1361, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_resolution_for_hwnd", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1361, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.update_resolution_for_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_48update_resolution_for_hwnd(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_48update_resolution_for_hwnd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_width = NULL;
  PyObject *__pyx_v_height = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_resolution_for_hwnd", 1);

  /* "ok/Capture.pyx":1362
 * 
 *     def update_resolution_for_hwnd(self):
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:             # <<<<<<<<<<<<<<
 *             width, height = self.get_resolution()
 *             logger.debug(f'update resolution for {self.hwnd} {width}x{height}')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_frame_aspect_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_4, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_capture_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1363
 *     def update_resolution_for_hwnd(self):
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:
 *             width, height = self.get_resolution()             # <<<<<<<<<<<<<<
 *             logger.debug(f'update resolution for {self.hwnd} {width}x{height}')
 *             self.hwnd.update_frame_size(width, height)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_resolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1363, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1363, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1363, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __pyx_v_width = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_height = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ok/Capture.pyx":1364
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:
 *             width, height = self.get_resolution()
 *             logger.debug(f'update resolution for {self.hwnd} {width}x{height}')             # <<<<<<<<<<<<<<
 *             self.hwnd.update_frame_size(width, height)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_debug); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = 0;
    __pyx_t_10 = 127;
    __Pyx_INCREF(__pyx_kp_u_update_resolution_for);
    __pyx_t_9 += 22;
    __Pyx_GIVEREF(__pyx_kp_u_update_resolution_for);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_update_resolution_for);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u__11);
    __pyx_t_9 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__11);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__11);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_width, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_n_u_x);
    __pyx_t_9 += 1;
    __Pyx_GIVEREF(__pyx_n_u_x);
    PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_n_u_x);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_height, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_5, 6, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_11};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1365
 *             width, height = self.get_resolution()
 *             logger.debug(f'update resolution for {self.hwnd} {width}x{height}')
 *             self.hwnd.update_frame_size(width, height)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_hwnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_update_frame_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_width, __pyx_v_height};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1362
 * 
 *     def update_resolution_for_hwnd(self):
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:             # <<<<<<<<<<<<<<
 *             width, height = self.get_resolution()
 *             logger.debug(f'update resolution for {self.hwnd} {width}x{height}')
 */
  }

  /* "ok/Capture.pyx":1361
 *         communicate.adb_devices.emit(True)
 * 
 *     def update_resolution_for_hwnd(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:
 *             width, height = self.get_resolution()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.update_resolution_for_hwnd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1367
 *             self.hwnd.update_frame_size(width, height)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def device(self):
 *         if preferred := self.get_preferred_device():
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_51device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_51device = {"device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_51device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_51device(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("device (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1367, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "device") < 0)) __PYX_ERR(0, 1367, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("device", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1367, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_50device(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_50device(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_preferred = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("device", 1);

  /* "ok/Capture.pyx":1369
 *     @property
 *     def device(self):
 *         if preferred := self.get_preferred_device():             # <<<<<<<<<<<<<<
 *             if self._device is None:
 *                 logger.debug(f'get device connect {preferred}')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_preferred = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1370
 *     def device(self):
 *         if preferred := self.get_preferred_device():
 *             if self._device is None:             # <<<<<<<<<<<<<<
 *                 logger.debug(f'get device connect {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = (__pyx_t_1 == Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1371
 *         if preferred := self.get_preferred_device():
 *             if self._device is None:
 *                 logger.debug(f'get device connect {preferred}')             # <<<<<<<<<<<<<<
 *                 self._device = self.adb_connect(preferred.get('address'))
 *             if self._device is not None and self._device.serial != preferred.get('address'):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_preferred, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_get_device_connect, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1372
 *             if self._device is None:
 *                 logger.debug(f'get device connect {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))             # <<<<<<<<<<<<<<
 *             if self._device is not None and self._device.serial != preferred.get('address'):
 *                 logger.info(f'get device adb device addr changed {preferred}')
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_connect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_n_s_address};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_device_2, __pyx_t_1) < 0) __PYX_ERR(0, 1372, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1370
 *     def device(self):
 *         if preferred := self.get_preferred_device():
 *             if self._device is None:             # <<<<<<<<<<<<<<
 *                 logger.debug(f'get device connect {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))
 */
    }

    /* "ok/Capture.pyx":1373
 *                 logger.debug(f'get device connect {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))
 *             if self._device is not None and self._device.serial != preferred.get('address'):             # <<<<<<<<<<<<<<
 *                 logger.info(f'get device adb device addr changed {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
    } else {
      __pyx_t_5 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_serial); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_address};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1374
 *                 self._device = self.adb_connect(preferred.get('address'))
 *             if self._device is not None and self._device.serial != preferred.get('address'):
 *                 logger.info(f'get device adb device addr changed {preferred}')             # <<<<<<<<<<<<<<
 *                 self._device = self.adb_connect(preferred.get('address'))
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_preferred, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_get_device_adb_device_addr_chang, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1374, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ok/Capture.pyx":1375
 *             if self._device is not None and self._device.serial != preferred.get('address'):
 *                 logger.info(f'get device adb device addr changed {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))             # <<<<<<<<<<<<<<
 *         else:
 *             logger.error(f'self.get_preferred_device returned None')
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_connect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_preferred, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_n_s_address};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_device_2, __pyx_t_6) < 0) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ok/Capture.pyx":1373
 *                 logger.debug(f'get device connect {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))
 *             if self._device is not None and self._device.serial != preferred.get('address'):             # <<<<<<<<<<<<<<
 *                 logger.info(f'get device adb device addr changed {preferred}')
 *                 self._device = self.adb_connect(preferred.get('address'))
 */
    }

    /* "ok/Capture.pyx":1369
 *     @property
 *     def device(self):
 *         if preferred := self.get_preferred_device():             # <<<<<<<<<<<<<<
 *             if self._device is None:
 *                 logger.debug(f'get device connect {preferred}')
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":1377
 *                 self._device = self.adb_connect(preferred.get('address'))
 *         else:
 *             logger.error(f'self.get_preferred_device returned None')             # <<<<<<<<<<<<<<
 *         return self._device
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_self_get_preferred_device_return};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":1378
 *         else:
 *             logger.error(f'self.get_preferred_device returned None')
 *         return self._device             # <<<<<<<<<<<<<<
 * 
 *     def adb_kill_server(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1367
 *             self.hwnd.update_frame_size(width, height)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def device(self):
 *         if preferred := self.get_preferred_device():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_preferred);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1380
 *         return self._device
 * 
 *     def adb_kill_server(self):             # <<<<<<<<<<<<<<
 *         if self.adb is not None:
 *             self.adb.server_kill()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_53adb_kill_server(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_53adb_kill_server = {"adb_kill_server", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_53adb_kill_server, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_53adb_kill_server(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_kill_server (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1380, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_kill_server") < 0)) __PYX_ERR(0, 1380, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_kill_server", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1380, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_kill_server", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_52adb_kill_server(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_52adb_kill_server(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_kill_server", 1);

  /* "ok/Capture.pyx":1381
 * 
 *     def adb_kill_server(self):
 *         if self.adb is not None:             # <<<<<<<<<<<<<<
 *             self.adb.server_kill()
 *             logger.debug('adb kill_server')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1382
 *     def adb_kill_server(self):
 *         if self.adb is not None:
 *             self.adb.server_kill()             # <<<<<<<<<<<<<<
 *             logger.debug('adb kill_server')
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_server_kill); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1383
 *         if self.adb is not None:
 *             self.adb.server_kill()
 *             logger.debug('adb kill_server')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_s_adb_kill_server};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1381
 * 
 *     def adb_kill_server(self):
 *         if self.adb is not None:             # <<<<<<<<<<<<<<
 *             self.adb.server_kill()
 *             logger.debug('adb kill_server')
 */
  }

  /* "ok/Capture.pyx":1380
 *         return self._device
 * 
 *     def adb_kill_server(self):             # <<<<<<<<<<<<<<
 *         if self.adb is not None:
 *             self.adb.server_kill()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_kill_server", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1385
 *             logger.debug('adb kill_server')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def width(self):
 *         if self.capture_method is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_55width(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_55width = {"width", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_55width, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_55width(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("width (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1385, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "width") < 0)) __PYX_ERR(0, 1385, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("width", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1385, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_54width(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_54width(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("width", 1);

  /* "ok/Capture.pyx":1387
 *     @property
 *     def width(self):
 *         if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *             return self.capture_method.width
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1388
 *     def width(self):
 *         if self.capture_method is not None:
 *             return self.capture_method.width             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1387
 *     @property
 *     def width(self):
 *         if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *             return self.capture_method.width
 *         return 0
 */
  }

  /* "ok/Capture.pyx":1389
 *         if self.capture_method is not None:
 *             return self.capture_method.width
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1385
 *             logger.debug('adb kill_server')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def width(self):
 *         if self.capture_method is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1391
 *         return 0
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def height(self):
 *         if self.capture_method is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_57height(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_57height = {"height", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_57height, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_57height(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("height (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1391, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "height") < 0)) __PYX_ERR(0, 1391, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("height", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1391, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_56height(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_56height(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("height", 1);

  /* "ok/Capture.pyx":1393
 *     @property
 *     def height(self):
 *         if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *             return self.capture_method.height
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1394
 *     def height(self):
 *         if self.capture_method is not None:
 *             return self.capture_method.height             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_capture_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1393
 *     @property
 *     def height(self):
 *         if self.capture_method is not None:             # <<<<<<<<<<<<<<
 *             return self.capture_method.height
 *         return 0
 */
  }

  /* "ok/Capture.pyx":1395
 *         if self.capture_method is not None:
 *             return self.capture_method.height
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def update_device_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1391
 *         return 0
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def height(self):
 *         if self.capture_method is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1397
 *         return 0
 * 
 *     def update_device_list(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_59update_device_list(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_59update_device_list = {"update_device_list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_59update_device_list, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_59update_device_list(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_device_list (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_device_list") < 0)) __PYX_ERR(0, 1397, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_device_list", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1397, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.update_device_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_58update_device_list(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_58update_device_list(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_device_list", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1400
 *         pass
 * 
 *     def shell(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # Set default timeout to 5 if not provided
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_61shell(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_61shell = {"shell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_61shell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_61shell(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shell (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "shell") < 0)) __PYX_ERR(0, 1400, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shell", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 1400, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("ok.Capture.DeviceManager.shell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_60shell(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_60shell(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_device = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shell", 1);

  /* "ok/Capture.pyx":1403
 *         # Set default timeout to 5 if not provided
 * 
 *         device = self.device             # <<<<<<<<<<<<<<
 *         if device is not None:
 *             return self.shell_device(device, *args, **kwargs)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_device = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1404
 * 
 *         device = self.device
 *         if device is not None:             # <<<<<<<<<<<<<<
 *             return self.shell_device(device, *args, **kwargs)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_device != Py_None);
  if (likely(__pyx_t_2)) {

    /* "ok/Capture.pyx":1405
 *         device = self.device
 *         if device is not None:
 *             return self.shell_device(device, *args, **kwargs)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('Device is none')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_device);
    __Pyx_GIVEREF(__pyx_v_device);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_device)) __PYX_ERR(0, 1405, __pyx_L1_error);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1404
 * 
 *         device = self.device
 *         if device is not None:             # <<<<<<<<<<<<<<
 *             return self.shell_device(device, *args, **kwargs)
 *         else:
 */
  }

  /* "ok/Capture.pyx":1407
 *             return self.shell_device(device, *args, **kwargs)
 *         else:
 *             raise Exception('Device is none')             # <<<<<<<<<<<<<<
 * 
 *     def device_connected(self):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1407, __pyx_L1_error)
  }

  /* "ok/Capture.pyx":1400
 *         pass
 * 
 *     def shell(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # Set default timeout to 5 if not provided
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.shell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1409
 *             raise Exception('Device is none')
 * 
 *     def device_connected(self):             # <<<<<<<<<<<<<<
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_63device_connected(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_63device_connected = {"device_connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_63device_connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_63device_connected(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("device_connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1409, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "device_connected") < 0)) __PYX_ERR(0, 1409, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("device_connected", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1409, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.device_connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_62device_connected(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_62device_connected(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("device_connected", 1);

  /* "ok/Capture.pyx":1410
 * 
 *     def device_connected(self):
 *         if self.get_preferred_device()['device'] == 'windows':             # <<<<<<<<<<<<<<
 *             return True
 *         elif self.device is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_preferred_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_windows, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1411
 *     def device_connected(self):
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True             # <<<<<<<<<<<<<<
 *         elif self.device is not None:
 *             try:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1410
 * 
 *     def device_connected(self):
 *         if self.get_preferred_device()['device'] == 'windows':             # <<<<<<<<<<<<<<
 *             return True
 *         elif self.device is not None:
 */
  }

  /* "ok/Capture.pyx":1412
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True
 *         elif self.device is not None:             # <<<<<<<<<<<<<<
 *             try:
 *                 state = self.shell('echo 1')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1413
 *             return True
 *         elif self.device is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 state = self.shell('echo 1')
 *                 logger.debug(f'device_connected check device state is {state}')
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "ok/Capture.pyx":1414
 *         elif self.device is not None:
 *             try:
 *                 state = self.shell('echo 1')             # <<<<<<<<<<<<<<
 *                 logger.debug(f'device_connected check device state is {state}')
 *                 return state is not None
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_s_echo_1};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_v_state = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "ok/Capture.pyx":1415
 *             try:
 *                 state = self.shell('echo 1')
 *                 logger.debug(f'device_connected check device state is {state}')             # <<<<<<<<<<<<<<
 *                 return state is not None
 *             except Exception as e:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1415, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_state, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyUnicode_Concat(__pyx_kp_u_device_connected_check_device_st, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1415, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_9};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ok/Capture.pyx":1416
 *                 state = self.shell('echo 1')
 *                 logger.debug(f'device_connected check device state is {state}')
 *                 return state is not None             # <<<<<<<<<<<<<<
 *             except Exception as e:
 *                 logger.error(f'device_connected error occurred, {e}')
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = (__pyx_v_state != Py_None);
        __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1416, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L8_try_return;

        /* "ok/Capture.pyx":1413
 *             return True
 *         elif self.device is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 state = self.shell('echo 1')
 *                 logger.debug(f'device_connected check device state is {state}')
 */
      }
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ok/Capture.pyx":1417
 *                 logger.debug(f'device_connected check device state is {state}')
 *                 return state is not None
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 logger.error(f'device_connected error occurred, {e}')
 * 
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_10) {
        __Pyx_AddTraceback("ok.Capture.DeviceManager.device_connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_9) < 0) __PYX_ERR(0, 1417, __pyx_L6_except_error)
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_e = __pyx_t_3;
        /*try:*/ {

          /* "ok/Capture.pyx":1418
 *                 return state is not None
 *             except Exception as e:
 *                 logger.error(f'device_connected error occurred, {e}')             # <<<<<<<<<<<<<<
 * 
 *     def get_exe_path(self, device):
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1418, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_error); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1418, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1418, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_kp_u_device_connected_error_occurred, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1418, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_13};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L15_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }

        /* "ok/Capture.pyx":1417
 *                 logger.debug(f'device_connected check device state is {state}')
 *                 return state is not None
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 logger.error(f'device_connected error occurred, {e}')
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            goto __pyx_L16;
          }
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_21);
            __pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
            }
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
            __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
            goto __pyx_L6_except_error;
          }
          __pyx_L16:;
        }
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;

      /* "ok/Capture.pyx":1413
 *             return True
 *         elif self.device is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 state = self.shell('echo 1')
 *                 logger.debug(f'device_connected check device state is {state}')
 */
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    }

    /* "ok/Capture.pyx":1412
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True
 *         elif self.device is not None:             # <<<<<<<<<<<<<<
 *             try:
 *                 state = self.shell('echo 1')
 */
  }

  /* "ok/Capture.pyx":1409
 *             raise Exception('Device is none')
 * 
 *     def device_connected(self):             # <<<<<<<<<<<<<<
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.device_connected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1420
 *                 logger.error(f'device_connected error occurred, {e}')
 * 
 *     def get_exe_path(self, device):             # <<<<<<<<<<<<<<
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_65get_exe_path(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_65get_exe_path = {"get_exe_path", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_65get_exe_path, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_65get_exe_path(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_device = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_exe_path (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_device,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_exe_path", 1, 2, 2, 1); __PYX_ERR(0, 1420, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_exe_path") < 0)) __PYX_ERR(0, 1420, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_device = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_exe_path", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1420, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_exe_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_64get_exe_path(__pyx_self, __pyx_v_self, __pyx_v_device);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_64get_exe_path(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_device) {
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_v_get_emulator_exe = NULL;
  PyObject *__pyx_v_emulator = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_exe_path", 1);

  /* "ok/Capture.pyx":1421
 * 
 *     def get_exe_path(self, device):
 *         path = device.get('full_path')             # <<<<<<<<<<<<<<
 *         if path != 'none' and device.get(
 *                 'device') == 'windows' and self.windows_capture_config and self.windows_capture_config.get(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_full_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1422
 *     def get_exe_path(self, device):
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(             # <<<<<<<<<<<<<<
 *                 'device') == 'windows' and self.windows_capture_config and self.windows_capture_config.get(
 *             'calculate_pc_exe_path'):
 */
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_path, __pyx_n_s_none, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1422, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }

  /* "ok/Capture.pyx":1423
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(
 *                 'device') == 'windows' and self.windows_capture_config and self.windows_capture_config.get(             # <<<<<<<<<<<<<<
 *             'calculate_pc_exe_path'):
 *             path = self.windows_capture_config.get('calculate_pc_exe_path')(path)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_device};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_windows, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_calculate_pc_exe_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;

  /* "ok/Capture.pyx":1422
 *     def get_exe_path(self, device):
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(             # <<<<<<<<<<<<<<
 *                 'device') == 'windows' and self.windows_capture_config and self.windows_capture_config.get(
 *             'calculate_pc_exe_path'):
 */
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1425
 *                 'device') == 'windows' and self.windows_capture_config and self.windows_capture_config.get(
 *             'calculate_pc_exe_path'):
 *             path = self.windows_capture_config.get('calculate_pc_exe_path')(path)             # <<<<<<<<<<<<<<
 *             logger.info(f'calculate_pc_exe_path {path}')
 *             if os.path.exists(path):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_windows_capture_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_calculate_pc_exe_path};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_path};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1426
 *             'calculate_pc_exe_path'):
 *             path = self.windows_capture_config.get('calculate_pc_exe_path')(path)
 *             logger.info(f'calculate_pc_exe_path {path}')             # <<<<<<<<<<<<<<
 *             if os.path.exists(path):
 *                 return path
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_calculate_pc_exe_path_2, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1427
 *             path = self.windows_capture_config.get('calculate_pc_exe_path')(path)
 *             logger.info(f'calculate_pc_exe_path {path}')
 *             if os.path.exists(path):             # <<<<<<<<<<<<<<
 *                 return path
 *         elif emulator := device.get('emulator'):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exists); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_path};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1428
 *             logger.info(f'calculate_pc_exe_path {path}')
 *             if os.path.exists(path):
 *                 return path             # <<<<<<<<<<<<<<
 *         elif emulator := device.get('emulator'):
 *             from ok.alas.platform_windows import get_emulator_exe
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_path);
      __pyx_r = __pyx_v_path;
      goto __pyx_L0;

      /* "ok/Capture.pyx":1427
 *             path = self.windows_capture_config.get('calculate_pc_exe_path')(path)
 *             logger.info(f'calculate_pc_exe_path {path}')
 *             if os.path.exists(path):             # <<<<<<<<<<<<<<
 *                 return path
 *         elif emulator := device.get('emulator'):
 */
    }

    /* "ok/Capture.pyx":1422
 *     def get_exe_path(self, device):
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(             # <<<<<<<<<<<<<<
 *                 'device') == 'windows' and self.windows_capture_config and self.windows_capture_config.get(
 *             'calculate_pc_exe_path'):
 */
    goto __pyx_L3;
  }

  /* "ok/Capture.pyx":1429
 *             if os.path.exists(path):
 *                 return path
 *         elif emulator := device.get('emulator'):             # <<<<<<<<<<<<<<
 *             from ok.alas.platform_windows import get_emulator_exe
 *             return get_emulator_exe(emulator)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_device, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_s_emulator};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_v_emulator = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1430
 *                 return path
 *         elif emulator := device.get('emulator'):
 *             from ok.alas.platform_windows import get_emulator_exe             # <<<<<<<<<<<<<<
 *             return get_emulator_exe(emulator)
 *         else:
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_get_emulator_exe);
    __Pyx_GIVEREF(__pyx_n_s_get_emulator_exe);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_get_emulator_exe)) __PYX_ERR(0, 1430, __pyx_L1_error);
    __pyx_t_7 = __Pyx_Import(__pyx_n_s_ok_alas_platform_windows, __pyx_t_1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_get_emulator_exe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_get_emulator_exe = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "ok/Capture.pyx":1431
 *         elif emulator := device.get('emulator'):
 *             from ok.alas.platform_windows import get_emulator_exe
 *             return get_emulator_exe(emulator)             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_get_emulator_exe);
    __pyx_t_1 = __pyx_v_get_emulator_exe; __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_emulator};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1429
 *             if os.path.exists(path):
 *                 return path
 *         elif emulator := device.get('emulator'):             # <<<<<<<<<<<<<<
 *             from ok.alas.platform_windows import get_emulator_exe
 *             return get_emulator_exe(emulator)
 */
  }

  /* "ok/Capture.pyx":1433
 *             return get_emulator_exe(emulator)
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def adb_check_installed(self, packages):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "ok/Capture.pyx":1420
 *                 logger.error(f'device_connected error occurred, {e}')
 * 
 *     def get_exe_path(self, device):             # <<<<<<<<<<<<<<
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.get_exe_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF(__pyx_v_get_emulator_exe);
  __Pyx_XDECREF(__pyx_v_emulator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1435
 *             return None
 * 
 *     def adb_check_installed(self, packages):             # <<<<<<<<<<<<<<
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_67adb_check_installed(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_67adb_check_installed = {"adb_check_installed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_67adb_check_installed, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_67adb_check_installed(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_packages = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_check_installed (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_packages,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1435, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_packages)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1435, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adb_check_installed", 1, 2, 2, 1); __PYX_ERR(0, 1435, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_check_installed") < 0)) __PYX_ERR(0, 1435, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_packages = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_check_installed", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1435, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_check_installed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_66adb_check_installed(__pyx_self, __pyx_v_self, __pyx_v_packages);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_66adb_check_installed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_packages) {
  PyObject *__pyx_v_installed = NULL;
  PyObject *__pyx_v_package = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_check_installed", 0);
  __Pyx_INCREF(__pyx_v_packages);

  /* "ok/Capture.pyx":1436
 * 
 *     def adb_check_installed(self, packages):
 *         installed = self.shell('pm list packages')             # <<<<<<<<<<<<<<
 *         if isinstance(packages, str):
 *             packages = [packages]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_s_pm_list_packages};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_installed = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1437
 *     def adb_check_installed(self, packages):
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):             # <<<<<<<<<<<<<<
 *             packages = [packages]
 *         for package in packages:
 */
  __pyx_t_5 = PyString_Check(__pyx_v_packages); 
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1438
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):
 *             packages = [packages]             # <<<<<<<<<<<<<<
 *         for package in packages:
 *             if package in installed:
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_packages);
    __Pyx_GIVEREF(__pyx_v_packages);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_packages)) __PYX_ERR(0, 1438, __pyx_L1_error);
    __Pyx_DECREF_SET(__pyx_v_packages, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1437
 *     def adb_check_installed(self, packages):
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):             # <<<<<<<<<<<<<<
 *             packages = [packages]
 *         for package in packages:
 */
  }

  /* "ok/Capture.pyx":1439
 *         if isinstance(packages, str):
 *             packages = [packages]
 *         for package in packages:             # <<<<<<<<<<<<<<
 *             if package in installed:
 *                 return package
 */
  if (likely(PyList_CheckExact(__pyx_v_packages)) || PyTuple_CheckExact(__pyx_v_packages)) {
    __pyx_t_1 = __pyx_v_packages; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_packages); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1439, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1439, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 1439, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1439, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 1439, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1439, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_package, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":1440
 *             packages = [packages]
 *         for package in packages:
 *             if package in installed:             # <<<<<<<<<<<<<<
 *                 return package
 * 
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_package, __pyx_v_installed, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1440, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1441
 *         for package in packages:
 *             if package in installed:
 *                 return package             # <<<<<<<<<<<<<<
 * 
 *     def adb_check_in_front(self, packages):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_package);
      __pyx_r = __pyx_v_package;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "ok/Capture.pyx":1440
 *             packages = [packages]
 *         for package in packages:
 *             if package in installed:             # <<<<<<<<<<<<<<
 *                 return package
 * 
 */
    }

    /* "ok/Capture.pyx":1439
 *         if isinstance(packages, str):
 *             packages = [packages]
 *         for package in packages:             # <<<<<<<<<<<<<<
 *             if package in installed:
 *                 return package
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1435
 *             return None
 * 
 *     def adb_check_installed(self, packages):             # <<<<<<<<<<<<<<
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_check_installed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_installed);
  __Pyx_XDECREF(__pyx_v_package);
  __Pyx_XDECREF(__pyx_v_packages);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1443
 *                 return package
 * 
 *     def adb_check_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_69adb_check_in_front(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_69adb_check_in_front = {"adb_check_in_front", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_69adb_check_in_front, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_69adb_check_in_front(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_packages = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_check_in_front (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_packages,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1443, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_packages)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1443, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adb_check_in_front", 1, 2, 2, 1); __PYX_ERR(0, 1443, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_check_in_front") < 0)) __PYX_ERR(0, 1443, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_packages = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_check_in_front", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1443, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_check_in_front", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_68adb_check_in_front(__pyx_self, __pyx_v_self, __pyx_v_packages);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_68adb_check_in_front(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_packages) {
  PyObject *__pyx_v_front = NULL;
  PyObject *__pyx_v_package = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_check_in_front", 0);
  __Pyx_INCREF(__pyx_v_packages);

  /* "ok/Capture.pyx":1444
 * 
 *     def adb_check_in_front(self, packages):
 *         front = self.device.app_current()             # <<<<<<<<<<<<<<
 *         logger.debug(f'adb_check_in_front {front}')
 *         if front:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_app_current); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_front = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1445
 *     def adb_check_in_front(self, packages):
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')             # <<<<<<<<<<<<<<
 *         if front:
 *             if isinstance(packages, str):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_debug); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_front, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_check_in_front, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1446
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')
 *         if front:             # <<<<<<<<<<<<<<
 *             if isinstance(packages, str):
 *                 packages = [packages]
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_front); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1446, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":1447
 *         logger.debug(f'adb_check_in_front {front}')
 *         if front:
 *             if isinstance(packages, str):             # <<<<<<<<<<<<<<
 *                 packages = [packages]
 *             for package in packages:
 */
    __pyx_t_6 = PyString_Check(__pyx_v_packages); 
    if (__pyx_t_6) {

      /* "ok/Capture.pyx":1448
 *         if front:
 *             if isinstance(packages, str):
 *                 packages = [packages]             # <<<<<<<<<<<<<<
 *             for package in packages:
 *                 if package == front.package:
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_packages);
      __Pyx_GIVEREF(__pyx_v_packages);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_packages)) __PYX_ERR(0, 1448, __pyx_L1_error);
      __Pyx_DECREF_SET(__pyx_v_packages, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ok/Capture.pyx":1447
 *         logger.debug(f'adb_check_in_front {front}')
 *         if front:
 *             if isinstance(packages, str):             # <<<<<<<<<<<<<<
 *                 packages = [packages]
 *             for package in packages:
 */
    }

    /* "ok/Capture.pyx":1449
 *             if isinstance(packages, str):
 *                 packages = [packages]
 *             for package in packages:             # <<<<<<<<<<<<<<
 *                 if package == front.package:
 *                     return True
 */
    if (likely(PyList_CheckExact(__pyx_v_packages)) || PyTuple_CheckExact(__pyx_v_packages)) {
      __pyx_t_1 = __pyx_v_packages; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_packages); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1449, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1449, __pyx_L1_error)
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1449, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_package, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ok/Capture.pyx":1450
 *                 packages = [packages]
 *             for package in packages:
 *                 if package == front.package:             # <<<<<<<<<<<<<<
 *                     return True
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_front, __pyx_n_s_package); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_package, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "ok/Capture.pyx":1451
 *             for package in packages:
 *                 if package == front.package:
 *                     return True             # <<<<<<<<<<<<<<
 * 
 *     def adb_start_package(self, package):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "ok/Capture.pyx":1450
 *                 packages = [packages]
 *             for package in packages:
 *                 if package == front.package:             # <<<<<<<<<<<<<<
 *                     return True
 * 
 */
      }

      /* "ok/Capture.pyx":1449
 *             if isinstance(packages, str):
 *                 packages = [packages]
 *             for package in packages:             # <<<<<<<<<<<<<<
 *                 if package == front.package:
 *                     return True
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1446
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')
 *         if front:             # <<<<<<<<<<<<<<
 *             if isinstance(packages, str):
 *                 packages = [packages]
 */
  }

  /* "ok/Capture.pyx":1443
 *                 return package
 * 
 *     def adb_check_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_check_in_front", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_front);
  __Pyx_XDECREF(__pyx_v_package);
  __Pyx_XDECREF(__pyx_v_packages);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1453
 *                     return True
 * 
 *     def adb_start_package(self, package):             # <<<<<<<<<<<<<<
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_71adb_start_package(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_71adb_start_package = {"adb_start_package", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_71adb_start_package, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_71adb_start_package(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_package = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_start_package (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_package,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1453, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_package)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1453, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adb_start_package", 1, 2, 2, 1); __PYX_ERR(0, 1453, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_start_package") < 0)) __PYX_ERR(0, 1453, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_package = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_start_package", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1453, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_start_package", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_70adb_start_package(__pyx_self, __pyx_v_self, __pyx_v_package);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_70adb_start_package(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_package) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_start_package", 1);

  /* "ok/Capture.pyx":1454
 * 
 *     def adb_start_package(self, package):
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')             # <<<<<<<<<<<<<<
 * 
 *     def adb_ensure_in_front(self, packages):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shell); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_monkey_p);
  __pyx_t_4 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_monkey_p);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_monkey_p);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_package, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_c_android_intent_category_LAUNC);
  __pyx_t_4 += 38;
  __Pyx_GIVEREF(__pyx_kp_u_c_android_intent_category_LAUNC);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_c_android_intent_category_LAUNC);
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1453
 *                     return True
 * 
 *     def adb_start_package(self, package):             # <<<<<<<<<<<<<<
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_start_package", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1456
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 *     def adb_ensure_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_73adb_ensure_in_front(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_13DeviceManager_73adb_ensure_in_front = {"adb_ensure_in_front", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_13DeviceManager_73adb_ensure_in_front, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_13DeviceManager_73adb_ensure_in_front(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_packages = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adb_ensure_in_front (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_packages,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1456, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_packages)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1456, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adb_ensure_in_front", 1, 2, 2, 1); __PYX_ERR(0, 1456, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adb_ensure_in_front") < 0)) __PYX_ERR(0, 1456, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_packages = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adb_ensure_in_front", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1456, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_ensure_in_front", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_13DeviceManager_72adb_ensure_in_front(__pyx_self, __pyx_v_self, __pyx_v_packages);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_13DeviceManager_72adb_ensure_in_front(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_packages) {
  PyObject *__pyx_v_front = NULL;
  PyObject *__pyx_v_installed = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adb_ensure_in_front", 1);

  /* "ok/Capture.pyx":1457
 * 
 *     def adb_ensure_in_front(self, packages):
 *         front = self.adb_check_in_front(packages)             # <<<<<<<<<<<<<<
 *         logger.debug(f'adb_ensure_in_front {front}')
 *         if front:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_check_in_front_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_packages};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_front = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1458
 *     def adb_ensure_in_front(self, packages):
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')             # <<<<<<<<<<<<<<
 *         if front:
 *             return front
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_front, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_adb_ensure_in_front, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1459
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')
 *         if front:             # <<<<<<<<<<<<<<
 *             return front
 *         elif installed := self.adb_check_installed(packages):
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_front); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1459, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":1460
 *         logger.debug(f'adb_ensure_in_front {front}')
 *         if front:
 *             return front             # <<<<<<<<<<<<<<
 *         elif installed := self.adb_check_installed(packages):
 *             self.adb_start_package(installed)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_front);
    __pyx_r = __pyx_v_front;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1459
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')
 *         if front:             # <<<<<<<<<<<<<<
 *             return front
 *         elif installed := self.adb_check_installed(packages):
 */
  }

  /* "ok/Capture.pyx":1461
 *         if front:
 *             return front
 *         elif installed := self.adb_check_installed(packages):             # <<<<<<<<<<<<<<
 *             self.adb_start_package(installed)
 *             return True
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_check_installed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_packages};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_installed = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":1462
 *             return front
 *         elif installed := self.adb_check_installed(packages):
 *             self.adb_start_package(installed)             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_adb_start_package); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_installed};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1463
 *         elif installed := self.adb_check_installed(packages):
 *             self.adb_start_package(installed)
 *             return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1461
 *         if front:
 *             return front
 *         elif installed := self.adb_check_installed(packages):             # <<<<<<<<<<<<<<
 *             self.adb_start_package(installed)
 *             return True
 */
  }

  /* "ok/Capture.pyx":1456
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 *     def adb_ensure_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.DeviceManager.adb_ensure_in_front", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_front);
  __Pyx_XDECREF(__pyx_v_installed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1466
 * 
 * 
 * def parse_ratio(ratio_str):             # <<<<<<<<<<<<<<
 *     if ratio_str:
 *         # Split the string into two parts: '16' and '9'
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_35parse_ratio(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_35parse_ratio = {"parse_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_35parse_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_35parse_ratio(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ratio_str = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_ratio (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ratio_str,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ratio_str)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1466, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "parse_ratio") < 0)) __PYX_ERR(0, 1466, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_ratio_str = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse_ratio", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1466, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.parse_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_34parse_ratio(__pyx_self, __pyx_v_ratio_str);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_34parse_ratio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ratio_str) {
  PyObject *__pyx_v_numerator = NULL;
  PyObject *__pyx_v_denominator = NULL;
  PyObject *__pyx_v_ratio_float = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_ratio", 1);

  /* "ok/Capture.pyx":1467
 * 
 * def parse_ratio(ratio_str):
 *     if ratio_str:             # <<<<<<<<<<<<<<
 *         # Split the string into two parts: '16' and '9'
 *         numerator, denominator = ratio_str.split(':')
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ratio_str); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1467, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1469
 *     if ratio_str:
 *         # Split the string into two parts: '16' and '9'
 *         numerator, denominator = ratio_str.split(':')             # <<<<<<<<<<<<<<
 *         # Convert the strings to integers and perform the division
 *         ratio_float = int(numerator) / int(denominator)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ratio_str, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_s__28};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1469, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1469, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_numerator = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_denominator = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1471
 *         numerator, denominator = ratio_str.split(':')
 *         # Convert the strings to integers and perform the division
 *         ratio_float = int(numerator) / int(denominator)             # <<<<<<<<<<<<<<
 *         return ratio_float
 * 
 */
    __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_v_numerator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_denominator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ratio_float = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1472
 *         # Convert the strings to integers and perform the division
 *         ratio_float = int(numerator) / int(denominator)
 *         return ratio_float             # <<<<<<<<<<<<<<
 * 
 * cdef class NemuIpcCaptureMethod(BaseCaptureMethod):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ratio_float);
    __pyx_r = __pyx_v_ratio_float;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1467
 * 
 * def parse_ratio(ratio_str):
 *     if ratio_str:             # <<<<<<<<<<<<<<
 *         # Split the string into two parts: '16' and '9'
 *         numerator, denominator = ratio_str.split(':')
 */
  }

  /* "ok/Capture.pyx":1466
 * 
 * 
 * def parse_ratio(ratio_str):             # <<<<<<<<<<<<<<
 *     if ratio_str:
 *         # Split the string into two parts: '16' and '9'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.parse_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_numerator);
  __Pyx_XDECREF(__pyx_v_denominator);
  __Pyx_XDECREF(__pyx_v_ratio_float);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1480
 *     cdef object device_manager, nemu_impl, emulator
 * 
 *     def __init__(self, device_manager, exit_event, width=0, height=0):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.device_manager = device_manager
 */

/* Python wrapper */
static int __pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_device_manager = 0;
  PyObject *__pyx_v_exit_event = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_device_manager,&__pyx_n_s_exit_event,&__pyx_n_s_width,&__pyx_n_s_height,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_device_manager)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 1480, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_width);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_height);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1480, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_device_manager = values[0];
    __pyx_v_exit_event = values[1];
    __pyx_v_width = values[2];
    __pyx_v_height = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1480, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod___init__(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self), __pyx_v_device_manager, __pyx_v_exit_event, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod___init__(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, PyObject *__pyx_v_device_manager, PyObject *__pyx_v_exit_event, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "ok/Capture.pyx":1481
 * 
 *     def __init__(self, device_manager, exit_event, width=0, height=0):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self.device_manager = device_manager
 *         self.exit_event = exit_event
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod))) __PYX_ERR(0, 1481, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1481, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1482
 *     def __init__(self, device_manager, exit_event, width=0, height=0):
 *         super().__init__()
 *         self.device_manager = device_manager             # <<<<<<<<<<<<<<
 *         self.exit_event = exit_event
 *         self._connected = (width != 0 and height != 0)
 */
  __Pyx_INCREF(__pyx_v_device_manager);
  __Pyx_GIVEREF(__pyx_v_device_manager);
  __Pyx_GOTREF(__pyx_v_self->device_manager);
  __Pyx_DECREF(__pyx_v_self->device_manager);
  __pyx_v_self->device_manager = __pyx_v_device_manager;

  /* "ok/Capture.pyx":1483
 *         super().__init__()
 *         self.device_manager = device_manager
 *         self.exit_event = exit_event             # <<<<<<<<<<<<<<
 *         self._connected = (width != 0 and height != 0)
 *         self.nemu_impl = None
 */
  __Pyx_INCREF(__pyx_v_exit_event);
  __Pyx_GIVEREF(__pyx_v_exit_event);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.exit_event);
  __pyx_v_self->__pyx_base.exit_event = __pyx_v_exit_event;

  /* "ok/Capture.pyx":1484
 *         self.device_manager = device_manager
 *         self.exit_event = exit_event
 *         self._connected = (width != 0 and height != 0)             # <<<<<<<<<<<<<<
 *         self.nemu_impl = None
 *         self.emulator = None
 */
  __pyx_t_6 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_width, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_6 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_height, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
  __pyx_t_5 = __pyx_t_6;
  __pyx_L3_bool_binop_done:;
  __pyx_v_self->_connected = __pyx_t_5;

  /* "ok/Capture.pyx":1485
 *         self.exit_event = exit_event
 *         self._connected = (width != 0 and height != 0)
 *         self.nemu_impl = None             # <<<<<<<<<<<<<<
 *         self.emulator = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->nemu_impl);
  __Pyx_DECREF(__pyx_v_self->nemu_impl);
  __pyx_v_self->nemu_impl = Py_None;

  /* "ok/Capture.pyx":1486
 *         self._connected = (width != 0 and height != 0)
 *         self.nemu_impl = None
 *         self.emulator = None             # <<<<<<<<<<<<<<
 * 
 *     def update_emulator(self, emulator):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->emulator);
  __Pyx_DECREF(__pyx_v_self->emulator);
  __pyx_v_self->emulator = Py_None;

  /* "ok/Capture.pyx":1480
 *     cdef object device_manager, nemu_impl, emulator
 * 
 *     def __init__(self, device_manager, exit_event, width=0, height=0):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.device_manager = device_manager
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1488
 *         self.emulator = None
 * 
 *     def update_emulator(self, emulator):             # <<<<<<<<<<<<<<
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_3update_emulator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_3update_emulator = {"update_emulator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_3update_emulator, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_3update_emulator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_emulator = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_emulator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_emulator,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_emulator)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1488, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_emulator") < 0)) __PYX_ERR(0, 1488, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_emulator = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_emulator", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1488, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.update_emulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_2update_emulator(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self), __pyx_v_emulator);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_2update_emulator(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, PyObject *__pyx_v_emulator) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_emulator", 1);

  /* "ok/Capture.pyx":1489
 * 
 *     def update_emulator(self, emulator):
 *         self.emulator = emulator             # <<<<<<<<<<<<<<
 *         logger.info(f'update_path_and_id {emulator}')
 *         if self.nemu_impl:
 */
  __Pyx_INCREF(__pyx_v_emulator);
  __Pyx_GIVEREF(__pyx_v_emulator);
  __Pyx_GOTREF(__pyx_v_self->emulator);
  __Pyx_DECREF(__pyx_v_self->emulator);
  __pyx_v_self->emulator = __pyx_v_emulator;

  /* "ok/Capture.pyx":1490
 *     def update_emulator(self, emulator):
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')             # <<<<<<<<<<<<<<
 *         if self.nemu_impl:
 *             self.nemu_impl.disconnect()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_emulator, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_update_path_and_id, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1491
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')
 *         if self.nemu_impl:             # <<<<<<<<<<<<<<
 *             self.nemu_impl.disconnect()
 *             self.nemu_impl = None
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_self->nemu_impl); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1491, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":1492
 *         logger.info(f'update_path_and_id {emulator}')
 *         if self.nemu_impl:
 *             self.nemu_impl.disconnect()             # <<<<<<<<<<<<<<
 *             self.nemu_impl = None
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->nemu_impl, __pyx_n_s_disconnect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1493
 *         if self.nemu_impl:
 *             self.nemu_impl.disconnect()
 *             self.nemu_impl = None             # <<<<<<<<<<<<<<
 * 
 *     def init_nemu(self):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->nemu_impl);
    __Pyx_DECREF(__pyx_v_self->nemu_impl);
    __pyx_v_self->nemu_impl = Py_None;

    /* "ok/Capture.pyx":1491
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')
 *         if self.nemu_impl:             # <<<<<<<<<<<<<<
 *             self.nemu_impl.disconnect()
 *             self.nemu_impl = None
 */
  }

  /* "ok/Capture.pyx":1488
 *         self.emulator = None
 * 
 *     def update_emulator(self, emulator):             # <<<<<<<<<<<<<<
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.update_emulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1495
 *             self.nemu_impl = None
 * 
 *     def init_nemu(self):             # <<<<<<<<<<<<<<
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_5init_nemu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_5init_nemu = {"init_nemu", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_5init_nemu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_5init_nemu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_nemu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("init_nemu", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "init_nemu", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_4init_nemu(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_4init_nemu(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_NemuIpcImpl = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_nemu", 1);

  /* "ok/Capture.pyx":1496
 * 
 *     def init_nemu(self):
 *         self.check_mumu_app_keep_alive_400()             # <<<<<<<<<<<<<<
 *         if not self.nemu_impl:
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_mumu_app_keep_alive_400); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1497
 *     def init_nemu(self):
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:             # <<<<<<<<<<<<<<
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl
 *             self.nemu_impl = NemuIpcImpl(
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->nemu_impl); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1497, __pyx_L1_error)
  __pyx_t_6 = (!__pyx_t_5);
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":1498
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl             # <<<<<<<<<<<<<<
 *             self.nemu_impl = NemuIpcImpl(
 *                 nemu_folder=self.base_folder(),
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_NemuIpcImpl);
    __Pyx_GIVEREF(__pyx_n_s_NemuIpcImpl);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NemuIpcImpl)) __PYX_ERR(0, 1498, __pyx_L1_error);
    __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_capture_adb_nemu_ipc, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NemuIpcImpl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_NemuIpcImpl = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ok/Capture.pyx":1500
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl
 *             self.nemu_impl = NemuIpcImpl(
 *                 nemu_folder=self.base_folder(),             # <<<<<<<<<<<<<<
 *                 instance_id=self.emulator.player_id,
 *                 display_id=0
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_folder); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nemu_folder, __pyx_t_3) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1501
 *             self.nemu_impl = NemuIpcImpl(
 *                 nemu_folder=self.base_folder(),
 *                 instance_id=self.emulator.player_id,             # <<<<<<<<<<<<<<
 *                 display_id=0
 *             ).__enter__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->emulator, __pyx_n_s_player_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_instance_id, __pyx_t_3) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_display_id, __pyx_int_0) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)

    /* "ok/Capture.pyx":1499
 *         if not self.nemu_impl:
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl
 *             self.nemu_impl = NemuIpcImpl(             # <<<<<<<<<<<<<<
 *                 nemu_folder=self.base_folder(),
 *                 instance_id=self.emulator.player_id,
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_NemuIpcImpl, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1503
 *                 instance_id=self.emulator.player_id,
 *                 display_id=0
 *             ).__enter__()             # <<<<<<<<<<<<<<
 * 
 *     def base_folder(self):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "ok/Capture.pyx":1499
 *         if not self.nemu_impl:
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl
 *             self.nemu_impl = NemuIpcImpl(             # <<<<<<<<<<<<<<
 *                 nemu_folder=self.base_folder(),
 *                 instance_id=self.emulator.player_id,
 */
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->nemu_impl);
    __Pyx_DECREF(__pyx_v_self->nemu_impl);
    __pyx_v_self->nemu_impl = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":1497
 *     def init_nemu(self):
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:             # <<<<<<<<<<<<<<
 *             from ok.capture.adb.nemu_ipc import NemuIpcImpl
 *             self.nemu_impl = NemuIpcImpl(
 */
  }

  /* "ok/Capture.pyx":1495
 *             self.nemu_impl = None
 * 
 *     def init_nemu(self):             # <<<<<<<<<<<<<<
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.init_nemu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_NemuIpcImpl);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1505
 *             ).__enter__()
 * 
 *     def base_folder(self):             # <<<<<<<<<<<<<<
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_7base_folder(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_7base_folder = {"base_folder", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_7base_folder, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_7base_folder(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("base_folder (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("base_folder", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "base_folder", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_6base_folder(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_6base_folder(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("base_folder", 1);

  /* "ok/Capture.pyx":1506
 * 
 *     def base_folder(self):
 *         return os.path.dirname(os.path.dirname(self.emulator.path))             # <<<<<<<<<<<<<<
 * 
 *     def check_mumu_app_keep_alive_400(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dirname); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dirname); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->emulator, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1505
 *             ).__enter__()
 * 
 *     def base_folder(self):             # <<<<<<<<<<<<<<
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.base_folder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1508
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 *     def check_mumu_app_keep_alive_400(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check app_keep_alive from emulator config if version >= 4.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_9check_mumu_app_keep_alive_400(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2ok_7Capture_20NemuIpcCaptureMethod_8check_mumu_app_keep_alive_400, "\n        Check app_keep_alive from emulator config if version >= 4.0\n\n        Args:\n            file: E:/ProgramFiles/MuMuPlayer-12.0/vms/MuMuPlayer-12.0-1/config/customer_config.json\n\n        Returns:\n            bool: If success to read file\n        ");
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_9check_mumu_app_keep_alive_400 = {"check_mumu_app_keep_alive_400", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_9check_mumu_app_keep_alive_400, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2ok_7Capture_20NemuIpcCaptureMethod_8check_mumu_app_keep_alive_400};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_9check_mumu_app_keep_alive_400(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_mumu_app_keep_alive_400 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("check_mumu_app_keep_alive_400", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "check_mumu_app_keep_alive_400", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_8check_mumu_app_keep_alive_400(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_8check_mumu_app_keep_alive_400(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_mumu_app_keep_alive_400", 1);

  /* "ok/Capture.pyx":1518
 *             bool: If success to read file
 *         """
 *         file = os.path.abspath(os.path.join(             # <<<<<<<<<<<<<<
 *             self.base_folder(),
 *             f'vms/MuMuPlayer-12.0-{self.emulator.player_id}/configs/customer_config.json'))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abspath); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1519
 *         """
 *         file = os.path.abspath(os.path.join(
 *             self.base_folder(),             # <<<<<<<<<<<<<<
 *             f'vms/MuMuPlayer-12.0-{self.emulator.player_id}/configs/customer_config.json'))
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_folder); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "ok/Capture.pyx":1520
 *         file = os.path.abspath(os.path.join(
 *             self.base_folder(),
 *             f'vms/MuMuPlayer-12.0-{self.emulator.player_id}/configs/customer_config.json'))             # <<<<<<<<<<<<<<
 * 
 *         # with E:\ProgramFiles\MuMuPlayer-12.0\shell\MuMuPlayer.exe
 */
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = 0;
  __pyx_t_10 = 127;
  __Pyx_INCREF(__pyx_kp_u_vms_MuMuPlayer_12_0);
  __pyx_t_9 += 20;
  __Pyx_GIVEREF(__pyx_kp_u_vms_MuMuPlayer_12_0);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_vms_MuMuPlayer_12_0);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->emulator, __pyx_n_s_player_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
  __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_11);
  __pyx_t_11 = 0;
  __Pyx_INCREF(__pyx_kp_u_configs_customer_config_json);
  __pyx_t_9 += 29;
  __Pyx_GIVEREF(__pyx_kp_u_configs_customer_config_json);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_configs_customer_config_json);
  __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_11};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_file = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1524
 *         # with E:\ProgramFiles\MuMuPlayer-12.0\shell\MuMuPlayer.exe
 *         # config is E:\ProgramFiles\MuMuPlayer-12.0\vms\MuMuPlayer-12.0-1\config\customer_config.json
 *         try:             # <<<<<<<<<<<<<<
 *             with open(file, mode='r', encoding='utf-8') as f:
 *                 s = f.read()
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_14);
    /*try:*/ {

      /* "ok/Capture.pyx":1525
 *         # config is E:\ProgramFiles\MuMuPlayer-12.0\vms\MuMuPlayer-12.0-1\config\customer_config.json
 *         try:
 *             with open(file, mode='r', encoding='utf-8') as f:             # <<<<<<<<<<<<<<
 *                 s = f.read()
 *                 data = json.loads(s)
 */
      /*with:*/ {
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1525, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_file);
        __Pyx_GIVEREF(__pyx_v_file);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file)) __PYX_ERR(0, 1525, __pyx_L3_error);
        __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_mode, __pyx_n_s_r) < 0) __PYX_ERR(0, 1525, __pyx_L3_error)
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_encoding, __pyx_kp_s_utf_8) < 0) __PYX_ERR(0, 1525, __pyx_L3_error)
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1525, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1525, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1525, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_1 = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            /*try:*/ {
              __pyx_v_f = __pyx_t_1;
              __pyx_t_1 = 0;

              /* "ok/Capture.pyx":1526
 *         try:
 *             with open(file, mode='r', encoding='utf-8') as f:
 *                 s = f.read()             # <<<<<<<<<<<<<<
 *                 data = json.loads(s)
 *         except FileNotFoundError:
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1526, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_2 = NULL;
              __pyx_t_8 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_2)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_2);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                  __pyx_t_8 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
                __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1526, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __pyx_v_s = __pyx_t_1;
              __pyx_t_1 = 0;

              /* "ok/Capture.pyx":1527
 *             with open(file, mode='r', encoding='utf-8') as f:
 *                 s = f.read()
 *                 data = json.loads(s)             # <<<<<<<<<<<<<<
 *         except FileNotFoundError:
 *             logger.warning(f'Failed to check check_mumu_app_keep_alive, file {file} not exists')
 */
              __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_json); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1527, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_loads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1527, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_3 = NULL;
              __pyx_t_8 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_2))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_2, function);
                  __pyx_t_8 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_s};
                __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1527, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              }
              __pyx_v_data = __pyx_t_1;
              __pyx_t_1 = 0;

              /* "ok/Capture.pyx":1525
 *         # config is E:\ProgramFiles\MuMuPlayer-12.0\vms\MuMuPlayer-12.0-1\config\customer_config.json
 *         try:
 *             with open(file, mode='r', encoding='utf-8') as f:             # <<<<<<<<<<<<<<
 *                 s = f.read()
 *                 data = json.loads(s)
 */
            }
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            goto __pyx_L18_try_end;
            __pyx_L13_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.check_mumu_app_keep_alive_400", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 1525, __pyx_L15_except_error)
              __Pyx_XGOTREF(__pyx_t_1);
              __Pyx_XGOTREF(__pyx_t_2);
              __Pyx_XGOTREF(__pyx_t_3);
              __pyx_t_4 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1525, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_4, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1525, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_19);
              __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_19);
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              if (__pyx_t_20 < 0) __PYX_ERR(0, 1525, __pyx_L15_except_error)
              __pyx_t_21 = (!__pyx_t_20);
              if (unlikely(__pyx_t_21)) {
                __Pyx_GIVEREF(__pyx_t_1);
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_XGIVEREF(__pyx_t_3);
                __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
                __PYX_ERR(0, 1525, __pyx_L15_except_error)
              }
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              goto __pyx_L14_exception_handled;
            }
            __pyx_L15_except_error:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            goto __pyx_L3_error;
            __pyx_L14_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_L18_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_15) {
              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__23, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1525, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            goto __pyx_L12;
          }
          __pyx_L12:;
        }
        goto __pyx_L22;
        __pyx_L9_error:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L3_error;
        __pyx_L22:;
      }

      /* "ok/Capture.pyx":1524
 *         # with E:\ProgramFiles\MuMuPlayer-12.0\shell\MuMuPlayer.exe
 *         # config is E:\ProgramFiles\MuMuPlayer-12.0\vms\MuMuPlayer-12.0-1\config\customer_config.json
 *         try:             # <<<<<<<<<<<<<<
 *             with open(file, mode='r', encoding='utf-8') as f:
 *                 s = f.read()
 */
    }
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "ok/Capture.pyx":1528
 *                 s = f.read()
 *                 data = json.loads(s)
 *         except FileNotFoundError:             # <<<<<<<<<<<<<<
 *             logger.warning(f'Failed to check check_mumu_app_keep_alive, file {file} not exists')
 *             return False
 */
    __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FileNotFoundError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1528, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_22 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_3, __pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_ErrRestore(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0;
    if (__pyx_t_22) {
      __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.check_mumu_app_keep_alive_400", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 1528, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);

      /* "ok/Capture.pyx":1529
 *                 data = json.loads(s)
 *         except FileNotFoundError:
 *             logger.warning(f'Failed to check check_mumu_app_keep_alive, file {file} not exists')             # <<<<<<<<<<<<<<
 *             return False
 *         value = deep_get(data, keys='customer.app_keptlive', default=None)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1529, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1529, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1529, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_Failed_to_check_check_mumu_app_k);
      __pyx_t_9 += 48;
      __Pyx_GIVEREF(__pyx_kp_u_Failed_to_check_check_mumu_app_k);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_u_Failed_to_check_check_mumu_app_k);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_file, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1529, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_not_exists);
      __pyx_t_9 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_not_exists);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_kp_u_not_exists);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_11, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1529, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1529, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1530
 *         except FileNotFoundError:
 *             logger.warning(f'Failed to check check_mumu_app_keep_alive, file {file} not exists')
 *             return False             # <<<<<<<<<<<<<<
 *         value = deep_get(data, keys='customer.app_keptlive', default=None)
 *         logger.info(f'customer.app_keptlive {value}')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":1524
 *         # with E:\ProgramFiles\MuMuPlayer-12.0\shell\MuMuPlayer.exe
 *         # config is E:\ProgramFiles\MuMuPlayer-12.0\vms\MuMuPlayer-12.0-1\config\customer_config.json
 *         try:             # <<<<<<<<<<<<<<
 *             with open(file, mode='r', encoding='utf-8') as f:
 *                 s = f.read()
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "ok/Capture.pyx":1531
 *             logger.warning(f'Failed to check check_mumu_app_keep_alive, file {file} not exists')
 *             return False
 *         value = deep_get(data, keys='customer.app_keptlive', default=None)             # <<<<<<<<<<<<<<
 *         logger.info(f'customer.app_keptlive {value}')
 *         if str(value).lower() == 'true':
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_deep_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 1531, __pyx_L1_error) }
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_data)) __PYX_ERR(0, 1531, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_keys, __pyx_kp_s_customer_app_keptlive) < 0) __PYX_ERR(0, 1531, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_default, Py_None) < 0) __PYX_ERR(0, 1531, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_value = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1532
 *             return False
 *         value = deep_get(data, keys='customer.app_keptlive', default=None)
 *         logger.info(f'customer.app_keptlive {value}')             # <<<<<<<<<<<<<<
 *         if str(value).lower() == 'true':
 *             # https://mumu.163.com/help/20230802/35047_1102450.html
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_value, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_customer_app_keptlive_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1533
 *         value = deep_get(data, keys='customer.app_keptlive', default=None)
 *         logger.info(f'customer.app_keptlive {value}')
 *         if str(value).lower() == 'true':             # <<<<<<<<<<<<<<
 *             # https://mumu.163.com/help/20230802/35047_1102450.html
 *             logger.error('Please turn off enable background keep alive in MuMuPlayer settings')
 */
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_21 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_true, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_21)) {

    /* "ok/Capture.pyx":1535
 *         if str(value).lower() == 'true':
 *             # https://mumu.163.com/help/20230802/35047_1102450.html
 *             logger.error('Please turn off enable background keep alive in MuMuPlayer settings')             # <<<<<<<<<<<<<<
 *             raise Exception('Please turn off enable background keep alive in MuMuPlayer settings')
 *         return True
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_s_Please_turn_off_enable_backgroun};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ok/Capture.pyx":1536
 *             # https://mumu.163.com/help/20230802/35047_1102450.html
 *             logger.error('Please turn off enable background keep alive in MuMuPlayer settings')
 *             raise Exception('Please turn off enable background keep alive in MuMuPlayer settings')             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1536, __pyx_L1_error)

    /* "ok/Capture.pyx":1533
 *         value = deep_get(data, keys='customer.app_keptlive', default=None)
 *         logger.info(f'customer.app_keptlive {value}')
 *         if str(value).lower() == 'true':             # <<<<<<<<<<<<<<
 *             # https://mumu.163.com/help/20230802/35047_1102450.html
 *             logger.error('Please turn off enable background keep alive in MuMuPlayer settings')
 */
  }

  /* "ok/Capture.pyx":1537
 *             logger.error('Please turn off enable background keep alive in MuMuPlayer settings')
 *             raise Exception('Please turn off enable background keep alive in MuMuPlayer settings')
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1508
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 *     def check_mumu_app_keep_alive_400(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check app_keep_alive from emulator config if version >= 4.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.check_mumu_app_keep_alive_400", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1539
 *         return True
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         super().close()
 *         if self.nemu_impl:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_11close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_11close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_11close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_11close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_10close(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_10close(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);

  /* "ok/Capture.pyx":1540
 * 
 *     def close(self):
 *         super().close()             # <<<<<<<<<<<<<<
 *         if self.nemu_impl:
 *             self.nemu_impl.disconnect()
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod))) __PYX_ERR(0, 1540, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1540, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1541
 *     def close(self):
 *         super().close()
 *         if self.nemu_impl:             # <<<<<<<<<<<<<<
 *             self.nemu_impl.disconnect()
 *             self.nemu_impl = None
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->nemu_impl); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1541, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1542
 *         super().close()
 *         if self.nemu_impl:
 *             self.nemu_impl.disconnect()             # <<<<<<<<<<<<<<
 *             self.nemu_impl = None
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->nemu_impl, __pyx_n_s_disconnect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1543
 *         if self.nemu_impl:
 *             self.nemu_impl.disconnect()
 *             self.nemu_impl = None             # <<<<<<<<<<<<<<
 * 
 *     cpdef object do_get_frame(self):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->nemu_impl);
    __Pyx_DECREF(__pyx_v_self->nemu_impl);
    __pyx_v_self->nemu_impl = Py_None;

    /* "ok/Capture.pyx":1541
 *     def close(self):
 *         super().close()
 *         if self.nemu_impl:             # <<<<<<<<<<<<<<
 *             self.nemu_impl.disconnect()
 *             self.nemu_impl = None
 */
  }

  /* "ok/Capture.pyx":1539
 *         return True
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         super().close()
 *         if self.nemu_impl:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1545
 *             self.nemu_impl = None
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         self.init_nemu()
 *         return self.screencap()
 */

static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_do_get_frame(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_do_get_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ok/Capture.pyx":1546
 * 
 *     cpdef object do_get_frame(self):
 *         self.init_nemu()             # <<<<<<<<<<<<<<
 *         return self.screencap()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_nemu); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ok/Capture.pyx":1547
 *     cpdef object do_get_frame(self):
 *         self.init_nemu()
 *         return self.screencap()             # <<<<<<<<<<<<<<
 * 
 *     cdef object screencap(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self->__pyx_base.__pyx_vtab)->screencap(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1545
 *             self.nemu_impl = None
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         self.init_nemu()
 *         return self.screencap()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame = {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_get_frame (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("do_get_frame", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "do_get_frame", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_12do_get_frame(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_12do_get_frame(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_get_frame", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_do_get_frame(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.do_get_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1549
 *         return self.screencap()
 * 
 *     cdef object screencap(self):             # <<<<<<<<<<<<<<
 *         if self.exit_event.is_set():
 *             return None
 */

static PyObject *__pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_screencap(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("screencap", 1);

  /* "ok/Capture.pyx":1550
 * 
 *     cdef object screencap(self):
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return None
 *         if self.nemu_impl:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.exit_event, __pyx_n_s_is_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1551
 *     cdef object screencap(self):
 *         if self.exit_event.is_set():
 *             return None             # <<<<<<<<<<<<<<
 *         if self.nemu_impl:
 *             return self.nemu_impl.screenshot(timeout=0.5)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "ok/Capture.pyx":1550
 * 
 *     cdef object screencap(self):
 *         if self.exit_event.is_set():             # <<<<<<<<<<<<<<
 *             return None
 *         if self.nemu_impl:
 */
  }

  /* "ok/Capture.pyx":1552
 *         if self.exit_event.is_set():
 *             return None
 *         if self.nemu_impl:             # <<<<<<<<<<<<<<
 *             return self.nemu_impl.screenshot(timeout=0.5)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->nemu_impl); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1552, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1553
 *             return None
 *         if self.nemu_impl:
 *             return self.nemu_impl.screenshot(timeout=0.5)             # <<<<<<<<<<<<<<
 * 
 *     def connected(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->nemu_impl, __pyx_n_s_screenshot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_timeout, __pyx_float_0_5) < 0) __PYX_ERR(0, 1553, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1552
 *         if self.exit_event.is_set():
 *             return None
 *         if self.nemu_impl:             # <<<<<<<<<<<<<<
 *             return self.nemu_impl.screenshot(timeout=0.5)
 * 
 */
  }

  /* "ok/Capture.pyx":1549
 *         return self.screencap()
 * 
 *     cdef object screencap(self):             # <<<<<<<<<<<<<<
 *         if self.exit_event.is_set():
 *             return None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.screencap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1555
 *             return self.nemu_impl.screenshot(timeout=0.5)
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_15connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_15connected = {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_15connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_15connected(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("connected", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "connected", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_14connected(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_14connected(CYTHON_UNUSED struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connected", 1);

  /* "ok/Capture.pyx":1556
 * 
 *     def connected(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 * def deep_get(d, keys, default=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1555
 *             return self.nemu_impl.screenshot(timeout=0.5)
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_17__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_16__reduce_cython__(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_16__reduce_cython__(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._connected, self._size, self.device_manager, self.emulator, self.exit_event, self.nemu_impl)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_connected); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base._size);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base._size);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->__pyx_base._size)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->device_manager);
  __Pyx_GIVEREF(__pyx_v_self->device_manager);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->device_manager)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->emulator);
  __Pyx_GIVEREF(__pyx_v_self->emulator);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_self->emulator)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.exit_event);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.exit_event);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_self->__pyx_base.exit_event)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->nemu_impl);
  __Pyx_GIVEREF(__pyx_v_self->nemu_impl);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_self->nemu_impl)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._connected, self._size, self.device_manager, self.emulator, self.exit_event, self.nemu_impl)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._connected, self._size, self.device_manager, self.emulator, self.exit_event, self.nemu_impl)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.emulator is not None or self.exit_event is not None or self.nemu_impl is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._connected, self._size, self.device_manager, self.emulator, self.exit_event, self.nemu_impl)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.emulator is not None or self.exit_event is not None or self.nemu_impl is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base._size != ((PyObject*)Py_None));
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->device_manager != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->emulator != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.exit_event != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->nemu_impl != Py_None);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.emulator is not None or self.exit_event is not None or self.nemu_impl is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self._size is not None or self.device_manager is not None or self.emulator is not None or self.exit_event is not None or self.nemu_impl is not None
 *     if use_setstate:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_NemuIpcCaptureMet); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_15891862);
    __Pyx_GIVEREF(__pyx_int_15891862);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_15891862)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._size is not None or self.device_manager is not None or self.emulator is not None or self.exit_event is not None or self.nemu_impl is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, None), state
 *     else:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NemuIpcCaptureMethod__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_NemuIpcCaptureMet); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_15891862);
    __Pyx_GIVEREF(__pyx_int_15891862);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_15891862)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NemuIpcCaptureMethod__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_19__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_18__setstate_cython__(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_20NemuIpcCaptureMethod_18__setstate_cython__(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NemuIpcCaptureMethod__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_NemuIpcCaptureMethod__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NemuIpcCaptureMethod__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ok.Capture.NemuIpcCaptureMethod.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1558
 *         return True
 * 
 * def deep_get(d, keys, default=None):             # <<<<<<<<<<<<<<
 *     """
 *     Get values in dictionary safely.
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_37deep_get(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2ok_7Capture_36deep_get, "\n    Get values in dictionary safely.\n    https://stackoverflow.com/questions/25833613/safe-method-to-get-value-of-nested-dictionary\n\n    Args:\n        d (dict):\n        keys (str, list): Such as `Scheduler.NextRun.value`\n        default: Default return if key not found.\n\n    Returns:\n\n    ");
static PyMethodDef __pyx_mdef_2ok_7Capture_37deep_get = {"deep_get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_37deep_get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2ok_7Capture_36deep_get};
static PyObject *__pyx_pw_2ok_7Capture_37deep_get(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_keys = 0;
  PyObject *__pyx_v_default = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deep_get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d,&__pyx_n_s_keys,&__pyx_n_s_default,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_d)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1558, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_keys)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1558, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("deep_get", 0, 2, 3, 1); __PYX_ERR(0, 1558, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_default);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1558, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "deep_get") < 0)) __PYX_ERR(0, 1558, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_d = values[0];
    __pyx_v_keys = values[1];
    __pyx_v_default = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deep_get", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1558, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.deep_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_36deep_get(__pyx_self, __pyx_v_d, __pyx_v_keys, __pyx_v_default);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_36deep_get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d, PyObject *__pyx_v_keys, PyObject *__pyx_v_default) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deep_get", 0);
  __Pyx_INCREF(__pyx_v_keys);

  /* "ok/Capture.pyx":1571
 * 
 *     """
 *     if isinstance(keys, str):             # <<<<<<<<<<<<<<
 *         keys = keys.split('.')
 *     assert type(keys) is list
 */
  __pyx_t_1 = PyString_Check(__pyx_v_keys); 
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1572
 *     """
 *     if isinstance(keys, str):
 *         keys = keys.split('.')             # <<<<<<<<<<<<<<
 *     assert type(keys) is list
 *     if d is None:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_keys, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_s__8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_keys, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ok/Capture.pyx":1571
 * 
 *     """
 *     if isinstance(keys, str):             # <<<<<<<<<<<<<<
 *         keys = keys.split('.')
 *     assert type(keys) is list
 */
  }

  /* "ok/Capture.pyx":1573
 *     if isinstance(keys, str):
 *         keys = keys.split('.')
 *     assert type(keys) is list             # <<<<<<<<<<<<<<
 *     if d is None:
 *         return default
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_keys)) == ((PyObject *)(&PyList_Type)));
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1573, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1573, __pyx_L1_error)
  #endif

  /* "ok/Capture.pyx":1574
 *         keys = keys.split('.')
 *     assert type(keys) is list
 *     if d is None:             # <<<<<<<<<<<<<<
 *         return default
 *     if not keys:
 */
  __pyx_t_1 = (__pyx_v_d == Py_None);
  if (__pyx_t_1) {

    /* "ok/Capture.pyx":1575
 *     assert type(keys) is list
 *     if d is None:
 *         return default             # <<<<<<<<<<<<<<
 *     if not keys:
 *         return d
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_default);
    __pyx_r = __pyx_v_default;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1574
 *         keys = keys.split('.')
 *     assert type(keys) is list
 *     if d is None:             # <<<<<<<<<<<<<<
 *         return default
 *     if not keys:
 */
  }

  /* "ok/Capture.pyx":1576
 *     if d is None:
 *         return default
 *     if not keys:             # <<<<<<<<<<<<<<
 *         return d
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_keys); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1576, __pyx_L1_error)
  __pyx_t_6 = (!__pyx_t_1);
  if (__pyx_t_6) {

    /* "ok/Capture.pyx":1577
 *         return default
 *     if not keys:
 *         return d             # <<<<<<<<<<<<<<
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_d);
    __pyx_r = __pyx_v_d;
    goto __pyx_L0;

    /* "ok/Capture.pyx":1576
 *     if d is None:
 *         return default
 *     if not keys:             # <<<<<<<<<<<<<<
 *         return d
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 */
  }

  /* "ok/Capture.pyx":1578
 *     if not keys:
 *         return d
 *     return deep_get(d.get(keys[0]), keys[1:], default)             # <<<<<<<<<<<<<<
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_deep_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_keys, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_keys, 1, 0, NULL, NULL, &__pyx_slice__30, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_t_4, __pyx_t_7, __pyx_v_default};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1558
 *         return True
 * 
 * def deep_get(d, keys, default=None):             # <<<<<<<<<<<<<<
 *     """
 *     Get values in dictionary safely.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ok.Capture.deep_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keys);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1580
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_39update_capture_method(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_39update_capture_method = {"update_capture_method", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_39update_capture_method, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_39update_capture_method(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_config = 0;
  PyObject *__pyx_v_capture_method = 0;
  PyObject *__pyx_v_hwnd = 0;
  PyObject *__pyx_v_require_bg = 0;
  PyObject *__pyx_v_use_bit_blt_only = 0;
  PyObject *__pyx_v_bit_blt_render_full = 0;
  PyObject *__pyx_v_exit_event = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_capture_method (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_config,&__pyx_n_s_capture_method,&__pyx_n_s_hwnd,&__pyx_n_s_require_bg,&__pyx_n_s_use_bit_blt_only,&__pyx_n_s_bit_blt_render_full,&__pyx_n_s_exit_event,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));

    /* "ok/Capture.pyx":1581
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,
 *                           bit_blt_render_full=False, exit_event=None):             # <<<<<<<<<<<<<<
 *     try:
 *         if config.get('can_bit_blt'):  # slow try win graphics first
 */
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_config)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_capture_method)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("update_capture_method", 0, 3, 7, 1); __PYX_ERR(0, 1580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("update_capture_method", 0, 3, 7, 2); __PYX_ERR(0, 1580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_require_bg);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_use_bit_blt_only);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bit_blt_render_full);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_capture_method") < 0)) __PYX_ERR(0, 1580, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_config = values[0];
    __pyx_v_capture_method = values[1];
    __pyx_v_hwnd = values[2];
    __pyx_v_require_bg = values[3];
    __pyx_v_use_bit_blt_only = values[4];
    __pyx_v_bit_blt_render_full = values[5];
    __pyx_v_exit_event = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_capture_method", 0, 3, 7, __pyx_nargs); __PYX_ERR(0, 1580, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.update_capture_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_38update_capture_method(__pyx_self, __pyx_v_config, __pyx_v_capture_method, __pyx_v_hwnd, __pyx_v_require_bg, __pyx_v_use_bit_blt_only, __pyx_v_bit_blt_render_full, __pyx_v_exit_event);

  /* "ok/Capture.pyx":1580
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_38update_capture_method(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_config, PyObject *__pyx_v_capture_method, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_require_bg, PyObject *__pyx_v_use_bit_blt_only, PyObject *__pyx_v_bit_blt_render_full, PyObject *__pyx_v_exit_event) {
  PyTypeObject *__pyx_v_target_method = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_win_graphic = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_capture_method", 0);
  __Pyx_INCREF(__pyx_v_capture_method);

  /* "ok/Capture.pyx":1582
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:             # <<<<<<<<<<<<<<
 *         if config.get('can_bit_blt'):  # slow try win graphics first
 *             # if bit_blt_render_full:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ok/Capture.pyx":1583
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 *         if config.get('can_bit_blt'):  # slow try win graphics first             # <<<<<<<<<<<<<<
 *             # if bit_blt_render_full:
 *             #     if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1583, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_can_bit_blt};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1583, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1583, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {

        /* "ok/Capture.pyx":1590
 *             #         f"try BitBlt method {config} {hwnd} current_type:{type(capture_method)}")
 *             global render_full
 *             render_full = config.get('bit_blt_render_full', False)             # <<<<<<<<<<<<<<
 *             target_method = BitBltCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1590, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1590, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1590, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_2ok_7Capture_render_full = __pyx_t_8;

        /* "ok/Capture.pyx":1591
 *             global render_full
 *             render_full = config.get('bit_blt_render_full', False)
 *             target_method = BitBltCaptureMethod             # <<<<<<<<<<<<<<
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             if bit_blt_render_full or capture_method.test_is_not_pure_color():
 */
        __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);
        __pyx_v_target_method = __pyx_ptype_2ok_7Capture_BitBltCaptureMethod;

        /* "ok/Capture.pyx":1592
 *             render_full = config.get('bit_blt_render_full', False)
 *             target_method = BitBltCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)             # <<<<<<<<<<<<<<
 *             if bit_blt_render_full or capture_method.test_is_not_pure_color():
 *                 return capture_method
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_capture); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1592, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_capture_method, ((PyObject *)__pyx_v_target_method), __pyx_v_hwnd, __pyx_v_exit_event};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1592, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_capture_method, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "ok/Capture.pyx":1593
 *             target_method = BitBltCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             if bit_blt_render_full or capture_method.test_is_not_pure_color():             # <<<<<<<<<<<<<<
 *                 return capture_method
 *             else:
 */
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_bit_blt_render_full); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1593, __pyx_L3_error)
        if (!__pyx_t_9) {
        } else {
          __pyx_t_8 = __pyx_t_9;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_capture_method, __pyx_n_s_test_is_not_pure_color); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1593, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1593, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1593, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_8 = __pyx_t_9;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_8) {

          /* "ok/Capture.pyx":1594
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             if bit_blt_render_full or capture_method.test_is_not_pure_color():
 *                 return capture_method             # <<<<<<<<<<<<<<
 *             else:
 *                 logger.info("test_is_not_pure_color failed, can't use BitBlt")
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_v_capture_method);
          __pyx_r = __pyx_v_capture_method;
          goto __pyx_L7_try_return;

          /* "ok/Capture.pyx":1593
 *             target_method = BitBltCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             if bit_blt_render_full or capture_method.test_is_not_pure_color():             # <<<<<<<<<<<<<<
 *                 return capture_method
 *             else:
 */
        }

        /* "ok/Capture.pyx":1596
 *                 return capture_method
 *             else:
 *                 logger.info("test_is_not_pure_color failed, can't use BitBlt")             # <<<<<<<<<<<<<<
 *         if use_bit_blt_only:
 *             return None
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1596, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1596, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_s_test_is_not_pure_color_failed_ca};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1596, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }

        /* "ok/Capture.pyx":1583
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 *         if config.get('can_bit_blt'):  # slow try win graphics first             # <<<<<<<<<<<<<<
 *             # if bit_blt_render_full:
 *             #     if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):
 */
      }

      /* "ok/Capture.pyx":1597
 *             else:
 *                 logger.info("test_is_not_pure_color failed, can't use BitBlt")
 *         if use_bit_blt_only:             # <<<<<<<<<<<<<<
 *             return None
 *         if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_use_bit_blt_only); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1597, __pyx_L3_error)
      if (__pyx_t_8) {

        /* "ok/Capture.pyx":1598
 *                 logger.info("test_is_not_pure_color failed, can't use BitBlt")
 *         if use_bit_blt_only:
 *             return None             # <<<<<<<<<<<<<<
 *         if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):
 *             return win_graphic
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L7_try_return;

        /* "ok/Capture.pyx":1597
 *             else:
 *                 logger.info("test_is_not_pure_color failed, can't use BitBlt")
 *         if use_bit_blt_only:             # <<<<<<<<<<<<<<
 *             return None
 *         if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):
 */
      }

      /* "ok/Capture.pyx":1599
 *         if use_bit_blt_only:
 *             return None
 *         if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *             return win_graphic
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_get_win_graphics_capture); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1599, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_v_capture_method, __pyx_v_hwnd, __pyx_v_exit_event};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1599, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_win_graphic = __pyx_t_5;
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1599, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {

        /* "ok/Capture.pyx":1600
 *             return None
 *         if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):
 *             return win_graphic             # <<<<<<<<<<<<<<
 * 
 *         if not require_bg:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_win_graphic);
        __pyx_r = __pyx_v_win_graphic;
        goto __pyx_L7_try_return;

        /* "ok/Capture.pyx":1599
 *         if use_bit_blt_only:
 *             return None
 *         if win_graphic := get_win_graphics_capture(capture_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *             return win_graphic
 * 
 */
      }

      /* "ok/Capture.pyx":1602
 *             return win_graphic
 * 
 *         if not require_bg:             # <<<<<<<<<<<<<<
 *             target_method = DesktopDuplicationCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_require_bg); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1602, __pyx_L3_error)
      __pyx_t_9 = (!__pyx_t_8);
      if (__pyx_t_9) {

        /* "ok/Capture.pyx":1603
 * 
 *         if not require_bg:
 *             target_method = DesktopDuplicationCaptureMethod             # <<<<<<<<<<<<<<
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             return capture_method
 */
        __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);
        __Pyx_XDECREF_SET(__pyx_v_target_method, __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

        /* "ok/Capture.pyx":1604
 *         if not require_bg:
 *             target_method = DesktopDuplicationCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)             # <<<<<<<<<<<<<<
 *             return capture_method
 *     except Exception as e:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_get_capture); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1604, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_v_capture_method, ((PyObject *)__pyx_v_target_method), __pyx_v_hwnd, __pyx_v_exit_event};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1604, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_capture_method, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "ok/Capture.pyx":1605
 *             target_method = DesktopDuplicationCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             return capture_method             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error(f'update_capture_method exception, return None: ', e)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_capture_method);
        __pyx_r = __pyx_v_capture_method;
        goto __pyx_L7_try_return;

        /* "ok/Capture.pyx":1602
 *             return win_graphic
 * 
 *         if not require_bg:             # <<<<<<<<<<<<<<
 *             target_method = DesktopDuplicationCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 */
      }

      /* "ok/Capture.pyx":1582
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:             # <<<<<<<<<<<<<<
 *         if config.get('can_bit_blt'):  # slow try win graphics first
 *             # if bit_blt_render_full:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ok/Capture.pyx":1606
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             return capture_method
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error(f'update_capture_method exception, return None: ', e)
 * 
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_10) {
      __Pyx_AddTraceback("ok.Capture.update_capture_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 1606, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;
      /*try:*/ {

        /* "ok/Capture.pyx":1607
 *             return capture_method
 *     except Exception as e:
 *         logger.error(f'update_capture_method exception, return None: ', e)             # <<<<<<<<<<<<<<
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1607, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_error); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1607, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_kp_u_update_capture_method_exception, __pyx_v_e};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1607, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }

      /* "ok/Capture.pyx":1606
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *             return capture_method
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error(f'update_capture_method exception, return None: ', e)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L22;
        }
        __pyx_L21_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L22:;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":1582
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:             # <<<<<<<<<<<<<<
 *         if config.get('can_bit_blt'):  # slow try win graphics first
 *             # if bit_blt_render_full:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "ok/Capture.pyx":1580
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ok.Capture.update_capture_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_target_method);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_win_graphic);
  __Pyx_XDECREF(__pyx_v_capture_method);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1609
 *         logger.error(f'update_capture_method exception, return None: ', e)
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if windows_graphics_available():
 *         target_method = WindowsGraphicsCaptureMethod
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_41get_win_graphics_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_41get_win_graphics_capture = {"get_win_graphics_capture", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_41get_win_graphics_capture, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_41get_win_graphics_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_capture_method = 0;
  PyObject *__pyx_v_hwnd = 0;
  PyObject *__pyx_v_exit_event = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_win_graphics_capture (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_capture_method,&__pyx_n_s_hwnd,&__pyx_n_s_exit_event,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_capture_method)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_win_graphics_capture", 1, 3, 3, 1); __PYX_ERR(0, 1609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_win_graphics_capture", 1, 3, 3, 2); __PYX_ERR(0, 1609, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_win_graphics_capture") < 0)) __PYX_ERR(0, 1609, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_capture_method = values[0];
    __pyx_v_hwnd = values[1];
    __pyx_v_exit_event = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_win_graphics_capture", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1609, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_win_graphics_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_40get_win_graphics_capture(__pyx_self, __pyx_v_capture_method, __pyx_v_hwnd, __pyx_v_exit_event);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_40get_win_graphics_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_capture_method, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_exit_event) {
  PyTypeObject *__pyx_v_target_method = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_win_graphics_capture", 0);
  __Pyx_INCREF(__pyx_v_capture_method);

  /* "ok/Capture.pyx":1610
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):
 *     if windows_graphics_available():             # <<<<<<<<<<<<<<
 *         target_method = WindowsGraphicsCaptureMethod
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_windows_graphics_available); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ok/Capture.pyx":1611
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):
 *     if windows_graphics_available():
 *         target_method = WindowsGraphicsCaptureMethod             # <<<<<<<<<<<<<<
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *         if capture_method.start_or_stop():
 */
    __Pyx_INCREF((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);
    __pyx_v_target_method = __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod;

    /* "ok/Capture.pyx":1612
 *     if windows_graphics_available():
 *         target_method = WindowsGraphicsCaptureMethod
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)             # <<<<<<<<<<<<<<
 *         if capture_method.start_or_stop():
 *             return capture_method
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_capture); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_3, __pyx_v_capture_method, ((PyObject *)__pyx_v_target_method), __pyx_v_hwnd, __pyx_v_exit_event};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_capture_method, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ok/Capture.pyx":1613
 *         target_method = WindowsGraphicsCaptureMethod
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *         if capture_method.start_or_stop():             # <<<<<<<<<<<<<<
 *             return capture_method
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_capture_method, __pyx_n_s_start_or_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1613, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "ok/Capture.pyx":1614
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *         if capture_method.start_or_stop():
 *             return capture_method             # <<<<<<<<<<<<<<
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_capture_method);
      __pyx_r = __pyx_v_capture_method;
      goto __pyx_L0;

      /* "ok/Capture.pyx":1613
 *         target_method = WindowsGraphicsCaptureMethod
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 *         if capture_method.start_or_stop():             # <<<<<<<<<<<<<<
 *             return capture_method
 * 
 */
    }

    /* "ok/Capture.pyx":1610
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):
 *     if windows_graphics_available():             # <<<<<<<<<<<<<<
 *         target_method = WindowsGraphicsCaptureMethod
 *         capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 */
  }

  /* "ok/Capture.pyx":1609
 *         logger.error(f'update_capture_method exception, return None: ', e)
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if windows_graphics_available():
 *         target_method = WindowsGraphicsCaptureMethod
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.get_win_graphics_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_target_method);
  __Pyx_XDECREF(__pyx_v_capture_method);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1616
 *             return capture_method
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_43get_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_43get_capture = {"get_capture", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_43get_capture, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_43get_capture(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_capture_method = 0;
  PyObject *__pyx_v_target_method = 0;
  PyObject *__pyx_v_hwnd = 0;
  PyObject *__pyx_v_exit_event = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_capture (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_capture_method,&__pyx_n_s_target_method,&__pyx_n_s_hwnd,&__pyx_n_s_exit_event,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_capture_method)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target_method)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_capture", 1, 4, 4, 1); __PYX_ERR(0, 1616, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_capture", 1, 4, 4, 2); __PYX_ERR(0, 1616, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exit_event)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_capture", 1, 4, 4, 3); __PYX_ERR(0, 1616, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_capture") < 0)) __PYX_ERR(0, 1616, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_capture_method = values[0];
    __pyx_v_target_method = values[1];
    __pyx_v_hwnd = values[2];
    __pyx_v_exit_event = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_capture", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1616, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_42get_capture(__pyx_self, __pyx_v_capture_method, __pyx_v_target_method, __pyx_v_hwnd, __pyx_v_exit_event);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_42get_capture(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_capture_method, PyObject *__pyx_v_target_method, PyObject *__pyx_v_hwnd, PyObject *__pyx_v_exit_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_capture", 0);
  __Pyx_INCREF(__pyx_v_capture_method);

  /* "ok/Capture.pyx":1617
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):
 *     if not isinstance(capture_method, target_method):             # <<<<<<<<<<<<<<
 *         if capture_method is not None:
 *             capture_method.close()
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_capture_method, __pyx_v_target_method); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1617, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "ok/Capture.pyx":1618
 * def get_capture(capture_method, target_method, hwnd, exit_event):
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:             # <<<<<<<<<<<<<<
 *             capture_method.close()
 *         capture_method = target_method(hwnd)
 */
    __pyx_t_2 = (__pyx_v_capture_method != Py_None);
    if (__pyx_t_2) {

      /* "ok/Capture.pyx":1619
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:
 *             capture_method.close()             # <<<<<<<<<<<<<<
 *         capture_method = target_method(hwnd)
 *     capture_method.hwnd_window = hwnd
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_capture_method, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ok/Capture.pyx":1618
 * def get_capture(capture_method, target_method, hwnd, exit_event):
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:             # <<<<<<<<<<<<<<
 *             capture_method.close()
 *         capture_method = target_method(hwnd)
 */
    }

    /* "ok/Capture.pyx":1620
 *         if capture_method is not None:
 *             capture_method.close()
 *         capture_method = target_method(hwnd)             # <<<<<<<<<<<<<<
 *     capture_method.hwnd_window = hwnd
 *     capture_method.exit_event = exit_event
 */
    __Pyx_INCREF(__pyx_v_target_method);
    __pyx_t_4 = __pyx_v_target_method; __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_hwnd};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1620, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_capture_method, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ok/Capture.pyx":1617
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):
 *     if not isinstance(capture_method, target_method):             # <<<<<<<<<<<<<<
 *         if capture_method is not None:
 *             capture_method.close()
 */
  }

  /* "ok/Capture.pyx":1621
 *             capture_method.close()
 *         capture_method = target_method(hwnd)
 *     capture_method.hwnd_window = hwnd             # <<<<<<<<<<<<<<
 *     capture_method.exit_event = exit_event
 *     return capture_method
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_capture_method, __pyx_n_s_hwnd_window, __pyx_v_hwnd) < 0) __PYX_ERR(0, 1621, __pyx_L1_error)

  /* "ok/Capture.pyx":1622
 *         capture_method = target_method(hwnd)
 *     capture_method.hwnd_window = hwnd
 *     capture_method.exit_event = exit_event             # <<<<<<<<<<<<<<
 *     return capture_method
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_capture_method, __pyx_n_s_exit_event, __pyx_v_exit_event) < 0) __PYX_ERR(0, 1622, __pyx_L1_error)

  /* "ok/Capture.pyx":1623
 *     capture_method.hwnd_window = hwnd
 *     capture_method.exit_event = exit_event
 *     return capture_method             # <<<<<<<<<<<<<<
 * 
 * MDT_EFFECTIVE_DPI = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_capture_method);
  __pyx_r = __pyx_v_capture_method;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1616
 *             return capture_method
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ok.Capture.get_capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_capture_method);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1628
 * user32 = ctypes.WinDLL('user32', use_last_error=True)
 * 
 * def is_window_minimized(hWnd):             # <<<<<<<<<<<<<<
 *     return user32.IsIconic(hWnd) != 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_45is_window_minimized(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_45is_window_minimized = {"is_window_minimized", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_45is_window_minimized, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_45is_window_minimized(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hWnd = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_minimized (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hWnd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hWnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1628, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_window_minimized") < 0)) __PYX_ERR(0, 1628, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_hWnd = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_window_minimized", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1628, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.is_window_minimized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_44is_window_minimized(__pyx_self, __pyx_v_hWnd);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_44is_window_minimized(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hWnd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_window_minimized", 1);

  /* "ok/Capture.pyx":1629
 * 
 * def is_window_minimized(hWnd):
 *     return user32.IsIconic(hWnd) != 0             # <<<<<<<<<<<<<<
 * 
 * def get_window_bounds(hwnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_user32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsIconic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_hWnd};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1628
 * user32 = ctypes.WinDLL('user32', use_last_error=True)
 * 
 * def is_window_minimized(hWnd):             # <<<<<<<<<<<<<<
 *     return user32.IsIconic(hWnd) != 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ok.Capture.is_window_minimized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1631
 *     return user32.IsIconic(hWnd) != 0
 * 
 * def get_window_bounds(hwnd):             # <<<<<<<<<<<<<<
 *     try:
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_47get_window_bounds(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_47get_window_bounds = {"get_window_bounds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_47get_window_bounds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_47get_window_bounds(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_bounds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1631, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_window_bounds") < 0)) __PYX_ERR(0, 1631, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_hwnd = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_window_bounds", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1631, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.get_window_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_46get_window_bounds(__pyx_self, __pyx_v_hwnd);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_46get_window_bounds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd) {
  PyObject *__pyx_v_extended_frame_bounds = NULL;
  PyObject *__pyx_v_client_x = NULL;
  PyObject *__pyx_v_client_y = NULL;
  PyObject *__pyx_v_client_width = NULL;
  PyObject *__pyx_v_client_height = NULL;
  PyObject *__pyx_v_window_left = NULL;
  PyObject *__pyx_v_window_top = NULL;
  PyObject *__pyx_v_window_right = NULL;
  PyObject *__pyx_v_window_bottom = NULL;
  PyObject *__pyx_v_window_width = NULL;
  PyObject *__pyx_v_window_height = NULL;
  PyObject *__pyx_v_monitor = NULL;
  PyObject *__pyx_v_dpiX = NULL;
  PyObject *__pyx_v_dpiY = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_window_bounds", 1);

  /* "ok/Capture.pyx":1632
 * 
 * def get_window_bounds(hwnd):
 *     try:             # <<<<<<<<<<<<<<
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 *         ctypes.windll.dwmapi.DwmGetWindowAttribute(
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ok/Capture.pyx":1633
 * def get_window_bounds(hwnd):
 *     try:
 *         extended_frame_bounds = ctypes.wintypes.RECT()             # <<<<<<<<<<<<<<
 *         ctypes.windll.dwmapi.DwmGetWindowAttribute(
 *             hwnd,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1633, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_wintypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1633, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_RECT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1633, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1633, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_extended_frame_bounds = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1634
 *     try:
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 *         ctypes.windll.dwmapi.DwmGetWindowAttribute(             # <<<<<<<<<<<<<<
 *             hwnd,
 *             DWMWA_EXTENDED_FRAME_BOUNDS,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1634, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_windll); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1634, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_dwmapi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1634, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_DwmGetWindowAttribute); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1634, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ok/Capture.pyx":1636
 *         ctypes.windll.dwmapi.DwmGetWindowAttribute(
 *             hwnd,
 *             DWMWA_EXTENDED_FRAME_BOUNDS,             # <<<<<<<<<<<<<<
 *             ctypes.byref(extended_frame_bounds),
 *             ctypes.sizeof(extended_frame_bounds),
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1636, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "ok/Capture.pyx":1637
 *             hwnd,
 *             DWMWA_EXTENDED_FRAME_BOUNDS,
 *             ctypes.byref(extended_frame_bounds),             # <<<<<<<<<<<<<<
 *             ctypes.sizeof(extended_frame_bounds),
 *         )
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1637, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_byref); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1637, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_extended_frame_bounds};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1637, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }

      /* "ok/Capture.pyx":1638
 *             DWMWA_EXTENDED_FRAME_BOUNDS,
 *             ctypes.byref(extended_frame_bounds),
 *             ctypes.sizeof(extended_frame_bounds),             # <<<<<<<<<<<<<<
 *         )
 *         client_x, client_y, client_width, client_height = win32gui.GetClientRect(hwnd)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1638, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sizeof); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1638, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_extended_frame_bounds};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1638, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_11, __pyx_v_hwnd, __pyx_t_5, __pyx_t_8, __pyx_t_10};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1634, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1640
 *             ctypes.sizeof(extended_frame_bounds),
 *         )
 *         client_x, client_y, client_width, client_height = win32gui.GetClientRect(hwnd)             # <<<<<<<<<<<<<<
 *         window_left, window_top, window_right, window_bottom = win32gui.GetWindowRect(hwnd)
 *         window_width = window_right - window_left
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1640, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_GetClientRect); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1640, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_hwnd};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1640, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1640, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_10,&__pyx_t_6,&__pyx_t_8,&__pyx_t_5};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1640, __pyx_L3_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_10,&__pyx_t_6,&__pyx_t_8,&__pyx_t_5};
        __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1640, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 1640, __pyx_L3_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1640, __pyx_L3_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_v_client_x = __pyx_t_10;
      __pyx_t_10 = 0;
      __pyx_v_client_y = __pyx_t_6;
      __pyx_t_6 = 0;
      __pyx_v_client_width = __pyx_t_8;
      __pyx_t_8 = 0;
      __pyx_v_client_height = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "ok/Capture.pyx":1641
 *         )
 *         client_x, client_y, client_width, client_height = win32gui.GetClientRect(hwnd)
 *         window_left, window_top, window_right, window_bottom = win32gui.GetWindowRect(hwnd)             # <<<<<<<<<<<<<<
 *         window_width = window_right - window_left
 *         window_height = window_bottom - window_top
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1641, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GetWindowRect); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1641, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_hwnd};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1641, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1641, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_10);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_8,&__pyx_t_5,&__pyx_t_6,&__pyx_t_10};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1641, __pyx_L3_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_8,&__pyx_t_5,&__pyx_t_6,&__pyx_t_10};
        __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1641, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 1641, __pyx_L3_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1641, __pyx_L3_error)
        __pyx_L12_unpacking_done:;
      }
      __pyx_v_window_left = __pyx_t_8;
      __pyx_t_8 = 0;
      __pyx_v_window_top = __pyx_t_5;
      __pyx_t_5 = 0;
      __pyx_v_window_right = __pyx_t_6;
      __pyx_t_6 = 0;
      __pyx_v_window_bottom = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "ok/Capture.pyx":1642
 *         client_x, client_y, client_width, client_height = win32gui.GetClientRect(hwnd)
 *         window_left, window_top, window_right, window_bottom = win32gui.GetWindowRect(hwnd)
 *         window_width = window_right - window_left             # <<<<<<<<<<<<<<
 *         window_height = window_bottom - window_top
 *         client_x, client_y = win32gui.ClientToScreen(hwnd, (client_x, client_y))
 */
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_window_right, __pyx_v_window_left); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1642, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_window_width = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1643
 *         window_left, window_top, window_right, window_bottom = win32gui.GetWindowRect(hwnd)
 *         window_width = window_right - window_left
 *         window_height = window_bottom - window_top             # <<<<<<<<<<<<<<
 *         client_x, client_y = win32gui.ClientToScreen(hwnd, (client_x, client_y))
 *         monitor = user32.MonitorFromWindow(hwnd, 2)  # 2 = MONITOR_DEFAULTTONEAREST
 */
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_window_bottom, __pyx_v_window_top); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_window_height = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1644
 *         window_width = window_right - window_left
 *         window_height = window_bottom - window_top
 *         client_x, client_y = win32gui.ClientToScreen(hwnd, (client_x, client_y))             # <<<<<<<<<<<<<<
 *         monitor = user32.MonitorFromWindow(hwnd, 2)  # 2 = MONITOR_DEFAULTTONEAREST
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1644, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_ClientToScreen); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1644, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1644, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_client_x);
      __Pyx_GIVEREF(__pyx_v_client_x);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_client_x)) __PYX_ERR(0, 1644, __pyx_L3_error);
      __Pyx_INCREF(__pyx_v_client_y);
      __Pyx_GIVEREF(__pyx_v_client_y);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_client_y)) __PYX_ERR(0, 1644, __pyx_L3_error);
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_hwnd, __pyx_t_10};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1644, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1644, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1644, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1644, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1644, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
        index = 0; __pyx_t_6 = __pyx_t_12(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_5); if (unlikely(!__pyx_t_10)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1644, __pyx_L3_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L14_unpacking_done;
        __pyx_L13_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1644, __pyx_L3_error)
        __pyx_L14_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_client_x, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_client_y, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "ok/Capture.pyx":1645
 *         window_height = window_bottom - window_top
 *         client_x, client_y = win32gui.ClientToScreen(hwnd, (client_x, client_y))
 *         monitor = user32.MonitorFromWindow(hwnd, 2)  # 2 = MONITOR_DEFAULTTONEAREST             # <<<<<<<<<<<<<<
 * 
 *         # Get the DPI
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_user32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1645, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_MonitorFromWindow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1645, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_v_hwnd, __pyx_int_2};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_monitor = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1648
 * 
 *         # Get the DPI
 *         dpiX = ctypes.c_uint()             # <<<<<<<<<<<<<<
 *         dpiY = ctypes.c_uint()
 *         ctypes.windll.shcore.GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, ctypes.byref(dpiX), ctypes.byref(dpiY))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1648, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_c_uint); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1648, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_v_dpiX = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1649
 *         # Get the DPI
 *         dpiX = ctypes.c_uint()
 *         dpiY = ctypes.c_uint()             # <<<<<<<<<<<<<<
 *         ctypes.windll.shcore.GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, ctypes.byref(dpiX), ctypes.byref(dpiY))
 *         return client_x, client_y, window_width, window_height, client_width, client_height, dpiX.value / 96
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1649, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_c_uint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1649, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1649, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_dpiY = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1650
 *         dpiX = ctypes.c_uint()
 *         dpiY = ctypes.c_uint()
 *         ctypes.windll.shcore.GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, ctypes.byref(dpiX), ctypes.byref(dpiY))             # <<<<<<<<<<<<<<
 *         return client_x, client_y, window_width, window_height, client_width, client_height, dpiX.value / 96
 *     except Exception as e:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_windll); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_shcore); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_GetDpiForMonitor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_MDT_EFFECTIVE_DPI); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_byref); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_dpiX};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_byref); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1650, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_dpiY};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_9 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_9, __pyx_v_monitor, __pyx_t_6, __pyx_t_5, __pyx_t_11};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1650, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ok/Capture.pyx":1651
 *         dpiY = ctypes.c_uint()
 *         ctypes.windll.shcore.GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, ctypes.byref(dpiX), ctypes.byref(dpiY))
 *         return client_x, client_y, window_width, window_height, client_width, client_height, dpiX.value / 96             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error(f'get_window_bounds exception', e)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dpiX, __pyx_n_s_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1651, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_4, __pyx_int_96, 96, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1651, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1651, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_client_x);
      __Pyx_GIVEREF(__pyx_v_client_x);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_client_x)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __Pyx_INCREF(__pyx_v_client_y);
      __Pyx_GIVEREF(__pyx_v_client_y);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_client_y)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __Pyx_INCREF(__pyx_v_window_width);
      __Pyx_GIVEREF(__pyx_v_window_width);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_window_width)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __Pyx_INCREF(__pyx_v_window_height);
      __Pyx_GIVEREF(__pyx_v_window_height);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_window_height)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __Pyx_INCREF(__pyx_v_client_width);
      __Pyx_GIVEREF(__pyx_v_client_width);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_client_width)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __Pyx_INCREF(__pyx_v_client_height);
      __Pyx_GIVEREF(__pyx_v_client_height);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_v_client_height)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __Pyx_GIVEREF(__pyx_t_10);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_t_10)) __PYX_ERR(0, 1651, __pyx_L3_error);
      __pyx_t_10 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "ok/Capture.pyx":1632
 * 
 * def get_window_bounds(hwnd):
 *     try:             # <<<<<<<<<<<<<<
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 *         ctypes.windll.dwmapi.DwmGetWindowAttribute(
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ok/Capture.pyx":1652
 *         ctypes.windll.shcore.GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, ctypes.byref(dpiX), ctypes.byref(dpiY))
 *         return client_x, client_y, window_width, window_height, client_width, client_height, dpiX.value / 96
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error(f'get_window_bounds exception', e)
 *         return 0, 0, 0, 0, 0, 0, 1
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("ok.Capture.get_window_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(0, 1652, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_10);
      __pyx_v_e = __pyx_t_10;
      /*try:*/ {

        /* "ok/Capture.pyx":1653
 *         return client_x, client_y, window_width, window_height, client_width, client_height, dpiX.value / 96
 *     except Exception as e:
 *         logger.error(f'get_window_bounds exception', e)             # <<<<<<<<<<<<<<
 *         return 0, 0, 0, 0, 0, 0, 1
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1653, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_error); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1653, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_kp_u_get_window_bounds_exception, __pyx_v_e};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1653, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ok/Capture.pyx":1654
 *     except Exception as e:
 *         logger.error(f'get_window_bounds exception', e)
 *         return 0, 0, 0, 0, 0, 0, 1             # <<<<<<<<<<<<<<
 * 
 * def is_foreground_window(hwnd):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__32);
        __pyx_r = __pyx_tuple__32;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L19_return;
      }

      /* "ok/Capture.pyx":1652
 *         ctypes.windll.shcore.GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, ctypes.byref(dpiX), ctypes.byref(dpiY))
 *         return client_x, client_y, window_width, window_height, client_width, client_height, dpiX.value / 96
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error(f'get_window_bounds exception', e)
 *         return 0, 0, 0, 0, 0, 0, 1
 */
      /*finally:*/ {
        __pyx_L20_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_13 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L19_return: {
          __pyx_t_21 = __pyx_r;
          __pyx_r = 0;
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          __pyx_r = __pyx_t_21;
          __pyx_t_21 = 0;
          goto __pyx_L6_except_return;
        }
      }
    }
    goto __pyx_L5_except_error;

    /* "ok/Capture.pyx":1632
 * 
 * def get_window_bounds(hwnd):
 *     try:             # <<<<<<<<<<<<<<
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 *         ctypes.windll.dwmapi.DwmGetWindowAttribute(
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "ok/Capture.pyx":1631
 *     return user32.IsIconic(hWnd) != 0
 * 
 * def get_window_bounds(hwnd):             # <<<<<<<<<<<<<<
 *     try:
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ok.Capture.get_window_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_extended_frame_bounds);
  __Pyx_XDECREF(__pyx_v_client_x);
  __Pyx_XDECREF(__pyx_v_client_y);
  __Pyx_XDECREF(__pyx_v_client_width);
  __Pyx_XDECREF(__pyx_v_client_height);
  __Pyx_XDECREF(__pyx_v_window_left);
  __Pyx_XDECREF(__pyx_v_window_top);
  __Pyx_XDECREF(__pyx_v_window_right);
  __Pyx_XDECREF(__pyx_v_window_bottom);
  __Pyx_XDECREF(__pyx_v_window_width);
  __Pyx_XDECREF(__pyx_v_window_height);
  __Pyx_XDECREF(__pyx_v_monitor);
  __Pyx_XDECREF(__pyx_v_dpiX);
  __Pyx_XDECREF(__pyx_v_dpiY);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ok/Capture.pyx":1656
 *         return 0, 0, 0, 0, 0, 0, 1
 * 
 * def is_foreground_window(hwnd):             # <<<<<<<<<<<<<<
 *     return win32gui.IsWindowVisible(hwnd) and win32gui.GetForegroundWindow() == hwnd
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_49is_foreground_window(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_49is_foreground_window = {"is_foreground_window", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_49is_foreground_window, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_49is_foreground_window(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_hwnd = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_foreground_window (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hwnd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hwnd)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1656, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_foreground_window") < 0)) __PYX_ERR(0, 1656, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_hwnd = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_foreground_window", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1656, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.is_foreground_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_48is_foreground_window(__pyx_self, __pyx_v_hwnd);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_48is_foreground_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hwnd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_foreground_window", 1);

  /* "ok/Capture.pyx":1657
 * 
 * def is_foreground_window(hwnd):
 *     return win32gui.IsWindowVisible(hwnd) and win32gui.GetForegroundWindow() == hwnd             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_IsWindowVisible); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_hwnd};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1657, __pyx_L1_error)
  if (__pyx_t_6) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_win32gui); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GetForegroundWindow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_hwnd, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1657, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ok/Capture.pyx":1656
 *         return 0, 0, 0, 0, 0, 0, 1
 * 
 * def is_foreground_window(hwnd):             # <<<<<<<<<<<<<<
 *     return win32gui.IsWindowVisible(hwnd) and win32gui.GetForegroundWindow() == hwnd
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.is_foreground_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BaseCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_51__pyx_unpickle_BaseCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_51__pyx_unpickle_BaseCaptureMethod = {"__pyx_unpickle_BaseCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_51__pyx_unpickle_BaseCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_51__pyx_unpickle_BaseCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_BaseCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BaseCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_50__pyx_unpickle_BaseCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_50__pyx_unpickle_BaseCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5ca900c, 0x4931da1, 0x42490af):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__33, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5ca900c, 0x4931da1, 0x42490af):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x5ca900c, 0x4931da1, 0x42490af):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = BaseCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5ca900c, 0x4931da1, 0x42490af):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = BaseCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_BaseCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BaseCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_BaseCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_size);
  __Pyx_DECREF(__pyx_v___pyx_result->_size);
  __pyx_v___pyx_result->_size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->exit_event);
  __pyx_v___pyx_result->exit_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 2);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BaseCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BaseWindowsCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_53__pyx_unpickle_BaseWindowsCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_53__pyx_unpickle_BaseWindowsCaptureMethod = {"__pyx_unpickle_BaseWindowsCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_53__pyx_unpickle_BaseWindowsCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_53__pyx_unpickle_BaseWindowsCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseWindowsCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseWindowsCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseWindowsCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_BaseWindowsCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseWindowsCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BaseWindowsCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_52__pyx_unpickle_BaseWindowsCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_52__pyx_unpickle_BaseWindowsCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseWindowsCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__34, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseWindowsCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = BaseWindowsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseWindowsCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseWindowsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = BaseWindowsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_BaseWindowsCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BaseWindowsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseWindowsCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BaseWindowsCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_BaseWindowsCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseWindowsCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_hwnd_window);
  __Pyx_DECREF(__pyx_v___pyx_result->_hwnd_window);
  __pyx_v___pyx_result->_hwnd_window = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 3);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseWindowsCaptureMethod__set_state(<BaseWindowsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseWindowsCaptureMethod__set_state(BaseWindowsCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BaseWindowsCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_WindowsGraphicsCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_55__pyx_unpickle_WindowsGraphicsCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_55__pyx_unpickle_WindowsGraphicsCaptureMethod = {"__pyx_unpickle_WindowsGraphicsCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_55__pyx_unpickle_WindowsGraphicsCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_55__pyx_unpickle_WindowsGraphicsCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_WindowsGraphicsCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_WindowsGraphicsCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_WindowsGraphicsCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_WindowsGraphicsCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_WindowsGraphicsCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_WindowsGraphicsCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_54__pyx_unpickle_WindowsGraphicsCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_54__pyx_unpickle_WindowsGraphicsCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_WindowsGraphicsCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x22c6398, 0x11b0080, 0xff24cf9):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__35, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x22c6398, 0x11b0080, 0xff24cf9):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum
 *     __pyx_result = WindowsGraphicsCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x22c6398, 0x11b0080, 0xff24cf9):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = WindowsGraphicsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x22c6398, 0x11b0080, 0xff24cf9):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum
 *     __pyx_result = WindowsGraphicsCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum
 *     __pyx_result = WindowsGraphicsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = WindowsGraphicsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x22c6398, 0x11b0080, 0xff24cf9) = (_hwnd_window, _size, cputex, dxdevice, evtoken, exit_event, frame_pool, immediatedc, item, last_frame, last_frame_time, last_size, rtdevice, session))" % __pyx_checksum
 *     __pyx_result = WindowsGraphicsCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_WindowsGraphicsCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_WindowsGraphicsCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_WindowsGraphicsCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[14])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._hwnd_window);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._hwnd_window);
  __pyx_v___pyx_result->__pyx_base._hwnd_window = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->cputex);
  __Pyx_DECREF(__pyx_v___pyx_result->cputex);
  __pyx_v___pyx_result->cputex = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->dxdevice);
  __Pyx_DECREF(__pyx_v___pyx_result->dxdevice);
  __pyx_v___pyx_result->dxdevice = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->evtoken);
  __Pyx_DECREF(__pyx_v___pyx_result->evtoken);
  __pyx_v___pyx_result->evtoken = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->frame_pool);
  __Pyx_DECREF(__pyx_v___pyx_result->frame_pool);
  __pyx_v___pyx_result->frame_pool = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->immediatedc);
  __Pyx_DECREF(__pyx_v___pyx_result->immediatedc);
  __pyx_v___pyx_result->immediatedc = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->item);
  __Pyx_DECREF(__pyx_v___pyx_result->item);
  __pyx_v___pyx_result->item = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->last_frame);
  __Pyx_DECREF(__pyx_v___pyx_result->last_frame);
  __pyx_v___pyx_result->last_frame = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->last_frame_time = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->last_size);
  __Pyx_DECREF(__pyx_v___pyx_result->last_size);
  __pyx_v___pyx_result->last_size = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->rtdevice);
  __Pyx_DECREF(__pyx_v___pyx_result->rtdevice);
  __pyx_v___pyx_result->rtdevice = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->session);
  __Pyx_DECREF(__pyx_v___pyx_result->session);
  __pyx_v___pyx_result->session = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[14])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 > 14);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[14])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[14])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_WindowsGraphicsCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BitBltCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_57__pyx_unpickle_BitBltCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_57__pyx_unpickle_BitBltCaptureMethod = {"__pyx_unpickle_BitBltCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_57__pyx_unpickle_BitBltCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_57__pyx_unpickle_BitBltCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BitBltCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BitBltCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BitBltCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_BitBltCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BitBltCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BitBltCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_56__pyx_unpickle_BitBltCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_56__pyx_unpickle_BitBltCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BitBltCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__34, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BitBltCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = BitBltCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xffabab1, 0x97ee8e2, 0x3cd2522):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BitBltCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BitBltCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = BitBltCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_BitBltCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xffabab1, 0x97ee8e2, 0x3cd2522) = (_hwnd_window, _size, exit_event))" % __pyx_checksum
 *     __pyx_result = BitBltCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BitBltCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BitBltCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_BitBltCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BitBltCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._hwnd_window);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._hwnd_window);
  __pyx_v___pyx_result->__pyx_base._hwnd_window = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 3);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BitBltCaptureMethod__set_state(<BitBltCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BitBltCaptureMethod__set_state(BitBltCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.exit_event = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_BitBltCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_HwndWindow(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_59__pyx_unpickle_HwndWindow(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_59__pyx_unpickle_HwndWindow = {"__pyx_unpickle_HwndWindow", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_59__pyx_unpickle_HwndWindow, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_59__pyx_unpickle_HwndWindow(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_HwndWindow (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HwndWindow", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HwndWindow", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_HwndWindow") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HwndWindow", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_HwndWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_58__pyx_unpickle_HwndWindow(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_58__pyx_unpickle_HwndWindow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_HwndWindow", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x8cf851f, 0x1d53887, 0xf08b0c6):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__36, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x8cf851f, 0x1d53887, 0xf08b0c6):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum
 *     __pyx_result = HwndWindow.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x8cf851f, 0x1d53887, 0xf08b0c6):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = HwndWindow.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x8cf851f, 0x1d53887, 0xf08b0c6):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum
 *     __pyx_result = HwndWindow.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum
 *     __pyx_result = HwndWindow.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = HwndWindow.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_HwndWindow__set_state(((struct __pyx_obj_2ok_7Capture_HwndWindow *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x8cf851f, 0x1d53887, 0xf08b0c6) = (_hwnd_title, app_exit_event, device_manager, exe_full_path, exe_name, exists, frame_aspect_ratio, frame_height, frame_width, height, hwnd, hwnd_class, monitors_bounds, mute_option, player_id, pos_valid, real_height, real_width, real_x_offset, real_y_offset, scaling, stop_event, thread, title, visible, width, window_height, window_width, x, y))" % __pyx_checksum
 *     __pyx_result = HwndWindow.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_HwndWindow(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_HwndWindow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_HwndWindow__set_state(struct __pyx_obj_2ok_7Capture_HwndWindow *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  unsigned int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_HwndWindow__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[30])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_hwnd_title);
  __Pyx_DECREF(__pyx_v___pyx_result->_hwnd_title);
  __pyx_v___pyx_result->_hwnd_title = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->app_exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->app_exit_event);
  __pyx_v___pyx_result->app_exit_event = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->device_manager);
  __Pyx_DECREF(__pyx_v___pyx_result->device_manager);
  __pyx_v___pyx_result->device_manager = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->exe_full_path);
  __Pyx_DECREF(__pyx_v___pyx_result->exe_full_path);
  __pyx_v___pyx_result->exe_full_path = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->exe_name);
  __Pyx_DECREF(__pyx_v___pyx_result->exe_name);
  __pyx_v___pyx_result->exe_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->exists = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->frame_aspect_ratio = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->frame_height = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->frame_width = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->height = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->hwnd);
  __Pyx_DECREF(__pyx_v___pyx_result->hwnd);
  __pyx_v___pyx_result->hwnd = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->hwnd_class);
  __Pyx_DECREF(__pyx_v___pyx_result->hwnd_class);
  __pyx_v___pyx_result->hwnd_class = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->monitors_bounds);
  __Pyx_DECREF(__pyx_v___pyx_result->monitors_bounds);
  __pyx_v___pyx_result->monitors_bounds = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->mute_option);
  __Pyx_DECREF(__pyx_v___pyx_result->mute_option);
  __pyx_v___pyx_result->mute_option = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->player_id = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->pos_valid = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->real_height = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->real_width = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->real_x_offset = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->real_y_offset = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->scaling = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->stop_event);
  __Pyx_DECREF(__pyx_v___pyx_result->stop_event);
  __pyx_v___pyx_result->stop_event = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->thread);
  __Pyx_DECREF(__pyx_v___pyx_result->thread);
  __pyx_v___pyx_result->thread = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->title);
  __Pyx_DECREF(__pyx_v___pyx_result->title);
  __pyx_v___pyx_result->title = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->visible = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->width = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->window_height = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->window_width = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 28, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 29, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[30])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 > 30);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[30])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 30, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[30])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_HwndWindow__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_DesktopDuplicationCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_61__pyx_unpickle_DesktopDuplicationCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_61__pyx_unpickle_DesktopDuplicationCaptureMethod = {"__pyx_unpickle_DesktopDuplicationCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_61__pyx_unpickle_DesktopDuplicationCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_61__pyx_unpickle_DesktopDuplicationCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_DesktopDuplicationCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DesktopDuplicationCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DesktopDuplicationCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_DesktopDuplicationCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DesktopDuplicationCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_DesktopDuplicationCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_60__pyx_unpickle_DesktopDuplicationCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_60__pyx_unpickle_DesktopDuplicationCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_DesktopDuplicationCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3546f11, 0x60ca41c, 0xf0cffc5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__37, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3546f11, 0x60ca41c, 0xf0cffc5):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum
 *     __pyx_result = DesktopDuplicationCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x3546f11, 0x60ca41c, 0xf0cffc5):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = DesktopDuplicationCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3546f11, 0x60ca41c, 0xf0cffc5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum
 *     __pyx_result = DesktopDuplicationCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum
 *     __pyx_result = DesktopDuplicationCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = DesktopDuplicationCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x3546f11, 0x60ca41c, 0xf0cffc5) = (_hwnd_window, _size, desktop_duplication, exit_event))" % __pyx_checksum
 *     __pyx_result = DesktopDuplicationCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_DesktopDuplicationCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_DesktopDuplicationCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_DesktopDuplicationCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._hwnd_window);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._hwnd_window);
  __pyx_v___pyx_result->__pyx_base._hwnd_window = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->desktop_duplication);
  __Pyx_DECREF(__pyx_v___pyx_result->desktop_duplication);
  __pyx_v___pyx_result->desktop_duplication = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 4);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(<DesktopDuplicationCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(DesktopDuplicationCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.desktop_duplication = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_DesktopDuplicationCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ADBCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_63__pyx_unpickle_ADBCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_63__pyx_unpickle_ADBCaptureMethod = {"__pyx_unpickle_ADBCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_63__pyx_unpickle_ADBCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_63__pyx_unpickle_ADBCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ADBCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ADBCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ADBCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_ADBCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ADBCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_ADBCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_62__pyx_unpickle_ADBCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_62__pyx_unpickle_ADBCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ADBCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x2412536, 0x46d0513, 0x7bbe44f):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__38, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x2412536, 0x46d0513, 0x7bbe44f):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum
 *     __pyx_result = ADBCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x2412536, 0x46d0513, 0x7bbe44f):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = ADBCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x2412536, 0x46d0513, 0x7bbe44f):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum
 *     __pyx_result = ADBCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum
 *     __pyx_result = ADBCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ADBCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_ADBCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x2412536, 0x46d0513, 0x7bbe44f) = (_connected, _size, device_manager, exit_event))" % __pyx_checksum
 *     __pyx_result = ADBCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ADBCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_ADBCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_ADBCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ADBCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_connected = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->device_manager);
  __Pyx_DECREF(__pyx_v___pyx_result->device_manager);
  __pyx_v___pyx_result->device_manager = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 4);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_ADBCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ImageCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_65__pyx_unpickle_ImageCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_65__pyx_unpickle_ImageCaptureMethod = {"__pyx_unpickle_ImageCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_65__pyx_unpickle_ImageCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_65__pyx_unpickle_ImageCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_ImageCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImageCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_ImageCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_64__pyx_unpickle_ImageCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_64__pyx_unpickle_ImageCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9e776d1, 0xbd9798e, 0xb01fe28):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__39, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9e776d1, 0xbd9798e, 0xb01fe28):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum
 *     __pyx_result = ImageCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x9e776d1, 0xbd9798e, 0xb01fe28):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = ImageCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9e776d1, 0xbd9798e, 0xb01fe28):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum
 *     __pyx_result = ImageCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum
 *     __pyx_result = ImageCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ImageCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_ImageCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x9e776d1, 0xbd9798e, 0xb01fe28) = (_size, exit_event, images))" % __pyx_checksum
 *     __pyx_result = ImageCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImageCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_ImageCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_ImageCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImageCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->images);
  __Pyx_DECREF(__pyx_v___pyx_result->images);
  __pyx_v___pyx_result->images = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 3);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImageCaptureMethod__set_state(<ImageCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImageCaptureMethod__set_state(ImageCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]; __pyx_result.images = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_ImageCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_NemuIpcCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_2ok_7Capture_67__pyx_unpickle_NemuIpcCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2ok_7Capture_67__pyx_unpickle_NemuIpcCaptureMethod = {"__pyx_unpickle_NemuIpcCaptureMethod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_67__pyx_unpickle_NemuIpcCaptureMethod, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2ok_7Capture_67__pyx_unpickle_NemuIpcCaptureMethod(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_NemuIpcCaptureMethod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NemuIpcCaptureMethod", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NemuIpcCaptureMethod", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_NemuIpcCaptureMethod") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NemuIpcCaptureMethod", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_NemuIpcCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2ok_7Capture_66__pyx_unpickle_NemuIpcCaptureMethod(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2ok_7Capture_66__pyx_unpickle_NemuIpcCaptureMethod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NemuIpcCaptureMethod", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x0f27d96, 0x830de05, 0xf625834):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__40, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x0f27d96, 0x830de05, 0xf625834):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum
 *     __pyx_result = NemuIpcCaptureMethod.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x0f27d96, 0x830de05, 0xf625834):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = NemuIpcCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x0f27d96, 0x830de05, 0xf625834):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum
 *     __pyx_result = NemuIpcCaptureMethod.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum
 *     __pyx_result = NemuIpcCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = NemuIpcCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_2ok_7Capture___pyx_unpickle_NemuIpcCaptureMethod__set_state(((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x0f27d96, 0x830de05, 0xf625834) = (_connected, _size, device_manager, emulator, exit_event, nemu_impl))" % __pyx_checksum
 *     __pyx_result = NemuIpcCaptureMethod.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NemuIpcCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_NemuIpcCaptureMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_2ok_7Capture___pyx_unpickle_NemuIpcCaptureMethod__set_state(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NemuIpcCaptureMethod__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_connected = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._size);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base._size);
  __pyx_v___pyx_result->__pyx_base._size = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->device_manager);
  __Pyx_DECREF(__pyx_v___pyx_result->device_manager);
  __pyx_v___pyx_result->device_manager = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->emulator);
  __Pyx_DECREF(__pyx_v___pyx_result->emulator);
  __pyx_v___pyx_result->emulator = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.exit_event);
  __pyx_v___pyx_result->__pyx_base.exit_event = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->nemu_impl);
  __Pyx_DECREF(__pyx_v___pyx_result->nemu_impl);
  __pyx_v___pyx_result->nemu_impl = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 6);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_NemuIpcCaptureMethod__set_state(<NemuIpcCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NemuIpcCaptureMethod__set_state(NemuIpcCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.emulator = __pyx_state[3]; __pyx_result.exit_event = __pyx_state[4]; __pyx_result.nemu_impl = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ok.Capture.__pyx_unpickle_NemuIpcCaptureMethod__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod __pyx_vtable_2ok_7Capture_BaseCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_BaseCaptureMethod(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)o);
  p->__pyx_vtab = __pyx_vtabptr_2ok_7Capture_BaseCaptureMethod;
  p->_size = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->exit_event = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->exit_event);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)o;
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->exit_event) {
    e = (*v)(p->exit_event, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_BaseCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *)o;
  tmp = ((PyObject*)p->_size);
  p->_size = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exit_event);
  p->exit_event = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_2ok_7Capture_17BaseCaptureMethod_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5width_1__get__(o);
}

static PyObject *__pyx_getprop_2ok_7Capture_17BaseCaptureMethod_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_6height_1__get__(o);
}

static PyObject *__pyx_getprop_2ok_7Capture_17BaseCaptureMethod__size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_17BaseCaptureMethod__size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_5_size_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_17BaseCaptureMethod_exit_event(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_17BaseCaptureMethod_exit_event(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_17BaseCaptureMethod_10exit_event_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_2ok_7Capture_BaseCaptureMethod[] = {
  {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"do_get_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_9do_get_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"draw_rectangle", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_11draw_rectangle, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clickable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_13clickable, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_15connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2ok_7Capture_BaseCaptureMethod[] = {
  {(char *)"width", __pyx_getprop_2ok_7Capture_17BaseCaptureMethod_width, 0, (char *)0, 0},
  {(char *)"height", __pyx_getprop_2ok_7Capture_17BaseCaptureMethod_height, 0, (char *)0, 0},
  {(char *)"_size", __pyx_getprop_2ok_7Capture_17BaseCaptureMethod__size, __pyx_setprop_2ok_7Capture_17BaseCaptureMethod__size, (char *)0, 0},
  {(char *)"exit_event", __pyx_getprop_2ok_7Capture_17BaseCaptureMethod_exit_event, __pyx_setprop_2ok_7Capture_17BaseCaptureMethod_exit_event, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_BaseCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod},
  {Py_tp_str, (void *)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_BaseCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_BaseCaptureMethod},
  {Py_tp_getset, (void *)__pyx_getsets_2ok_7Capture_BaseCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_17BaseCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_BaseCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_BaseCaptureMethod_spec = {
  "ok.Capture.BaseCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_BaseCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_BaseCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""BaseCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_BaseCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_BaseCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2ok_7Capture_BaseCaptureMethod, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_17BaseCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_BaseCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_BaseWindowsCaptureMethod __pyx_vtable_2ok_7Capture_BaseWindowsCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod;
  p->_hwnd_window = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_hwnd_window);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod(o);
}

static int __pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)o;
  e = __pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod(o, v, a); if (e) return e;
  if (p->_hwnd_window) {
    e = (*v)(p->_hwnd_window, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod *)o;
  __pyx_tp_clear_2ok_7Capture_BaseCaptureMethod(o);
  tmp = ((PyObject*)p->_hwnd_window);
  p->_hwnd_window = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_2ok_7Capture_24BaseWindowsCaptureMethod_hwnd_window(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_24BaseWindowsCaptureMethod_hwnd_window(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11hwnd_window_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_24BaseWindowsCaptureMethod__hwnd_window(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_24BaseWindowsCaptureMethod__hwnd_window(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_12_hwnd_window_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_2ok_7Capture_BaseWindowsCaptureMethod[] = {
  {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_3connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_abs_cords", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_5get_abs_cords, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clickable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_7clickable, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2ok_7Capture_BaseWindowsCaptureMethod[] = {
  {(char *)"hwnd_window", __pyx_getprop_2ok_7Capture_24BaseWindowsCaptureMethod_hwnd_window, __pyx_setprop_2ok_7Capture_24BaseWindowsCaptureMethod_hwnd_window, (char *)0, 0},
  {(char *)"_hwnd_window", __pyx_getprop_2ok_7Capture_24BaseWindowsCaptureMethod__hwnd_window, __pyx_setprop_2ok_7Capture_24BaseWindowsCaptureMethod__hwnd_window, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_BaseWindowsCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_str, (void *)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_getset, (void *)__pyx_getsets_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_BaseWindowsCaptureMethod_spec = {
  "ok.Capture.BaseWindowsCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_BaseWindowsCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_BaseWindowsCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""BaseWindowsCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_BaseWindowsCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_WindowsGraphicsCaptureMethod __pyx_vtable_2ok_7Capture_WindowsGraphicsCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_WindowsGraphicsCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_WindowsGraphicsCaptureMethod;
  p->last_frame = Py_None; Py_INCREF(Py_None);
  p->frame_pool = Py_None; Py_INCREF(Py_None);
  p->item = Py_None; Py_INCREF(Py_None);
  p->session = Py_None; Py_INCREF(Py_None);
  p->cputex = Py_None; Py_INCREF(Py_None);
  p->rtdevice = Py_None; Py_INCREF(Py_None);
  p->dxdevice = Py_None; Py_INCREF(Py_None);
  p->immediatedc = Py_None; Py_INCREF(Py_None);
  p->evtoken = Py_None; Py_INCREF(Py_None);
  p->last_size = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_WindowsGraphicsCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_WindowsGraphicsCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->last_frame);
  Py_CLEAR(p->frame_pool);
  Py_CLEAR(p->item);
  Py_CLEAR(p->session);
  Py_CLEAR(p->cputex);
  Py_CLEAR(p->rtdevice);
  Py_CLEAR(p->dxdevice);
  Py_CLEAR(p->immediatedc);
  Py_CLEAR(p->evtoken);
  Py_CLEAR(p->last_size);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod(o);
}

static int __pyx_tp_traverse_2ok_7Capture_WindowsGraphicsCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)o;
  e = __pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod(o, v, a); if (e) return e;
  if (p->last_frame) {
    e = (*v)(p->last_frame, a); if (e) return e;
  }
  if (p->frame_pool) {
    e = (*v)(p->frame_pool, a); if (e) return e;
  }
  if (p->item) {
    e = (*v)(p->item, a); if (e) return e;
  }
  if (p->session) {
    e = (*v)(p->session, a); if (e) return e;
  }
  if (p->cputex) {
    e = (*v)(p->cputex, a); if (e) return e;
  }
  if (p->rtdevice) {
    e = (*v)(p->rtdevice, a); if (e) return e;
  }
  if (p->dxdevice) {
    e = (*v)(p->dxdevice, a); if (e) return e;
  }
  if (p->immediatedc) {
    e = (*v)(p->immediatedc, a); if (e) return e;
  }
  if (p->evtoken) {
    e = (*v)(p->evtoken, a); if (e) return e;
  }
  if (p->last_size) {
    e = (*v)(p->last_size, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_WindowsGraphicsCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *)o;
  __pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod(o);
  tmp = ((PyObject*)p->last_frame);
  p->last_frame = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->frame_pool);
  p->frame_pool = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->item);
  p->item = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->session);
  p->session = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cputex);
  p->cputex = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rtdevice);
  p->rtdevice = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dxdevice);
  p->dxdevice = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->immediatedc);
  p->immediatedc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->evtoken);
  p->evtoken = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->last_size);
  p->last_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_2ok_7Capture_28WindowsGraphicsCaptureMethod_hwnd_window(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_28WindowsGraphicsCaptureMethod_hwnd_window(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_11hwnd_window_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_2ok_7Capture_WindowsGraphicsCaptureMethod[] = {
  {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_3connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start_or_stop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_5start_or_stop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_device", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_7create_device, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_9close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reset_framepool", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_13reset_framepool, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"crop_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_15crop_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2ok_7Capture_WindowsGraphicsCaptureMethod[] = {
  {(char *)"hwnd_window", __pyx_getprop_2ok_7Capture_28WindowsGraphicsCaptureMethod_hwnd_window, __pyx_setprop_2ok_7Capture_28WindowsGraphicsCaptureMethod_hwnd_window, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_WindowsGraphicsCaptureMethod},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_WindowsGraphicsCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_WindowsGraphicsCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_WindowsGraphicsCaptureMethod},
  {Py_tp_getset, (void *)__pyx_getsets_2ok_7Capture_WindowsGraphicsCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_WindowsGraphicsCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod_spec = {
  "ok.Capture.WindowsGraphicsCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""WindowsGraphicsCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_WindowsGraphicsCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_WindowsGraphicsCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_WindowsGraphicsCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_WindowsGraphicsCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2ok_7Capture_WindowsGraphicsCaptureMethod, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_28WindowsGraphicsCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_WindowsGraphicsCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_BitBltCaptureMethod __pyx_vtable_2ok_7Capture_BitBltCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_BitBltCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_BitBltCaptureMethod;
  return o;
}

static PyMethodDef __pyx_methods_2ok_7Capture_BitBltCaptureMethod[] = {
  {"test_exclusive_full_screen", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_3test_exclusive_full_screen, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"test_is_not_pure_color", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_5test_is_not_pure_color, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_19BitBltCaptureMethod_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_BitBltCaptureMethod_slots[] = {
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_BitBltCaptureMethod},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_BitBltCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_BitBltCaptureMethod_spec = {
  "ok.Capture.BitBltCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_BitBltCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_BitBltCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""BitBltCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_BitBltCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_BitBltCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_2ok_7Capture_HwndWindow(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_2ok_7Capture_HwndWindow *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_2ok_7Capture_HwndWindow *)o);
  p->app_exit_event = Py_None; Py_INCREF(Py_None);
  p->stop_event = Py_None; Py_INCREF(Py_None);
  p->hwnd = Py_None; Py_INCREF(Py_None);
  p->mute_option = Py_None; Py_INCREF(Py_None);
  p->thread = Py_None; Py_INCREF(Py_None);
  p->device_manager = Py_None; Py_INCREF(Py_None);
  p->exe_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->title = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->exe_full_path = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->hwnd_class = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_hwnd_title = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->monitors_bounds = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_HwndWindow(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_HwndWindow *p = (struct __pyx_obj_2ok_7Capture_HwndWindow *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_HwndWindow) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->app_exit_event);
  Py_CLEAR(p->stop_event);
  Py_CLEAR(p->hwnd);
  Py_CLEAR(p->mute_option);
  Py_CLEAR(p->thread);
  Py_CLEAR(p->device_manager);
  Py_CLEAR(p->exe_name);
  Py_CLEAR(p->title);
  Py_CLEAR(p->exe_full_path);
  Py_CLEAR(p->hwnd_class);
  Py_CLEAR(p->_hwnd_title);
  Py_CLEAR(p->monitors_bounds);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_2ok_7Capture_HwndWindow(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_HwndWindow *p = (struct __pyx_obj_2ok_7Capture_HwndWindow *)o;
  if (p->app_exit_event) {
    e = (*v)(p->app_exit_event, a); if (e) return e;
  }
  if (p->stop_event) {
    e = (*v)(p->stop_event, a); if (e) return e;
  }
  if (p->hwnd) {
    e = (*v)(p->hwnd, a); if (e) return e;
  }
  if (p->mute_option) {
    e = (*v)(p->mute_option, a); if (e) return e;
  }
  if (p->thread) {
    e = (*v)(p->thread, a); if (e) return e;
  }
  if (p->device_manager) {
    e = (*v)(p->device_manager, a); if (e) return e;
  }
  if (p->monitors_bounds) {
    e = (*v)(p->monitors_bounds, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_HwndWindow(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_HwndWindow *p = (struct __pyx_obj_2ok_7Capture_HwndWindow *)o;
  tmp = ((PyObject*)p->app_exit_event);
  p->app_exit_event = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->stop_event);
  p->stop_event = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->hwnd);
  p->hwnd = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mute_option);
  p->mute_option = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->thread);
  p->thread = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->device_manager);
  p->device_manager = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->monitors_bounds);
  p->monitors_bounds = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_hwnd_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_title_1__get__(o);
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_app_exit_event(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_app_exit_event(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_14app_exit_event_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_stop_event(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_stop_event(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_10stop_event_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_hwnd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_hwnd(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_4hwnd_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_mute_option(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_mute_option(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_11mute_option_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_thread(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_6thread_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_thread(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_6thread_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_6thread_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_device_manager(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_device_manager(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_14device_manager_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_exe_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_exe_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_8exe_name_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_5title_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_title(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_5title_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_5title_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_exe_full_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_exe_full_path(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_13exe_full_path_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_hwnd_class(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_hwnd_class(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_10hwnd_class_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow__hwnd_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow__hwnd_title(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_11_hwnd_title_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_player_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_9player_id_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_player_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_9player_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_window_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_12window_width_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_window_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_12window_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_window_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_13window_height_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_window_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_13window_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_1x_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_1y_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_5width_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_6height_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_frame_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_11frame_width_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_frame_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_11frame_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_frame_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_12frame_height_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_frame_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_12frame_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_real_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_10real_width_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_real_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_10real_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_real_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_11real_height_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_real_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_11real_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_real_x_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_13real_x_offset_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_real_x_offset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_13real_x_offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_real_y_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_13real_y_offset_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_real_y_offset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_13real_y_offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_visible(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_7visible_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_visible(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_7visible_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_6exists_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_6exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_pos_valid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_9pos_valid_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_pos_valid(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_9pos_valid_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_scaling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_7scaling_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_scaling(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_7scaling_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_frame_aspect_ratio(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_frame_aspect_ratio(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_18frame_aspect_ratio_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2ok_7Capture_10HwndWindow_monitors_bounds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_1__get__(o);
}

static int __pyx_setprop_2ok_7Capture_10HwndWindow_monitors_bounds(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_3__set__(o, v);
  }
  else {
    return __pyx_pw_2ok_7Capture_10HwndWindow_15monitors_bounds_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_2ok_7Capture_HwndWindow[] = {
  {"validate_mute_config", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_3validate_mute_config, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"stop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_5stop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"update_window", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_7update_window, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"update_frame_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_9update_frame_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"update_window_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_11update_window_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_abs_cords", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_13get_abs_cords, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"do_update_window_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_15do_update_window_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"handle_mute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_17handle_mute, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"frame_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_19frame_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_10HwndWindow_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2ok_7Capture_HwndWindow[] = {
  {(char *)"hwnd_title", __pyx_getprop_2ok_7Capture_10HwndWindow_hwnd_title, 0, (char *)0, 0},
  {(char *)"app_exit_event", __pyx_getprop_2ok_7Capture_10HwndWindow_app_exit_event, __pyx_setprop_2ok_7Capture_10HwndWindow_app_exit_event, (char *)0, 0},
  {(char *)"stop_event", __pyx_getprop_2ok_7Capture_10HwndWindow_stop_event, __pyx_setprop_2ok_7Capture_10HwndWindow_stop_event, (char *)0, 0},
  {(char *)"hwnd", __pyx_getprop_2ok_7Capture_10HwndWindow_hwnd, __pyx_setprop_2ok_7Capture_10HwndWindow_hwnd, (char *)0, 0},
  {(char *)"mute_option", __pyx_getprop_2ok_7Capture_10HwndWindow_mute_option, __pyx_setprop_2ok_7Capture_10HwndWindow_mute_option, (char *)0, 0},
  {(char *)"thread", __pyx_getprop_2ok_7Capture_10HwndWindow_thread, __pyx_setprop_2ok_7Capture_10HwndWindow_thread, (char *)0, 0},
  {(char *)"device_manager", __pyx_getprop_2ok_7Capture_10HwndWindow_device_manager, __pyx_setprop_2ok_7Capture_10HwndWindow_device_manager, (char *)0, 0},
  {(char *)"exe_name", __pyx_getprop_2ok_7Capture_10HwndWindow_exe_name, __pyx_setprop_2ok_7Capture_10HwndWindow_exe_name, (char *)0, 0},
  {(char *)"title", __pyx_getprop_2ok_7Capture_10HwndWindow_title, __pyx_setprop_2ok_7Capture_10HwndWindow_title, (char *)0, 0},
  {(char *)"exe_full_path", __pyx_getprop_2ok_7Capture_10HwndWindow_exe_full_path, __pyx_setprop_2ok_7Capture_10HwndWindow_exe_full_path, (char *)0, 0},
  {(char *)"hwnd_class", __pyx_getprop_2ok_7Capture_10HwndWindow_hwnd_class, __pyx_setprop_2ok_7Capture_10HwndWindow_hwnd_class, (char *)0, 0},
  {(char *)"_hwnd_title", __pyx_getprop_2ok_7Capture_10HwndWindow__hwnd_title, __pyx_setprop_2ok_7Capture_10HwndWindow__hwnd_title, (char *)0, 0},
  {(char *)"player_id", __pyx_getprop_2ok_7Capture_10HwndWindow_player_id, __pyx_setprop_2ok_7Capture_10HwndWindow_player_id, (char *)0, 0},
  {(char *)"window_width", __pyx_getprop_2ok_7Capture_10HwndWindow_window_width, __pyx_setprop_2ok_7Capture_10HwndWindow_window_width, (char *)0, 0},
  {(char *)"window_height", __pyx_getprop_2ok_7Capture_10HwndWindow_window_height, __pyx_setprop_2ok_7Capture_10HwndWindow_window_height, (char *)0, 0},
  {(char *)"x", __pyx_getprop_2ok_7Capture_10HwndWindow_x, __pyx_setprop_2ok_7Capture_10HwndWindow_x, (char *)0, 0},
  {(char *)"y", __pyx_getprop_2ok_7Capture_10HwndWindow_y, __pyx_setprop_2ok_7Capture_10HwndWindow_y, (char *)0, 0},
  {(char *)"width", __pyx_getprop_2ok_7Capture_10HwndWindow_width, __pyx_setprop_2ok_7Capture_10HwndWindow_width, (char *)0, 0},
  {(char *)"height", __pyx_getprop_2ok_7Capture_10HwndWindow_height, __pyx_setprop_2ok_7Capture_10HwndWindow_height, (char *)0, 0},
  {(char *)"frame_width", __pyx_getprop_2ok_7Capture_10HwndWindow_frame_width, __pyx_setprop_2ok_7Capture_10HwndWindow_frame_width, (char *)0, 0},
  {(char *)"frame_height", __pyx_getprop_2ok_7Capture_10HwndWindow_frame_height, __pyx_setprop_2ok_7Capture_10HwndWindow_frame_height, (char *)0, 0},
  {(char *)"real_width", __pyx_getprop_2ok_7Capture_10HwndWindow_real_width, __pyx_setprop_2ok_7Capture_10HwndWindow_real_width, (char *)0, 0},
  {(char *)"real_height", __pyx_getprop_2ok_7Capture_10HwndWindow_real_height, __pyx_setprop_2ok_7Capture_10HwndWindow_real_height, (char *)0, 0},
  {(char *)"real_x_offset", __pyx_getprop_2ok_7Capture_10HwndWindow_real_x_offset, __pyx_setprop_2ok_7Capture_10HwndWindow_real_x_offset, (char *)0, 0},
  {(char *)"real_y_offset", __pyx_getprop_2ok_7Capture_10HwndWindow_real_y_offset, __pyx_setprop_2ok_7Capture_10HwndWindow_real_y_offset, (char *)0, 0},
  {(char *)"visible", __pyx_getprop_2ok_7Capture_10HwndWindow_visible, __pyx_setprop_2ok_7Capture_10HwndWindow_visible, (char *)0, 0},
  {(char *)"exists", __pyx_getprop_2ok_7Capture_10HwndWindow_exists, __pyx_setprop_2ok_7Capture_10HwndWindow_exists, (char *)0, 0},
  {(char *)"pos_valid", __pyx_getprop_2ok_7Capture_10HwndWindow_pos_valid, __pyx_setprop_2ok_7Capture_10HwndWindow_pos_valid, (char *)0, 0},
  {(char *)"scaling", __pyx_getprop_2ok_7Capture_10HwndWindow_scaling, __pyx_setprop_2ok_7Capture_10HwndWindow_scaling, (char *)0, 0},
  {(char *)"frame_aspect_ratio", __pyx_getprop_2ok_7Capture_10HwndWindow_frame_aspect_ratio, __pyx_setprop_2ok_7Capture_10HwndWindow_frame_aspect_ratio, (char *)0, 0},
  {(char *)"monitors_bounds", __pyx_getprop_2ok_7Capture_10HwndWindow_monitors_bounds, __pyx_setprop_2ok_7Capture_10HwndWindow_monitors_bounds, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_HwndWindow_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_HwndWindow},
  {Py_tp_str, (void *)__pyx_pw_2ok_7Capture_10HwndWindow_21__str__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_HwndWindow},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_HwndWindow},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_HwndWindow},
  {Py_tp_getset, (void *)__pyx_getsets_2ok_7Capture_HwndWindow},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_10HwndWindow_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_HwndWindow},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_HwndWindow_spec = {
  "ok.Capture.HwndWindow",
  sizeof(struct __pyx_obj_2ok_7Capture_HwndWindow),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_HwndWindow_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_HwndWindow = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""HwndWindow", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_HwndWindow), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_HwndWindow, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_2ok_7Capture_10HwndWindow_21__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_HwndWindow, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_HwndWindow, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_HwndWindow, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2ok_7Capture_HwndWindow, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_10HwndWindow_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_HwndWindow, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_DesktopDuplicationCaptureMethod __pyx_vtable_2ok_7Capture_DesktopDuplicationCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_DesktopDuplicationCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseWindowsCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_DesktopDuplicationCaptureMethod;
  p->desktop_duplication = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_DesktopDuplicationCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_DesktopDuplicationCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->desktop_duplication);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_2ok_7Capture_BaseWindowsCaptureMethod(o);
}

static int __pyx_tp_traverse_2ok_7Capture_DesktopDuplicationCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)o;
  e = __pyx_tp_traverse_2ok_7Capture_BaseWindowsCaptureMethod(o, v, a); if (e) return e;
  if (p->desktop_duplication) {
    e = (*v)(p->desktop_duplication, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_DesktopDuplicationCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *)o;
  __pyx_tp_clear_2ok_7Capture_BaseWindowsCaptureMethod(o);
  tmp = ((PyObject*)p->desktop_duplication);
  p->desktop_duplication = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_2ok_7Capture_DesktopDuplicationCaptureMethod[] = {
  {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_5close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_DesktopDuplicationCaptureMethod},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_DesktopDuplicationCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_DesktopDuplicationCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_DesktopDuplicationCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_DesktopDuplicationCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod_spec = {
  "ok.Capture.DesktopDuplicationCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""DesktopDuplicationCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_DesktopDuplicationCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_24BaseWindowsCaptureMethod_9__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_DesktopDuplicationCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_DesktopDuplicationCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_DesktopDuplicationCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_31DesktopDuplicationCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_DesktopDuplicationCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_ADBCaptureMethod __pyx_vtable_2ok_7Capture_ADBCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_ADBCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_ADBCaptureMethod;
  p->device_manager = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_ADBCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_ADBCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->device_manager);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod(o);
}

static int __pyx_tp_traverse_2ok_7Capture_ADBCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)o;
  e = __pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod(o, v, a); if (e) return e;
  if (p->device_manager) {
    e = (*v)(p->device_manager, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_ADBCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *)o;
  __pyx_tp_clear_2ok_7Capture_BaseCaptureMethod(o);
  tmp = ((PyObject*)p->device_manager);
  p->device_manager = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_2ok_7Capture_ADBCaptureMethod[] = {
  {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_5connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_ADBCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_ADBCaptureMethod},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_ADBCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_ADBCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_ADBCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_16ADBCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_ADBCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_ADBCaptureMethod_spec = {
  "ok.Capture.ADBCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_ADBCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_ADBCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""ADBCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_ADBCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_ADBCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_ADBCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_ADBCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_16ADBCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_ADBCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_ImageCaptureMethod __pyx_vtable_2ok_7Capture_ImageCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_ImageCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_ImageCaptureMethod;
  p->images = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_ImageCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_ImageCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->images);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod(o);
}

static int __pyx_tp_traverse_2ok_7Capture_ImageCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)o;
  e = __pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod(o, v, a); if (e) return e;
  if (p->images) {
    e = (*v)(p->images, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_ImageCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *)o;
  __pyx_tp_clear_2ok_7Capture_BaseCaptureMethod(o);
  tmp = ((PyObject*)p->images);
  p->images = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_2ok_7Capture_ImageCaptureMethod[] = {
  {"set_images", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_3set_images, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_7connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_ImageCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_ImageCaptureMethod},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_ImageCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_ImageCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_ImageCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_18ImageCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_ImageCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_ImageCaptureMethod_spec = {
  "ok.Capture.ImageCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_ImageCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_ImageCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""ImageCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_ImageCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_ImageCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_ImageCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_ImageCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_18ImageCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_ImageCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2ok_7Capture_NemuIpcCaptureMethod __pyx_vtable_2ok_7Capture_NemuIpcCaptureMethod;

static PyObject *__pyx_tp_new_2ok_7Capture_NemuIpcCaptureMethod(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *p;
  PyObject *o = __pyx_tp_new_2ok_7Capture_BaseCaptureMethod(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2ok_7Capture_BaseCaptureMethod*)__pyx_vtabptr_2ok_7Capture_NemuIpcCaptureMethod;
  p->device_manager = Py_None; Py_INCREF(Py_None);
  p->nemu_impl = Py_None; Py_INCREF(Py_None);
  p->emulator = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture_NemuIpcCaptureMethod(PyObject *o) {
  struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture_NemuIpcCaptureMethod) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->device_manager);
  Py_CLEAR(p->nemu_impl);
  Py_CLEAR(p->emulator);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_2ok_7Capture_BaseCaptureMethod(o);
}

static int __pyx_tp_traverse_2ok_7Capture_NemuIpcCaptureMethod(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)o;
  e = __pyx_tp_traverse_2ok_7Capture_BaseCaptureMethod(o, v, a); if (e) return e;
  if (p->device_manager) {
    e = (*v)(p->device_manager, a); if (e) return e;
  }
  if (p->nemu_impl) {
    e = (*v)(p->nemu_impl, a); if (e) return e;
  }
  if (p->emulator) {
    e = (*v)(p->emulator, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture_NemuIpcCaptureMethod(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *p = (struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *)o;
  __pyx_tp_clear_2ok_7Capture_BaseCaptureMethod(o);
  tmp = ((PyObject*)p->device_manager);
  p->device_manager = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nemu_impl);
  p->nemu_impl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->emulator);
  p->emulator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_2ok_7Capture_NemuIpcCaptureMethod[] = {
  {"update_emulator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_3update_emulator, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"init_nemu", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_5init_nemu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"base_folder", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_7base_folder, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"check_mumu_app_keep_alive_400", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_9check_mumu_app_keep_alive_400, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2ok_7Capture_20NemuIpcCaptureMethod_8check_mumu_app_keep_alive_400},
  {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_11close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"connected", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_15connected, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture_NemuIpcCaptureMethod_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture_NemuIpcCaptureMethod},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture_NemuIpcCaptureMethod},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture_NemuIpcCaptureMethod},
  {Py_tp_methods, (void *)__pyx_methods_2ok_7Capture_NemuIpcCaptureMethod},
  {Py_tp_init, (void *)__pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture_NemuIpcCaptureMethod},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture_NemuIpcCaptureMethod_spec = {
  "ok.Capture.NemuIpcCaptureMethod",
  sizeof(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2ok_7Capture_NemuIpcCaptureMethod_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture_NemuIpcCaptureMethod = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""NemuIpcCaptureMethod", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture_NemuIpcCaptureMethod, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_2ok_7Capture_17BaseCaptureMethod_7__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture_NemuIpcCaptureMethod, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture_NemuIpcCaptureMethod, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2ok_7Capture_NemuIpcCaptureMethod, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2ok_7Capture_20NemuIpcCaptureMethod_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture_NemuIpcCaptureMethod, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *__pyx_freelist_2ok_7Capture___pyx_scope_struct__find_hwnd[8];
static int __pyx_freecount_2ok_7Capture___pyx_scope_struct__find_hwnd = 0;
#endif

static PyObject *__pyx_tp_new_2ok_7Capture___pyx_scope_struct__find_hwnd(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_2ok_7Capture___pyx_scope_struct__find_hwnd > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd)))) {
    o = (PyObject*)__pyx_freelist_2ok_7Capture___pyx_scope_struct__find_hwnd[--__pyx_freecount_2ok_7Capture___pyx_scope_struct__find_hwnd];
    memset(o, 0, sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct__find_hwnd(PyObject *o) {
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *p = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct__find_hwnd) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_class_name);
  Py_CLEAR(p->__pyx_v_exe_name);
  Py_CLEAR(p->__pyx_v_player_id);
  Py_CLEAR(p->__pyx_v_results);
  Py_CLEAR(p->__pyx_v_title);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_2ok_7Capture___pyx_scope_struct__find_hwnd < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd)))) {
    __pyx_freelist_2ok_7Capture___pyx_scope_struct__find_hwnd[__pyx_freecount_2ok_7Capture___pyx_scope_struct__find_hwnd++] = ((struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_2ok_7Capture___pyx_scope_struct__find_hwnd(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *p = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *)o;
  if (p->__pyx_v_class_name) {
    e = (*v)(p->__pyx_v_class_name, a); if (e) return e;
  }
  if (p->__pyx_v_exe_name) {
    e = (*v)(p->__pyx_v_exe_name, a); if (e) return e;
  }
  if (p->__pyx_v_player_id) {
    e = (*v)(p->__pyx_v_player_id, a); if (e) return e;
  }
  if (p->__pyx_v_results) {
    e = (*v)(p->__pyx_v_results, a); if (e) return e;
  }
  if (p->__pyx_v_title) {
    e = (*v)(p->__pyx_v_title, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture___pyx_scope_struct__find_hwnd(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *p = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd *)o;
  tmp = ((PyObject*)p->__pyx_v_class_name);
  p->__pyx_v_class_name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_exe_name);
  p->__pyx_v_exe_name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_player_id);
  p->__pyx_v_player_id = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_results);
  p->__pyx_v_results = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_title);
  p->__pyx_v_title = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct__find_hwnd},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture___pyx_scope_struct__find_hwnd},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture___pyx_scope_struct__find_hwnd},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture___pyx_scope_struct__find_hwnd},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd_spec = {
  "ok.Capture.__pyx_scope_struct__find_hwnd",
  sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""__pyx_scope_struct__find_hwnd", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct__find_hwnd), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct__find_hwnd, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture___pyx_scope_struct__find_hwnd, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture___pyx_scope_struct__find_hwnd, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture___pyx_scope_struct__find_hwnd, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *__pyx_freelist_2ok_7Capture___pyx_scope_struct_1_enum_child_windows[8];
static int __pyx_freecount_2ok_7Capture___pyx_scope_struct_1_enum_child_windows = 0;
#endif

static PyObject *__pyx_tp_new_2ok_7Capture___pyx_scope_struct_1_enum_child_windows(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_2ok_7Capture___pyx_scope_struct_1_enum_child_windows > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows)))) {
    o = (PyObject*)__pyx_freelist_2ok_7Capture___pyx_scope_struct_1_enum_child_windows[--__pyx_freecount_2ok_7Capture___pyx_scope_struct_1_enum_child_windows];
    memset(o, 0, sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct_1_enum_child_windows(PyObject *o) {
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *p = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct_1_enum_child_windows) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_biggest);
  Py_CLEAR(p->__pyx_v_frame_aspect_ratio);
  Py_CLEAR(p->__pyx_v_ratio_match);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_2ok_7Capture___pyx_scope_struct_1_enum_child_windows < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows)))) {
    __pyx_freelist_2ok_7Capture___pyx_scope_struct_1_enum_child_windows[__pyx_freecount_2ok_7Capture___pyx_scope_struct_1_enum_child_windows++] = ((struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_2ok_7Capture___pyx_scope_struct_1_enum_child_windows(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *p = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *)o;
  if (p->__pyx_v_biggest) {
    e = (*v)(p->__pyx_v_biggest, a); if (e) return e;
  }
  if (p->__pyx_v_frame_aspect_ratio) {
    e = (*v)(p->__pyx_v_frame_aspect_ratio, a); if (e) return e;
  }
  if (p->__pyx_v_ratio_match) {
    e = (*v)(p->__pyx_v_ratio_match, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2ok_7Capture___pyx_scope_struct_1_enum_child_windows(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *p = (struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows *)o;
  tmp = ((PyObject*)p->__pyx_v_biggest);
  p->__pyx_v_biggest = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_frame_aspect_ratio);
  p->__pyx_v_frame_aspect_ratio = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ratio_match);
  p->__pyx_v_ratio_match = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct_1_enum_child_windows},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2ok_7Capture___pyx_scope_struct_1_enum_child_windows},
  {Py_tp_clear, (void *)__pyx_tp_clear_2ok_7Capture___pyx_scope_struct_1_enum_child_windows},
  {Py_tp_new, (void *)__pyx_tp_new_2ok_7Capture___pyx_scope_struct_1_enum_child_windows},
  {0, 0},
};
static PyType_Spec __pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows_spec = {
  "ok.Capture.__pyx_scope_struct_1_enum_child_windows",
  sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows_slots,
};
#else

static PyTypeObject __pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""__pyx_scope_struct_1_enum_child_windows", /*tp_name*/
  sizeof(struct __pyx_obj_2ok_7Capture___pyx_scope_struct_1_enum_child_windows), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2ok_7Capture___pyx_scope_struct_1_enum_child_windows, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2ok_7Capture___pyx_scope_struct_1_enum_child_windows, /*tp_traverse*/
  __pyx_tp_clear_2ok_7Capture___pyx_scope_struct_1_enum_child_windows, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2ok_7Capture___pyx_scope_struct_1_enum_child_windows, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *__pyx_freelist___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y[8];
static int __pyx_freecount___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y = 0;
#endif

static PyObject *__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y)))) {
    o = (PyObject*)__pyx_freelist___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y[--__pyx_freecount___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y];
    memset(o, 0, sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y)))) {
    __pyx_freelist___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y[__pyx_freecount___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y++] = ((struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y},
  {Py_tp_new, (void *)__pyx_tp_new___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y},
  {0, 0},
};
static PyType_Spec __pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_spec = {
  "ok.Capture.__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y",
  sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_slots,
};
#else

static PyTypeObject __pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y = {
  PyVarObject_HEAD_INIT(0, 0)
  "ok.Capture.""__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y", /*tp_name*/
  sizeof(struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
    {&__pyx_kp_s_127_0_0_1, __pyx_k_127_0_0_1, sizeof(__pyx_k_127_0_0_1), 0, 0, 1, 0},
    {&__pyx_n_s_ADBBaseInteraction, __pyx_k_ADBBaseInteraction, sizeof(__pyx_k_ADBBaseInteraction), 0, 0, 1, 1},
    {&__pyx_n_s_ADBCaptureMethod, __pyx_k_ADBCaptureMethod, sizeof(__pyx_k_ADBCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_ADBCaptureMethod___reduce_cython, __pyx_k_ADBCaptureMethod___reduce_cython, sizeof(__pyx_k_ADBCaptureMethod___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ADBCaptureMethod___setstate_cyth, __pyx_k_ADBCaptureMethod___setstate_cyth, sizeof(__pyx_k_ADBCaptureMethod___setstate_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_ADBCaptureMethod_connected, __pyx_k_ADBCaptureMethod_connected, sizeof(__pyx_k_ADBCaptureMethod_connected), 0, 0, 1, 1},
    {&__pyx_n_s_ADBCaptureMethod_do_get_frame, __pyx_k_ADBCaptureMethod_do_get_frame, sizeof(__pyx_k_ADBCaptureMethod_do_get_frame), 0, 0, 1, 1},
    {&__pyx_n_s_ADBUTILS_ADB_PATH, __pyx_k_ADBUTILS_ADB_PATH, sizeof(__pyx_k_ADBUTILS_ADB_PATH), 0, 0, 1, 1},
    {&__pyx_kp_s_ADB_command_line_Capture, __pyx_k_ADB_command_line_Capture, sizeof(__pyx_k_ADB_command_line_Capture), 0, 0, 1, 0},
    {&__pyx_kp_s_About_10_15x_slower_than_BitBlt, __pyx_k_About_10_15x_slower_than_BitBlt, sizeof(__pyx_k_About_10_15x_slower_than_BitBlt), 0, 0, 1, 0},
    {&__pyx_n_s_AdbClient, __pyx_k_AdbClient, sizeof(__pyx_k_AdbClient), 0, 0, 1, 1},
    {&__pyx_n_s_AdbError, __pyx_k_AdbError, sizeof(__pyx_k_AdbError), 0, 0, 1, 1},
    {&__pyx_n_s_Alpha, __pyx_k_Alpha, sizeof(__pyx_k_Alpha), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySize, __pyx_k_ArraySize, sizeof(__pyx_k_ArraySize), 0, 0, 1, 1},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_n_s_AudioUtilities, __pyx_k_AudioUtilities, sizeof(__pyx_k_AudioUtilities), 0, 0, 1, 1},
    {&__pyx_n_s_B8G8R8A8UIntNormalized, __pyx_k_B8G8R8A8UIntNormalized, sizeof(__pyx_k_B8G8R8A8UIntNormalized), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod, __pyx_k_BaseCaptureMethod, sizeof(__pyx_k_BaseCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod___reduce_cytho, __pyx_k_BaseCaptureMethod___reduce_cytho, sizeof(__pyx_k_BaseCaptureMethod___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod___setstate_cyt, __pyx_k_BaseCaptureMethod___setstate_cyt, sizeof(__pyx_k_BaseCaptureMethod___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod_clickable, __pyx_k_BaseCaptureMethod_clickable, sizeof(__pyx_k_BaseCaptureMethod_clickable), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod_close, __pyx_k_BaseCaptureMethod_close, sizeof(__pyx_k_BaseCaptureMethod_close), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod_connected, __pyx_k_BaseCaptureMethod_connected, sizeof(__pyx_k_BaseCaptureMethod_connected), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod_do_get_frame, __pyx_k_BaseCaptureMethod_do_get_frame, sizeof(__pyx_k_BaseCaptureMethod_do_get_frame), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod_draw_rectangle, __pyx_k_BaseCaptureMethod_draw_rectangle, sizeof(__pyx_k_BaseCaptureMethod_draw_rectangle), 0, 0, 1, 1},
    {&__pyx_n_s_BaseCaptureMethod_get_frame, __pyx_k_BaseCaptureMethod_get_frame, sizeof(__pyx_k_BaseCaptureMethod_get_frame), 0, 0, 1, 1},
    {&__pyx_n_s_BaseWindowsCaptureMethod, __pyx_k_BaseWindowsCaptureMethod, sizeof(__pyx_k_BaseWindowsCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_BaseWindowsCaptureMethod___reduc, __pyx_k_BaseWindowsCaptureMethod___reduc, sizeof(__pyx_k_BaseWindowsCaptureMethod___reduc), 0, 0, 1, 1},
    {&__pyx_n_s_BaseWindowsCaptureMethod___setst, __pyx_k_BaseWindowsCaptureMethod___setst, sizeof(__pyx_k_BaseWindowsCaptureMethod___setst), 0, 0, 1, 1},
    {&__pyx_n_s_BaseWindowsCaptureMethod_clickab, __pyx_k_BaseWindowsCaptureMethod_clickab, sizeof(__pyx_k_BaseWindowsCaptureMethod_clickab), 0, 0, 1, 1},
    {&__pyx_n_s_BaseWindowsCaptureMethod_connect, __pyx_k_BaseWindowsCaptureMethod_connect, sizeof(__pyx_k_BaseWindowsCaptureMethod_connect), 0, 0, 1, 1},
    {&__pyx_n_s_BaseWindowsCaptureMethod_get_abs, __pyx_k_BaseWindowsCaptureMethod_get_abs, sizeof(__pyx_k_BaseWindowsCaptureMethod_get_abs), 0, 0, 1, 1},
    {&__pyx_n_s_BindFlags, __pyx_k_BindFlags, sizeof(__pyx_k_BindFlags), 0, 0, 1, 1},
    {&__pyx_n_s_BitBlt, __pyx_k_BitBlt, sizeof(__pyx_k_BitBlt), 0, 0, 1, 1},
    {&__pyx_n_s_BitBltCaptureMethod, __pyx_k_BitBltCaptureMethod, sizeof(__pyx_k_BitBltCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_BitBltCaptureMethod___reduce_cyt, __pyx_k_BitBltCaptureMethod___reduce_cyt, sizeof(__pyx_k_BitBltCaptureMethod___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_BitBltCaptureMethod___setstate_c, __pyx_k_BitBltCaptureMethod___setstate_c, sizeof(__pyx_k_BitBltCaptureMethod___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_BitBltCaptureMethod_do_get_frame, __pyx_k_BitBltCaptureMethod_do_get_frame, sizeof(__pyx_k_BitBltCaptureMethod_do_get_frame), 0, 0, 1, 1},
    {&__pyx_n_s_BitBltCaptureMethod_test_exclusi, __pyx_k_BitBltCaptureMethod_test_exclusi, sizeof(__pyx_k_BitBltCaptureMethod_test_exclusi), 0, 0, 1, 1},
    {&__pyx_n_s_BitBltCaptureMethod_test_is_not, __pyx_k_BitBltCaptureMethod_test_is_not, sizeof(__pyx_k_BitBltCaptureMethod_test_is_not), 0, 0, 1, 1},
    {&__pyx_n_s_Blue, __pyx_k_Blue, sizeof(__pyx_k_Blue), 0, 0, 1, 1},
    {&__pyx_n_s_COLOR_RGB2BGR, __pyx_k_COLOR_RGB2BGR, sizeof(__pyx_k_COLOR_RGB2BGR), 0, 0, 1, 1},
    {&__pyx_n_s_CPUAccessFlags, __pyx_k_CPUAccessFlags, sizeof(__pyx_k_CPUAccessFlags), 0, 0, 1, 1},
    {&__pyx_n_s_CaptureException, __pyx_k_CaptureException, sizeof(__pyx_k_CaptureException), 0, 0, 1, 1},
    {&__pyx_n_s_Channels, __pyx_k_Channels, sizeof(__pyx_k_Channels), 0, 0, 1, 1},
    {&__pyx_n_s_ClientToScreen, __pyx_k_ClientToScreen, sizeof(__pyx_k_ClientToScreen), 0, 0, 1, 1},
    {&__pyx_n_s_Close, __pyx_k_Close, sizeof(__pyx_k_Close), 0, 0, 1, 1},
    {&__pyx_n_s_ColorChannel, __pyx_k_ColorChannel, sizeof(__pyx_k_ColorChannel), 0, 0, 1, 1},
    {&__pyx_n_s_Config, __pyx_k_Config, sizeof(__pyx_k_Config), 0, 0, 1, 1},
    {&__pyx_n_s_ConfigOption, __pyx_k_ConfigOption, sizeof(__pyx_k_ConfigOption), 0, 0, 1, 1},
    {&__pyx_n_s_ContentSize, __pyx_k_ContentSize, sizeof(__pyx_k_ContentSize), 0, 0, 1, 1},
    {&__pyx_n_s_CopyResource, __pyx_k_CopyResource, sizeof(__pyx_k_CopyResource), 0, 0, 1, 1},
    {&__pyx_n_s_CreateBitmap, __pyx_k_CreateBitmap, sizeof(__pyx_k_CreateBitmap), 0, 0, 1, 1},
    {&__pyx_n_s_CreateCaptureSession, __pyx_k_CreateCaptureSession, sizeof(__pyx_k_CreateCaptureSession), 0, 0, 1, 1},
    {&__pyx_n_s_CreateCompatibleBitmap, __pyx_k_CreateCompatibleBitmap, sizeof(__pyx_k_CreateCompatibleBitmap), 0, 0, 1, 1},
    {&__pyx_n_s_CreateCompatibleDC, __pyx_k_CreateCompatibleDC, sizeof(__pyx_k_CreateCompatibleDC), 0, 0, 1, 1},
    {&__pyx_n_s_CreateDCFromHandle, __pyx_k_CreateDCFromHandle, sizeof(__pyx_k_CreateDCFromHandle), 0, 0, 1, 1},
    {&__pyx_n_s_CreateDirect3D11DeviceFromDXGIDe, __pyx_k_CreateDirect3D11DeviceFromDXGIDe, sizeof(__pyx_k_CreateDirect3D11DeviceFromDXGIDe), 0, 0, 1, 1},
    {&__pyx_n_s_CreateForWindow, __pyx_k_CreateForWindow, sizeof(__pyx_k_CreateForWindow), 0, 0, 1, 1},
    {&__pyx_n_s_CreateFreeThreaded, __pyx_k_CreateFreeThreaded, sizeof(__pyx_k_CreateFreeThreaded), 0, 0, 1, 1},
    {&__pyx_n_s_CreateTexture2D, __pyx_k_CreateTexture2D, sizeof(__pyx_k_CreateTexture2D), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11CreateDevice, __pyx_k_D3D11CreateDevice, sizeof(__pyx_k_D3D11CreateDevice), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11_CPU_ACCESS_READ, __pyx_k_D3D11_CPU_ACCESS_READ, sizeof(__pyx_k_D3D11_CPU_ACCESS_READ), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11_CREATE_DEVICE_BGRA_SUPPORT, __pyx_k_D3D11_CREATE_DEVICE_BGRA_SUPPORT, sizeof(__pyx_k_D3D11_CREATE_DEVICE_BGRA_SUPPORT), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11_MAP_READ, __pyx_k_D3D11_MAP_READ, sizeof(__pyx_k_D3D11_MAP_READ), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11_SDK_VERSION, __pyx_k_D3D11_SDK_VERSION, sizeof(__pyx_k_D3D11_SDK_VERSION), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11_TEXTURE2D_DESC, __pyx_k_D3D11_TEXTURE2D_DESC, sizeof(__pyx_k_D3D11_TEXTURE2D_DESC), 0, 0, 1, 1},
    {&__pyx_n_s_D3D11_USAGE_STAGING, __pyx_k_D3D11_USAGE_STAGING, sizeof(__pyx_k_D3D11_USAGE_STAGING), 0, 0, 1, 1},
    {&__pyx_n_s_D3D_DRIVER_TYPE_HARDWARE, __pyx_k_D3D_DRIVER_TYPE_HARDWARE, sizeof(__pyx_k_D3D_DRIVER_TYPE_HARDWARE), 0, 0, 1, 1},
    {&__pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS, __pyx_k_DWMWA_EXTENDED_FRAME_BOUNDS, sizeof(__pyx_k_DWMWA_EXTENDED_FRAME_BOUNDS), 0, 0, 1, 1},
    {&__pyx_n_s_DXGI_ERROR_DEVICE_REMOVED, __pyx_k_DXGI_ERROR_DEVICE_REMOVED, sizeof(__pyx_k_DXGI_ERROR_DEVICE_REMOVED), 0, 0, 1, 1},
    {&__pyx_n_s_DXGI_ERROR_DEVICE_RESET, __pyx_k_DXGI_ERROR_DEVICE_RESET, sizeof(__pyx_k_DXGI_ERROR_DEVICE_RESET), 0, 0, 1, 1},
    {&__pyx_n_s_DeleteDC, __pyx_k_DeleteDC, sizeof(__pyx_k_DeleteDC), 0, 0, 1, 1},
    {&__pyx_n_s_DeleteObject, __pyx_k_DeleteObject, sizeof(__pyx_k_DeleteObject), 0, 0, 1, 1},
    {&__pyx_n_s_DesktopDuplicationCaptureMethod, __pyx_k_DesktopDuplicationCaptureMethod, sizeof(__pyx_k_DesktopDuplicationCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_DesktopDuplicationCaptureMethod_2, __pyx_k_DesktopDuplicationCaptureMethod_2, sizeof(__pyx_k_DesktopDuplicationCaptureMethod_2), 0, 0, 1, 1},
    {&__pyx_n_s_DesktopDuplicationCaptureMethod_3, __pyx_k_DesktopDuplicationCaptureMethod_3, sizeof(__pyx_k_DesktopDuplicationCaptureMethod_3), 0, 0, 1, 1},
    {&__pyx_n_s_DesktopDuplicationCaptureMethod_4, __pyx_k_DesktopDuplicationCaptureMethod_4, sizeof(__pyx_k_DesktopDuplicationCaptureMethod_4), 0, 0, 1, 1},
    {&__pyx_n_s_DesktopDuplicationCaptureMethod_5, __pyx_k_DesktopDuplicationCaptureMethod_5, sizeof(__pyx_k_DesktopDuplicationCaptureMethod_5), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager, __pyx_k_DeviceManager, sizeof(__pyx_k_DeviceManager), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager___init, __pyx_k_DeviceManager___init, sizeof(__pyx_k_DeviceManager___init), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb, __pyx_k_DeviceManager_adb, sizeof(__pyx_k_DeviceManager_adb), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_check_in_front, __pyx_k_DeviceManager_adb_check_in_front, sizeof(__pyx_k_DeviceManager_adb_check_in_front), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_check_installe, __pyx_k_DeviceManager_adb_check_installe, sizeof(__pyx_k_DeviceManager_adb_check_installe), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_connect, __pyx_k_DeviceManager_adb_connect, sizeof(__pyx_k_DeviceManager_adb_connect), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_ensure_in_fron, __pyx_k_DeviceManager_adb_ensure_in_fron, sizeof(__pyx_k_DeviceManager_adb_ensure_in_fron), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_get_imei, __pyx_k_DeviceManager_adb_get_imei, sizeof(__pyx_k_DeviceManager_adb_get_imei), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_kill_server, __pyx_k_DeviceManager_adb_kill_server, sizeof(__pyx_k_DeviceManager_adb_kill_server), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_adb_start_package, __pyx_k_DeviceManager_adb_start_package, sizeof(__pyx_k_DeviceManager_adb_start_package), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_device, __pyx_k_DeviceManager_device, sizeof(__pyx_k_DeviceManager_device), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_device_connected, __pyx_k_DeviceManager_device_connected, sizeof(__pyx_k_DeviceManager_device_connected), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_do_refresh, __pyx_k_DeviceManager_do_refresh, sizeof(__pyx_k_DeviceManager_do_refresh), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_do_screencap, __pyx_k_DeviceManager_do_screencap, sizeof(__pyx_k_DeviceManager_do_screencap), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_do_start, __pyx_k_DeviceManager_do_start, sizeof(__pyx_k_DeviceManager_do_start), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_ensure_hwnd, __pyx_k_DeviceManager_ensure_hwnd, sizeof(__pyx_k_DeviceManager_ensure_hwnd), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_get_devices, __pyx_k_DeviceManager_get_devices, sizeof(__pyx_k_DeviceManager_get_devices), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_get_exe_path, __pyx_k_DeviceManager_get_exe_path, sizeof(__pyx_k_DeviceManager_get_exe_path), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_get_hwnd_name, __pyx_k_DeviceManager_get_hwnd_name, sizeof(__pyx_k_DeviceManager_get_hwnd_name), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_get_preferred_capt, __pyx_k_DeviceManager_get_preferred_capt, sizeof(__pyx_k_DeviceManager_get_preferred_capt), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_get_preferred_devi, __pyx_k_DeviceManager_get_preferred_devi, sizeof(__pyx_k_DeviceManager_get_preferred_devi), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_get_resolution, __pyx_k_DeviceManager_get_resolution, sizeof(__pyx_k_DeviceManager_get_resolution), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_height, __pyx_k_DeviceManager_height, sizeof(__pyx_k_DeviceManager_height), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_refresh, __pyx_k_DeviceManager_refresh, sizeof(__pyx_k_DeviceManager_refresh), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_refresh_emulators, __pyx_k_DeviceManager_refresh_emulators, sizeof(__pyx_k_DeviceManager_refresh_emulators), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_refresh_phones, __pyx_k_DeviceManager_refresh_phones, sizeof(__pyx_k_DeviceManager_refresh_phones), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_set_capture, __pyx_k_DeviceManager_set_capture, sizeof(__pyx_k_DeviceManager_set_capture), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_set_hwnd_name, __pyx_k_DeviceManager_set_hwnd_name, sizeof(__pyx_k_DeviceManager_set_hwnd_name), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_set_preferred_devi, __pyx_k_DeviceManager_set_preferred_devi, sizeof(__pyx_k_DeviceManager_set_preferred_devi), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_shell, __pyx_k_DeviceManager_shell, sizeof(__pyx_k_DeviceManager_shell), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_shell_device, __pyx_k_DeviceManager_shell_device, sizeof(__pyx_k_DeviceManager_shell_device), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_start, __pyx_k_DeviceManager_start, sizeof(__pyx_k_DeviceManager_start), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_try_kill_adb, __pyx_k_DeviceManager_try_kill_adb, sizeof(__pyx_k_DeviceManager_try_kill_adb), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_update_device_list, __pyx_k_DeviceManager_update_device_list, sizeof(__pyx_k_DeviceManager_update_device_list), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_update_pc_device, __pyx_k_DeviceManager_update_pc_device, sizeof(__pyx_k_DeviceManager_update_pc_device), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_update_resolution, __pyx_k_DeviceManager_update_resolution, sizeof(__pyx_k_DeviceManager_update_resolution), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_use_windows_captur, __pyx_k_DeviceManager_use_windows_captur, sizeof(__pyx_k_DeviceManager_use_windows_captur), 0, 0, 1, 1},
    {&__pyx_n_s_DeviceManager_width, __pyx_k_DeviceManager_width, sizeof(__pyx_k_DeviceManager_width), 0, 0, 1, 1},
    {&__pyx_kp_s_Device_is_none, __pyx_k_Device_is_none, sizeof(__pyx_k_Device_is_none), 0, 0, 1, 0},
    {&__pyx_n_s_Direct3D11CaptureFramePool, __pyx_k_Direct3D11CaptureFramePool, sizeof(__pyx_k_Direct3D11CaptureFramePool), 0, 0, 1, 1},
    {&__pyx_kp_s_Direct3D_Desktop_Duplication, __pyx_k_Direct3D_Desktop_Duplication, sizeof(__pyx_k_Direct3D_Desktop_Duplication), 0, 0, 1, 0},
    {&__pyx_n_s_DirectXPixelFormat, __pyx_k_DirectXPixelFormat, sizeof(__pyx_k_DirectXPixelFormat), 0, 0, 1, 1},
    {&__pyx_kp_s_Display_not_found, __pyx_k_Display_not_found, sizeof(__pyx_k_Display_not_found), 0, 0, 1, 0},
    {&__pyx_kp_s_Duplicates_the_desktop_using_Di, __pyx_k_Duplicates_the_desktop_using_Di, sizeof(__pyx_k_Duplicates_the_desktop_using_Di), 0, 0, 1, 0},
    {&__pyx_n_s_DwmGetWindowAttribute, __pyx_k_DwmGetWindowAttribute, sizeof(__pyx_k_DwmGetWindowAttribute), 0, 0, 1, 1},
    {&__pyx_n_s_EmulatorManager, __pyx_k_EmulatorManager, sizeof(__pyx_k_EmulatorManager), 0, 0, 1, 1},
    {&__pyx_n_s_EnumChildWindows, __pyx_k_EnumChildWindows, sizeof(__pyx_k_EnumChildWindows), 0, 0, 1, 1},
    {&__pyx_n_s_EnumDisplayMonitors, __pyx_k_EnumDisplayMonitors, sizeof(__pyx_k_EnumDisplayMonitors), 0, 0, 1, 1},
    {&__pyx_n_s_EnumWindows, __pyx_k_EnumWindows, sizeof(__pyx_k_EnumWindows), 0, 0, 1, 1},
    {&__pyx_n_s_Event, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
    {&__pyx_kp_u_Failed_to_check_check_mumu_app_k, __pyx_k_Failed_to_check_check_mumu_app_k, sizeof(__pyx_k_Failed_to_check_check_mumu_app_k), 0, 1, 0, 0},
    {&__pyx_kp_u_Failed_to_test_exclusive_full_sc, __pyx_k_Failed_to_test_exclusive_full_sc, sizeof(__pyx_k_Failed_to_test_exclusive_full_sc), 0, 1, 0, 0},
    {&__pyx_kp_u_Failed_to_test_is_not_pure_color, __pyx_k_Failed_to_test_is_not_pure_color, sizeof(__pyx_k_Failed_to_test_is_not_pure_color), 0, 1, 0, 0},
    {&__pyx_kp_u_Failed_to_test_is_not_pure_color_2, __pyx_k_Failed_to_test_is_not_pure_color_2, sizeof(__pyx_k_Failed_to_test_is_not_pure_color_2), 0, 1, 0, 0},
    {&__pyx_n_u_False, __pyx_k_False, sizeof(__pyx_k_False), 0, 1, 0, 1},
    {&__pyx_n_s_FileNotFoundError, __pyx_k_FileNotFoundError, sizeof(__pyx_k_FileNotFoundError), 0, 0, 1, 1},
    {&__pyx_n_s_FluentIcon, __pyx_k_FluentIcon, sizeof(__pyx_k_FluentIcon), 0, 0, 1, 1},
    {&__pyx_n_s_Format, __pyx_k_Format, sizeof(__pyx_k_Format), 0, 0, 1, 1},
    {&__pyx_n_s_GUID, __pyx_k_GUID, sizeof(__pyx_k_GUID), 0, 0, 1, 1},
    {&__pyx_kp_s_Game_Sound, __pyx_k_Game_Sound, sizeof(__pyx_k_Game_Sound), 0, 0, 1, 0},
    {&__pyx_n_s_GetActivationFactory, __pyx_k_GetActivationFactory, sizeof(__pyx_k_GetActivationFactory), 0, 0, 1, 1},
    {&__pyx_n_s_GetAllSessions, __pyx_k_GetAllSessions, sizeof(__pyx_k_GetAllSessions), 0, 0, 1, 1},
    {&__pyx_n_s_GetBitmapBits, __pyx_k_GetBitmapBits, sizeof(__pyx_k_GetBitmapBits), 0, 0, 1, 1},
    {&__pyx_n_s_GetClassName, __pyx_k_GetClassName, sizeof(__pyx_k_GetClassName), 0, 0, 1, 1},
    {&__pyx_n_s_GetClientRect, __pyx_k_GetClientRect, sizeof(__pyx_k_GetClientRect), 0, 0, 1, 1},
    {&__pyx_n_s_GetDesc, __pyx_k_GetDesc, sizeof(__pyx_k_GetDesc), 0, 0, 1, 1},
    {&__pyx_n_s_GetDpiForMonitor, __pyx_k_GetDpiForMonitor, sizeof(__pyx_k_GetDpiForMonitor), 0, 0, 1, 1},
    {&__pyx_n_s_GetForegroundWindow, __pyx_k_GetForegroundWindow, sizeof(__pyx_k_GetForegroundWindow), 0, 0, 1, 1},
    {&__pyx_n_s_GetHandle, __pyx_k_GetHandle, sizeof(__pyx_k_GetHandle), 0, 0, 1, 1},
    {&__pyx_n_s_GetInterface, __pyx_k_GetInterface, sizeof(__pyx_k_GetInterface), 0, 0, 1, 1},
    {&__pyx_n_s_GetMonitorInfo, __pyx_k_GetMonitorInfo, sizeof(__pyx_k_GetMonitorInfo), 0, 0, 1, 1},
    {&__pyx_n_s_GetMute, __pyx_k_GetMute, sizeof(__pyx_k_GetMute), 0, 0, 1, 1},
    {&__pyx_n_s_GetParent, __pyx_k_GetParent, sizeof(__pyx_k_GetParent), 0, 0, 1, 1},
    {&__pyx_n_s_GetSafeHdc, __pyx_k_GetSafeHdc, sizeof(__pyx_k_GetSafeHdc), 0, 0, 1, 1},
    {&__pyx_n_s_GetWindowDC, __pyx_k_GetWindowDC, sizeof(__pyx_k_GetWindowDC), 0, 0, 1, 1},
    {&__pyx_n_s_GetWindowRect, __pyx_k_GetWindowRect, sizeof(__pyx_k_GetWindowRect), 0, 0, 1, 1},
    {&__pyx_n_s_GetWindowText, __pyx_k_GetWindowText, sizeof(__pyx_k_GetWindowText), 0, 0, 1, 1},
    {&__pyx_n_s_GetWindowThreadProcessId, __pyx_k_GetWindowThreadProcessId, sizeof(__pyx_k_GetWindowThreadProcessId), 0, 0, 1, 1},
    {&__pyx_n_s_GraphicsCaptureItem, __pyx_k_GraphicsCaptureItem, sizeof(__pyx_k_GraphicsCaptureItem), 0, 0, 1, 1},
    {&__pyx_n_s_Green, __pyx_k_Green, sizeof(__pyx_k_Green), 0, 0, 1, 1},
    {&__pyx_n_s_Handler, __pyx_k_Handler, sizeof(__pyx_k_Handler), 0, 0, 1, 1},
    {&__pyx_n_s_Height, __pyx_k_Height, sizeof(__pyx_k_Height), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow, __pyx_k_HwndWindow, sizeof(__pyx_k_HwndWindow), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow___reduce_cython, __pyx_k_HwndWindow___reduce_cython, sizeof(__pyx_k_HwndWindow___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow___setstate_cython, __pyx_k_HwndWindow___setstate_cython, sizeof(__pyx_k_HwndWindow___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_do_update_window_size, __pyx_k_HwndWindow_do_update_window_size, sizeof(__pyx_k_HwndWindow_do_update_window_size), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_frame_ratio, __pyx_k_HwndWindow_frame_ratio, sizeof(__pyx_k_HwndWindow_frame_ratio), 0, 0, 1, 1},
    {&__pyx_kp_u_HwndWindow_frame_ratio_width, __pyx_k_HwndWindow_frame_ratio_width, sizeof(__pyx_k_HwndWindow_frame_ratio_width), 0, 1, 0, 0},
    {&__pyx_n_s_HwndWindow_get_abs_cords, __pyx_k_HwndWindow_get_abs_cords, sizeof(__pyx_k_HwndWindow_get_abs_cords), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_handle_mute, __pyx_k_HwndWindow_handle_mute, sizeof(__pyx_k_HwndWindow_handle_mute), 0, 0, 1, 1},
    {&__pyx_kp_u_HwndWindow_init_title, __pyx_k_HwndWindow_init_title, sizeof(__pyx_k_HwndWindow_init_title), 0, 1, 0, 0},
    {&__pyx_n_s_HwndWindow_stop, __pyx_k_HwndWindow_stop, sizeof(__pyx_k_HwndWindow_stop), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_update_frame_size, __pyx_k_HwndWindow_update_frame_size, sizeof(__pyx_k_HwndWindow_update_frame_size), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_update_window, __pyx_k_HwndWindow_update_window, sizeof(__pyx_k_HwndWindow_update_window), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_update_window_size, __pyx_k_HwndWindow_update_window_size, sizeof(__pyx_k_HwndWindow_update_window_size), 0, 0, 1, 1},
    {&__pyx_n_s_HwndWindow_validate_mute_config, __pyx_k_HwndWindow_validate_mute_config, sizeof(__pyx_k_HwndWindow_validate_mute_config), 0, 0, 1, 1},
    {&__pyx_n_s_ID3D11Device, __pyx_k_ID3D11Device, sizeof(__pyx_k_ID3D11Device), 0, 0, 1, 1},
    {&__pyx_n_s_ID3D11DeviceContext, __pyx_k_ID3D11DeviceContext, sizeof(__pyx_k_ID3D11DeviceContext), 0, 0, 1, 1},
    {&__pyx_n_s_ID3D11Texture2D, __pyx_k_ID3D11Texture2D, sizeof(__pyx_k_ID3D11Texture2D), 0, 0, 1, 1},
    {&__pyx_n_s_IDirect3DDevice, __pyx_k_IDirect3DDevice, sizeof(__pyx_k_IDirect3DDevice), 0, 0, 1, 1},
    {&__pyx_n_s_IDirect3DDxgiInterfaceAccess, __pyx_k_IDirect3DDxgiInterfaceAccess, sizeof(__pyx_k_IDirect3DDxgiInterfaceAccess), 0, 0, 1, 1},
    {&__pyx_n_s_IGraphicsCaptureItem, __pyx_k_IGraphicsCaptureItem, sizeof(__pyx_k_IGraphicsCaptureItem), 0, 0, 1, 1},
    {&__pyx_n_s_IGraphicsCaptureItemInterop, __pyx_k_IGraphicsCaptureItemInterop, sizeof(__pyx_k_IGraphicsCaptureItemInterop), 0, 0, 1, 1},
    {&__pyx_n_s_IInspectable, __pyx_k_IInspectable, sizeof(__pyx_k_IInspectable), 0, 0, 1, 1},
    {&__pyx_n_s_IMREAD_COLOR, __pyx_k_IMREAD_COLOR, sizeof(__pyx_k_IMREAD_COLOR), 0, 0, 1, 1},
    {&__pyx_n_s_IMREAD_UNCHANGED, __pyx_k_IMREAD_UNCHANGED, sizeof(__pyx_k_IMREAD_UNCHANGED), 0, 0, 1, 1},
    {&__pyx_n_s_ISimpleAudioVolume, __pyx_k_ISimpleAudioVolume, sizeof(__pyx_k_ISimpleAudioVolume), 0, 0, 1, 1},
    {&__pyx_n_s_ImageCaptureMethod, __pyx_k_ImageCaptureMethod, sizeof(__pyx_k_ImageCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_ImageCaptureMethod___reduce_cyth, __pyx_k_ImageCaptureMethod___reduce_cyth, sizeof(__pyx_k_ImageCaptureMethod___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_ImageCaptureMethod___setstate_cy, __pyx_k_ImageCaptureMethod___setstate_cy, sizeof(__pyx_k_ImageCaptureMethod___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_ImageCaptureMethod_connected, __pyx_k_ImageCaptureMethod_connected, sizeof(__pyx_k_ImageCaptureMethod_connected), 0, 0, 1, 1},
    {&__pyx_n_s_ImageCaptureMethod_do_get_frame, __pyx_k_ImageCaptureMethod_do_get_frame, sizeof(__pyx_k_ImageCaptureMethod_do_get_frame), 0, 0, 1, 1},
    {&__pyx_n_s_ImageCaptureMethod_set_images, __pyx_k_ImageCaptureMethod_set_images, sizeof(__pyx_k_ImageCaptureMethod_set_images), 0, 0, 1, 1},
    {&__pyx_n_s_ImageShape, __pyx_k_ImageShape, sizeof(__pyx_k_ImageShape), 0, 0, 1, 1},
    {&__pyx_kp_s_Image_capture_method, __pyx_k_Image_capture_method, sizeof(__pyx_k_Image_capture_method), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_k_Incompatible_checksums_0x_x_vs_0_3, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_3), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4, __pyx_k_Incompatible_checksums_0x_x_vs_0_4, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_4), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5, __pyx_k_Incompatible_checksums_0x_x_vs_0_5, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_5), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6, __pyx_k_Incompatible_checksums_0x_x_vs_0_6, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_6), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7, __pyx_k_Incompatible_checksums_0x_x_vs_0_7, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_7), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8, __pyx_k_Incompatible_checksums_0x_x_vs_0_8, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_8), 0, 0, 1, 0},
    {&__pyx_n_s_IntEnum, __pyx_k_IntEnum, sizeof(__pyx_k_IntEnum), 0, 0, 1, 1},
    {&__pyx_n_s_IsBorderRequired, __pyx_k_IsBorderRequired, sizeof(__pyx_k_IsBorderRequired), 0, 0, 1, 1},
    {&__pyx_n_s_IsCursorCaptureEnabled, __pyx_k_IsCursorCaptureEnabled, sizeof(__pyx_k_IsCursorCaptureEnabled), 0, 0, 1, 1},
    {&__pyx_n_s_IsIconic, __pyx_k_IsIconic, sizeof(__pyx_k_IsIconic), 0, 0, 1, 1},
    {&__pyx_n_s_IsWindow, __pyx_k_IsWindow, sizeof(__pyx_k_IsWindow), 0, 0, 1, 1},
    {&__pyx_n_s_IsWindowEnabled, __pyx_k_IsWindowEnabled, sizeof(__pyx_k_IsWindowEnabled), 0, 0, 1, 1},
    {&__pyx_n_s_IsWindowVisible, __pyx_k_IsWindowVisible, sizeof(__pyx_k_IsWindowVisible), 0, 0, 1, 1},
    {&__pyx_kp_s_It_can_record_OpenGL_and_Hardwa, __pyx_k_It_can_record_OpenGL_and_Hardwa, sizeof(__pyx_k_It_can_record_OpenGL_and_Hardwa), 0, 0, 1, 0},
    {&__pyx_n_s_Lock, __pyx_k_Lock, sizeof(__pyx_k_Lock), 0, 0, 1, 1},
    {&__pyx_n_s_MAXBYTE, __pyx_k_MAXBYTE, sizeof(__pyx_k_MAXBYTE), 0, 0, 1, 1},
    {&__pyx_n_s_MDT_EFFECTIVE_DPI, __pyx_k_MDT_EFFECTIVE_DPI, sizeof(__pyx_k_MDT_EFFECTIVE_DPI), 0, 0, 1, 1},
    {&__pyx_n_s_MONITOR_DEFAULTTONEAREST, __pyx_k_MONITOR_DEFAULTTONEAREST, sizeof(__pyx_k_MONITOR_DEFAULTTONEAREST), 0, 0, 1, 1},
    {&__pyx_n_s_MUTE, __pyx_k_MUTE, sizeof(__pyx_k_MUTE), 0, 0, 1, 1},
    {&__pyx_n_s_Map, __pyx_k_Map, sizeof(__pyx_k_Map), 0, 0, 1, 1},
    {&__pyx_n_s_MipLevels, __pyx_k_MipLevels, sizeof(__pyx_k_MipLevels), 0, 0, 1, 1},
    {&__pyx_n_s_MiscFlags, __pyx_k_MiscFlags, sizeof(__pyx_k_MiscFlags), 0, 0, 1, 1},
    {&__pyx_n_s_Monitor, __pyx_k_Monitor, sizeof(__pyx_k_Monitor), 0, 0, 1, 1},
    {&__pyx_n_s_MonitorFromWindow, __pyx_k_MonitorFromWindow, sizeof(__pyx_k_MonitorFromWindow), 0, 0, 1, 1},
    {&__pyx_kp_s_Mute_Game_while_in_Background, __pyx_k_Mute_Game_while_in_Background, sizeof(__pyx_k_Mute_Game_while_in_Background), 0, 0, 1, 0},
    {&__pyx_n_s_NemuIpcCaptureMethod, __pyx_k_NemuIpcCaptureMethod, sizeof(__pyx_k_NemuIpcCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod___reduce_cy, __pyx_k_NemuIpcCaptureMethod___reduce_cy, sizeof(__pyx_k_NemuIpcCaptureMethod___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod___setstate, __pyx_k_NemuIpcCaptureMethod___setstate, sizeof(__pyx_k_NemuIpcCaptureMethod___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_base_folder, __pyx_k_NemuIpcCaptureMethod_base_folder, sizeof(__pyx_k_NemuIpcCaptureMethod_base_folder), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_check_mumu, __pyx_k_NemuIpcCaptureMethod_check_mumu, sizeof(__pyx_k_NemuIpcCaptureMethod_check_mumu), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_close, __pyx_k_NemuIpcCaptureMethod_close, sizeof(__pyx_k_NemuIpcCaptureMethod_close), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_connected, __pyx_k_NemuIpcCaptureMethod_connected, sizeof(__pyx_k_NemuIpcCaptureMethod_connected), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_do_get_fram, __pyx_k_NemuIpcCaptureMethod_do_get_fram, sizeof(__pyx_k_NemuIpcCaptureMethod_do_get_fram), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_init_nemu, __pyx_k_NemuIpcCaptureMethod_init_nemu, sizeof(__pyx_k_NemuIpcCaptureMethod_init_nemu), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcCaptureMethod_update_emul, __pyx_k_NemuIpcCaptureMethod_update_emul, sizeof(__pyx_k_NemuIpcCaptureMethod_update_emul), 0, 0, 1, 1},
    {&__pyx_n_s_NemuIpcImpl, __pyx_k_NemuIpcImpl, sizeof(__pyx_k_NemuIpcImpl), 0, 0, 1, 1},
    {&__pyx_kp_s_Nemu_Ipc_Capture, __pyx_k_Nemu_Ipc_Capture, sizeof(__pyx_k_Nemu_Ipc_Capture), 0, 0, 1, 0},
    {&__pyx_n_s_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 0, 1, 1},
    {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
    {&__pyx_kp_s_OpenGL_Hardware_Accelerated_or, __pyx_k_OpenGL_Hardware_Accelerated_or, sizeof(__pyx_k_OpenGL_Hardware_Accelerated_or), 0, 0, 1, 0},
    {&__pyx_kp_s_Overlapping_windows_will_show_u, __pyx_k_Overlapping_windows_will_show_u, sizeof(__pyx_k_Overlapping_windows_will_show_u), 0, 0, 1, 0},
    {&__pyx_n_s_PBYTE, __pyx_k_PBYTE, sizeof(__pyx_k_PBYTE), 0, 0, 1, 1},
    {&__pyx_n_s_POINTER, __pyx_k_POINTER, sizeof(__pyx_k_POINTER), 0, 0, 1, 1},
    {&__pyx_n_s_PW_RENDERFULLCONTENT, __pyx_k_PW_RENDERFULLCONTENT, sizeof(__pyx_k_PW_RENDERFULLCONTENT), 0, 0, 1, 1},
    {&__pyx_kp_s_Paused_because_game_exited, __pyx_k_Paused_because_game_exited, sizeof(__pyx_k_Paused_because_game_exited), 0, 0, 1, 0},
    {&__pyx_kp_s_Paused_because_game_window_is_mi, __pyx_k_Paused_because_game_window_is_mi, sizeof(__pyx_k_Paused_because_game_window_is_mi), 0, 0, 1, 0},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_kp_s_Please_turn_off_enable_backgroun, __pyx_k_Please_turn_off_enable_backgroun, sizeof(__pyx_k_Please_turn_off_enable_backgroun), 0, 0, 1, 0},
    {&__pyx_n_s_PostMessage, __pyx_k_PostMessage, sizeof(__pyx_k_PostMessage), 0, 0, 1, 1},
    {&__pyx_n_s_PostMessageInteraction, __pyx_k_PostMessageInteraction, sizeof(__pyx_k_PostMessageInteraction), 0, 0, 1, 1},
    {&__pyx_n_s_PrintWindow, __pyx_k_PrintWindow, sizeof(__pyx_k_PrintWindow), 0, 0, 1, 1},
    {&__pyx_n_s_Process, __pyx_k_Process, sizeof(__pyx_k_Process), 0, 0, 1, 1},
    {&__pyx_n_s_PyDirectInteraction, __pyx_k_PyDirectInteraction, sizeof(__pyx_k_PyDirectInteraction), 0, 0, 1, 1},
    {&__pyx_n_s_Pyx_CFunc_1c7259__2ok_7Capture, __pyx_k_Pyx_CFunc_1c7259__2ok_7Capture, sizeof(__pyx_k_Pyx_CFunc_1c7259__2ok_7Capture), 0, 0, 1, 1},
    {&__pyx_n_s_QueryInterface, __pyx_k_QueryInterface, sizeof(__pyx_k_QueryInterface), 0, 0, 1, 1},
    {&__pyx_n_s_RECT, __pyx_k_RECT, sizeof(__pyx_k_RECT), 0, 0, 1, 1},
    {&__pyx_n_s_Recreate, __pyx_k_Recreate, sizeof(__pyx_k_Recreate), 0, 0, 1, 1},
    {&__pyx_n_s_Red, __pyx_k_Red, sizeof(__pyx_k_Red), 0, 0, 1, 1},
    {&__pyx_n_s_RefreshAdb, __pyx_k_RefreshAdb, sizeof(__pyx_k_RefreshAdb), 0, 0, 1, 1},
    {&__pyx_n_s_Release, __pyx_k_Release, sizeof(__pyx_k_Release), 0, 0, 1, 1},
    {&__pyx_n_s_ReleaseDC, __pyx_k_ReleaseDC, sizeof(__pyx_k_ReleaseDC), 0, 0, 1, 1},
    {&__pyx_n_s_RowPitch, __pyx_k_RowPitch, sizeof(__pyx_k_RowPitch), 0, 0, 1, 1},
    {&__pyx_n_s_SRCCOPY, __pyx_k_SRCCOPY, sizeof(__pyx_k_SRCCOPY), 0, 0, 1, 1},
    {&__pyx_n_s_SampleDesc, __pyx_k_SampleDesc, sizeof(__pyx_k_SampleDesc), 0, 0, 1, 1},
    {&__pyx_kp_u_Screencap_image_decode_error_pro, __pyx_k_Screencap_image_decode_error_pro, sizeof(__pyx_k_Screencap_image_decode_error_pro), 0, 1, 0, 0},
    {&__pyx_n_s_SelectObject, __pyx_k_SelectObject, sizeof(__pyx_k_SelectObject), 0, 0, 1, 1},
    {&__pyx_n_s_SetMute, __pyx_k_SetMute, sizeof(__pyx_k_SetMute), 0, 0, 1, 1},
    {&__pyx_n_s_Size, __pyx_k_Size, sizeof(__pyx_k_Size), 0, 0, 1, 1},
    {&__pyx_n_s_StartCapture, __pyx_k_StartCapture, sizeof(__pyx_k_StartCapture), 0, 0, 1, 1},
    {&__pyx_n_s_Surface, __pyx_k_Surface, sizeof(__pyx_k_Surface), 0, 0, 1, 1},
    {&__pyx_kp_s_The_best_option_when_compatible, __pyx_k_The_best_option_when_compatible, sizeof(__pyx_k_The_best_option_when_compatible), 0, 0, 1, 0},
    {&__pyx_kp_s_The_smaller_the_selected_region, __pyx_k_The_smaller_the_selected_region, sizeof(__pyx_k_The_smaller_the_selected_region), 0, 0, 1, 0},
    {&__pyx_kp_s_This_option_may_not_be_availabl, __pyx_k_This_option_may_not_be_availabl, sizeof(__pyx_k_This_option_may_not_be_availabl), 0, 0, 1, 0},
    {&__pyx_n_s_Thread, __pyx_k_Thread, sizeof(__pyx_k_Thread), 0, 0, 1, 1},
    {&__pyx_n_u_True, __pyx_k_True, sizeof(__pyx_k_True), 0, 1, 0, 1},
    {&__pyx_n_s_TryGetNextFrame, __pyx_k_TryGetNextFrame, sizeof(__pyx_k_TryGetNextFrame), 0, 0, 1, 1},
    {&__pyx_kp_u_TryGetNextFrame_error, __pyx_k_TryGetNextFrame_error, sizeof(__pyx_k_TryGetNextFrame_error), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_TypedEventHandler, __pyx_k_TypedEventHandler, sizeof(__pyx_k_TypedEventHandler), 0, 0, 1, 1},
    {&__pyx_n_s_Unmap, __pyx_k_Unmap, sizeof(__pyx_k_Unmap), 0, 0, 1, 1},
    {&__pyx_n_s_Usage, __pyx_k_Usage, sizeof(__pyx_k_Usage), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_WGC_MIN_BUILD, __pyx_k_WGC_MIN_BUILD, sizeof(__pyx_k_WGC_MIN_BUILD), 0, 0, 1, 1},
    {&__pyx_n_s_WGC_NO_BORDER_MIN_BUILD, __pyx_k_WGC_NO_BORDER_MIN_BUILD, sizeof(__pyx_k_WGC_NO_BORDER_MIN_BUILD), 0, 0, 1, 1},
    {&__pyx_n_s_WINDOWS_BUILD_NUMBER, __pyx_k_WINDOWS_BUILD_NUMBER, sizeof(__pyx_k_WINDOWS_BUILD_NUMBER), 0, 0, 1, 1},
    {&__pyx_n_s_Width, __pyx_k_Width, sizeof(__pyx_k_Width), 0, 0, 1, 1},
    {&__pyx_n_s_WinDLL, __pyx_k_WinDLL, sizeof(__pyx_k_WinDLL), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod, __pyx_k_WindowsGraphicsCaptureMethod, sizeof(__pyx_k_WindowsGraphicsCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod___r, __pyx_k_WindowsGraphicsCaptureMethod___r, sizeof(__pyx_k_WindowsGraphicsCaptureMethod___r), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod___s, __pyx_k_WindowsGraphicsCaptureMethod___s, sizeof(__pyx_k_WindowsGraphicsCaptureMethod___s), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_clo, __pyx_k_WindowsGraphicsCaptureMethod_clo, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_clo), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_con, __pyx_k_WindowsGraphicsCaptureMethod_con, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_con), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_cre, __pyx_k_WindowsGraphicsCaptureMethod_cre, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_cre), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_cro, __pyx_k_WindowsGraphicsCaptureMethod_cro, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_cro), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_do, __pyx_k_WindowsGraphicsCaptureMethod_do, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_do), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_res, __pyx_k_WindowsGraphicsCaptureMethod_res, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_res), 0, 0, 1, 1},
    {&__pyx_n_s_WindowsGraphicsCaptureMethod_sta, __pyx_k_WindowsGraphicsCaptureMethod_sta, sizeof(__pyx_k_WindowsGraphicsCaptureMethod_sta), 0, 0, 1, 1},
    {&__pyx_kp_s_Windows_Graphics_Capture, __pyx_k_Windows_Graphics_Capture, sizeof(__pyx_k_Windows_Graphics_Capture), 0, 0, 1, 0},
    {&__pyx_kp_s_Windows_Graphics_Capture_Graphic, __pyx_k_Windows_Graphics_Capture_Graphic, sizeof(__pyx_k_Windows_Graphics_Capture_Graphic), 0, 0, 1, 0},
    {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
    {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
    {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
    {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
    {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
    {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
    {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
    {&__pyx_n_s__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 0, 1, 1},
    {&__pyx_n_s__251, __pyx_k__251, sizeof(__pyx_k__251), 0, 0, 1, 1},
    {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
    {&__pyx_n_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 1},
    {&__pyx_n_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 1},
    {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
    {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
    {&__pyx_n_s_abspath, __pyx_k_abspath, sizeof(__pyx_k_abspath), 0, 0, 1, 1},
    {&__pyx_n_s_adb, __pyx_k_adb, sizeof(__pyx_k_adb), 0, 0, 1, 1},
    {&__pyx_n_s_adb_2, __pyx_k_adb_2, sizeof(__pyx_k_adb_2), 0, 0, 1, 1},
    {&__pyx_n_s_adb_capture_config, __pyx_k_adb_capture_config, sizeof(__pyx_k_adb_capture_config), 0, 0, 1, 1},
    {&__pyx_kp_u_adb_check_in_front, __pyx_k_adb_check_in_front, sizeof(__pyx_k_adb_check_in_front), 0, 1, 0, 0},
    {&__pyx_n_s_adb_check_in_front_2, __pyx_k_adb_check_in_front_2, sizeof(__pyx_k_adb_check_in_front_2), 0, 0, 1, 1},
    {&__pyx_n_s_adb_check_installed, __pyx_k_adb_check_installed, sizeof(__pyx_k_adb_check_installed), 0, 0, 1, 1},
    {&__pyx_n_s_adb_connect, __pyx_k_adb_connect, sizeof(__pyx_k_adb_connect), 0, 0, 1, 1},
    {&__pyx_kp_u_adb_connect_2, __pyx_k_adb_connect_2, sizeof(__pyx_k_adb_connect_2), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_already_connected, __pyx_k_adb_connect_already_connected, sizeof(__pyx_k_adb_connect_already_connected), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_emulator_result, __pyx_k_adb_connect_emulator_result, sizeof(__pyx_k_adb_connect_emulator_result), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_error, __pyx_k_adb_connect_error, sizeof(__pyx_k_adb_connect_error), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_error_return_none, __pyx_k_adb_connect_error_return_none, sizeof(__pyx_k_adb_connect_error_return_none), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_exit_event_is_set, __pyx_k_adb_connect_exit_event_is_set, sizeof(__pyx_k_adb_connect_exit_event_is_set), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_offline_disconnect_f, __pyx_k_adb_connect_offline_disconnect_f, sizeof(__pyx_k_adb_connect_offline_disconnect_f), 0, 1, 0, 0},
    {&__pyx_kp_u_adb_connect_try_connect, __pyx_k_adb_connect_try_connect, sizeof(__pyx_k_adb_connect_try_connect), 0, 1, 0, 0},
    {&__pyx_n_s_adb_device, __pyx_k_adb_device, sizeof(__pyx_k_adb_device), 0, 0, 1, 1},
    {&__pyx_n_s_adb_devices, __pyx_k_adb_devices, sizeof(__pyx_k_adb_devices), 0, 0, 1, 1},
    {&__pyx_kp_u_adb_ensure_in_front, __pyx_k_adb_ensure_in_front, sizeof(__pyx_k_adb_ensure_in_front), 0, 1, 0, 0},
    {&__pyx_n_s_adb_ensure_in_front_2, __pyx_k_adb_ensure_in_front_2, sizeof(__pyx_k_adb_ensure_in_front_2), 0, 0, 1, 1},
    {&__pyx_kp_s_adb_exe, __pyx_k_adb_exe, sizeof(__pyx_k_adb_exe), 0, 0, 1, 0},
    {&__pyx_n_s_adb_get_imei, __pyx_k_adb_get_imei, sizeof(__pyx_k_adb_get_imei), 0, 0, 1, 1},
    {&__pyx_n_s_adb_imei, __pyx_k_adb_imei, sizeof(__pyx_k_adb_imei), 0, 0, 1, 1},
    {&__pyx_kp_s_adb_kill_server, __pyx_k_adb_kill_server, sizeof(__pyx_k_adb_kill_server), 0, 0, 1, 0},
    {&__pyx_n_s_adb_kill_server_2, __pyx_k_adb_kill_server_2, sizeof(__pyx_k_adb_kill_server_2), 0, 0, 1, 1},
    {&__pyx_n_s_adb_lock, __pyx_k_adb_lock, sizeof(__pyx_k_adb_lock), 0, 0, 1, 1},
    {&__pyx_kp_u_adb_shell_error_maybe_offline, __pyx_k_adb_shell_error_maybe_offline, sizeof(__pyx_k_adb_shell_error_maybe_offline), 0, 1, 0, 0},
    {&__pyx_n_s_adb_start_package, __pyx_k_adb_start_package, sizeof(__pyx_k_adb_start_package), 0, 0, 1, 1},
    {&__pyx_n_s_adbutils, __pyx_k_adbutils, sizeof(__pyx_k_adbutils), 0, 0, 1, 1},
    {&__pyx_n_s_adbutils__utils, __pyx_k_adbutils__utils, sizeof(__pyx_k_adbutils__utils), 0, 0, 1, 1},
    {&__pyx_n_s_add_Closed, __pyx_k_add_Closed, sizeof(__pyx_k_add_Closed), 0, 0, 1, 1},
    {&__pyx_n_s_add_FrameArrived, __pyx_k_add_FrameArrived, sizeof(__pyx_k_add_FrameArrived), 0, 0, 1, 1},
    {&__pyx_n_s_addr, __pyx_k_addr, sizeof(__pyx_k_addr), 0, 0, 1, 1},
    {&__pyx_n_s_address, __pyx_k_address, sizeof(__pyx_k_address), 0, 0, 1, 1},
    {&__pyx_n_s_all_emulator_instances, __pyx_k_all_emulator_instances, sizeof(__pyx_k_all_emulator_instances), 0, 0, 1, 1},
    {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
    {&__pyx_n_s_app_config, __pyx_k_app_config, sizeof(__pyx_k_app_config), 0, 0, 1, 1},
    {&__pyx_n_s_app_current, __pyx_k_app_current, sizeof(__pyx_k_app_current), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_as_array, __pyx_k_as_array, sizeof(__pyx_k_as_array), 0, 0, 1, 1},
    {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_base_folder, __pyx_k_base_folder, sizeof(__pyx_k_base_folder), 0, 0, 1, 1},
    {&__pyx_n_s_biggest, __pyx_k_biggest, sizeof(__pyx_k_biggest), 0, 0, 1, 1},
    {&__pyx_n_s_bin_dir, __pyx_k_bin_dir, sizeof(__pyx_k_bin_dir), 0, 0, 1, 1},
    {&__pyx_n_s_bit_blt_render_full, __pyx_k_bit_blt_render_full, sizeof(__pyx_k_bit_blt_render_full), 0, 0, 1, 1},
    {&__pyx_n_s_border, __pyx_k_border, sizeof(__pyx_k_border), 0, 0, 1, 1},
    {&__pyx_n_s_byref, __pyx_k_byref, sizeof(__pyx_k_byref), 0, 0, 1, 1},
    {&__pyx_kp_u_c_android_intent_category_LAUNC, __pyx_k_c_android_intent_category_LAUNC, sizeof(__pyx_k_c_android_intent_category_LAUNC), 0, 1, 0, 0},
    {&__pyx_n_s_c_ubyte, __pyx_k_c_ubyte, sizeof(__pyx_k_c_ubyte), 0, 0, 1, 1},
    {&__pyx_n_s_c_uint, __pyx_k_c_uint, sizeof(__pyx_k_c_uint), 0, 0, 1, 1},
    {&__pyx_n_s_calculate_pc_exe_path, __pyx_k_calculate_pc_exe_path, sizeof(__pyx_k_calculate_pc_exe_path), 0, 0, 1, 1},
    {&__pyx_kp_u_calculate_pc_exe_path_2, __pyx_k_calculate_pc_exe_path_2, sizeof(__pyx_k_calculate_pc_exe_path_2), 0, 1, 0, 0},
    {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
    {&__pyx_kp_s_calling_refresh, __pyx_k_calling_refresh, sizeof(__pyx_k_calling_refresh), 0, 0, 1, 0},
    {&__pyx_n_s_can_bit_blt, __pyx_k_can_bit_blt, sizeof(__pyx_k_can_bit_blt), 0, 0, 1, 1},
    {&__pyx_kp_u_cant_find_a_usable_windows_captu, __pyx_k_cant_find_a_usable_windows_captu, sizeof(__pyx_k_cant_find_a_usable_windows_captu), 0, 1, 0, 0},
    {&__pyx_n_s_capture, __pyx_k_capture, sizeof(__pyx_k_capture), 0, 0, 1, 1},
    {&__pyx_n_s_capture_cursor, __pyx_k_capture_cursor, sizeof(__pyx_k_capture_cursor), 0, 0, 1, 1},
    {&__pyx_n_s_capture_method, __pyx_k_capture_method, sizeof(__pyx_k_capture_method), 0, 0, 1, 1},
    {&__pyx_kp_u_capture_method_2, __pyx_k_capture_method_2, sizeof(__pyx_k_capture_method_2), 0, 1, 0, 0},
    {&__pyx_n_s_capture_output, __pyx_k_capture_output, sizeof(__pyx_k_capture_output), 0, 0, 1, 1},
    {&__pyx_n_s_cast, __pyx_k_cast, sizeof(__pyx_k_cast), 0, 0, 1, 1},
    {&__pyx_n_s_cfunc_to_py, __pyx_k_cfunc_to_py, sizeof(__pyx_k_cfunc_to_py), 0, 0, 1, 1},
    {&__pyx_n_s_changed, __pyx_k_changed, sizeof(__pyx_k_changed), 0, 0, 1, 1},
    {&__pyx_kp_u_check_available_WINDOWS_BUILD_NU, __pyx_k_check_available_WINDOWS_BUILD_NU, sizeof(__pyx_k_check_available_WINDOWS_BUILD_NU), 0, 1, 0, 0},
    {&__pyx_kp_u_check_available_failed, __pyx_k_check_available_failed, sizeof(__pyx_k_check_available_failed), 0, 1, 0, 0},
    {&__pyx_kp_u_check_connected, __pyx_k_check_connected, sizeof(__pyx_k_check_connected), 0, 1, 0, 0},
    {&__pyx_n_s_check_mumu_app_keep_alive_400, __pyx_k_check_mumu_app_keep_alive_400, sizeof(__pyx_k_check_mumu_app_keep_alive_400), 0, 0, 1, 1},
    {&__pyx_n_s_check_pos, __pyx_k_check_pos, sizeof(__pyx_k_check_pos), 0, 0, 1, 1},
    {&__pyx_n_s_child_callback, __pyx_k_child_callback, sizeof(__pyx_k_child_callback), 0, 0, 1, 1},
    {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_class_name, __pyx_k_class_name, sizeof(__pyx_k_class_name), 0, 0, 1, 1},
    {&__pyx_n_s_clickable, __pyx_k_clickable, sizeof(__pyx_k_clickable), 0, 0, 1, 1},
    {&__pyx_n_s_client_height, __pyx_k_client_height, sizeof(__pyx_k_client_height), 0, 0, 1, 1},
    {&__pyx_n_s_client_width, __pyx_k_client_width, sizeof(__pyx_k_client_width), 0, 0, 1, 1},
    {&__pyx_n_s_client_x, __pyx_k_client_x, sizeof(__pyx_k_client_x), 0, 0, 1, 1},
    {&__pyx_n_s_client_y, __pyx_k_client_y, sizeof(__pyx_k_client_y), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_cmdline, __pyx_k_cmdline, sizeof(__pyx_k_cmdline), 0, 0, 1, 1},
    {&__pyx_n_s_communicate, __pyx_k_communicate, sizeof(__pyx_k_communicate), 0, 0, 1, 1},
    {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
    {&__pyx_kp_u_configs_customer_config_json, __pyx_k_configs_customer_config_json, sizeof(__pyx_k_configs_customer_config_json), 0, 1, 0, 0},
    {&__pyx_n_s_connect, __pyx_k_connect, sizeof(__pyx_k_connect), 0, 0, 1, 1},
    {&__pyx_n_s_connected, __pyx_k_connected, sizeof(__pyx_k_connected), 0, 0, 1, 1},
    {&__pyx_n_s_connected_device, __pyx_k_connected_device, sizeof(__pyx_k_connected_device), 0, 0, 1, 1},
    {&__pyx_kp_s_convert_dx_frame_win_error, __pyx_k_convert_dx_frame_win_error, sizeof(__pyx_k_convert_dx_frame_win_error), 0, 0, 1, 0},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_n_s_create, __pyx_k_create, sizeof(__pyx_k_create), 0, 0, 1, 1},
    {&__pyx_n_s_create_device, __pyx_k_create_device, sizeof(__pyx_k_create_device), 0, 0, 1, 1},
    {&__pyx_n_s_crop_image, __pyx_k_crop_image, sizeof(__pyx_k_crop_image), 0, 0, 1, 1},
    {&__pyx_n_s_cropped_image, __pyx_k_cropped_image, sizeof(__pyx_k_cropped_image), 0, 0, 1, 1},
    {&__pyx_n_s_cropped_window_height, __pyx_k_cropped_window_height, sizeof(__pyx_k_cropped_window_height), 0, 0, 1, 1},
    {&__pyx_n_s_ctl, __pyx_k_ctl, sizeof(__pyx_k_ctl), 0, 0, 1, 1},
    {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
    {&__pyx_n_s_ctypeslib, __pyx_k_ctypeslib, sizeof(__pyx_k_ctypeslib), 0, 0, 1, 1},
    {&__pyx_n_s_current, __pyx_k_current, sizeof(__pyx_k_current), 0, 0, 1, 1},
    {&__pyx_kp_s_customer_app_keptlive, __pyx_k_customer_app_keptlive, sizeof(__pyx_k_customer_app_keptlive), 0, 0, 1, 0},
    {&__pyx_kp_u_customer_app_keptlive_2, __pyx_k_customer_app_keptlive_2, sizeof(__pyx_k_customer_app_keptlive_2), 0, 1, 0, 0},
    {&__pyx_n_s_cv2, __pyx_k_cv2, sizeof(__pyx_k_cv2), 0, 0, 1, 1},
    {&__pyx_n_s_cvtColor, __pyx_k_cvtColor, sizeof(__pyx_k_cvtColor), 0, 0, 1, 1},
    {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
    {&__pyx_n_s_d3d11, __pyx_k_d3d11, sizeof(__pyx_k_d3d11), 0, 0, 1, 1},
    {&__pyx_n_s_d3dshot, __pyx_k_d3dshot, sizeof(__pyx_k_d3dshot), 0, 0, 1, 1},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_dc, __pyx_k_dc, sizeof(__pyx_k_dc), 0, 0, 1, 1},
    {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
    {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
    {&__pyx_n_s_deep_get, __pyx_k_deep_get, sizeof(__pyx_k_deep_get), 0, 0, 1, 1},
    {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
    {&__pyx_n_s_delegate, __pyx_k_delegate, sizeof(__pyx_k_delegate), 0, 0, 1, 1},
    {&__pyx_n_s_denominator, __pyx_k_denominator, sizeof(__pyx_k_denominator), 0, 0, 1, 1},
    {&__pyx_n_s_description, __pyx_k_description, sizeof(__pyx_k_description), 0, 0, 1, 1},
    {&__pyx_kp_s_destroy_windows_capture, __pyx_k_destroy_windows_capture, sizeof(__pyx_k_destroy_windows_capture), 0, 0, 1, 0},
    {&__pyx_n_s_device, __pyx_k_device, sizeof(__pyx_k_device), 0, 0, 1, 1},
    {&__pyx_n_s_device_2, __pyx_k_device_2, sizeof(__pyx_k_device_2), 0, 0, 1, 1},
    {&__pyx_n_s_device_connected, __pyx_k_device_connected, sizeof(__pyx_k_device_connected), 0, 0, 1, 1},
    {&__pyx_kp_u_device_connected_check_device_st, __pyx_k_device_connected_check_device_st, sizeof(__pyx_k_device_connected_check_device_st), 0, 1, 0, 0},
    {&__pyx_kp_u_device_connected_error_occurred, __pyx_k_device_connected_error_occurred, sizeof(__pyx_k_device_connected_error_occurred), 0, 1, 0, 0},
    {&__pyx_n_s_device_dict, __pyx_k_device_dict, sizeof(__pyx_k_device_dict), 0, 0, 1, 1},
    {&__pyx_n_s_device_list, __pyx_k_device_list, sizeof(__pyx_k_device_list), 0, 0, 1, 1},
    {&__pyx_n_s_device_manager, __pyx_k_device_manager, sizeof(__pyx_k_device_manager), 0, 0, 1, 1},
    {&__pyx_n_s_devices, __pyx_k_devices, sizeof(__pyx_k_devices), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
    {&__pyx_n_s_dirname, __pyx_k_dirname, sizeof(__pyx_k_dirname), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_disconnect, __pyx_k_disconnect, sizeof(__pyx_k_disconnect), 0, 0, 1, 1},
    {&__pyx_n_s_display, __pyx_k_display, sizeof(__pyx_k_display), 0, 0, 1, 1},
    {&__pyx_n_s_display_id, __pyx_k_display_id, sizeof(__pyx_k_display_id), 0, 0, 1, 1},
    {&__pyx_n_s_displays, __pyx_k_displays, sizeof(__pyx_k_displays), 0, 0, 1, 1},
    {&__pyx_n_s_do_get_frame, __pyx_k_do_get_frame, sizeof(__pyx_k_do_get_frame), 0, 0, 1, 1},
    {&__pyx_n_s_do_refresh, __pyx_k_do_refresh, sizeof(__pyx_k_do_refresh), 0, 0, 1, 1},
    {&__pyx_n_s_do_screencap, __pyx_k_do_screencap, sizeof(__pyx_k_do_screencap), 0, 0, 1, 1},
    {&__pyx_n_s_do_start, __pyx_k_do_start, sizeof(__pyx_k_do_start), 0, 0, 1, 1},
    {&__pyx_n_u_do_start, __pyx_k_do_start, sizeof(__pyx_k_do_start), 0, 1, 0, 1},
    {&__pyx_kp_u_do_start_use_windows_capture, __pyx_k_do_start_use_windows_capture, sizeof(__pyx_k_do_start_use_windows_capture), 0, 1, 0, 0},
    {&__pyx_n_s_do_update_window_size, __pyx_k_do_update_window_size, sizeof(__pyx_k_do_update_window_size), 0, 0, 1, 1},
    {&__pyx_kp_u_do_update_window_size_changed_vi, __pyx_k_do_update_window_size_changed_vi, sizeof(__pyx_k_do_update_window_size_changed_vi), 0, 1, 0, 0},
    {&__pyx_kp_u_do_update_window_size_exception, __pyx_k_do_update_window_size_exception, sizeof(__pyx_k_do_update_window_size_exception), 0, 1, 0, 0},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_dpiX, __pyx_k_dpiX, sizeof(__pyx_k_dpiX), 0, 0, 1, 1},
    {&__pyx_n_s_dpiY, __pyx_k_dpiY, sizeof(__pyx_k_dpiY), 0, 0, 1, 1},
    {&__pyx_n_s_draw_rectangle, __pyx_k_draw_rectangle, sizeof(__pyx_k_draw_rectangle), 0, 0, 1, 1},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_dwmapi, __pyx_k_dwmapi, sizeof(__pyx_k_dwmapi), 0, 0, 1, 1},
    {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
    {&__pyx_kp_s_echo_1, __pyx_k_echo_1, sizeof(__pyx_k_echo_1), 0, 0, 1, 0},
    {&__pyx_n_s_emit, __pyx_k_emit, sizeof(__pyx_k_emit), 0, 0, 1, 1},
    {&__pyx_n_s_emulator, __pyx_k_emulator, sizeof(__pyx_k_emulator), 0, 0, 1, 1},
    {&__pyx_n_s_emulator_device, __pyx_k_emulator_device, sizeof(__pyx_k_emulator_device), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encoding, __pyx_k_encoding, sizeof(__pyx_k_encoding), 0, 0, 1, 1},
    {&__pyx_n_s_ensure_hwnd, __pyx_k_ensure_hwnd, sizeof(__pyx_k_ensure_hwnd), 0, 0, 1, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
    {&__pyx_n_s_enum_child_windows, __pyx_k_enum_child_windows, sizeof(__pyx_k_enum_child_windows), 0, 0, 1, 1},
    {&__pyx_n_s_enum_child_windows_locals_child, __pyx_k_enum_child_windows_locals_child, sizeof(__pyx_k_enum_child_windows_locals_child), 0, 0, 1, 1},
    {&__pyx_n_s_environ, __pyx_k_environ, sizeof(__pyx_k_environ), 0, 0, 1, 1},
    {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_n_s_exception, __pyx_k_exception, sizeof(__pyx_k_exception), 0, 0, 1, 1},
    {&__pyx_n_s_exe, __pyx_k_exe, sizeof(__pyx_k_exe), 0, 0, 1, 1},
    {&__pyx_n_s_exe_name, __pyx_k_exe_name, sizeof(__pyx_k_exe_name), 0, 0, 1, 1},
    {&__pyx_kp_u_exe_name_2, __pyx_k_exe_name_2, sizeof(__pyx_k_exe_name_2), 0, 1, 0, 0},
    {&__pyx_n_s_executor, __pyx_k_executor, sizeof(__pyx_k_executor), 0, 0, 1, 1},
    {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_exit_event, __pyx_k_exit_event, sizeof(__pyx_k_exit_event), 0, 0, 1, 1},
    {&__pyx_kp_u_exit_reset_mute_state_to_0, __pyx_k_exit_reset_mute_state_to_0, sizeof(__pyx_k_exit_reset_mute_state_to_0), 0, 1, 0, 0},
    {&__pyx_n_s_extended_frame_bounds, __pyx_k_extended_frame_bounds, sizeof(__pyx_k_extended_frame_bounds), 0, 0, 1, 1},
    {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
    {&__pyx_kp_s_fast_most_compatible_capped_at_6, __pyx_k_fast_most_compatible_capped_at_6, sizeof(__pyx_k_fast_most_compatible_capped_at_6), 0, 0, 1, 0},
    {&__pyx_kp_s_fastest_least_compatible, __pyx_k_fastest_least_compatible, sizeof(__pyx_k_fastest_least_compatible), 0, 0, 1, 0},
    {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
    {&__pyx_n_s_find_hwnd, __pyx_k_find_hwnd, sizeof(__pyx_k_find_hwnd), 0, 0, 1, 1},
    {&__pyx_kp_u_find_hwnd_2, __pyx_k_find_hwnd_2, sizeof(__pyx_k_find_hwnd_2), 0, 1, 0, 0},
    {&__pyx_kp_u_find_hwnd_child_callback, __pyx_k_find_hwnd_child_callback, sizeof(__pyx_k_find_hwnd_child_callback), 0, 1, 0, 0},
    {&__pyx_n_s_find_hwnd_locals_callback, __pyx_k_find_hwnd_locals_callback, sizeof(__pyx_k_find_hwnd_locals_callback), 0, 0, 1, 1},
    {&__pyx_kp_u_first_start_use_first_or_connect, __pyx_k_first_start_use_first_or_connect, sizeof(__pyx_k_first_start_use_first_or_connect), 0, 1, 0, 0},
    {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
    {&__pyx_kp_s_for_debugging, __pyx_k_for_debugging, sizeof(__pyx_k_for_debugging), 0, 0, 1, 0},
    {&__pyx_n_s_found, __pyx_k_found, sizeof(__pyx_k_found), 0, 0, 1, 1},
    {&__pyx_kp_u_found_hwnd, __pyx_k_found_hwnd, sizeof(__pyx_k_found_hwnd), 0, 1, 0, 0},
    {&__pyx_n_s_frame, __pyx_k_frame, sizeof(__pyx_k_frame), 0, 0, 1, 1},
    {&__pyx_kp_s_frame_arrived_callback_TryGetNex, __pyx_k_frame_arrived_callback_TryGetNex, sizeof(__pyx_k_frame_arrived_callback_TryGetNex), 0, 0, 1, 0},
    {&__pyx_n_s_frame_aspect_ratio, __pyx_k_frame_aspect_ratio, sizeof(__pyx_k_frame_aspect_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_frame_height, __pyx_k_frame_height, sizeof(__pyx_k_frame_height), 0, 0, 1, 1},
    {&__pyx_n_s_frame_ratio, __pyx_k_frame_ratio, sizeof(__pyx_k_frame_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_frame_width, __pyx_k_frame_width, sizeof(__pyx_k_frame_width), 0, 0, 1, 1},
    {&__pyx_n_s_frombuffer, __pyx_k_frombuffer, sizeof(__pyx_k_frombuffer), 0, 0, 1, 1},
    {&__pyx_n_s_fromfile, __pyx_k_fromfile, sizeof(__pyx_k_fromfile), 0, 0, 1, 1},
    {&__pyx_n_s_front, __pyx_k_front, sizeof(__pyx_k_front), 0, 0, 1, 1},
    {&__pyx_n_s_full_path, __pyx_k_full_path, sizeof(__pyx_k_full_path), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_get_abs_cords, __pyx_k_get_abs_cords, sizeof(__pyx_k_get_abs_cords), 0, 0, 1, 1},
    {&__pyx_n_s_get_bin_dir, __pyx_k_get_bin_dir, sizeof(__pyx_k_get_bin_dir), 0, 0, 1, 1},
    {&__pyx_n_s_get_capture, __pyx_k_get_capture, sizeof(__pyx_k_get_capture), 0, 0, 1, 1},
    {&__pyx_n_s_get_config, __pyx_k_get_config, sizeof(__pyx_k_get_config), 0, 0, 1, 1},
    {&__pyx_n_s_get_crop_point, __pyx_k_get_crop_point, sizeof(__pyx_k_get_crop_point), 0, 0, 1, 1},
    {&__pyx_kp_u_get_device_adb_device_addr_chang, __pyx_k_get_device_adb_device_addr_chang, sizeof(__pyx_k_get_device_adb_device_addr_chang), 0, 1, 0, 0},
    {&__pyx_kp_u_get_device_connect, __pyx_k_get_device_connect, sizeof(__pyx_k_get_device_connect), 0, 1, 0, 0},
    {&__pyx_n_s_get_devices, __pyx_k_get_devices, sizeof(__pyx_k_get_devices), 0, 0, 1, 1},
    {&__pyx_n_s_get_emulator_exe, __pyx_k_get_emulator_exe, sizeof(__pyx_k_get_emulator_exe), 0, 0, 1, 1},
    {&__pyx_n_s_get_exe_by_hwnd, __pyx_k_get_exe_by_hwnd, sizeof(__pyx_k_get_exe_by_hwnd), 0, 0, 1, 1},
    {&__pyx_kp_s_get_exe_by_hwnd_error, __pyx_k_get_exe_by_hwnd_error, sizeof(__pyx_k_get_exe_by_hwnd_error), 0, 0, 1, 0},
    {&__pyx_n_s_get_exe_path, __pyx_k_get_exe_path, sizeof(__pyx_k_get_exe_path), 0, 0, 1, 1},
    {&__pyx_n_s_get_frame, __pyx_k_get_frame, sizeof(__pyx_k_get_frame), 0, 0, 1, 1},
    {&__pyx_kp_u_get_frame_size_0, __pyx_k_get_frame_size_0, sizeof(__pyx_k_get_frame_size_0), 0, 1, 0, 0},
    {&__pyx_n_s_get_hwnd_name, __pyx_k_get_hwnd_name, sizeof(__pyx_k_get_hwnd_name), 0, 0, 1, 1},
    {&__pyx_n_s_get_logger, __pyx_k_get_logger, sizeof(__pyx_k_get_logger), 0, 0, 1, 1},
    {&__pyx_n_s_get_monitors_bounds, __pyx_k_get_monitors_bounds, sizeof(__pyx_k_get_monitors_bounds), 0, 0, 1, 1},
    {&__pyx_n_s_get_mute_state, __pyx_k_get_mute_state, sizeof(__pyx_k_get_mute_state), 0, 0, 1, 1},
    {&__pyx_n_s_get_player_id_from_cmdline, __pyx_k_get_player_id_from_cmdline, sizeof(__pyx_k_get_player_id_from_cmdline), 0, 0, 1, 1},
    {&__pyx_n_s_get_preferred_capture, __pyx_k_get_preferred_capture, sizeof(__pyx_k_get_preferred_capture), 0, 0, 1, 1},
    {&__pyx_n_s_get_preferred_device, __pyx_k_get_preferred_device, sizeof(__pyx_k_get_preferred_device), 0, 0, 1, 1},
    {&__pyx_n_s_get_resolution, __pyx_k_get_resolution, sizeof(__pyx_k_get_resolution), 0, 0, 1, 1},
    {&__pyx_n_s_get_win_graphics_capture, __pyx_k_get_win_graphics_capture, sizeof(__pyx_k_get_win_graphics_capture), 0, 0, 1, 1},
    {&__pyx_n_s_get_window_bounds, __pyx_k_get_window_bounds, sizeof(__pyx_k_get_window_bounds), 0, 0, 1, 1},
    {&__pyx_kp_u_get_window_bounds_exception, __pyx_k_get_window_bounds_exception, sizeof(__pyx_k_get_window_bounds_exception), 0, 1, 0, 0},
    {&__pyx_n_s_getenv, __pyx_k_getenv, sizeof(__pyx_k_getenv), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_global_config, __pyx_k_global_config, sizeof(__pyx_k_global_config), 0, 0, 1, 1},
    {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
    {&__pyx_n_s_hWnd, __pyx_k_hWnd, sizeof(__pyx_k_hWnd), 0, 0, 1, 1},
    {&__pyx_n_s_handle_mute, __pyx_k_handle_mute, sizeof(__pyx_k_handle_mute), 0, 0, 1, 1},
    {&__pyx_n_s_handler, __pyx_k_handler, sizeof(__pyx_k_handler), 0, 0, 1, 1},
    {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
    {&__pyx_kp_u_height_2, __pyx_k_height_2, sizeof(__pyx_k_height_2), 0, 1, 0, 0},
    {&__pyx_n_s_hmonitor, __pyx_k_hmonitor, sizeof(__pyx_k_hmonitor), 0, 0, 1, 1},
    {&__pyx_n_s_host, __pyx_k_host, sizeof(__pyx_k_host), 0, 0, 1, 1},
    {&__pyx_n_s_hwnd, __pyx_k_hwnd, sizeof(__pyx_k_hwnd), 0, 0, 1, 1},
    {&__pyx_n_s_hwnd_class, __pyx_k_hwnd_class, sizeof(__pyx_k_hwnd_class), 0, 0, 1, 1},
    {&__pyx_kp_u_hwnd_class_2, __pyx_k_hwnd_class_2, sizeof(__pyx_k_hwnd_class_2), 0, 1, 0, 0},
    {&__pyx_n_s_hwnd_name, __pyx_k_hwnd_name, sizeof(__pyx_k_hwnd_name), 0, 0, 1, 1},
    {&__pyx_n_s_hwnd_window, __pyx_k_hwnd_window, sizeof(__pyx_k_hwnd_window), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_icon, __pyx_k_icon, sizeof(__pyx_k_icon), 0, 0, 1, 1},
    {&__pyx_n_s_idldsl, __pyx_k_idldsl, sizeof(__pyx_k_idldsl), 0, 0, 1, 1},
    {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
    {&__pyx_n_s_image_data, __pyx_k_image_data, sizeof(__pyx_k_image_data), 0, 0, 1, 1},
    {&__pyx_n_s_images, __pyx_k_images, sizeof(__pyx_k_images), 0, 0, 1, 1},
    {&__pyx_n_s_imdecode, __pyx_k_imdecode, sizeof(__pyx_k_imdecode), 0, 0, 1, 1},
    {&__pyx_n_s_imei, __pyx_k_imei, sizeof(__pyx_k_imei), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_kp_s_index_d, __pyx_k_index_d, sizeof(__pyx_k_index_d), 0, 0, 1, 0},
    {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_kp_s_init___end, __pyx_k_init___end, sizeof(__pyx_k_init___end), 0, 0, 1, 0},
    {&__pyx_kp_s_init___start, __pyx_k_init___start, sizeof(__pyx_k_init___start), 0, 0, 1, 0},
    {&__pyx_kp_u_init_adb, __pyx_k_init_adb, sizeof(__pyx_k_init_adb), 0, 1, 0, 0},
    {&__pyx_n_s_init_nemu, __pyx_k_init_nemu, sizeof(__pyx_k_init_nemu), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_kp_s_init_windows_capture, __pyx_k_init_windows_capture, sizeof(__pyx_k_init_windows_capture), 0, 0, 1, 0},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_installed, __pyx_k_installed, sizeof(__pyx_k_installed), 0, 0, 1, 1},
    {&__pyx_kp_u_installed_emulators, __pyx_k_installed_emulators, sizeof(__pyx_k_installed_emulators), 0, 1, 0, 0},
    {&__pyx_n_s_installed_emulators_2, __pyx_k_installed_emulators_2, sizeof(__pyx_k_installed_emulators_2), 0, 0, 1, 1},
    {&__pyx_n_s_instance_id, __pyx_k_instance_id, sizeof(__pyx_k_instance_id), 0, 0, 1, 1},
    {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
    {&__pyx_n_s_interaction, __pyx_k_interaction, sizeof(__pyx_k_interaction), 0, 0, 1, 1},
    {&__pyx_n_s_interop, __pyx_k_interop, sizeof(__pyx_k_interop), 0, 0, 1, 1},
    {&__pyx_n_s_ipc, __pyx_k_ipc, sizeof(__pyx_k_ipc), 0, 0, 1, 1},
    {&__pyx_n_s_is_blank, __pyx_k_is_blank, sizeof(__pyx_k_is_blank), 0, 0, 1, 1},
    {&__pyx_n_s_is_close_to_pure_color, __pyx_k_is_close_to_pure_color, sizeof(__pyx_k_is_close_to_pure_color), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_digit, __pyx_k_is_digit, sizeof(__pyx_k_is_digit), 0, 0, 1, 1},
    {&__pyx_n_s_is_foreground_window, __pyx_k_is_foreground_window, sizeof(__pyx_k_is_foreground_window), 0, 0, 1, 1},
    {&__pyx_n_s_is_set, __pyx_k_is_set, sizeof(__pyx_k_is_set), 0, 0, 1, 1},
    {&__pyx_n_s_is_valid_exe, __pyx_k_is_valid_exe, sizeof(__pyx_k_is_valid_exe), 0, 0, 1, 1},
    {&__pyx_n_s_is_valid_hwnd, __pyx_k_is_valid_hwnd, sizeof(__pyx_k_is_valid_hwnd), 0, 0, 1, 1},
    {&__pyx_n_s_is_window_in_screen_bounds, __pyx_k_is_window_in_screen_bounds, sizeof(__pyx_k_is_window_in_screen_bounds), 0, 0, 1, 1},
    {&__pyx_n_s_is_window_minimized, __pyx_k_is_window_minimized, sizeof(__pyx_k_is_window_minimized), 0, 0, 1, 1},
    {&__pyx_n_s_isdigit, __pyx_k_isdigit, sizeof(__pyx_k_isdigit), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
    {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
    {&__pyx_n_s_iter_device, __pyx_k_iter_device, sizeof(__pyx_k_iter_device), 0, 0, 1, 1},
    {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
    {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_kill, __pyx_k_kill, sizeof(__pyx_k_kill), 0, 0, 1, 1},
    {&__pyx_kp_u_kill_adb_by_process_name, __pyx_k_kill_adb_by_process_name, sizeof(__pyx_k_kill_adb_by_process_name), 0, 1, 0, 0},
    {&__pyx_kp_u_kill_adb_server_failed, __pyx_k_kill_adb_server_failed, sizeof(__pyx_k_kill_adb_server_failed), 0, 1, 0, 0},
    {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
    {&__pyx_n_s_lParam, __pyx_k_lParam, sizeof(__pyx_k_lParam), 0, 0, 1, 1},
    {&__pyx_kp_u_latency_too_large_return_None_fr, __pyx_k_latency_too_large_return_None_fr, sizeof(__pyx_k_latency_too_large_return_None_fr), 0, 1, 0, 0},
    {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
    {&__pyx_n_s_ljust, __pyx_k_ljust, sizeof(__pyx_k_ljust), 0, 0, 1, 1},
    {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
    {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
    {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_manager, __pyx_k_manager, sizeof(__pyx_k_manager), 0, 0, 1, 1},
    {&__pyx_n_s_matching_child, __pyx_k_matching_child, sizeof(__pyx_k_matching_child), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
    {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_monitor, __pyx_k_monitor, sizeof(__pyx_k_monitor), 0, 0, 1, 1},
    {&__pyx_n_s_monitor_bottom, __pyx_k_monitor_bottom, sizeof(__pyx_k_monitor_bottom), 0, 0, 1, 1},
    {&__pyx_n_s_monitor_info, __pyx_k_monitor_info, sizeof(__pyx_k_monitor_info), 0, 0, 1, 1},
    {&__pyx_n_s_monitor_left, __pyx_k_monitor_left, sizeof(__pyx_k_monitor_left), 0, 0, 1, 1},
    {&__pyx_n_s_monitor_rect, __pyx_k_monitor_rect, sizeof(__pyx_k_monitor_rect), 0, 0, 1, 1},
    {&__pyx_n_s_monitor_right, __pyx_k_monitor_right, sizeof(__pyx_k_monitor_right), 0, 0, 1, 1},
    {&__pyx_n_s_monitor_top, __pyx_k_monitor_top, sizeof(__pyx_k_monitor_top), 0, 0, 1, 1},
    {&__pyx_n_s_monitors, __pyx_k_monitors, sizeof(__pyx_k_monitors), 0, 0, 1, 1},
    {&__pyx_n_s_monitors_bounds, __pyx_k_monitors_bounds, sizeof(__pyx_k_monitors_bounds), 0, 0, 1, 1},
    {&__pyx_kp_u_monkey_p, __pyx_k_monkey_p, sizeof(__pyx_k_monkey_p), 0, 1, 0, 0},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_kp_s_mumu_player_12_only, __pyx_k_mumu_player_12_only, sizeof(__pyx_k_mumu_player_12_only), 0, 0, 1, 0},
    {&__pyx_n_s_mute, __pyx_k_mute, sizeof(__pyx_k_mute), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_need_reset_framepool, __pyx_k_need_reset_framepool, sizeof(__pyx_k_need_reset_framepool), 0, 0, 1, 1},
    {&__pyx_n_s_nemu_folder, __pyx_k_nemu_folder, sizeof(__pyx_k_nemu_folder), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_nick, __pyx_k_nick, sizeof(__pyx_k_nick), 0, 0, 1, 1},
    {&__pyx_kp_u_no_devices, __pyx_k_no_devices, sizeof(__pyx_k_no_devices), 0, 1, 0, 0},
    {&__pyx_kp_u_no_frame_for_10_sec_try_to_resta, __pyx_k_no_frame_for_10_sec_try_to_resta, sizeof(__pyx_k_no_frame_for_10_sec_try_to_resta), 0, 1, 0, 0},
    {&__pyx_n_s_no_window, __pyx_k_no_window, sizeof(__pyx_k_no_window), 0, 0, 1, 1},
    {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
    {&__pyx_kp_u_not_exists, __pyx_k_not_exists, sizeof(__pyx_k_not_exists), 0, 1, 0, 0},
    {&__pyx_kp_u_not_in_device_list, __pyx_k_not_in_device_list, sizeof(__pyx_k_not_in_device_list), 0, 1, 0, 0},
    {&__pyx_n_s_notification, __pyx_k_notification, sizeof(__pyx_k_notification), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_kp_s_np_ndarray_None, __pyx_k_np_ndarray_None, sizeof(__pyx_k_np_ndarray_None), 0, 0, 1, 0},
    {&__pyx_n_s_nt, __pyx_k_nt, sizeof(__pyx_k_nt), 0, 0, 1, 1},
    {&__pyx_n_s_numerator, __pyx_k_numerator, sizeof(__pyx_k_numerator), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_n_s_offline, __pyx_k_offline, sizeof(__pyx_k_offline), 0, 0, 1, 1},
    {&__pyx_n_s_ok_Capture, __pyx_k_ok_Capture, sizeof(__pyx_k_ok_Capture), 0, 0, 1, 1},
    {&__pyx_kp_u_ok_Capture, __pyx_k_ok_Capture, sizeof(__pyx_k_ok_Capture), 0, 1, 0, 0},
    {&__pyx_kp_s_ok_Capture_pyx, __pyx_k_ok_Capture_pyx, sizeof(__pyx_k_ok_Capture_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_ok_alas_emulator_windows, __pyx_k_ok_alas_emulator_windows, sizeof(__pyx_k_ok_alas_emulator_windows), 0, 0, 1, 1},
    {&__pyx_n_s_ok_alas_platform_windows, __pyx_k_ok_alas_platform_windows, sizeof(__pyx_k_ok_alas_platform_windows), 0, 0, 1, 1},
    {&__pyx_n_s_ok_capture_adb_nemu_ipc, __pyx_k_ok_capture_adb_nemu_ipc, sizeof(__pyx_k_ok_capture_adb_nemu_ipc), 0, 0, 1, 1},
    {&__pyx_n_s_ok_capture_windows, __pyx_k_ok_capture_windows, sizeof(__pyx_k_ok_capture_windows), 0, 0, 1, 1},
    {&__pyx_n_s_ok_color_Color, __pyx_k_ok_color_Color, sizeof(__pyx_k_ok_color_Color), 0, 0, 1, 1},
    {&__pyx_n_s_ok_config_Config, __pyx_k_ok_config_Config, sizeof(__pyx_k_ok_config_Config), 0, 0, 1, 1},
    {&__pyx_n_s_ok_config_ConfigOption, __pyx_k_ok_config_ConfigOption, sizeof(__pyx_k_ok_config_ConfigOption), 0, 0, 1, 1},
    {&__pyx_n_s_ok_gui_Communicate, __pyx_k_ok_gui_Communicate, sizeof(__pyx_k_ok_gui_Communicate), 0, 0, 1, 1},
    {&__pyx_kp_u_ok_gui_executor_pause_pos_invali, __pyx_k_ok_gui_executor_pause_pos_invali, sizeof(__pyx_k_ok_gui_executor_pause_pos_invali), 0, 1, 0, 0},
    {&__pyx_n_s_ok_interaction_ADBInteraction, __pyx_k_ok_interaction_ADBInteraction, sizeof(__pyx_k_ok_interaction_ADBInteraction), 0, 0, 1, 1},
    {&__pyx_n_s_ok_interaction_PostMessageIntera, __pyx_k_ok_interaction_PostMessageIntera, sizeof(__pyx_k_ok_interaction_PostMessageIntera), 0, 0, 1, 1},
    {&__pyx_n_s_ok_interaction_PyDirectInteracti, __pyx_k_ok_interaction_PyDirectInteracti, sizeof(__pyx_k_ok_interaction_PyDirectInteracti), 0, 0, 1, 1},
    {&__pyx_n_s_ok_logging_Logger, __pyx_k_ok_logging_Logger, sizeof(__pyx_k_ok_logging_Logger), 0, 0, 1, 1},
    {&__pyx_n_s_ok_rotypes, __pyx_k_ok_rotypes, sizeof(__pyx_k_ok_rotypes), 0, 0, 1, 1},
    {&__pyx_n_s_ok_rotypes_Windows_Foundation, __pyx_k_ok_rotypes_Windows_Foundation, sizeof(__pyx_k_ok_rotypes_Windows_Foundation), 0, 0, 1, 1},
    {&__pyx_n_s_ok_rotypes_Windows_Graphics_Capt, __pyx_k_ok_rotypes_Windows_Graphics_Capt, sizeof(__pyx_k_ok_rotypes_Windows_Graphics_Capt), 0, 0, 1, 1},
    {&__pyx_n_s_ok_rotypes_Windows_Graphics_Dire, __pyx_k_ok_rotypes_Windows_Graphics_Dire, sizeof(__pyx_k_ok_rotypes_Windows_Graphics_Dire), 0, 0, 1, 1},
    {&__pyx_n_s_ok_rotypes_Windows_Graphics_Dire_2, __pyx_k_ok_rotypes_Windows_Graphics_Dire_2, sizeof(__pyx_k_ok_rotypes_Windows_Graphics_Dire_2), 0, 0, 1, 1},
    {&__pyx_n_s_ok_rotypes_roapi, __pyx_k_ok_rotypes_roapi, sizeof(__pyx_k_ok_rotypes_roapi), 0, 0, 1, 1},
    {&__pyx_n_s_ok_util_Handler, __pyx_k_ok_util_Handler, sizeof(__pyx_k_ok_util_Handler), 0, 0, 1, 1},
    {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
    {&__pyx_n_s_override_config, __pyx_k_override_config, sizeof(__pyx_k_override_config), 0, 0, 1, 1},
    {&__pyx_n_s_pData, __pyx_k_pData, sizeof(__pyx_k_pData), 0, 0, 1, 1},
    {&__pyx_n_s_package, __pyx_k_package, sizeof(__pyx_k_package), 0, 0, 1, 1},
    {&__pyx_n_s_packages, __pyx_k_packages, sizeof(__pyx_k_packages), 0, 0, 1, 1},
    {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
    {&__pyx_n_s_parse_ratio, __pyx_k_parse_ratio, sizeof(__pyx_k_parse_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_n_s_pause, __pyx_k_pause, sizeof(__pyx_k_pause), 0, 0, 1, 1},
    {&__pyx_n_s_pc, __pyx_k_pc, sizeof(__pyx_k_pc), 0, 0, 1, 1},
    {&__pyx_n_s_pc_device, __pyx_k_pc_device, sizeof(__pyx_k_pc_device), 0, 0, 1, 1},
    {&__pyx_n_s_pc_full_path, __pyx_k_pc_full_path, sizeof(__pyx_k_pc_full_path), 0, 0, 1, 1},
    {&__pyx_n_s_percent, __pyx_k_percent, sizeof(__pyx_k_percent), 0, 0, 1, 1},
    {&__pyx_n_s_phone_device, __pyx_k_phone_device, sizeof(__pyx_k_phone_device), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pid, __pyx_k_pid, sizeof(__pyx_k_pid), 0, 0, 1, 1},
    {&__pyx_n_s_platform, __pyx_k_platform, sizeof(__pyx_k_platform), 0, 0, 1, 1},
    {&__pyx_n_s_player_id, __pyx_k_player_id, sizeof(__pyx_k_player_id), 0, 0, 1, 1},
    {&__pyx_kp_u_player_id_2, __pyx_k_player_id_2, sizeof(__pyx_k_player_id_2), 0, 1, 0, 0},
    {&__pyx_kp_u_player_id_check_failed_cmdline, __pyx_k_player_id_check_failed_cmdline, sizeof(__pyx_k_player_id_check_failed_cmdline), 0, 1, 0, 0},
    {&__pyx_kp_s_pm_list_packages, __pyx_k_pm_list_packages, sizeof(__pyx_k_pm_list_packages), 0, 0, 1, 0},
    {&__pyx_n_s_png_bytes, __pyx_k_png_bytes, sizeof(__pyx_k_png_bytes), 0, 0, 1, 1},
    {&__pyx_n_s_pool, __pyx_k_pool, sizeof(__pyx_k_pool), 0, 0, 1, 1},
    {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
    {&__pyx_n_s_pos_valid, __pyx_k_pos_valid, sizeof(__pyx_k_pos_valid), 0, 0, 1, 1},
    {&__pyx_n_s_post, __pyx_k_post, sizeof(__pyx_k_post), 0, 0, 1, 1},
    {&__pyx_n_s_preferred, __pyx_k_preferred, sizeof(__pyx_k_preferred), 0, 0, 1, 1},
    {&__pyx_kp_u_preferred_device, __pyx_k_preferred_device, sizeof(__pyx_k_preferred_device), 0, 1, 0, 0},
    {&__pyx_kp_u_preferred_device_did_change, __pyx_k_preferred_device_did_change, sizeof(__pyx_k_preferred_device_did_change), 0, 1, 0, 0},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_proc, __pyx_k_proc, sizeof(__pyx_k_proc), 0, 0, 1, 1},
    {&__pyx_n_s_process, __pyx_k_process, sizeof(__pyx_k_process), 0, 0, 1, 1},
    {&__pyx_n_s_process_iter, __pyx_k_process_iter, sizeof(__pyx_k_process_iter), 0, 0, 1, 1},
    {&__pyx_n_s_prop, __pyx_k_prop, sizeof(__pyx_k_prop), 0, 0, 1, 1},
    {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
    {&__pyx_n_s_psutil, __pyx_k_psutil, sizeof(__pyx_k_psutil), 0, 0, 1, 1},
    {&__pyx_n_s_pycaw_api_audioclient, __pyx_k_pycaw_api_audioclient, sizeof(__pyx_k_pycaw_api_audioclient), 0, 0, 1, 1},
    {&__pyx_n_s_pycaw_utils, __pyx_k_pycaw_utils, sizeof(__pyx_k_pycaw_utils), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_ADBCaptureMethod, __pyx_k_pyx_unpickle_ADBCaptureMethod, sizeof(__pyx_k_pyx_unpickle_ADBCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_BaseCaptureMethod, __pyx_k_pyx_unpickle_BaseCaptureMethod, sizeof(__pyx_k_pyx_unpickle_BaseCaptureMethod), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_BaseWindowsCaptur, __pyx_k_pyx_unpickle_BaseWindowsCaptur, sizeof(__pyx_k_pyx_unpickle_BaseWindowsCaptur), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_BitBltCaptureMeth, __pyx_k_pyx_unpickle_BitBltCaptureMeth, sizeof(__pyx_k_pyx_unpickle_BitBltCaptureMeth), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_DesktopDuplicatio, __pyx_k_pyx_unpickle_DesktopDuplicatio, sizeof(__pyx_k_pyx_unpickle_DesktopDuplicatio), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_HwndWindow, __pyx_k_pyx_unpickle_HwndWindow, sizeof(__pyx_k_pyx_unpickle_HwndWindow), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_ImageCaptureMetho, __pyx_k_pyx_unpickle_ImageCaptureMetho, sizeof(__pyx_k_pyx_unpickle_ImageCaptureMetho), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_NemuIpcCaptureMet, __pyx_k_pyx_unpickle_NemuIpcCaptureMet, sizeof(__pyx_k_pyx_unpickle_NemuIpcCaptureMet), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_WindowsGraphicsCa, __pyx_k_pyx_unpickle_WindowsGraphicsCa, sizeof(__pyx_k_pyx_unpickle_WindowsGraphicsCa), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_qfluentwidgets, __pyx_k_qfluentwidgets, sizeof(__pyx_k_qfluentwidgets), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_ratio, __pyx_k_ratio, sizeof(__pyx_k_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_ratio_float, __pyx_k_ratio_float, sizeof(__pyx_k_ratio_float), 0, 0, 1, 1},
    {&__pyx_n_s_ratio_match, __pyx_k_ratio_match, sizeof(__pyx_k_ratio_match), 0, 0, 1, 1},
    {&__pyx_n_s_ratio_str, __pyx_k_ratio_str, sizeof(__pyx_k_ratio_str), 0, 0, 1, 1},
    {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_kp_u_real, __pyx_k_real, sizeof(__pyx_k_real), 0, 1, 0, 0},
    {&__pyx_n_s_real_height, __pyx_k_real_height, sizeof(__pyx_k_real_height), 0, 0, 1, 1},
    {&__pyx_n_s_real_width, __pyx_k_real_width, sizeof(__pyx_k_real_width), 0, 0, 1, 1},
    {&__pyx_n_s_real_x_offset, __pyx_k_real_x_offset, sizeof(__pyx_k_real_x_offset), 0, 0, 1, 1},
    {&__pyx_n_s_real_y_offset, __pyx_k_real_y_offset, sizeof(__pyx_k_real_y_offset), 0, 0, 1, 1},
    {&__pyx_n_s_rect, __pyx_k_rect, sizeof(__pyx_k_rect), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_kp_u_refresh, __pyx_k_refresh, sizeof(__pyx_k_refresh), 0, 1, 0, 0},
    {&__pyx_n_s_refresh_2, __pyx_k_refresh_2, sizeof(__pyx_k_refresh_2), 0, 0, 1, 1},
    {&__pyx_kp_u_refresh_current_only_skip_others, __pyx_k_refresh_current_only_skip_others, sizeof(__pyx_k_refresh_current_only_skip_others), 0, 1, 0, 0},
    {&__pyx_n_s_refresh_emulators, __pyx_k_refresh_emulators, sizeof(__pyx_k_refresh_emulators), 0, 0, 1, 1},
    {&__pyx_kp_u_refresh_emulators_2, __pyx_k_refresh_emulators_2, sizeof(__pyx_k_refresh_emulators_2), 0, 1, 0, 0},
    {&__pyx_n_s_refresh_phones, __pyx_k_refresh_phones, sizeof(__pyx_k_refresh_phones), 0, 0, 1, 1},
    {&__pyx_kp_u_refresh_phones_done, __pyx_k_refresh_phones_done, sizeof(__pyx_k_refresh_phones_done), 0, 1, 0, 0},
    {&__pyx_kp_u_refresh_phones_found_an_phone, __pyx_k_refresh_phones_found_an_phone, sizeof(__pyx_k_refresh_phones_found_an_phone), 0, 1, 0, 0},
    {&__pyx_n_s_remove_existing, __pyx_k_remove_existing, sizeof(__pyx_k_remove_existing), 0, 0, 1, 1},
    {&__pyx_n_s_require_bg, __pyx_k_require_bg, sizeof(__pyx_k_require_bg), 0, 0, 1, 1},
    {&__pyx_n_s_reset_device, __pyx_k_reset_device, sizeof(__pyx_k_reset_device), 0, 0, 1, 1},
    {&__pyx_n_s_reset_framepool, __pyx_k_reset_framepool, sizeof(__pyx_k_reset_framepool), 0, 0, 1, 1},
    {&__pyx_n_u_reset_framepool, __pyx_k_reset_framepool, sizeof(__pyx_k_reset_framepool), 0, 1, 0, 1},
    {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
    {&__pyx_n_s_resolution_dict, __pyx_k_resolution_dict, sizeof(__pyx_k_resolution_dict), 0, 0, 1, 1},
    {&__pyx_kp_u_resolution_error, __pyx_k_resolution_error, sizeof(__pyx_k_resolution_error), 0, 1, 0, 0},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 0, 1, 1},
    {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
    {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
    {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
    {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_n_s_save_file, __pyx_k_save_file, sizeof(__pyx_k_save_file), 0, 0, 1, 1},
    {&__pyx_n_s_scaling, __pyx_k_scaling, sizeof(__pyx_k_scaling), 0, 0, 1, 1},
    {&__pyx_n_s_screencap, __pyx_k_screencap, sizeof(__pyx_k_screencap), 0, 0, 1, 1},
    {&__pyx_kp_s_screencap_p, __pyx_k_screencap_p, sizeof(__pyx_k_screencap_p), 0, 0, 1, 0},
    {&__pyx_n_s_screenshot, __pyx_k_screenshot, sizeof(__pyx_k_screenshot), 0, 0, 1, 1},
    {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
    {&__pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a, __pyx_k_see_D3DDD_Note_Laptops_md_for_a, sizeof(__pyx_k_see_D3DDD_Note_Laptops_md_for_a), 0, 0, 1, 0},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_u_self_get_preferred_device_return, __pyx_k_self_get_preferred_device_return, sizeof(__pyx_k_self_get_preferred_device_return), 0, 1, 0, 0},
    {&__pyx_kp_u_self_window, __pyx_k_self_window, sizeof(__pyx_k_self_window), 0, 1, 0, 0},
    {&__pyx_n_s_serial, __pyx_k_serial, sizeof(__pyx_k_serial), 0, 0, 1, 1},
    {&__pyx_n_s_server_kill, __pyx_k_server_kill, sizeof(__pyx_k_server_kill), 0, 0, 1, 1},
    {&__pyx_kp_s_service_call_iphonesubinfo_4, __pyx_k_service_call_iphonesubinfo_4, sizeof(__pyx_k_service_call_iphonesubinfo_4), 0, 0, 1, 0},
    {&__pyx_n_s_session, __pyx_k_session, sizeof(__pyx_k_session), 0, 0, 1, 1},
    {&__pyx_n_s_sessions, __pyx_k_sessions, sizeof(__pyx_k_sessions), 0, 0, 1, 1},
    {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
    {&__pyx_kp_u_set_ADBUTILS_ADB_PATH, __pyx_k_set_ADBUTILS_ADB_PATH, sizeof(__pyx_k_set_ADBUTILS_ADB_PATH), 0, 1, 0, 0},
    {&__pyx_kp_u_set_ADBUTILS_ADB_PATH_failed, __pyx_k_set_ADBUTILS_ADB_PATH_failed, sizeof(__pyx_k_set_ADBUTILS_ADB_PATH_failed), 0, 1, 0, 0},
    {&__pyx_n_s_set_capture, __pyx_k_set_capture, sizeof(__pyx_k_set_capture), 0, 0, 1, 1},
    {&__pyx_n_s_set_hwnd_name, __pyx_k_set_hwnd_name, sizeof(__pyx_k_set_hwnd_name), 0, 0, 1, 1},
    {&__pyx_n_s_set_images, __pyx_k_set_images, sizeof(__pyx_k_set_images), 0, 0, 1, 1},
    {&__pyx_n_s_set_mute_state, __pyx_k_set_mute_state, sizeof(__pyx_k_set_mute_state), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_kp_u_set_preferred_device, __pyx_k_set_preferred_device, sizeof(__pyx_k_set_preferred_device), 0, 1, 0, 0},
    {&__pyx_n_s_set_preferred_device_2, __pyx_k_set_preferred_device_2, sizeof(__pyx_k_set_preferred_device_2), 0, 0, 1, 1},
    {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_settings_get_secure_android_id, __pyx_k_settings_get_secure_android_id, sizeof(__pyx_k_settings_get_secure_android_id), 0, 0, 1, 0},
    {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
    {&__pyx_n_s_shcore, __pyx_k_shcore, sizeof(__pyx_k_shcore), 0, 0, 1, 1},
    {&__pyx_n_s_shell, __pyx_k_shell, sizeof(__pyx_k_shell), 0, 0, 1, 1},
    {&__pyx_n_s_shell_device, __pyx_k_shell_device, sizeof(__pyx_k_shell_device), 0, 0, 1, 1},
    {&__pyx_n_s_short_description, __pyx_k_short_description, sizeof(__pyx_k_short_description), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_sizeof, __pyx_k_sizeof, sizeof(__pyx_k_sizeof), 0, 0, 1, 1},
    {&__pyx_n_s_skip_if_running, __pyx_k_skip_if_running, sizeof(__pyx_k_skip_if_running), 0, 0, 1, 1},
    {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
    {&__pyx_kp_s_slower_bound_to_display, __pyx_k_slower_bound_to_display, sizeof(__pyx_k_slower_bound_to_display), 0, 0, 1, 0},
    {&__pyx_n_s_socket_timeout, __pyx_k_socket_timeout, sizeof(__pyx_k_socket_timeout), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_start_or_stop, __pyx_k_start_or_stop, sizeof(__pyx_k_start_or_stop), 0, 0, 1, 1},
    {&__pyx_kp_u_start_or_stop_failed, __pyx_k_start_or_stop_failed, sizeof(__pyx_k_start_or_stop_failed), 0, 1, 0, 0},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_kp_s_str_int_None, __pyx_k_str_int_None, sizeof(__pyx_k_str_int_None), 0, 0, 1, 0},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_support, __pyx_k_support, sizeof(__pyx_k_support), 0, 0, 1, 1},
    {&__pyx_n_s_supported_ratio, __pyx_k_supported_ratio, sizeof(__pyx_k_supported_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_supported_resolution, __pyx_k_supported_resolution, sizeof(__pyx_k_supported_resolution), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
    {&__pyx_n_s_target_height, __pyx_k_target_height, sizeof(__pyx_k_target_height), 0, 0, 1, 1},
    {&__pyx_n_s_target_method, __pyx_k_target_method, sizeof(__pyx_k_target_method), 0, 0, 1, 1},
    {&__pyx_n_s_target_width, __pyx_k_target_width, sizeof(__pyx_k_target_width), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_test_exclusive_full_screen, __pyx_k_test_exclusive_full_screen, sizeof(__pyx_k_test_exclusive_full_screen), 0, 0, 1, 1},
    {&__pyx_n_s_test_is_not_pure_color, __pyx_k_test_is_not_pure_color, sizeof(__pyx_k_test_is_not_pure_color), 0, 0, 1, 1},
    {&__pyx_kp_s_test_is_not_pure_color_failed_ca, __pyx_k_test_is_not_pure_color_failed_ca, sizeof(__pyx_k_test_is_not_pure_color_failed_ca), 0, 0, 1, 0},
    {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
    {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
    {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
    {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
    {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
    {&__pyx_n_u_title_2, __pyx_k_title_2, sizeof(__pyx_k_title_2), 0, 1, 0, 1},
    {&__pyx_n_s_title_height, __pyx_k_title_height, sizeof(__pyx_k_title_height), 0, 0, 1, 1},
    {&__pyx_kp_u_to, __pyx_k_to, sizeof(__pyx_k_to), 0, 1, 0, 0},
    {&__pyx_n_s_true, __pyx_k_true, sizeof(__pyx_k_true), 0, 0, 1, 1},
    {&__pyx_n_s_try_connect, __pyx_k_try_connect, sizeof(__pyx_k_try_connect), 0, 0, 1, 1},
    {&__pyx_n_s_try_delete_dc, __pyx_k_try_delete_dc, sizeof(__pyx_k_try_delete_dc), 0, 0, 1, 1},
    {&__pyx_n_s_try_kill_adb, __pyx_k_try_kill_adb, sizeof(__pyx_k_try_kill_adb), 0, 0, 1, 1},
    {&__pyx_kp_s_try_kill_adb_end, __pyx_k_try_kill_adb_end, sizeof(__pyx_k_try_kill_adb_end), 0, 0, 1, 0},
    {&__pyx_kp_s_try_kill_adb_server, __pyx_k_try_kill_adb_server, sizeof(__pyx_k_try_kill_adb_server), 0, 0, 1, 0},
    {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
    {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
    {&__pyx_kp_s_unmute_game_because_option_is_tu, __pyx_k_unmute_game_because_option_is_tu, sizeof(__pyx_k_unmute_game_because_option_is_tu), 0, 0, 1, 0},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_update_capture_method, __pyx_k_update_capture_method, sizeof(__pyx_k_update_capture_method), 0, 0, 1, 1},
    {&__pyx_kp_u_update_capture_method_exception, __pyx_k_update_capture_method_exception, sizeof(__pyx_k_update_capture_method_exception), 0, 1, 0, 0},
    {&__pyx_n_s_update_device_list, __pyx_k_update_device_list, sizeof(__pyx_k_update_device_list), 0, 0, 1, 1},
    {&__pyx_n_s_update_emulator, __pyx_k_update_emulator, sizeof(__pyx_k_update_emulator), 0, 0, 1, 1},
    {&__pyx_n_s_update_frame_size, __pyx_k_update_frame_size, sizeof(__pyx_k_update_frame_size), 0, 0, 1, 1},
    {&__pyx_kp_u_update_frame_size_2, __pyx_k_update_frame_size_2, sizeof(__pyx_k_update_frame_size_2), 0, 1, 0, 0},
    {&__pyx_kp_u_update_path_and_id, __pyx_k_update_path_and_id, sizeof(__pyx_k_update_path_and_id), 0, 1, 0, 0},
    {&__pyx_n_s_update_pc_device, __pyx_k_update_pc_device, sizeof(__pyx_k_update_pc_device), 0, 0, 1, 1},
    {&__pyx_kp_u_update_resolution_for, __pyx_k_update_resolution_for, sizeof(__pyx_k_update_resolution_for), 0, 1, 0, 0},
    {&__pyx_n_s_update_resolution_for_hwnd, __pyx_k_update_resolution_for_hwnd, sizeof(__pyx_k_update_resolution_for_hwnd), 0, 0, 1, 1},
    {&__pyx_n_s_update_window, __pyx_k_update_window, sizeof(__pyx_k_update_window), 0, 0, 1, 1},
    {&__pyx_n_s_update_window_size, __pyx_k_update_window_size, sizeof(__pyx_k_update_window_size), 0, 0, 1, 1},
    {&__pyx_kp_u_use_adb_capture, __pyx_k_use_adb_capture, sizeof(__pyx_k_use_adb_capture), 0, 1, 0, 0},
    {&__pyx_n_s_use_bit_blt_only, __pyx_k_use_bit_blt_only, sizeof(__pyx_k_use_bit_blt_only), 0, 0, 1, 1},
    {&__pyx_n_s_use_last_error, __pyx_k_use_last_error, sizeof(__pyx_k_use_last_error), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_kp_s_use_the_adb_screencap_command_sl, __pyx_k_use_the_adb_screencap_command_sl, sizeof(__pyx_k_use_the_adb_screencap_command_sl), 0, 0, 1, 0},
    {&__pyx_n_s_use_windows_capture, __pyx_k_use_windows_capture, sizeof(__pyx_k_use_windows_capture), 0, 0, 1, 1},
    {&__pyx_n_s_user32, __pyx_k_user32, sizeof(__pyx_k_user32), 0, 0, 1, 1},
    {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
    {&__pyx_n_s_validate_mute_config, __pyx_k_validate_mute_config, sizeof(__pyx_k_validate_mute_config), 0, 0, 1, 1},
    {&__pyx_n_s_validator, __pyx_k_validator, sizeof(__pyx_k_validator), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
    {&__pyx_n_s_visible, __pyx_k_visible, sizeof(__pyx_k_visible), 0, 0, 1, 1},
    {&__pyx_kp_u_vms_MuMuPlayer_12_0, __pyx_k_vms_MuMuPlayer_12_0, sizeof(__pyx_k_vms_MuMuPlayer_12_0), 0, 1, 0, 0},
    {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
    {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
    {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
    {&__pyx_n_s_win32, __pyx_k_win32, sizeof(__pyx_k_win32), 0, 0, 1, 1},
    {&__pyx_n_s_win32api, __pyx_k_win32api, sizeof(__pyx_k_win32api), 0, 0, 1, 1},
    {&__pyx_n_s_win32con, __pyx_k_win32con, sizeof(__pyx_k_win32con), 0, 0, 1, 1},
    {&__pyx_n_s_win32gui, __pyx_k_win32gui, sizeof(__pyx_k_win32gui), 0, 0, 1, 1},
    {&__pyx_n_s_win32process, __pyx_k_win32process, sizeof(__pyx_k_win32process), 0, 0, 1, 1},
    {&__pyx_n_s_win32ui, __pyx_k_win32ui, sizeof(__pyx_k_win32ui), 0, 0, 1, 1},
    {&__pyx_n_s_win_graphic, __pyx_k_win_graphic, sizeof(__pyx_k_win_graphic), 0, 0, 1, 1},
    {&__pyx_n_s_win_interaction_class, __pyx_k_win_interaction_class, sizeof(__pyx_k_win_interaction_class), 0, 0, 1, 1},
    {&__pyx_n_s_windll, __pyx_k_windll, sizeof(__pyx_k_windll), 0, 0, 1, 1},
    {&__pyx_kp_u_window, __pyx_k_window, sizeof(__pyx_k_window), 0, 1, 0, 0},
    {&__pyx_n_s_window_2, __pyx_k_window_2, sizeof(__pyx_k_window_2), 0, 0, 1, 1},
    {&__pyx_n_s_window_bottom, __pyx_k_window_bottom, sizeof(__pyx_k_window_bottom), 0, 0, 1, 1},
    {&__pyx_n_s_window_height, __pyx_k_window_height, sizeof(__pyx_k_window_height), 0, 0, 1, 1},
    {&__pyx_n_s_window_left, __pyx_k_window_left, sizeof(__pyx_k_window_left), 0, 0, 1, 1},
    {&__pyx_n_s_window_ratio, __pyx_k_window_ratio, sizeof(__pyx_k_window_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_window_right, __pyx_k_window_right, sizeof(__pyx_k_window_right), 0, 0, 1, 1},
    {&__pyx_n_s_window_top, __pyx_k_window_top, sizeof(__pyx_k_window_top), 0, 0, 1, 1},
    {&__pyx_n_s_window_width, __pyx_k_window_width, sizeof(__pyx_k_window_width), 0, 0, 1, 1},
    {&__pyx_n_s_windows, __pyx_k_windows, sizeof(__pyx_k_windows), 0, 0, 1, 1},
    {&__pyx_n_s_windows_capture_config, __pyx_k_windows_capture_config, sizeof(__pyx_k_windows_capture_config), 0, 0, 1, 1},
    {&__pyx_n_s_windows_graphics_available, __pyx_k_windows_graphics_available, sizeof(__pyx_k_windows_graphics_available), 0, 0, 1, 1},
    {&__pyx_n_s_winerror, __pyx_k_winerror, sizeof(__pyx_k_winerror), 0, 0, 1, 1},
    {&__pyx_n_s_wintypes, __pyx_k_wintypes, sizeof(__pyx_k_wintypes), 0, 0, 1, 1},
    {&__pyx_n_s_wrap, __pyx_k_wrap, sizeof(__pyx_k_wrap), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
    {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
    {&__pyx_kp_u_x_2, __pyx_k_x_2, sizeof(__pyx_k_x_2), 0, 1, 0, 0},
    {&__pyx_n_s_x_offset, __pyx_k_x_offset, sizeof(__pyx_k_x_offset), 0, 0, 1, 1},
    {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
    {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
    {&__pyx_kp_u_y_2, __pyx_k_y_2, sizeof(__pyx_k_y_2), 0, 1, 0, 0},
    {&__pyx_n_s_y_offset, __pyx_k_y_offset, sizeof(__pyx_k_y_offset), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 1047, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 897, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 930, __pyx_L1_error)
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 989, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 1525, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 1573, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cfunc.to_py":67
 * @cname("__Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y")
 * cdef object __Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y(object (*f)(WindowsGraphicsCaptureMethod, object, object) ):
 *     def wrap(WindowsGraphicsCaptureMethod self, object x, object y):             # <<<<<<<<<<<<<<
 *         """wrap(self: 'WindowsGraphicsCaptureMethod', x, y)"""
 *         return f(self, x, y)
 */
  __pyx_tuple_ = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_wrap, 67, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(1, 67, __pyx_L1_error)

  /* "ok/Capture.pyx":48
 * 
 *     def __init__(self):
 *         self._size = (0, 0)             # <<<<<<<<<<<<<<
 *         self.exit_event = None
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "ok/Capture.pyx":72
 *                 self._size = (frame.shape[1], frame.shape[0])
 *                 if frame.shape[2] == 4:
 *                     frame = frame[:, :, :3]             # <<<<<<<<<<<<<<
 *             return frame
 *         except Exception as e:
 */
  __pyx_slice__4 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);
  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_3, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_slice__4, __pyx_slice__4, __pyx_slice__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "ok/Capture.pyx":349
 * 
 *             if frame is not None:
 *                 new_height, new_width = frame.shape[:2]             # <<<<<<<<<<<<<<
 *                 if new_width <= 0 or new_width <= 0:
 *                     logger.warning(f"get_frame size <=0 {new_width}x{new_height}")
 */
  __pyx_slice__9 = PySlice_New(Py_None, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__9);
  __Pyx_GIVEREF(__pyx_slice__9);

  /* "ok/Capture.pyx":574
 *             logger.info('unmute game because option is turned off')
 *             set_mute_state(self.hwnd, 0)
 *         return True, None             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  __pyx_tuple__13 = PyTuple_Pack(2, Py_True, Py_None); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "ok/Capture.pyx":635
 *                         if self.device_manager.executor.pause():
 *                             logger.error(f'ok.gui.executor.pause pos_invalid: {x, y, width, height}')
 *                             communicate.notification.emit('Paused because game window is minimized or out of screen!',             # <<<<<<<<<<<<<<
 *                                                           None,
 *                                                           True, True)
 */
  __pyx_tuple__15 = PyTuple_Pack(4, __pyx_kp_s_Paused_because_game_window_is_mi, Py_None, Py_True, Py_True); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "ok/Capture.pyx":642
 *                 else:
 *                     if self.device_manager.executor is not None and self.device_manager.executor.pause():
 *                         communicate.notification.emit('Paused because game exited', None, True, True)             # <<<<<<<<<<<<<<
 *                     self.hwnd = None
 *                 changed = False
 */
  __pyx_tuple__16 = PyTuple_Pack(4, __pyx_kp_s_Paused_because_game_exited, Py_None, Py_True, Py_True); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "ok/Capture.pyx":713
 *     results = []
 *     if exe_name is None and title is None:
 *         return None, None, None, 0, 0, 0, 0             # <<<<<<<<<<<<<<
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(7, Py_None, Py_None, Py_None, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "ok/Capture.pyx":716
 *     frame_aspect_ratio = frame_width / frame_height if frame_height != 0 else 0
 * 
 *     def callback(hwnd, lParam):             # <<<<<<<<<<<<<<
 *         if win32gui.IsWindow(hwnd) and win32gui.IsWindowEnabled(hwnd) and win32gui.IsWindowVisible(hwnd):
 *             text = win32gui.GetWindowText(hwnd)
 */
  __pyx_tuple__19 = PyTuple_Pack(13, __pyx_n_s_hwnd, __pyx_n_s_lParam, __pyx_n_s_text, __pyx_n_s_name_2, __pyx_n_s_full_path, __pyx_n_s_cmdline, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s__7, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_scaling, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_callback, 716, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 716, __pyx_L1_error)

  /* "ok/Capture.pyx":810
 *     """
 * 
 *     def child_callback(hwnd, _):             # <<<<<<<<<<<<<<
 *         visible = win32gui.IsWindowVisible(hwnd)
 *         parent = win32gui.GetParent(hwnd)
 */
  __pyx_tuple__21 = PyTuple_Pack(13, __pyx_n_s_hwnd, __pyx_n_s__7, __pyx_n_s_visible, __pyx_n_s_parent, __pyx_n_s_rect, __pyx_n_s_real_width, __pyx_n_s_real_height, __pyx_n_s_ratio, __pyx_n_s_difference, __pyx_n_s_support, __pyx_n_s_percent, __pyx_n_s_x_offset, __pyx_n_s_y_offset); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_child_callback, 810, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 810, __pyx_L1_error)

  /* "ok/Capture.pyx":842
 *             return process.name(), process.exe(), process.cmdline()
 *         else:
 *             return None, None, None             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error('get_exe_by_hwnd error', e)
 */
  __pyx_tuple__23 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "ok/Capture.pyx":897
 *         if display.hmonitor == hmonitor:
 *             return display
 *     raise ValueError("Display not found")             # <<<<<<<<<<<<<<
 * 
 * DWMWA_EXTENDED_FRAME_BOUNDS = 9
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Display_not_found); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "ok/Capture.pyx":922
 * def decimal(value: float):
 *     # Using ljust instead of :2f because of python float rounding errors
 *     return f"{int(value * 100) / 100}".ljust(4, "0")             # <<<<<<<<<<<<<<
 * 
 * def is_digit(value: str | int | None):
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_int_4, __pyx_kp_s_0); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "ok/Capture.pyx":1407
 *             return self.shell_device(device, *args, **kwargs)
 *         else:
 *             raise Exception('Device is none')             # <<<<<<<<<<<<<<
 * 
 *     def device_connected(self):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Device_is_none); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "ok/Capture.pyx":1536
 *             # https://mumu.163.com/help/20230802/35047_1102450.html
 *             logger.error('Please turn off enable background keep alive in MuMuPlayer settings')
 *             raise Exception('Please turn off enable background keep alive in MuMuPlayer settings')             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Please_turn_off_enable_backgroun); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "ok/Capture.pyx":1578
 *     if not keys:
 *         return d
 *     return deep_get(d.get(keys[0]), keys[1:], default)             # <<<<<<<<<<<<<<
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,
 */
  __pyx_slice__30 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__30)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__30);
  __Pyx_GIVEREF(__pyx_slice__30);

  /* "ok/Capture.pyx":1590
 *             #         f"try BitBlt method {config} {hwnd} current_type:{type(capture_method)}")
 *             global render_full
 *             render_full = config.get('bit_blt_render_full', False)             # <<<<<<<<<<<<<<
 *             target_method = BitBltCaptureMethod
 *             capture_method = get_capture(capture_method, target_method, hwnd, exit_event)
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_bit_blt_render_full, Py_False); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "ok/Capture.pyx":1654
 *     except Exception as e:
 *         logger.error(f'get_window_bounds exception', e)
 *         return 0, 0, 0, 0, 0, 0, 1             # <<<<<<<<<<<<<<
 * 
 * def is_foreground_window(hwnd):
 */
  __pyx_tuple__32 = PyTuple_Pack(7, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5ca900c, 0x4931da1, 0x42490af):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x5ca900c, 0x4931da1, 0x42490af) = (_size, exit_event))" % __pyx_checksum
 */
  __pyx_tuple__33 = PyTuple_Pack(3, __pyx_int_97161228, __pyx_int_76750241, __pyx_int_69505199); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_tuple__34 = PyTuple_Pack(3, __pyx_int_268090033, __pyx_int_159312098, __pyx_int_63776034); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_int_36463512, __pyx_int_18546816, __pyx_int_267537657); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_int_147817759, __pyx_int_30750855, __pyx_int_252227782); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_int_55865105, __pyx_int_101491740, __pyx_int_252510149); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_int_37823798, __pyx_int_74253587, __pyx_int_129754191); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_tuple__39 = PyTuple_Pack(3, __pyx_int_166164177, __pyx_int_198801806, __pyx_int_184679976); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_tuple__40 = PyTuple_Pack(3, __pyx_int_15891862, __pyx_int_137420293, __pyx_int_258103348); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "ok/Capture.pyx":51
 *         self.exit_event = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         # Some capture methods don't need an initialization process
 *         pass
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_close, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 51, __pyx_L1_error)

  /* "ok/Capture.pyx":63
 *         return self._size[1]
 * 
 *     cpdef object get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         if self.exit_event.is_set():
 */
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_frame, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 63, __pyx_L1_error)

  /* "ok/Capture.pyx":80
 *         return f'{self.__class__.__name__}_{self.width}x{self.height}'
 * 
 *     def do_get_frame(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 80, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 80, __pyx_L1_error)

  /* "ok/Capture.pyx":83
 *         pass
 * 
 *     def draw_rectangle(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_draw_rectangle, 83, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 83, __pyx_L1_error)

  /* "ok/Capture.pyx":86
 *         pass
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_clickable, 86, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 86, __pyx_L1_error)

  /* "ok/Capture.pyx":89
 *         pass
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_connected, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 89, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":107
 *         self._hwnd_window = hwnd_window
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f"check connected {self._hwnd_window}")
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 */
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_connected, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "ok/Capture.pyx":111
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_abs_cords, 111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 111, __pyx_L1_error)

  /* "ok/Capture.pyx":114
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.visible
 * 
 */
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_clickable, 114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 114, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseWindowsCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":125
 *         return result
 * 
 * def get_crop_point(frame_width, frame_height, target_width, target_height):             # <<<<<<<<<<<<<<
 *     x = round((frame_width - target_width) / 2)
 *     y = (frame_height - target_height) - x
 */
  __pyx_tuple__57 = PyTuple_Pack(6, __pyx_n_s_frame_width, __pyx_n_s_frame_height, __pyx_n_s_target_width, __pyx_n_s_target_height, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_crop_point, 125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 125, __pyx_L1_error)

  /* "ok/Capture.pyx":246
 *         self.start_or_stop()
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_connected, 246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 246, __pyx_L1_error)

  /* "ok/Capture.pyx":249
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 *     def start_or_stop(self, capture_cursor=False):             # <<<<<<<<<<<<<<
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:
 */
  __pyx_tuple__60 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_capture_cursor, __pyx_n_s_d3d11, __pyx_n_s_IInspectable, __pyx_n_s_TypedEventHandler, __pyx_n_s_Direct3D11CaptureFramePool, __pyx_n_s_IGraphicsCaptureItemInterop, __pyx_n_s_IGraphicsCaptureItem, __pyx_n_s_GraphicsCaptureItem, __pyx_n_s_DirectXPixelFormat, __pyx_n_s_IDirect3DDevice, __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe, __pyx_n_s_IDirect3DDxgiInterfaceAccess, __pyx_n_s_GetActivationFactory, __pyx_n_s_interop, __pyx_n_s_item, __pyx_n_s_delegate, __pyx_n_s_pool, __pyx_n_s_e); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_start_or_stop, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_tuple__62 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "ok/Capture.pyx":296
 *         return self.hwnd_window.exists
 * 
 *     def create_device(self):             # <<<<<<<<<<<<<<
 *         from ok.capture.windows import d3d11
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice
 */
  __pyx_tuple__63 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_d3d11, __pyx_n_s_CreateDirect3D11DeviceFromDXGIDe); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_create_device, 296, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 296, __pyx_L1_error)

  /* "ok/Capture.pyx":314
 *         self.evtoken = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:
 */
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_close, 314, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 314, __pyx_L1_error)

  /* "ok/Capture.pyx":330
 *             self.cputex.Release()
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         cdef double latency
 */
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 330, __pyx_L1_error)

  /* "ok/Capture.pyx":360
 *                 return frame
 * 
 *     def reset_framepool(self, size, reset_device=False):             # <<<<<<<<<<<<<<
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 */
  __pyx_tuple__67 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_size, __pyx_n_s_reset_device, __pyx_n_s_DirectXPixelFormat); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_reset_framepool, 360, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 360, __pyx_L1_error)

  /* "ok/Capture.pyx":368
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)
 * 
 *     def crop_image(self, frame):             # <<<<<<<<<<<<<<
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 */
  __pyx_tuple__69 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_frame, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_crop_image, 368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 368, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":375
 *         return frame
 * 
 * def crop_image(image, border, title_height):             # <<<<<<<<<<<<<<
 *     # Load the image
 *     # Image dimensions
 */
  __pyx_tuple__73 = PyTuple_Pack(8, __pyx_n_s_image, __pyx_n_s_border, __pyx_n_s_title_height, __pyx_n_s_height, __pyx_n_s_width, __pyx_n_s_x2, __pyx_n_s_y2, __pyx_n_s_cropped_image); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_crop_image, 375, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 375, __pyx_L1_error)

  /* "ok/Capture.pyx":396
 *     return cropped_image
 * 
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1             # <<<<<<<<<<<<<<
 * 
 * def windows_graphics_available():
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "ok/Capture.pyx":398
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1
 * 
 * def windows_graphics_available():             # <<<<<<<<<<<<<<
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 */
  __pyx_tuple__76 = PyTuple_Pack(4, __pyx_n_s_idldsl, __pyx_n_s_GetActivationFactory, __pyx_n_s_IGraphicsCaptureItemInterop, __pyx_n_s_e); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_windows_graphics_available, 398, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 398, __pyx_L1_error)

  /* "ok/Capture.pyx":413
 *             return False
 * 
 * def is_blank(image):             # <<<<<<<<<<<<<<
 *     """
 *     BitBlt can return a balnk buffer. Either because the target is unsupported,
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_n_s_image); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_is_blank, 413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 413, __pyx_L1_error)

  /* "ok/Capture.pyx":432
 *     )
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 432, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 432, __pyx_L1_error)

  /* "ok/Capture.pyx":446
 *                                      render_full)
 * 
 *     def test_exclusive_full_screen(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_frame); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_test_exclusive_full_screen, 446, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 446, __pyx_L1_error)

  /* "ok/Capture.pyx":453
 *         return True
 * 
 *     def test_is_not_pure_color(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_test_is_not_pure_color, 453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 453, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BitBltCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":570
 *         self.thread.start()
 * 
 *     def validate_mute_config(self, key, value):             # <<<<<<<<<<<<<<
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:
 *             logger.info('unmute game because option is turned off')
 */
  __pyx_tuple__86 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_validate_mute_config, 570, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 570, __pyx_L1_error)

  /* "ok/Capture.pyx":576
 *         return True, None
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         self.stop_event.set()
 * 
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_stop, 576, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 576, __pyx_L1_error)

  /* "ok/Capture.pyx":579
 *         self.stop_event.set()
 * 
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         self.player_id = player_id
 *         self.title = title
 */
  __pyx_tuple__89 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_title, __pyx_n_s_exe_name, __pyx_n_s_frame_width, __pyx_n_s_frame_height, __pyx_n_s_player_id, __pyx_n_s_hwnd_class); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_window, 579, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 579, __pyx_L1_error)
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "ok/Capture.pyx":586
 *         self.hwnd_class = hwnd_class
 * 
 *     def update_frame_size(self, width, height):             # <<<<<<<<<<<<<<
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:
 */
  __pyx_tuple__92 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_frame_size, 586, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 586, __pyx_L1_error)

  /* "ok/Capture.pyx":597
 *         self.do_update_window_size()
 * 
 *     def update_window_size(self):             # <<<<<<<<<<<<<<
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():
 *             self.do_update_window_size()
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_window_size, 597, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 597, __pyx_L1_error)

  /* "ok/Capture.pyx":605
 *             set_mute_state(self.hwnd, 0)
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.x + x, self.y + y
 * 
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_abs_cords, 605, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 605, __pyx_L1_error)

  /* "ok/Capture.pyx":608
 *         return self.x + x, self.y + y
 * 
 *     def do_update_window_size(self):             # <<<<<<<<<<<<<<
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 */
  __pyx_tuple__96 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_visible, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_window_width, __pyx_n_s_window_height, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_scaling, __pyx_n_s_name_2, __pyx_n_s_window_ratio, __pyx_n_s_cropped_window_height, __pyx_n_s_pos_valid, __pyx_n_s_changed, __pyx_n_s_e); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_update_window_size, 608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 608, __pyx_L1_error)

  /* "ok/Capture.pyx":664
 *             logger.error(f"do_update_window_size exception", e)
 * 
 *     def handle_mute(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_handle_mute, 664, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 664, __pyx_L1_error)

  /* "ok/Capture.pyx":668
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 * 
 *     def frame_ratio(self, size):             # <<<<<<<<<<<<<<
 *         if self.frame_width > 0 and self.width > 0:
 *             return int(size / self.frame_width * self.width)
 */
  __pyx_tuple__99 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_size); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_frame_ratio, 668, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 668, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HwndWindow__set_state(self, __pyx_state)
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":685
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 * 
 * def check_pos(x, y, width, height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(5, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_monitors_bounds); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_check_pos, 685, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 685, __pyx_L1_error)

  /* "ok/Capture.pyx":688
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 * def get_monitors_bounds():             # <<<<<<<<<<<<<<
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()
 */
  __pyx_tuple__105 = PyTuple_Pack(5, __pyx_n_s_monitors_bounds, __pyx_n_s_monitors, __pyx_n_s_monitor, __pyx_n_s_monitor_info, __pyx_n_s_monitor_rect); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_monitors_bounds, 688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 688, __pyx_L1_error)

  /* "ok/Capture.pyx":697
 *     return monitors_bounds
 * 
 * def is_window_in_screen_bounds(window_left, window_top, window_width, window_height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     window_right, window_bottom = window_left + window_width, window_top + window_height
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(12, __pyx_n_s_window_left, __pyx_n_s_window_top, __pyx_n_s_window_width, __pyx_n_s_window_height, __pyx_n_s_monitors_bounds, __pyx_n_s_window_right, __pyx_n_s_window_bottom, __pyx_n_s_monitor_rect, __pyx_n_s_monitor_left, __pyx_n_s_monitor_top, __pyx_n_s_monitor_right, __pyx_n_s_monitor_bottom); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_is_window_in_screen_bounds, 697, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 697, __pyx_L1_error)

  /* "ok/Capture.pyx":710
 *     return False
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):             # <<<<<<<<<<<<<<
 *     results = []
 *     if exe_name is None and title is None:
 */
  __pyx_tuple__109 = PyTuple_Pack(17, __pyx_n_s_title, __pyx_n_s_exe_name, __pyx_n_s_frame_width, __pyx_n_s_frame_height, __pyx_n_s_player_id, __pyx_n_s_class_name, __pyx_n_s_results, __pyx_n_s_frame_aspect_ratio, __pyx_n_s_callback, __pyx_n_s_callback, __pyx_n_s_biggest, __pyx_n_s_result, __pyx_n_s_x_offset, __pyx_n_s_y_offset, __pyx_n_s_real_width, __pyx_n_s_real_height, __pyx_n_s_matching_child); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_find_hwnd, 710, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 710, __pyx_L1_error)

  /* "ok/Capture.pyx":767
 *     return None, None, None, 0, 0, 0, 0
 * 
 * def get_mute_state(hwnd):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */
  __pyx_tuple__111 = PyTuple_Pack(8, __pyx_n_s_hwnd, __pyx_n_s_ISimpleAudioVolume, __pyx_n_s_AudioUtilities, __pyx_n_s__7, __pyx_n_s_pid, __pyx_n_s_sessions, __pyx_n_s_session, __pyx_n_s_volume); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_mute_state, 767, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 767, __pyx_L1_error)

  /* "ok/Capture.pyx":779
 * 
 * # Function to get the mute state
 * def set_mute_state(hwnd, mute):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */
  __pyx_tuple__113 = PyTuple_Pack(9, __pyx_n_s_hwnd, __pyx_n_s_mute, __pyx_n_s_ISimpleAudioVolume, __pyx_n_s_AudioUtilities, __pyx_n_s__7, __pyx_n_s_pid, __pyx_n_s_sessions, __pyx_n_s_session, __pyx_n_s_volume); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_set_mute_state, 779, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 779, __pyx_L1_error)

  /* "ok/Capture.pyx":790
 *             break
 * 
 * def get_player_id_from_cmdline(cmdline):             # <<<<<<<<<<<<<<
 *     for i in range(len(cmdline)):
 *         if i != 0:
 */
  __pyx_tuple__115 = PyTuple_Pack(3, __pyx_n_s_cmdline, __pyx_n_s_i, __pyx_n_s_value); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_player_id_from_cmdline, 790, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 790, __pyx_L1_error)

  /* "ok/Capture.pyx":803
 *     return 0
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):             # <<<<<<<<<<<<<<
 *     ratio_match = []
 *     """
 */
  __pyx_tuple__117 = PyTuple_Pack(5, __pyx_n_s_biggest, __pyx_n_s_frame_aspect_ratio, __pyx_n_s_ratio_match, __pyx_n_s_child_callback, __pyx_n_s_child_callback); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_enum_child_windows, 803, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 803, __pyx_L1_error)

  /* "ok/Capture.pyx":832
 *         return ratio_match[0]
 * 
 * def get_exe_by_hwnd(hwnd):             # <<<<<<<<<<<<<<
 *     # Get the process ID associated with the window
 *     try:
 */
  __pyx_tuple__119 = PyTuple_Pack(5, __pyx_n_s_hwnd, __pyx_n_s__7, __pyx_n_s_pid, __pyx_n_s_process, __pyx_n_s_e); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_exe_by_hwnd, 832, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 832, __pyx_L1_error)

  /* "ok/Capture.pyx":866
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 * 
 *         hwnd = self.hwnd_window.hwnd
 */
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 866, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 866, __pyx_L1_error)

  /* "ok/Capture.pyx":889
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.desktop_duplication is not None:
 *             self.desktop_duplication.stop()
 */
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_close, 889, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 889, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":920
 * 
 * 
 * def decimal(value: float):             # <<<<<<<<<<<<<<
 *     # Using ljust instead of :2f because of python float rounding errors
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 */
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_n_s_value); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_decimal, 920, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 920, __pyx_L1_error)

  /* "ok/Capture.pyx":924
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 * 
 * def is_digit(value: str | int | None):             # <<<<<<<<<<<<<<
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:
 */
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_is_digit, 924, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 924, __pyx_L1_error)

  /* "ok/Capture.pyx":933
 *         return False
 * 
 * def is_valid_hwnd(hwnd: int):             # <<<<<<<<<<<<<<
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_n_s_hwnd); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_is_valid_hwnd, 933, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 933, __pyx_L1_error)

  /* "ok/Capture.pyx":941
 *     return True
 * 
 * def try_delete_dc(dc):             # <<<<<<<<<<<<<<
 *     try:
 *         dc.DeleteDC()
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_n_s_dc); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_try_delete_dc, 941, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 941, __pyx_L1_error)

  /* "ok/Capture.pyx":959
 *         self.device_manager = device_manager
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         return self.screencap()
 * 
 */
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 959, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 959, __pyx_L1_error)

  /* "ok/Capture.pyx":973
 *         return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         if not self._connected and self.device_manager.device is not None:
 *             self.screencap()
 */
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_connected, 973, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 973, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ADBCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":988
 *         self.set_images(images)
 * 
 *     def set_images(self, images):             # <<<<<<<<<<<<<<
 *         self.images = list(reversed(images))
 *         self.get_frame()  # fill size
 */
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_images); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_set_images, 988, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 988, __pyx_L1_error)

  /* "ok/Capture.pyx":993
 *         self.images = list(reversed(images))
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef str image_path
 *         if len(self.images) > 0:
 */
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 993, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(0, 993, __pyx_L1_error)

  /* "ok/Capture.pyx":1001
 *                 return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_connected, 1001, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 1001, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":1007
 * class DeviceManager:
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):             # <<<<<<<<<<<<<<
 *         logger.info('__init__ start')
 *         self._device = None
 */
  __pyx_tuple__142 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_app_config, __pyx_n_s_exit_event, __pyx_n_s_global_config, __pyx_n_s_supported_resolution, __pyx_n_s_PostMessageInteraction, __pyx_n_s_PyDirectInteraction); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_init, 1007, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __pyx_tuple__144 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "ok/Capture.pyx":1043
 *         logger.info('__init__ end')
 * 
 *     def refresh(self):             # <<<<<<<<<<<<<<
 *         logger.debug('calling refresh')
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 */
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_refresh_2, 1043, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 1043, __pyx_L1_error)

  /* "ok/Capture.pyx":1047
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def adb(self):
 *         with self._adb_lock:
 */
  __pyx_tuple__146 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_adbutils, __pyx_n_s_get_bin_dir, __pyx_n_s_bin_dir, __pyx_n_s_exe, __pyx_n_s_is_valid_exe, __pyx_n_s_AdbError, __pyx_n_s_e); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_2, 1047, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 1047, __pyx_L1_error)

  /* "ok/Capture.pyx":1070
 *             return self._adb
 * 
 *     def try_kill_adb(self, e=None):             # <<<<<<<<<<<<<<
 *         logger.error('try kill adb server', e)
 *         import psutil
 */
  __pyx_tuple__148 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_e, __pyx_n_s_psutil, __pyx_n_s_proc); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_try_kill_adb, 1070, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __pyx_tuple__150 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "ok/Capture.pyx":1083
 *         logger.info('try kill adb end')
 * 
 *     def adb_connect(self, addr, try_connect=True):             # <<<<<<<<<<<<<<
 *         from adbutils import AdbError
 *         try:
 */
  __pyx_tuple__151 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_addr, __pyx_n_s_try_connect, __pyx_n_s_AdbError, __pyx_n_s_device, __pyx_n_s_ret, __pyx_n_s_e); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__151, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_connect, 1083, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __pyx_tuple__153 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "ok/Capture.pyx":1109
 *             logger.error(f"adb connect error return none {addr}", e)
 * 
 *     def get_devices(self):             # <<<<<<<<<<<<<<
 *         return list(self.device_dict.values())
 * 
 */
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_devices, 1109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 1109, __pyx_L1_error)

  /* "ok/Capture.pyx":1112
 *         return list(self.device_dict.values())
 * 
 *     def update_pc_device(self):             # <<<<<<<<<<<<<<
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 */
  __pyx_tuple__155 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_name_2, __pyx_n_s_hwnd, __pyx_n_s_full_path, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_nick, __pyx_n_s_pc_device); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_pc_device, 1112, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 1112, __pyx_L1_error)

  /* "ok/Capture.pyx":1133
 *             self.device_dict['pc'] = pc_device
 * 
 *     def do_refresh(self, current=False):             # <<<<<<<<<<<<<<
 *         self.update_pc_device()
 *         self.refresh_emulators(current)
 */
  __pyx_tuple__157 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_current); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_refresh, 1133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 1133, __pyx_L1_error)

  /* "ok/Capture.pyx":1144
 *         logger.debug(f'refresh {self.device_dict}')
 * 
 *     def refresh_phones(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */
  __pyx_tuple__159 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_current, __pyx_n_s_adb_device, __pyx_n_s_imei, __pyx_n_s_preferred, __pyx_n_s_found, __pyx_n_s_device, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_phone_device); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_refresh_phones, 1144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 1144, __pyx_L1_error)

  /* "ok/Capture.pyx":1168
 *         logger.debug(f'refresh_phones done')
 * 
 *     def refresh_emulators(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */
  __pyx_tuple__161 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_current, __pyx_n_s_EmulatorManager, __pyx_n_s_manager, __pyx_n_s_installed_emulators_2, __pyx_n_s_emulator, __pyx_n_s_preferred, __pyx_n_s_adb_device, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_name_2, __pyx_n_s_hwnd, __pyx_n_s_full_path, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_connected, __pyx_n_s_emulator_device); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_refresh_emulators, 1168, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 1168, __pyx_L1_error)

  /* "ok/Capture.pyx":1195
 *         logger.info(f'refresh emulators {self.device_dict}')
 * 
 *     def get_resolution(self, device=None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = self.device
 */
  __pyx_tuple__163 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_device, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_frame, __pyx_n_s__7, __pyx_n_s_resolution); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_resolution, 1195, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 1195, __pyx_L1_error)

  /* "ok/Capture.pyx":1211
 *         return width, height
 * 
 *     def set_preferred_device(self, imei=None, index=-1):             # <<<<<<<<<<<<<<
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:
 */
  __pyx_tuple__165 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_imei, __pyx_n_s_index, __pyx_n_s_preferred, __pyx_n_s_connected_device, __pyx_n_s_device); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_set_preferred_device_2, 1211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __pyx_tuple__167 = PyTuple_Pack(2, Py_None, ((PyObject *)__pyx_int_neg_1)); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "ok/Capture.pyx":1236
 *         logger.debug(f'preferred device: {preferred}')
 * 
 *     def shell_device(self, device, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         kwargs.setdefault('timeout', 5)
 *         try:
 */
  __pyx_tuple__168 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_device, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_e); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_shell_device, 1236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 1236, __pyx_L1_error)

  /* "ok/Capture.pyx":1244
 *             return None
 * 
 *     def adb_get_imei(self, device):             # <<<<<<<<<<<<<<
 *         return (self.shell_device(device, "settings get secure android_id") or
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 */
  __pyx_tuple__170 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_device); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_get_imei, 1244, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) __PYX_ERR(0, 1244, __pyx_L1_error)

  /* "ok/Capture.pyx":1248
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:             # <<<<<<<<<<<<<<
 *         if device is None:
 *             return None
 */
  __pyx_tuple__172 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_device, __pyx_n_s_png_bytes, __pyx_n_s_image_data, __pyx_n_s_image, __pyx_n_s_e); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__172, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_screencap, 1248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) __PYX_ERR(0, 1248, __pyx_L1_error)

  /* "ok/Capture.pyx":1263
 *             logger.error('screencap', e)
 * 
 *     def get_preferred_device(self):             # <<<<<<<<<<<<<<
 *         imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 */
  __pyx_tuple__174 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_imei, __pyx_n_s_preferred); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_preferred_device, 1263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) __PYX_ERR(0, 1263, __pyx_L1_error)

  /* "ok/Capture.pyx":1268
 *         return preferred
 * 
 *     def get_preferred_capture(self):             # <<<<<<<<<<<<<<
 *         return self.config.get("capture")
 * 
 */
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_preferred_capture, 1268, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 1268, __pyx_L1_error)

  /* "ok/Capture.pyx":1271
 *         return self.config.get("capture")
 * 
 *     def set_hwnd_name(self, hwnd_name):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:
 */
  __pyx_tuple__177 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_hwnd_name, __pyx_n_s_preferred); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_set_hwnd_name, 1271, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(0, 1271, __pyx_L1_error)

  /* "ok/Capture.pyx":1279
 *             self.config.save_file()
 * 
 *     def set_capture(self, capture):             # <<<<<<<<<<<<<<
 *         if self.config.get("capture") != capture:
 *             self.config['capture'] = capture
 */
  __pyx_tuple__179 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_capture); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_set_capture, 1279, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(0, 1279, __pyx_L1_error)

  /* "ok/Capture.pyx":1284
 *             self.start()
 * 
 *     def get_hwnd_name(self):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         return preferred.get('hwnd')
 */
  __pyx_tuple__181 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_preferred); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __pyx_codeobj__182 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__181, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_hwnd_name, 1284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__182)) __PYX_ERR(0, 1284, __pyx_L1_error)

  /* "ok/Capture.pyx":1288
 *         return preferred.get('hwnd')
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 */
  __pyx_tuple__183 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_title, __pyx_n_s_exe, __pyx_n_s_frame_width, __pyx_n_s_frame_height, __pyx_n_s_player_id, __pyx_n_s_hwnd_class); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);
  __pyx_codeobj__184 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__183, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_ensure_hwnd, 1288, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__184)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __pyx_tuple__185 = PyTuple_Pack(4, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_neg_1), Py_None); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);

  /* "ok/Capture.pyx":1295
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                             bit_blt_render_full=False):
 *         if not override_config:
 */
  __pyx_tuple__186 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_override_config, __pyx_n_s_require_bg, __pyx_n_s_use_bit_blt_only, __pyx_n_s_bit_blt_render_full); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_use_windows_capture, 1295, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __pyx_tuple__188 = PyTuple_Pack(4, Py_None, ((PyObject *)Py_False), ((PyObject *)Py_False), ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);

  /* "ok/Capture.pyx":1307
 *             logger.info(f'capture method {type(self.capture_method)}')
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 */
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_start, 1307, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) __PYX_ERR(0, 1307, __pyx_L1_error)

  /* "ok/Capture.pyx":1310
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 *     def do_start(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()
 */
  __pyx_tuple__190 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_preferred, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_ADBBaseInteraction); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_start, 1310, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) __PYX_ERR(0, 1310, __pyx_L1_error)

  /* "ok/Capture.pyx":1361
 *         communicate.adb_devices.emit(True)
 * 
 *     def update_resolution_for_hwnd(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:
 *             width, height = self.get_resolution()
 */
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_resolution_for_hwnd, 1361, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 1361, __pyx_L1_error)

  /* "ok/Capture.pyx":1367
 *             self.hwnd.update_frame_size(width, height)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def device(self):
 *         if preferred := self.get_preferred_device():
 */
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__181, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_device, 1367, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) __PYX_ERR(0, 1367, __pyx_L1_error)

  /* "ok/Capture.pyx":1380
 *         return self._device
 * 
 *     def adb_kill_server(self):             # <<<<<<<<<<<<<<
 *         if self.adb is not None:
 *             self.adb.server_kill()
 */
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_kill_server_2, 1380, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 1380, __pyx_L1_error)

  /* "ok/Capture.pyx":1385
 *             logger.debug('adb kill_server')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def width(self):
 *         if self.capture_method is not None:
 */
  __pyx_codeobj__195 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_width, 1385, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__195)) __PYX_ERR(0, 1385, __pyx_L1_error)

  /* "ok/Capture.pyx":1391
 *         return 0
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def height(self):
 *         if self.capture_method is not None:
 */
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_height, 1391, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(0, 1391, __pyx_L1_error)

  /* "ok/Capture.pyx":1397
 *         return 0
 * 
 *     def update_device_list(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_device_list, 1397, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) __PYX_ERR(0, 1397, __pyx_L1_error)

  /* "ok/Capture.pyx":1400
 *         pass
 * 
 *     def shell(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # Set default timeout to 5 if not provided
 * 
 */
  __pyx_tuple__198 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_device); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__198, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_shell, 1400, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) __PYX_ERR(0, 1400, __pyx_L1_error)

  /* "ok/Capture.pyx":1409
 *             raise Exception('Device is none')
 * 
 *     def device_connected(self):             # <<<<<<<<<<<<<<
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True
 */
  __pyx_tuple__200 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_e); if (unlikely(!__pyx_tuple__200)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);
  __pyx_codeobj__201 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__200, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_device_connected, 1409, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__201)) __PYX_ERR(0, 1409, __pyx_L1_error)

  /* "ok/Capture.pyx":1420
 *                 logger.error(f'device_connected error occurred, {e}')
 * 
 *     def get_exe_path(self, device):             # <<<<<<<<<<<<<<
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(
 */
  __pyx_tuple__202 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_device, __pyx_n_s_path, __pyx_n_s_get_emulator_exe, __pyx_n_s_emulator); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  __pyx_codeobj__203 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_exe_path, 1420, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__203)) __PYX_ERR(0, 1420, __pyx_L1_error)

  /* "ok/Capture.pyx":1435
 *             return None
 * 
 *     def adb_check_installed(self, packages):             # <<<<<<<<<<<<<<
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):
 */
  __pyx_tuple__204 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_packages, __pyx_n_s_installed, __pyx_n_s_package); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __pyx_codeobj__205 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__204, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_check_installed, 1435, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__205)) __PYX_ERR(0, 1435, __pyx_L1_error)

  /* "ok/Capture.pyx":1443
 *                 return package
 * 
 *     def adb_check_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')
 */
  __pyx_tuple__206 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_packages, __pyx_n_s_front, __pyx_n_s_package); if (unlikely(!__pyx_tuple__206)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);
  __pyx_codeobj__207 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__206, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_check_in_front_2, 1443, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__207)) __PYX_ERR(0, 1443, __pyx_L1_error)

  /* "ok/Capture.pyx":1453
 *                     return True
 * 
 *     def adb_start_package(self, package):             # <<<<<<<<<<<<<<
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 */
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_package); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_codeobj__209 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_start_package, 1453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__209)) __PYX_ERR(0, 1453, __pyx_L1_error)

  /* "ok/Capture.pyx":1456
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 *     def adb_ensure_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')
 */
  __pyx_tuple__210 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_packages, __pyx_n_s_front, __pyx_n_s_installed); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);
  __pyx_codeobj__211 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__210, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_adb_ensure_in_front_2, 1456, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__211)) __PYX_ERR(0, 1456, __pyx_L1_error)

  /* "ok/Capture.pyx":1466
 * 
 * 
 * def parse_ratio(ratio_str):             # <<<<<<<<<<<<<<
 *     if ratio_str:
 *         # Split the string into two parts: '16' and '9'
 */
  __pyx_tuple__212 = PyTuple_Pack(4, __pyx_n_s_ratio_str, __pyx_n_s_numerator, __pyx_n_s_denominator, __pyx_n_s_ratio_float); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  __pyx_codeobj__213 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__212, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_parse_ratio, 1466, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__213)) __PYX_ERR(0, 1466, __pyx_L1_error)

  /* "ok/Capture.pyx":1488
 *         self.emulator = None
 * 
 *     def update_emulator(self, emulator):             # <<<<<<<<<<<<<<
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')
 */
  __pyx_tuple__214 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_emulator); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);
  __pyx_codeobj__215 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__214, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_emulator, 1488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__215)) __PYX_ERR(0, 1488, __pyx_L1_error)

  /* "ok/Capture.pyx":1495
 *             self.nemu_impl = None
 * 
 *     def init_nemu(self):             # <<<<<<<<<<<<<<
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:
 */
  __pyx_tuple__216 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_NemuIpcImpl); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  __pyx_codeobj__217 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__216, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_init_nemu, 1495, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__217)) __PYX_ERR(0, 1495, __pyx_L1_error)

  /* "ok/Capture.pyx":1505
 *             ).__enter__()
 * 
 *     def base_folder(self):             # <<<<<<<<<<<<<<
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 */
  __pyx_codeobj__218 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_base_folder, 1505, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__218)) __PYX_ERR(0, 1505, __pyx_L1_error)

  /* "ok/Capture.pyx":1508
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 *     def check_mumu_app_keep_alive_400(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check app_keep_alive from emulator config if version >= 4.0
 */
  __pyx_tuple__219 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_file, __pyx_n_s_f, __pyx_n_s_s, __pyx_n_s_data, __pyx_n_s_value); if (unlikely(!__pyx_tuple__219)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);
  __pyx_codeobj__220 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__219, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_check_mumu_app_keep_alive_400, 1508, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__220)) __PYX_ERR(0, 1508, __pyx_L1_error)

  /* "ok/Capture.pyx":1539
 *         return True
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         super().close()
 *         if self.nemu_impl:
 */
  __pyx_codeobj__221 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_close, 1539, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__221)) __PYX_ERR(0, 1539, __pyx_L1_error)

  /* "ok/Capture.pyx":1545
 *             self.nemu_impl = None
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         self.init_nemu()
 *         return self.screencap()
 */
  __pyx_codeobj__222 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_do_get_frame, 1545, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__222)) __PYX_ERR(0, 1545, __pyx_L1_error)

  /* "ok/Capture.pyx":1555
 *             return self.nemu_impl.screenshot(timeout=0.5)
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_codeobj__223 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_connected, 1555, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__223)) __PYX_ERR(0, 1555, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__224 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__224)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NemuIpcCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_codeobj__225 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__225)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "ok/Capture.pyx":1558
 *         return True
 * 
 * def deep_get(d, keys, default=None):             # <<<<<<<<<<<<<<
 *     """
 *     Get values in dictionary safely.
 */
  __pyx_tuple__226 = PyTuple_Pack(3, __pyx_n_s_d, __pyx_n_s_keys, __pyx_n_s_default); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_codeobj__227 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__226, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_deep_get, 1558, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__227)) __PYX_ERR(0, 1558, __pyx_L1_error)

  /* "ok/Capture.pyx":1580
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 */
  __pyx_tuple__228 = PyTuple_Pack(10, __pyx_n_s_config, __pyx_n_s_capture_method, __pyx_n_s_hwnd, __pyx_n_s_require_bg, __pyx_n_s_use_bit_blt_only, __pyx_n_s_bit_blt_render_full, __pyx_n_s_exit_event, __pyx_n_s_target_method, __pyx_n_s_e, __pyx_n_s_win_graphic); if (unlikely(!__pyx_tuple__228)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);
  __pyx_codeobj__229 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__228, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_update_capture_method, 1580, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__229)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __pyx_tuple__230 = PyTuple_Pack(4, ((PyObject *)Py_False), ((PyObject *)Py_False), ((PyObject *)Py_False), Py_None); if (unlikely(!__pyx_tuple__230)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);

  /* "ok/Capture.pyx":1609
 *         logger.error(f'update_capture_method exception, return None: ', e)
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if windows_graphics_available():
 *         target_method = WindowsGraphicsCaptureMethod
 */
  __pyx_tuple__231 = PyTuple_Pack(4, __pyx_n_s_capture_method, __pyx_n_s_hwnd, __pyx_n_s_exit_event, __pyx_n_s_target_method); if (unlikely(!__pyx_tuple__231)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__231);
  __Pyx_GIVEREF(__pyx_tuple__231);
  __pyx_codeobj__232 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__231, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_win_graphics_capture, 1609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__232)) __PYX_ERR(0, 1609, __pyx_L1_error)

  /* "ok/Capture.pyx":1616
 *             return capture_method
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:
 */
  __pyx_tuple__233 = PyTuple_Pack(4, __pyx_n_s_capture_method, __pyx_n_s_target_method, __pyx_n_s_hwnd, __pyx_n_s_exit_event); if (unlikely(!__pyx_tuple__233)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);
  __pyx_codeobj__234 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__233, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_capture, 1616, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__234)) __PYX_ERR(0, 1616, __pyx_L1_error)

  /* "ok/Capture.pyx":1626
 * 
 * MDT_EFFECTIVE_DPI = 0
 * user32 = ctypes.WinDLL('user32', use_last_error=True)             # <<<<<<<<<<<<<<
 * 
 * def is_window_minimized(hWnd):
 */
  __pyx_tuple__235 = PyTuple_Pack(1, __pyx_n_s_user32); if (unlikely(!__pyx_tuple__235)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);

  /* "ok/Capture.pyx":1628
 * user32 = ctypes.WinDLL('user32', use_last_error=True)
 * 
 * def is_window_minimized(hWnd):             # <<<<<<<<<<<<<<
 *     return user32.IsIconic(hWnd) != 0
 * 
 */
  __pyx_tuple__236 = PyTuple_Pack(1, __pyx_n_s_hWnd); if (unlikely(!__pyx_tuple__236)) __PYX_ERR(0, 1628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__236);
  __Pyx_GIVEREF(__pyx_tuple__236);
  __pyx_codeobj__237 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__236, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_is_window_minimized, 1628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__237)) __PYX_ERR(0, 1628, __pyx_L1_error)

  /* "ok/Capture.pyx":1631
 *     return user32.IsIconic(hWnd) != 0
 * 
 * def get_window_bounds(hwnd):             # <<<<<<<<<<<<<<
 *     try:
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 */
  __pyx_tuple__238 = PyTuple_Pack(16, __pyx_n_s_hwnd, __pyx_n_s_extended_frame_bounds, __pyx_n_s_client_x, __pyx_n_s_client_y, __pyx_n_s_client_width, __pyx_n_s_client_height, __pyx_n_s_window_left, __pyx_n_s_window_top, __pyx_n_s_window_right, __pyx_n_s_window_bottom, __pyx_n_s_window_width, __pyx_n_s_window_height, __pyx_n_s_monitor, __pyx_n_s_dpiX, __pyx_n_s_dpiY, __pyx_n_s_e); if (unlikely(!__pyx_tuple__238)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_codeobj__239 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__238, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_get_window_bounds, 1631, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__239)) __PYX_ERR(0, 1631, __pyx_L1_error)

  /* "ok/Capture.pyx":1656
 *         return 0, 0, 0, 0, 0, 0, 1
 * 
 * def is_foreground_window(hwnd):             # <<<<<<<<<<<<<<
 *     return win32gui.IsWindowVisible(hwnd) and win32gui.GetForegroundWindow() == hwnd
 */
  __pyx_codeobj__240 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ok_Capture_pyx, __pyx_n_s_is_foreground_window, 1656, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__240)) __PYX_ERR(0, 1656, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__241 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__241)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__241);
  __Pyx_GIVEREF(__pyx_tuple__241);
  __pyx_codeobj__242 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BaseCaptureMethod, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__242)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__243 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BaseWindowsCaptur, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__243)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__244 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_WindowsGraphicsCa, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__244)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__245 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BitBltCaptureMeth, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__245)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__246 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_HwndWindow, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__246)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__247 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_DesktopDuplicatio, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__247)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__248 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ADBCaptureMethod, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__248)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__249 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ImageCaptureMetho, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__249)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__250 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__241, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_NemuIpcCaptureMet, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__250)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_setdefault.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_setdefault.method_name = &__pyx_n_s_setdefault;
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  __pyx_umethod_PyList_Type_pop.method_name = &__pyx_n_s_pop;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_float_0_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_19041 = PyInt_FromLong(19041L); if (unlikely(!__pyx_int_19041)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20348 = PyInt_FromLong(20348L); if (unlikely(!__pyx_int_20348)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15891862 = PyInt_FromLong(15891862L); if (unlikely(!__pyx_int_15891862)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_18546816 = PyInt_FromLong(18546816L); if (unlikely(!__pyx_int_18546816)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30750855 = PyInt_FromLong(30750855L); if (unlikely(!__pyx_int_30750855)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_36463512 = PyInt_FromLong(36463512L); if (unlikely(!__pyx_int_36463512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_37823798 = PyInt_FromLong(37823798L); if (unlikely(!__pyx_int_37823798)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_55865105 = PyInt_FromLong(55865105L); if (unlikely(!__pyx_int_55865105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_63776034 = PyInt_FromLong(63776034L); if (unlikely(!__pyx_int_63776034)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_69505199 = PyInt_FromLong(69505199L); if (unlikely(!__pyx_int_69505199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_74253587 = PyInt_FromLong(74253587L); if (unlikely(!__pyx_int_74253587)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_76750241 = PyInt_FromLong(76750241L); if (unlikely(!__pyx_int_76750241)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_97161228 = PyInt_FromLong(97161228L); if (unlikely(!__pyx_int_97161228)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101491740 = PyInt_FromLong(101491740L); if (unlikely(!__pyx_int_101491740)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_129754191 = PyInt_FromLong(129754191L); if (unlikely(!__pyx_int_129754191)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_137420293 = PyInt_FromLong(137420293L); if (unlikely(!__pyx_int_137420293)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_147817759 = PyInt_FromLong(147817759L); if (unlikely(!__pyx_int_147817759)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_159312098 = PyInt_FromLong(159312098L); if (unlikely(!__pyx_int_159312098)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_166164177 = PyInt_FromLong(166164177L); if (unlikely(!__pyx_int_166164177)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184679976 = PyInt_FromLong(184679976L); if (unlikely(!__pyx_int_184679976)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_198801806 = PyInt_FromLong(198801806L); if (unlikely(!__pyx_int_198801806)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252227782 = PyInt_FromLong(252227782L); if (unlikely(!__pyx_int_252227782)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252510149 = PyInt_FromLong(252510149L); if (unlikely(!__pyx_int_252510149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_258103348 = PyInt_FromLong(258103348L); if (unlikely(!__pyx_int_258103348)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_267537657 = PyInt_FromLong(267537657L); if (unlikely(!__pyx_int_267537657)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_268090033 = PyInt_FromLong(268090033L); if (unlikely(!__pyx_int_268090033)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_2ok_7Capture_BaseCaptureMethod = &__pyx_vtable_2ok_7Capture_BaseCaptureMethod;
  __pyx_vtable_2ok_7Capture_BaseCaptureMethod.get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_BaseCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_17BaseCaptureMethod_get_frame;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_2ok_7Capture_BaseCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_BaseCaptureMethod_spec, NULL); if (unlikely(!__pyx_ptype_2ok_7Capture_BaseCaptureMethod)) __PYX_ERR(0, 41, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_BaseCaptureMethod_spec, __pyx_ptype_2ok_7Capture_BaseCaptureMethod) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_BaseCaptureMethod = &__pyx_type_2ok_7Capture_BaseCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_BaseCaptureMethod) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_BaseCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_BaseCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_BaseCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_BaseCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_vtabptr_2ok_7Capture_BaseCaptureMethod) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_BaseCaptureMethod) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_BaseCaptureMethod) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_BaseCaptureMethod) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod = &__pyx_vtable_2ok_7Capture_BaseWindowsCaptureMethod;
  __pyx_vtable_2ok_7Capture_BaseWindowsCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseCaptureMethod;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod)) __PYX_ERR(0, 92, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod_spec, __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod = &__pyx_type_2ok_7Capture_BaseWindowsCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod, __pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseWindowsCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_WindowsGraphicsCaptureMethod = &__pyx_vtable_2ok_7Capture_WindowsGraphicsCaptureMethod;
  __pyx_vtable_2ok_7Capture_WindowsGraphicsCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod;
  __pyx_vtable_2ok_7Capture_WindowsGraphicsCaptureMethod.frame_arrived_callback = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *, PyObject *))__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_frame_arrived_callback;
  __pyx_vtable_2ok_7Capture_WindowsGraphicsCaptureMethod.convert_dx_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, PyObject *))__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_convert_dx_frame;
  __pyx_vtable_2ok_7Capture_WindowsGraphicsCaptureMethod.do_get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_WindowsGraphicsCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_28WindowsGraphicsCaptureMethod_do_get_frame;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod)) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod_spec, __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod = &__pyx_type_2ok_7Capture_WindowsGraphicsCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_vtabptr_2ok_7Capture_WindowsGraphicsCaptureMethod) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_WindowsGraphicsCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_BitBltCaptureMethod = &__pyx_vtable_2ok_7Capture_BitBltCaptureMethod;
  __pyx_vtable_2ok_7Capture_BitBltCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod;
  __pyx_vtable_2ok_7Capture_BitBltCaptureMethod.do_get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_BitBltCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_19BitBltCaptureMethod_do_get_frame;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_BitBltCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_BitBltCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_BitBltCaptureMethod)) __PYX_ERR(0, 423, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_BitBltCaptureMethod_spec, __pyx_ptype_2ok_7Capture_BitBltCaptureMethod) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_BitBltCaptureMethod = &__pyx_type_2ok_7Capture_BitBltCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_BitBltCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_BitBltCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_BitBltCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_BitBltCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_BitBltCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_vtabptr_2ok_7Capture_BitBltCaptureMethod) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BitBltCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_BitBltCaptureMethod) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_BitBltCaptureMethod) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_2ok_7Capture_HwndWindow = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_HwndWindow_spec, NULL); if (unlikely(!__pyx_ptype_2ok_7Capture_HwndWindow)) __PYX_ERR(0, 520, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_HwndWindow_spec, __pyx_ptype_2ok_7Capture_HwndWindow) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_HwndWindow = &__pyx_type_2ok_7Capture_HwndWindow;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_HwndWindow) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_HwndWindow->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_HwndWindow->tp_dictoffset && __pyx_ptype_2ok_7Capture_HwndWindow->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_HwndWindow->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HwndWindow, (PyObject *) __pyx_ptype_2ok_7Capture_HwndWindow) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_HwndWindow) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_DesktopDuplicationCaptureMethod = &__pyx_vtable_2ok_7Capture_DesktopDuplicationCaptureMethod;
  __pyx_vtable_2ok_7Capture_DesktopDuplicationCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseWindowsCaptureMethod;
  __pyx_vtable_2ok_7Capture_DesktopDuplicationCaptureMethod.do_get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_DesktopDuplicationCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_31DesktopDuplicationCaptureMethod_do_get_frame;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod)) __PYX_ERR(0, 848, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod_spec, __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod = &__pyx_type_2ok_7Capture_DesktopDuplicationCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_vtabptr_2ok_7Capture_DesktopDuplicationCaptureMethod) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DesktopDuplicationCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_ADBCaptureMethod = &__pyx_vtable_2ok_7Capture_ADBCaptureMethod;
  __pyx_vtable_2ok_7Capture_ADBCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseCaptureMethod;
  __pyx_vtable_2ok_7Capture_ADBCaptureMethod.do_get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_16ADBCaptureMethod_do_get_frame;
  __pyx_vtable_2ok_7Capture_ADBCaptureMethod.screencap = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_ADBCaptureMethod *))__pyx_f_2ok_7Capture_16ADBCaptureMethod_screencap;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_ADBCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_ADBCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_ADBCaptureMethod)) __PYX_ERR(0, 947, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_ADBCaptureMethod_spec, __pyx_ptype_2ok_7Capture_ADBCaptureMethod) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_ADBCaptureMethod = &__pyx_type_2ok_7Capture_ADBCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_ADBCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_ADBCaptureMethod) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_ADBCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_ADBCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_ADBCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_ADBCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_vtabptr_2ok_7Capture_ADBCaptureMethod) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_ADBCaptureMethod) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ADBCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_ADBCaptureMethod) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_ADBCaptureMethod) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_ImageCaptureMethod = &__pyx_vtable_2ok_7Capture_ImageCaptureMethod;
  __pyx_vtable_2ok_7Capture_ImageCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseCaptureMethod;
  __pyx_vtable_2ok_7Capture_ImageCaptureMethod.do_get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_ImageCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_18ImageCaptureMethod_do_get_frame;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_ImageCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_ImageCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_ImageCaptureMethod)) __PYX_ERR(0, 978, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_ImageCaptureMethod_spec, __pyx_ptype_2ok_7Capture_ImageCaptureMethod) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_ImageCaptureMethod = &__pyx_type_2ok_7Capture_ImageCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_ImageCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_ImageCaptureMethod) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_ImageCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_ImageCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_ImageCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_ImageCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_vtabptr_2ok_7Capture_ImageCaptureMethod) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_ImageCaptureMethod) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImageCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_ImageCaptureMethod) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_ImageCaptureMethod) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  #endif
  __pyx_vtabptr_2ok_7Capture_NemuIpcCaptureMethod = &__pyx_vtable_2ok_7Capture_NemuIpcCaptureMethod;
  __pyx_vtable_2ok_7Capture_NemuIpcCaptureMethod.__pyx_base = *__pyx_vtabptr_2ok_7Capture_BaseCaptureMethod;
  __pyx_vtable_2ok_7Capture_NemuIpcCaptureMethod.do_get_frame = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *, int __pyx_skip_dispatch))__pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_do_get_frame;
  __pyx_vtable_2ok_7Capture_NemuIpcCaptureMethod.screencap = (PyObject *(*)(struct __pyx_obj_2ok_7Capture_NemuIpcCaptureMethod *))__pyx_f_2ok_7Capture_20NemuIpcCaptureMethod_screencap;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture_NemuIpcCaptureMethod_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod)) __PYX_ERR(0, 1474, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture_NemuIpcCaptureMethod_spec, __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod = &__pyx_type_2ok_7Capture_NemuIpcCaptureMethod;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod->tp_base = __pyx_ptype_2ok_7Capture_BaseCaptureMethod;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod->tp_dictoffset && __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_vtabptr_2ok_7Capture_NemuIpcCaptureMethod) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NemuIpcCaptureMethod, (PyObject *) __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod) < 0) __PYX_ERR(0, 1474, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd_spec, NULL); if (unlikely(!__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd)) __PYX_ERR(0, 710, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd_spec, __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd) < 0) __PYX_ERR(0, 710, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd = &__pyx_type_2ok_7Capture___pyx_scope_struct__find_hwnd;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd) < 0) __PYX_ERR(0, 710, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd->tp_dictoffset && __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture___pyx_scope_struct__find_hwnd->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows_spec, NULL); if (unlikely(!__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows)) __PYX_ERR(0, 803, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows_spec, __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  #else
  __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows = &__pyx_type_2ok_7Capture___pyx_scope_struct_1_enum_child_windows;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows->tp_dictoffset && __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_2ok_7Capture___pyx_scope_struct_1_enum_child_windows->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_spec, NULL); if (unlikely(!__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y)) __PYX_ERR(1, 66, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y_spec, __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y) < 0) __PYX_ERR(1, 66, __pyx_L1_error)
  #else
  __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y = &__pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y) < 0) __PYX_ERR(1, 66, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y->tp_dictoffset && __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype___pyx_scope_struct____Pyx_CFunc_1c7259__2ok_7Capture_28WindowsGraphicsCaptureMethod_ob__etc_to_py_4self_1x_1y->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Capture(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Capture},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "Capture",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initCapture(void) CYTHON_SMALL_CODE; /*proto*/
#if !defined(CYTHON_NO_PYINIT_EXPORT) && (defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS))
__Pyx_PyMODINIT_FUNC init__init__(void) { initCapture(); }
#endif
__Pyx_PyMODINIT_FUNC initCapture(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Capture(void) CYTHON_SMALL_CODE; /*proto*/
#if !defined(CYTHON_NO_PYINIT_EXPORT) && (defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS))
__Pyx_PyMODINIT_FUNC PyInit___init__(void) { return PyInit_Capture(); }
#endif
__Pyx_PyMODINIT_FUNC PyInit_Capture(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Capture(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Capture' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Capture", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "Capture" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Capture(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ok__Capture) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  if (!CYTHON_PEP489_MULTI_PHASE_INIT) {
    if (unlikely((__Pyx_SetPackagePathFromImportLib(__pyx_kp_u_ok_Capture) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ok.Capture")) {
      if (unlikely((PyDict_SetItemString(modules, "ok.Capture", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ok/Capture.pyx":1
 * import sys             # <<<<<<<<<<<<<<
 * import time
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":2
 * import sys
 * import time             # <<<<<<<<<<<<<<
 * 
 * import cv2
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_time, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":4
 * import time
 * 
 * import cv2             # <<<<<<<<<<<<<<
 * import numpy as np
 * import psutil
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_cv2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cv2, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":5
 * 
 * import cv2
 * import numpy as np             # <<<<<<<<<<<<<<
 * import psutil
 * import win32api
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":6
 * import cv2
 * import numpy as np
 * import psutil             # <<<<<<<<<<<<<<
 * import win32api
 * import win32con
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_psutil, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_psutil, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":7
 * import numpy as np
 * import psutil
 * import win32api             # <<<<<<<<<<<<<<
 * import win32con
 * import win32gui
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_win32api, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_win32api, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":8
 * import psutil
 * import win32api
 * import win32con             # <<<<<<<<<<<<<<
 * import win32gui
 * import win32process
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_win32con, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_win32con, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":9
 * import win32api
 * import win32con
 * import win32gui             # <<<<<<<<<<<<<<
 * import win32process
 * import win32ui
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_win32gui, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_win32gui, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":10
 * import win32con
 * import win32gui
 * import win32process             # <<<<<<<<<<<<<<
 * import win32ui
 * from qfluentwidgets import FluentIcon
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_win32process, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_win32process, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":11
 * import win32gui
 * import win32process
 * import win32ui             # <<<<<<<<<<<<<<
 * from qfluentwidgets import FluentIcon
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_win32ui, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_win32ui, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":12
 * import win32process
 * import win32ui
 * from qfluentwidgets import FluentIcon             # <<<<<<<<<<<<<<
 * 
 * import ctypes
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FluentIcon);
  __Pyx_GIVEREF(__pyx_n_s_FluentIcon);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FluentIcon)) __PYX_ERR(0, 12, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_qfluentwidgets, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FluentIcon); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FluentIcon, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":14
 * from qfluentwidgets import FluentIcon
 * 
 * import ctypes             # <<<<<<<<<<<<<<
 * import json
 * import os
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_ctypes, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":15
 * 
 * import ctypes
 * import json             # <<<<<<<<<<<<<<
 * import os
 * import platform
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_json, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_3) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":16
 * import ctypes
 * import json
 * import os             # <<<<<<<<<<<<<<
 * import platform
 * import re
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_3) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":17
 * import json
 * import os
 * import platform             # <<<<<<<<<<<<<<
 * import re
 * import threading
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_platform, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_platform, __pyx_t_3) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":18
 * import os
 * import platform
 * import re             # <<<<<<<<<<<<<<
 * import threading
 * from enum import IntEnum
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_re, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_3) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":19
 * import platform
 * import re
 * import threading             # <<<<<<<<<<<<<<
 * from enum import IntEnum
 * from ok.color.Color import is_close_to_pure_color
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_threading, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_threading, __pyx_t_3) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":20
 * import re
 * import threading
 * from enum import IntEnum             # <<<<<<<<<<<<<<
 * from ok.color.Color import is_close_to_pure_color
 * from ok.config.Config import Config
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_IntEnum);
  __Pyx_GIVEREF(__pyx_n_s_IntEnum);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IntEnum)) __PYX_ERR(0, 20, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IntEnum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IntEnum, __pyx_t_3) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":21
 * import threading
 * from enum import IntEnum
 * from ok.color.Color import is_close_to_pure_color             # <<<<<<<<<<<<<<
 * from ok.config.Config import Config
 * from ok.config.ConfigOption import ConfigOption
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_is_close_to_pure_color);
  __Pyx_GIVEREF(__pyx_n_s_is_close_to_pure_color);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_is_close_to_pure_color)) __PYX_ERR(0, 21, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_color_Color, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_is_close_to_pure_color); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_close_to_pure_color, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":22
 * from enum import IntEnum
 * from ok.color.Color import is_close_to_pure_color
 * from ok.config.Config import Config             # <<<<<<<<<<<<<<
 * from ok.config.ConfigOption import ConfigOption
 * from ok.gui.Communicate import communicate
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Config);
  __Pyx_GIVEREF(__pyx_n_s_Config);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Config)) __PYX_ERR(0, 22, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_config_Config, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Config, __pyx_t_3) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":23
 * from ok.color.Color import is_close_to_pure_color
 * from ok.config.Config import Config
 * from ok.config.ConfigOption import ConfigOption             # <<<<<<<<<<<<<<
 * from ok.gui.Communicate import communicate
 * from ok.logging.Logger import get_logger
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ConfigOption);
  __Pyx_GIVEREF(__pyx_n_s_ConfigOption);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ConfigOption)) __PYX_ERR(0, 23, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_config_ConfigOption, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ConfigOption); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ConfigOption, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":24
 * from ok.config.Config import Config
 * from ok.config.ConfigOption import ConfigOption
 * from ok.gui.Communicate import communicate             # <<<<<<<<<<<<<<
 * from ok.logging.Logger import get_logger
 * from ok.util.Handler import Handler
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_communicate);
  __Pyx_GIVEREF(__pyx_n_s_communicate);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_communicate)) __PYX_ERR(0, 24, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_gui_Communicate, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_communicate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_communicate, __pyx_t_3) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":25
 * from ok.config.ConfigOption import ConfigOption
 * from ok.gui.Communicate import communicate
 * from ok.logging.Logger import get_logger             # <<<<<<<<<<<<<<
 * from ok.util.Handler import Handler
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_logger);
  __Pyx_GIVEREF(__pyx_n_s_get_logger);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_logger)) __PYX_ERR(0, 25, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ok_logging_Logger, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_get_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_logger, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":26
 * from ok.gui.Communicate import communicate
 * from ok.logging.Logger import get_logger
 * from ok.util.Handler import Handler             # <<<<<<<<<<<<<<
 * 
 * # This is an undocumented nFlag value for PrintWindow
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Handler);
  __Pyx_GIVEREF(__pyx_n_s_Handler);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Handler)) __PYX_ERR(0, 26, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ok_util_Handler, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Handler); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Handler, __pyx_t_3) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":29
 * 
 * # This is an undocumented nFlag value for PrintWindow
 * PW_RENDERFULLCONTENT = 0x00000002             # <<<<<<<<<<<<<<
 * PBYTE = ctypes.POINTER(ctypes.c_ubyte)
 * WGC_NO_BORDER_MIN_BUILD = 20348
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PW_RENDERFULLCONTENT, __pyx_int_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)

  /* "ok/Capture.pyx":30
 * # This is an undocumented nFlag value for PrintWindow
 * PW_RENDERFULLCONTENT = 0x00000002
 * PBYTE = ctypes.POINTER(ctypes.c_ubyte)             # <<<<<<<<<<<<<<
 * WGC_NO_BORDER_MIN_BUILD = 20348
 * WGC_MIN_BUILD = 19041
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_POINTER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_ubyte); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PBYTE, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":31
 * PW_RENDERFULLCONTENT = 0x00000002
 * PBYTE = ctypes.POINTER(ctypes.c_ubyte)
 * WGC_NO_BORDER_MIN_BUILD = 20348             # <<<<<<<<<<<<<<
 * WGC_MIN_BUILD = 19041
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WGC_NO_BORDER_MIN_BUILD, __pyx_int_20348) < 0) __PYX_ERR(0, 31, __pyx_L1_error)

  /* "ok/Capture.pyx":32
 * PBYTE = ctypes.POINTER(ctypes.c_ubyte)
 * WGC_NO_BORDER_MIN_BUILD = 20348
 * WGC_MIN_BUILD = 19041             # <<<<<<<<<<<<<<
 * 
 * logger = get_logger(__name__)
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WGC_MIN_BUILD, __pyx_int_19041) < 0) __PYX_ERR(0, 32, __pyx_L1_error)

  /* "ok/Capture.pyx":34
 * WGC_MIN_BUILD = 19041
 * 
 * logger = get_logger(__name__)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_3) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":37
 * 
 * 
 * class CaptureException(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  __Pyx_GIVEREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])))) __PYX_ERR(0, 37, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PEP560_update_bases(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_4, __pyx_n_s_CaptureException, __pyx_n_s_CaptureException, (PyObject *) NULL, __pyx_n_s_ok_Capture, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_4 != __pyx_t_3) {
    if (unlikely((PyDict_SetItemString(__pyx_t_5, "__orig_bases__", __pyx_t_3) < 0))) __PYX_ERR(0, 37, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_CaptureException, __pyx_t_4, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CaptureException, __pyx_t_3) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":42
 * 
 * cdef class BaseCaptureMethod:
 *     name = "None"             # <<<<<<<<<<<<<<
 *     description = ""
 *     cdef public tuple _size
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_name_2, __pyx_n_s_None) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":43
 * cdef class BaseCaptureMethod:
 *     name = "None"
 *     description = ""             # <<<<<<<<<<<<<<
 *     cdef public tuple _size
 *     cdef public object exit_event
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_description, __pyx_kp_s__12) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":51
 *         self.exit_event = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         # Some capture methods don't need an initialization process
 *         pass
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_3close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod_close, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_close, __pyx_t_4) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":63
 *         return self._size[1]
 * 
 *     cpdef object get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         if self.exit_event.is_set():
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_5get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod_get_frame, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_get_frame, __pyx_t_4) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":80
 *         return f'{self.__class__.__name__}_{self.width}x{self.height}'
 * 
 *     def do_get_frame(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_9do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod_do_get_frame, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_4) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":83
 *         pass
 * 
 *     def draw_rectangle(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_11draw_rectangle, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod_draw_rectangle, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_draw_rectangle, __pyx_t_4) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":86
 *         pass
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_13clickable, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod_clickable, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_clickable, __pyx_t_4) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":89
 *         pass
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_15connected, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod_connected, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_connected, __pyx_t_4) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_17__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod___reduce_cytho, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseCaptureMethod, (type(self), 0x5ca900c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17BaseCaptureMethod_19__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseCaptureMethod___setstate_cyt, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseCaptureMethod);

  /* "ok/Capture.pyx":107
 *         self._hwnd_window = hwnd_window
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f"check connected {self._hwnd_window}")
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_3connected, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseWindowsCaptureMethod_connect, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod, __pyx_n_s_connected, __pyx_t_4) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);

  /* "ok/Capture.pyx":111
 *         return self.hwnd_window is not None and self.hwnd_window.exists
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_5get_abs_cords, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseWindowsCaptureMethod_get_abs, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod, __pyx_n_s_get_abs_cords, __pyx_t_4) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);

  /* "ok/Capture.pyx":114
 *         return self.hwnd_window.get_abs_cords(x, y)
 * 
 *     def clickable(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.visible
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_7clickable, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseWindowsCaptureMethod_clickab, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod, __pyx_n_s_clickable, __pyx_t_4) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseWindowsCaptureMethod___reduc, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseWindowsCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseWindowsCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_24BaseWindowsCaptureMethod_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseWindowsCaptureMethod___setst, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BaseWindowsCaptureMethod);

  /* "ok/Capture.pyx":125
 *         return result
 * 
 * def get_crop_point(frame_width, frame_height, target_width, target_height):             # <<<<<<<<<<<<<<
 *     x = round((frame_width - target_width) / 2)
 *     y = (frame_height - target_height) - x
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_1get_crop_point, 0, __pyx_n_s_get_crop_point, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_crop_point, __pyx_t_4) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":131
 * 
 * cdef class WindowsGraphicsCaptureMethod(BaseWindowsCaptureMethod):
 *     name = "Windows Graphics Capture"             # <<<<<<<<<<<<<<
 *     description = "fast, most compatible, capped at 60fps"
 * 
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_name_2, __pyx_kp_s_Windows_Graphics_Capture) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":132
 * cdef class WindowsGraphicsCaptureMethod(BaseWindowsCaptureMethod):
 *     name = "Windows Graphics Capture"
 *     description = "fast, most compatible, capped at 60fps"             # <<<<<<<<<<<<<<
 * 
 *     cdef object last_frame
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_description, __pyx_kp_s_fast_most_compatible_capped_at_6) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":246
 *         self.start_or_stop()
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_3connected, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_con, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_connected, __pyx_t_4) < 0) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":249
 *         return self.hwnd_window is not None and self.hwnd_window.exists and self.frame_pool is not None
 * 
 *     def start_or_stop(self, capture_cursor=False):             # <<<<<<<<<<<<<<
 *         if self.hwnd_window.hwnd and self.hwnd_window.exists and self.frame_pool is None:
 *             try:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_5start_or_stop, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_sta, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__62);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_start_or_stop, __pyx_t_4) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":296
 *         return self.hwnd_window.exists
 * 
 *     def create_device(self):             # <<<<<<<<<<<<<<
 *         from ok.capture.windows import d3d11
 *         from ok.rotypes.Windows.Graphics.DirectX.Direct3D11 import CreateDirect3D11DeviceFromDXGIDevice
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_7create_device, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_cre, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_create_device, __pyx_t_4) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":314
 *         self.evtoken = None
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         logger.info('destroy windows capture')
 *         if self.frame_pool is not None:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_9close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_clo, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_close, __pyx_t_4) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":330
 *             self.cputex.Release()
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef object frame
 *         cdef double latency
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_11do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_do, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_4) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":360
 *                 return frame
 * 
 *     def reset_framepool(self, size, reset_device=False):             # <<<<<<<<<<<<<<
 *         logger.info(f'reset_framepool')
 *         from ok.rotypes.Windows.Graphics.DirectX import DirectXPixelFormat
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_13reset_framepool, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_res, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__62);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_reset_framepool, __pyx_t_4) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":368
 *                                  DirectXPixelFormat.B8G8R8A8UIntNormalized, 2, size)
 * 
 *     def crop_image(self, frame):             # <<<<<<<<<<<<<<
 *         if frame is not None:
 *             x, y = get_crop_point(frame.shape[1], frame.shape[0], self.hwnd_window.width, self.hwnd_window.height)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_15crop_image, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod_cro, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_crop_image, __pyx_t_4) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_17__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod___r, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_WindowsGraphicsCaptureMethod, (type(self), 0x22c6398, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_28WindowsGraphicsCaptureMethod_19__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WindowsGraphicsCaptureMethod___s, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_WindowsGraphicsCaptureMethod);

  /* "ok/Capture.pyx":375
 *         return frame
 * 
 * def crop_image(image, border, title_height):             # <<<<<<<<<<<<<<
 *     # Load the image
 *     # Image dimensions
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_3crop_image, 0, __pyx_n_s_crop_image, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_crop_image, __pyx_t_4) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":396
 *     return cropped_image
 * 
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1             # <<<<<<<<<<<<<<
 * 
 * def windows_graphics_available():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_platform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_win32, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_platform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_4 = __pyx_int_neg_1;
  }
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOWS_BUILD_NUMBER, __pyx_t_4) < 0) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":398
 * WINDOWS_BUILD_NUMBER = int(platform.version().split(".")[-1]) if sys.platform == "win32" else -1
 * 
 * def windows_graphics_available():             # <<<<<<<<<<<<<<
 *     logger.info(
 *         f"check available WINDOWS_BUILD_NUMBER:{WINDOWS_BUILD_NUMBER} >= {WGC_MIN_BUILD} {WINDOWS_BUILD_NUMBER >= WGC_MIN_BUILD}")
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_5windows_graphics_available, 0, __pyx_n_s_windows_graphics_available, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_windows_graphics_available, __pyx_t_4) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":413
 *             return False
 * 
 * def is_blank(image):             # <<<<<<<<<<<<<<
 *     """
 *     BitBlt can return a balnk buffer. Either because the target is unsupported,
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_7is_blank, 0, __pyx_n_s_is_blank, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_blank, __pyx_t_4) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":421
 * 
 * cdef bint render_full
 * render_full = False             # <<<<<<<<<<<<<<
 * 
 * cdef class BitBltCaptureMethod(BaseWindowsCaptureMethod):
 */
  __pyx_v_2ok_7Capture_render_full = 0;

  /* "ok/Capture.pyx":424
 * 
 * cdef class BitBltCaptureMethod(BaseWindowsCaptureMethod):
 *     name = "BitBlt"             # <<<<<<<<<<<<<<
 *     short_description = "fastest, least compatible"
 *     description = (
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_name_2, __pyx_n_s_BitBlt) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "ok/Capture.pyx":425
 * cdef class BitBltCaptureMethod(BaseWindowsCaptureMethod):
 *     name = "BitBlt"
 *     short_description = "fastest, least compatible"             # <<<<<<<<<<<<<<
 *     description = (
 *             "\nThe best option when compatible. But it cannot properly record "
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_short_description, __pyx_kp_s_fastest_least_compatible) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "ok/Capture.pyx":428
 *     description = (
 *             "\nThe best option when compatible. But it cannot properly record "
 *             + "\nOpenGL, Hardware Accelerated or Exclusive Fullscreen windows. "             # <<<<<<<<<<<<<<
 *             + "\nThe smaller the selected region, the more efficient it is. "
 *     )
 */
  __pyx_t_4 = __Pyx_PyStr_Concat(__pyx_kp_s_The_best_option_when_compatible, __pyx_kp_s_OpenGL_Hardware_Accelerated_or); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "ok/Capture.pyx":429
 *             "\nThe best option when compatible. But it cannot properly record "
 *             + "\nOpenGL, Hardware Accelerated or Exclusive Fullscreen windows. "
 *             + "\nThe smaller the selected region, the more efficient it is. "             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_5 = __Pyx_PyStr_ConcatInPlace(__pyx_t_4, __pyx_kp_s_The_smaller_the_selected_region); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_description, __pyx_t_5) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "ok/Capture.pyx":432
 *     )
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef int x, y
 *         if self.hwnd_window.real_x_offset != 0 or self.hwnd_window.real_y_offset != 0:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_1do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BitBltCaptureMethod_do_get_frame, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_5) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "ok/Capture.pyx":446
 *                                      render_full)
 * 
 *     def test_exclusive_full_screen(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_3test_exclusive_full_screen, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BitBltCaptureMethod_test_exclusi, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_test_exclusive_full_screen, __pyx_t_5) < 0) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "ok/Capture.pyx":453
 *         return True
 * 
 *     def test_is_not_pure_color(self):             # <<<<<<<<<<<<<<
 *         frame = self.do_get_frame()
 *         if frame is None:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_5test_is_not_pure_color, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BitBltCaptureMethod_test_is_not, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_test_is_not_pure_color, __pyx_t_5) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BitBltCaptureMethod___reduce_cyt, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BitBltCaptureMethod, (type(self), 0xffabab1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BitBltCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_19BitBltCaptureMethod_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BitBltCaptureMethod___setstate_c, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_BitBltCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_BitBltCaptureMethod);

  /* "ok/Capture.pyx":570
 *         self.thread.start()
 * 
 *     def validate_mute_config(self, key, value):             # <<<<<<<<<<<<<<
 *         if key == 'Mute Game while in Background' and not value and self.hwnd:
 *             logger.info('unmute game because option is turned off')
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_3validate_mute_config, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_validate_mute_config, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_validate_mute_config, __pyx_t_5) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":576
 *         return True, None
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         self.stop_event.set()
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_5stop, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_stop, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_stop, __pyx_t_5) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":579
 *         self.stop_event.set()
 * 
 *     def update_window(self, title, exe_name, frame_width, frame_height, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         self.player_id = player_id
 *         self.title = title
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_7update_window, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_update_window, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__91);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_update_window, __pyx_t_5) < 0) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":586
 *         self.hwnd_class = hwnd_class
 * 
 *     def update_frame_size(self, width, height):             # <<<<<<<<<<<<<<
 *         logger.debug(f"update_frame_size:{self.frame_width}x{self.frame_height} to {width}x{height}")
 *         if width != self.frame_width or height != self.frame_height:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_9update_frame_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_update_frame_size, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_update_frame_size, __pyx_t_5) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":597
 *         self.do_update_window_size()
 * 
 *     def update_window_size(self):             # <<<<<<<<<<<<<<
 *         while not self.app_exit_event.is_set() and not self.stop_event.is_set():
 *             self.do_update_window_size()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_11update_window_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_update_window_size, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_update_window_size, __pyx_t_5) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":605
 *             set_mute_state(self.hwnd, 0)
 * 
 *     def get_abs_cords(self, x, y):             # <<<<<<<<<<<<<<
 *         return self.x + x, self.y + y
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_13get_abs_cords, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_get_abs_cords, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_get_abs_cords, __pyx_t_5) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":608
 *         return self.x + x, self.y + y
 * 
 *     def do_update_window_size(self):             # <<<<<<<<<<<<<<
 *         try:
 *             visible, x, y, window_width, window_height, width, height, scaling = self.visible, self.x, self.y, self.window_width, self.window_height, self.width, self.height, self.scaling
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_15do_update_window_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_do_update_window_size, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_do_update_window_size, __pyx_t_5) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":664
 *             logger.error(f"do_update_window_size exception", e)
 * 
 *     def handle_mute(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd and self.mute_option.get('Mute Game while in Background'):
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_17handle_mute, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_handle_mute, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_handle_mute, __pyx_t_5) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":668
 *             set_mute_state(self.hwnd, 0 if self.visible else 1)
 * 
 *     def frame_ratio(self, size):             # <<<<<<<<<<<<<<
 *         if self.frame_width > 0 and self.width > 0:
 *             return int(size / self.frame_width * self.width)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_19frame_ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow_frame_ratio, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_frame_ratio, __pyx_t_5) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_23__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow___reduce_cython, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HwndWindow, (type(self), 0x8cf851f, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HwndWindow__set_state(self, __pyx_state)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_10HwndWindow_25__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HwndWindow___setstate_cython, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_HwndWindow, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_HwndWindow);

  /* "ok/Capture.pyx":685
 *             f"title_{self.title}_{self.exe_name}_{self.width}x{self.height}_{self.hwnd}_{self.exists}_{self.visible}")
 * 
 * def check_pos(x, y, width, height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_9check_pos, 0, __pyx_n_s_check_pos, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_pos, __pyx_t_5) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":688
 *     return width >= 0 and height >= 0 and is_window_in_screen_bounds(x, y, width, height, monitors_bounds)
 * 
 * def get_monitors_bounds():             # <<<<<<<<<<<<<<
 *     monitors_bounds = []
 *     monitors = win32api.EnumDisplayMonitors()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_11get_monitors_bounds, 0, __pyx_n_s_get_monitors_bounds, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_monitors_bounds, __pyx_t_5) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":697
 *     return monitors_bounds
 * 
 * def is_window_in_screen_bounds(window_left, window_top, window_width, window_height, monitors_bounds):             # <<<<<<<<<<<<<<
 *     window_right, window_bottom = window_left + window_width, window_top + window_height
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13is_window_in_screen_bounds, 0, __pyx_n_s_is_window_in_screen_bounds, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_in_screen_bounds, __pyx_t_5) < 0) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":710
 *     return False
 * 
 * def find_hwnd(title, exe_name, frame_width, frame_height, player_id=-1, class_name=None):             # <<<<<<<<<<<<<<
 *     results = []
 *     if exe_name is None and title is None:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_15find_hwnd, 0, __pyx_n_s_find_hwnd, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__91);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_find_hwnd, __pyx_t_5) < 0) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":767
 *     return None, None, None, 0, 0, 0, 0
 * 
 * def get_mute_state(hwnd):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_17get_mute_state, 0, __pyx_n_s_get_mute_state, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mute_state, __pyx_t_5) < 0) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":779
 * 
 * # Function to get the mute state
 * def set_mute_state(hwnd, mute):             # <<<<<<<<<<<<<<
 *     from pycaw.api.audioclient import ISimpleAudioVolume
 *     from pycaw.utils import AudioUtilities
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_19set_mute_state, 0, __pyx_n_s_set_mute_state, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_mute_state, __pyx_t_5) < 0) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":790
 *             break
 * 
 * def get_player_id_from_cmdline(cmdline):             # <<<<<<<<<<<<<<
 *     for i in range(len(cmdline)):
 *         if i != 0:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_21get_player_id_from_cmdline, 0, __pyx_n_s_get_player_id_from_cmdline, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_player_id_from_cmdline, __pyx_t_5) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":803
 *     return 0
 * 
 * def enum_child_windows(biggest, frame_aspect_ratio):             # <<<<<<<<<<<<<<
 *     ratio_match = []
 *     """
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_23enum_child_windows, 0, __pyx_n_s_enum_child_windows, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enum_child_windows, __pyx_t_5) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":832
 *         return ratio_match[0]
 * 
 * def get_exe_by_hwnd(hwnd):             # <<<<<<<<<<<<<<
 *     # Get the process ID associated with the window
 *     try:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_25get_exe_by_hwnd, 0, __pyx_n_s_get_exe_by_hwnd, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_exe_by_hwnd, __pyx_t_5) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":849
 * # orignal https://github.com/Toufool/AutoSplit/blob/master/src/capture_method/DesktopDuplicationCaptureMethod.py
 * cdef class DesktopDuplicationCaptureMethod(BaseWindowsCaptureMethod):
 *     name = "Direct3D Desktop Duplication"             # <<<<<<<<<<<<<<
 *     short_description = "slower, bound to display"
 *     description = (
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_name_2, __pyx_kp_s_Direct3D_Desktop_Duplication) < 0) __PYX_ERR(0, 849, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "ok/Capture.pyx":850
 * cdef class DesktopDuplicationCaptureMethod(BaseWindowsCaptureMethod):
 *     name = "Direct3D Desktop Duplication"
 *     short_description = "slower, bound to display"             # <<<<<<<<<<<<<<
 *     description = (
 *             "\nDuplicates the desktop using Direct3D. "
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_short_description, __pyx_kp_s_slower_bound_to_display) < 0) __PYX_ERR(0, 850, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "ok/Capture.pyx":853
 *     description = (
 *             "\nDuplicates the desktop using Direct3D. "
 *             + "\nIt can record OpenGL and Hardware Accelerated windows. "             # <<<<<<<<<<<<<<
 *             + "\nAbout 10-15x slower than BitBlt. Not affected by window size. "
 *             + "\nOverlapping windows will show up and can't record across displays. "
 */
  __pyx_t_5 = __Pyx_PyStr_Concat(__pyx_kp_s_Duplicates_the_desktop_using_Di, __pyx_kp_s_It_can_record_OpenGL_and_Hardwa); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "ok/Capture.pyx":854
 *             "\nDuplicates the desktop using Direct3D. "
 *             + "\nIt can record OpenGL and Hardware Accelerated windows. "
 *             + "\nAbout 10-15x slower than BitBlt. Not affected by window size. "             # <<<<<<<<<<<<<<
 *             + "\nOverlapping windows will show up and can't record across displays. "
 *             + "\nThis option may not be available for hybrid GPU laptops, "
 */
  __pyx_t_4 = __Pyx_PyStr_ConcatInPlace(__pyx_t_5, __pyx_kp_s_About_10_15x_slower_than_BitBlt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":855
 *             + "\nIt can record OpenGL and Hardware Accelerated windows. "
 *             + "\nAbout 10-15x slower than BitBlt. Not affected by window size. "
 *             + "\nOverlapping windows will show up and can't record across displays. "             # <<<<<<<<<<<<<<
 *             + "\nThis option may not be available for hybrid GPU laptops, "
 *             + "\nsee D3DDD-Note-Laptops.md for a solution. "
 */
  __pyx_t_5 = __Pyx_PyStr_ConcatInPlace(__pyx_t_4, __pyx_kp_s_Overlapping_windows_will_show_u); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":856
 *             + "\nAbout 10-15x slower than BitBlt. Not affected by window size. "
 *             + "\nOverlapping windows will show up and can't record across displays. "
 *             + "\nThis option may not be available for hybrid GPU laptops, "             # <<<<<<<<<<<<<<
 *             + "\nsee D3DDD-Note-Laptops.md for a solution. "
 *     )
 */
  __pyx_t_4 = __Pyx_PyStr_ConcatInPlace(__pyx_t_5, __pyx_kp_s_This_option_may_not_be_availabl); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":857
 *             + "\nOverlapping windows will show up and can't record across displays. "
 *             + "\nThis option may not be available for hybrid GPU laptops, "
 *             + "\nsee D3DDD-Note-Laptops.md for a solution. "             # <<<<<<<<<<<<<<
 *     )
 *     cdef object desktop_duplication
 */
  __pyx_t_5 = __Pyx_PyStr_ConcatInPlace(__pyx_t_4, __pyx_kp_s_see_D3DDD_Note_Laptops_md_for_a); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_description, __pyx_t_5) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "ok/Capture.pyx":866
 *         self.desktop_duplication = d3dshot.create(capture_output="numpy")
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 * 
 *         hwnd = self.hwnd_window.hwnd
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_3do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DesktopDuplicationCaptureMethod_2, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_5) < 0) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "ok/Capture.pyx":889
 *         return cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.desktop_duplication is not None:
 *             self.desktop_duplication.stop()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_5close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DesktopDuplicationCaptureMethod_3, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_close, __pyx_t_5) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DesktopDuplicationCaptureMethod_4, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DesktopDuplicationCaptureMethod, (type(self), 0x3546f11, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DesktopDuplicationCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_31DesktopDuplicationCaptureMethod_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DesktopDuplicationCaptureMethod_5, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_DesktopDuplicationCaptureMethod);

  /* "ok/Capture.pyx":899
 *     raise ValueError("Display not found")
 * 
 * DWMWA_EXTENDED_FRAME_BOUNDS = 9             # <<<<<<<<<<<<<<
 * MAXBYTE = 255
 * """How many channels in a BGR image"""
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DWMWA_EXTENDED_FRAME_BOUNDS, __pyx_int_9) < 0) __PYX_ERR(0, 899, __pyx_L1_error)

  /* "ok/Capture.pyx":900
 * 
 * DWMWA_EXTENDED_FRAME_BOUNDS = 9
 * MAXBYTE = 255             # <<<<<<<<<<<<<<
 * """How many channels in a BGR image"""
 * cdef int BGRA_CHANNEL_COUNT
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAXBYTE, __pyx_int_255) < 0) __PYX_ERR(0, 900, __pyx_L1_error)

  /* "ok/Capture.pyx":903
 * """How many channels in a BGR image"""
 * cdef int BGRA_CHANNEL_COUNT
 * BGRA_CHANNEL_COUNT = 4             # <<<<<<<<<<<<<<
 * """How many channels in a BGRA image"""
 * 
 */
  __pyx_v_2ok_7Capture_BGRA_CHANNEL_COUNT = 4;

  /* "ok/Capture.pyx":907
 * 
 * 
 * class ImageShape(IntEnum):             # <<<<<<<<<<<<<<
 *     Y = 0
 *     X = 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_IntEnum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PEP560_update_bases(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_5, __pyx_n_s_ImageShape, __pyx_n_s_ImageShape, (PyObject *) NULL, __pyx_n_s_ok_Capture, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_5 != __pyx_t_4) {
    if (unlikely((PyDict_SetItemString(__pyx_t_3, "__orig_bases__", __pyx_t_4) < 0))) __PYX_ERR(0, 907, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":908
 * 
 * class ImageShape(IntEnum):
 *     Y = 0             # <<<<<<<<<<<<<<
 *     X = 1
 *     Channels = 2
 */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_Y, __pyx_int_0) < 0) __PYX_ERR(0, 908, __pyx_L1_error)

  /* "ok/Capture.pyx":909
 * class ImageShape(IntEnum):
 *     Y = 0
 *     X = 1             # <<<<<<<<<<<<<<
 *     Channels = 2
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_X, __pyx_int_1) < 0) __PYX_ERR(0, 909, __pyx_L1_error)

  /* "ok/Capture.pyx":910
 *     Y = 0
 *     X = 1
 *     Channels = 2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_Channels, __pyx_int_2) < 0) __PYX_ERR(0, 910, __pyx_L1_error)

  /* "ok/Capture.pyx":907
 * 
 * 
 * class ImageShape(IntEnum):             # <<<<<<<<<<<<<<
 *     Y = 0
 *     X = 1
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ImageShape, __pyx_t_5, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ImageShape, __pyx_t_4) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":913
 * 
 * 
 * class ColorChannel(IntEnum):             # <<<<<<<<<<<<<<
 *     Blue = 0
 *     Green = 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_IntEnum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PEP560_update_bases(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_5, __pyx_n_s_ColorChannel, __pyx_n_s_ColorChannel, (PyObject *) NULL, __pyx_n_s_ok_Capture, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__pyx_t_5 != __pyx_t_2) {
    if (unlikely((PyDict_SetItemString(__pyx_t_4, "__orig_bases__", __pyx_t_2) < 0))) __PYX_ERR(0, 913, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ok/Capture.pyx":914
 * 
 * class ColorChannel(IntEnum):
 *     Blue = 0             # <<<<<<<<<<<<<<
 *     Green = 1
 *     Red = 2
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_Blue, __pyx_int_0) < 0) __PYX_ERR(0, 914, __pyx_L1_error)

  /* "ok/Capture.pyx":915
 * class ColorChannel(IntEnum):
 *     Blue = 0
 *     Green = 1             # <<<<<<<<<<<<<<
 *     Red = 2
 *     Alpha = 3
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_Green, __pyx_int_1) < 0) __PYX_ERR(0, 915, __pyx_L1_error)

  /* "ok/Capture.pyx":916
 *     Blue = 0
 *     Green = 1
 *     Red = 2             # <<<<<<<<<<<<<<
 *     Alpha = 3
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_Red, __pyx_int_2) < 0) __PYX_ERR(0, 916, __pyx_L1_error)

  /* "ok/Capture.pyx":917
 *     Green = 1
 *     Red = 2
 *     Alpha = 3             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_Alpha, __pyx_int_3) < 0) __PYX_ERR(0, 917, __pyx_L1_error)

  /* "ok/Capture.pyx":913
 * 
 * 
 * class ColorChannel(IntEnum):             # <<<<<<<<<<<<<<
 *     Blue = 0
 *     Green = 1
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_ColorChannel, __pyx_t_5, __pyx_t_4, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ColorChannel, __pyx_t_2) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":920
 * 
 * 
 * def decimal(value: float):             # <<<<<<<<<<<<<<
 *     # Using ljust instead of :2f because of python float rounding errors
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_value, __pyx_n_s_float) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_27decimal, 0, __pyx_n_s_decimal, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decimal, __pyx_t_3) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":924
 *     return f"{int(value * 100) / 100}".ljust(4, "0")
 * 
 * def is_digit(value: str | int | None):             # <<<<<<<<<<<<<<
 *     """Checks if `value` is a single-digit string from 0-9."""
 *     if value is None:
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_value, __pyx_kp_s_str_int_None) < 0) __PYX_ERR(0, 924, __pyx_L1_error)
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_29is_digit, 0, __pyx_n_s_is_digit, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_5, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_digit, __pyx_t_5) < 0) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":933
 *         return False
 * 
 * def is_valid_hwnd(hwnd: int):             # <<<<<<<<<<<<<<
 *     """Validate the hwnd points to a valid window and not the desktop or whatever window obtained with `""`."""
 *     if not hwnd:
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_hwnd, __pyx_n_s_int) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_31is_valid_hwnd, 0, __pyx_n_s_is_valid_hwnd, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_valid_hwnd, __pyx_t_3) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":941
 *     return True
 * 
 * def try_delete_dc(dc):             # <<<<<<<<<<<<<<
 *     try:
 *         dc.DeleteDC()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_33try_delete_dc, 0, __pyx_n_s_try_delete_dc, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_try_delete_dc, __pyx_t_3) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":948
 * 
 * cdef class ADBCaptureMethod(BaseCaptureMethod):
 *     name = "ADB command line Capture"             # <<<<<<<<<<<<<<
 *     description = "use the adb screencap command, slow but works when in background/minimized, takes 300ms per frame"
 *     cdef bint _connected
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_n_s_name_2, __pyx_kp_s_ADB_command_line_Capture) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_ADBCaptureMethod);

  /* "ok/Capture.pyx":949
 * cdef class ADBCaptureMethod(BaseCaptureMethod):
 *     name = "ADB command line Capture"
 *     description = "use the adb screencap command, slow but works when in background/minimized, takes 300ms per frame"             # <<<<<<<<<<<<<<
 *     cdef bint _connected
 *     cdef object device_manager
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_n_s_description, __pyx_kp_s_use_the_adb_screencap_command_sl) < 0) __PYX_ERR(0, 949, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_ADBCaptureMethod);

  /* "ok/Capture.pyx":959
 *         self.device_manager = device_manager
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         return self.screencap()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_16ADBCaptureMethod_3do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ADBCaptureMethod_do_get_frame, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_3) < 0) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ADBCaptureMethod);

  /* "ok/Capture.pyx":973
 *         return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         if not self._connected and self.device_manager.device is not None:
 *             self.screencap()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_16ADBCaptureMethod_5connected, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ADBCaptureMethod_connected, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_n_s_connected, __pyx_t_3) < 0) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ADBCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_16ADBCaptureMethod_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ADBCaptureMethod___reduce_cython, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ADBCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ADBCaptureMethod, (type(self), 0x2412536, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ADBCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_16ADBCaptureMethod_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ADBCaptureMethod___setstate_cyth, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ADBCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ADBCaptureMethod);

  /* "ok/Capture.pyx":979
 * 
 * cdef class ImageCaptureMethod(BaseCaptureMethod):
 *     name = "Image capture method "             # <<<<<<<<<<<<<<
 *     description = "for debugging"
 *     cdef list images
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_name_2, __pyx_kp_s_Image_capture_method) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "ok/Capture.pyx":980
 * cdef class ImageCaptureMethod(BaseCaptureMethod):
 *     name = "Image capture method "
 *     description = "for debugging"             # <<<<<<<<<<<<<<
 *     cdef list images
 * 
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_description, __pyx_kp_s_for_debugging) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "ok/Capture.pyx":988
 *         self.set_images(images)
 * 
 *     def set_images(self, images):             # <<<<<<<<<<<<<<
 *         self.images = list(reversed(images))
 *         self.get_frame()  # fill size
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_18ImageCaptureMethod_3set_images, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ImageCaptureMethod_set_images, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_set_images, __pyx_t_3) < 0) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "ok/Capture.pyx":993
 *         self.images = list(reversed(images))
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         cdef str image_path
 *         if len(self.images) > 0:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_18ImageCaptureMethod_5do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ImageCaptureMethod_do_get_frame, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_3) < 0) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "ok/Capture.pyx":1001
 *                 return frame
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_18ImageCaptureMethod_7connected, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ImageCaptureMethod_connected, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_connected, __pyx_t_3) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_18ImageCaptureMethod_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ImageCaptureMethod___reduce_cyth, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImageCaptureMethod, (type(self), 0x9e776d1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImageCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_18ImageCaptureMethod_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ImageCaptureMethod___setstate_cy, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_ImageCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_ImageCaptureMethod);

  /* "ok/Capture.pyx":1005
 * 
 * 
 * class DeviceManager:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):
 */
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_DeviceManager, __pyx_n_s_DeviceManager, (PyObject *) NULL, __pyx_n_s_ok_Capture, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "ok/Capture.pyx":1007
 * class DeviceManager:
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):             # <<<<<<<<<<<<<<
 *         logger.info('__init__ start')
 *         self._device = None
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_1__init__, 0, __pyx_n_s_DeviceManager___init, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__144);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1043
 *         logger.info('__init__ end')
 * 
 *     def refresh(self):             # <<<<<<<<<<<<<<
 *         logger.debug('calling refresh')
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_3refresh, 0, __pyx_n_s_DeviceManager_refresh, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_refresh_2, __pyx_t_5) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1047
 *         self.handler.post(self.do_refresh, remove_existing=True, skip_if_running=True)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def adb(self):
 *         with self._adb_lock:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_5adb, 0, __pyx_n_s_DeviceManager_adb, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_2, __pyx_t_4) < 0) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1070
 *             return self._adb
 * 
 *     def try_kill_adb(self, e=None):             # <<<<<<<<<<<<<<
 *         logger.error('try kill adb server', e)
 *         import psutil
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_7try_kill_adb, 0, __pyx_n_s_DeviceManager_try_kill_adb, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__150);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_try_kill_adb, __pyx_t_4) < 0) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1083
 *         logger.info('try kill adb end')
 * 
 *     def adb_connect(self, addr, try_connect=True):             # <<<<<<<<<<<<<<
 *         from adbutils import AdbError
 *         try:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_9adb_connect, 0, __pyx_n_s_DeviceManager_adb_connect, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__153);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_connect, __pyx_t_4) < 0) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1109
 *             logger.error(f"adb connect error return none {addr}", e)
 * 
 *     def get_devices(self):             # <<<<<<<<<<<<<<
 *         return list(self.device_dict.values())
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_11get_devices, 0, __pyx_n_s_DeviceManager_get_devices, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_devices, __pyx_t_4) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1112
 *         return list(self.device_dict.values())
 * 
 *     def update_pc_device(self):             # <<<<<<<<<<<<<<
 *         if self.windows_capture_config is not None:
 *             name, hwnd, full_path, x, y, width, height = find_hwnd(self.windows_capture_config.get('title'),
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_13update_pc_device, 0, __pyx_n_s_DeviceManager_update_pc_device, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_update_pc_device, __pyx_t_4) < 0) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1133
 *             self.device_dict['pc'] = pc_device
 * 
 *     def do_refresh(self, current=False):             # <<<<<<<<<<<<<<
 *         self.update_pc_device()
 *         self.refresh_emulators(current)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_15do_refresh, 0, __pyx_n_s_DeviceManager_do_refresh, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__62);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_do_refresh, __pyx_t_4) < 0) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1144
 *         logger.debug(f'refresh {self.device_dict}')
 * 
 *     def refresh_phones(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_17refresh_phones, 0, __pyx_n_s_DeviceManager_refresh_phones, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__62);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_refresh_phones, __pyx_t_4) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1168
 *         logger.debug(f'refresh_phones done')
 * 
 *     def refresh_emulators(self, current=False):             # <<<<<<<<<<<<<<
 *         if self.adb_capture_config is None:
 *             return
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_19refresh_emulators, 0, __pyx_n_s_DeviceManager_refresh_emulators, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__62);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_refresh_emulators, __pyx_t_4) < 0) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1195
 *         logger.info(f'refresh emulators {self.device_dict}')
 * 
 *     def get_resolution(self, device=None):             # <<<<<<<<<<<<<<
 *         if device is None:
 *             device = self.device
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_21get_resolution, 0, __pyx_n_s_DeviceManager_get_resolution, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__150);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_resolution, __pyx_t_4) < 0) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1211
 *         return width, height
 * 
 *     def set_preferred_device(self, imei=None, index=-1):             # <<<<<<<<<<<<<<
 *         logger.debug(f"set_preferred_device {imei} {index}")
 *         if index != -1:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_23set_preferred_device, 0, __pyx_n_s_DeviceManager_set_preferred_devi, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__167);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_set_preferred_device_2, __pyx_t_4) < 0) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1236
 *         logger.debug(f'preferred device: {preferred}')
 * 
 *     def shell_device(self, device, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         kwargs.setdefault('timeout', 5)
 *         try:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_25shell_device, 0, __pyx_n_s_DeviceManager_shell_device, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_shell_device, __pyx_t_4) < 0) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1244
 *             return None
 * 
 *     def adb_get_imei(self, device):             # <<<<<<<<<<<<<<
 *         return (self.shell_device(device, "settings get secure android_id") or
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_27adb_get_imei, 0, __pyx_n_s_DeviceManager_adb_get_imei, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__171)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_get_imei, __pyx_t_4) < 0) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1248
 *                 self.shell_device(device, "service call iphonesubinfo 4") or device.prop.model)
 * 
 *     def do_screencap(self, device) -> np.ndarray | None:             # <<<<<<<<<<<<<<
 *         if device is None:
 *             return None
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_return, __pyx_kp_s_np_ndarray_None) < 0) __PYX_ERR(0, 1248, __pyx_L1_error)
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_29do_screencap, 0, __pyx_n_s_DeviceManager_do_screencap, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_5, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_do_screencap, __pyx_t_5) < 0) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1263
 *             logger.error('screencap', e)
 * 
 *     def get_preferred_device(self):             # <<<<<<<<<<<<<<
 *         imei = self.config.get("preferred")
 *         preferred = self.device_dict.get(imei)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_31get_preferred_device, 0, __pyx_n_s_DeviceManager_get_preferred_devi, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_preferred_device, __pyx_t_5) < 0) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1268
 *         return preferred
 * 
 *     def get_preferred_capture(self):             # <<<<<<<<<<<<<<
 *         return self.config.get("capture")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_33get_preferred_capture, 0, __pyx_n_s_DeviceManager_get_preferred_capt, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__176)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_preferred_capture, __pyx_t_5) < 0) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1271
 *         return self.config.get("capture")
 * 
 *     def set_hwnd_name(self, hwnd_name):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         if preferred.get("hwnd") != hwnd_name:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_35set_hwnd_name, 0, __pyx_n_s_DeviceManager_set_hwnd_name, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_set_hwnd_name, __pyx_t_5) < 0) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1279
 *             self.config.save_file()
 * 
 *     def set_capture(self, capture):             # <<<<<<<<<<<<<<
 *         if self.config.get("capture") != capture:
 *             self.config['capture'] = capture
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_37set_capture, 0, __pyx_n_s_DeviceManager_set_capture, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__180)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_set_capture, __pyx_t_5) < 0) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1284
 *             self.start()
 * 
 *     def get_hwnd_name(self):             # <<<<<<<<<<<<<<
 *         preferred = self.get_preferred_device()
 *         return preferred.get('hwnd')
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_39get_hwnd_name, 0, __pyx_n_s_DeviceManager_get_hwnd_name, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__182)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_hwnd_name, __pyx_t_5) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1288
 *         return preferred.get('hwnd')
 * 
 *     def ensure_hwnd(self, title, exe, frame_width=0, frame_height=0, player_id=-1, hwnd_class=None):             # <<<<<<<<<<<<<<
 *         if self.hwnd is None:
 *             self.hwnd = HwndWindow(self.exit_event, title, exe, frame_width, frame_height, player_id,
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_41ensure_hwnd, 0, __pyx_n_s_DeviceManager_ensure_hwnd, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__184)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__185);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ensure_hwnd, __pyx_t_5) < 0) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1295
 *             self.hwnd.update_window(title, exe, frame_width, frame_height, player_id, hwnd_class)
 * 
 *     def use_windows_capture(self, override_config=None, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                             bit_blt_render_full=False):
 *         if not override_config:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_43use_windows_capture, 0, __pyx_n_s_DeviceManager_use_windows_captur, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__187)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__188);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_use_windows_capture, __pyx_t_5) < 0) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1307
 *             logger.info(f'capture method {type(self.capture_method)}')
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_45start, 0, __pyx_n_s_DeviceManager_start, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__189)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_start, __pyx_t_5) < 0) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1310
 *         self.handler.post(self.do_start, remove_existing=True, skip_if_running=True)
 * 
 *     def do_start(self):             # <<<<<<<<<<<<<<
 *         logger.debug(f'do_start')
 *         preferred = self.get_preferred_device()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_47do_start, 0, __pyx_n_s_DeviceManager_do_start, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__191)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_do_start, __pyx_t_5) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1361
 *         communicate.adb_devices.emit(True)
 * 
 *     def update_resolution_for_hwnd(self):             # <<<<<<<<<<<<<<
 *         if self.hwnd is not None and self.hwnd.frame_aspect_ratio == 0 and self.adb_capture_config:
 *             width, height = self.get_resolution()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_49update_resolution_for_hwnd, 0, __pyx_n_s_DeviceManager_update_resolution, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__192)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_update_resolution_for_hwnd, __pyx_t_5) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1367
 *             self.hwnd.update_frame_size(width, height)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def device(self):
 *         if preferred := self.get_preferred_device():
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_51device, 0, __pyx_n_s_DeviceManager_device, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__193)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_device, __pyx_t_4) < 0) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1380
 *         return self._device
 * 
 *     def adb_kill_server(self):             # <<<<<<<<<<<<<<
 *         if self.adb is not None:
 *             self.adb.server_kill()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_53adb_kill_server, 0, __pyx_n_s_DeviceManager_adb_kill_server, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__194)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_kill_server_2, __pyx_t_4) < 0) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1385
 *             logger.debug('adb kill_server')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def width(self):
 *         if self.capture_method is not None:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_55width, 0, __pyx_n_s_DeviceManager_width, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__195)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_width, __pyx_t_5) < 0) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1391
 *         return 0
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def height(self):
 *         if self.capture_method is not None:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_57height, 0, __pyx_n_s_DeviceManager_height, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__196)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_height, __pyx_t_4) < 0) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1397
 *         return 0
 * 
 *     def update_device_list(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_59update_device_list, 0, __pyx_n_s_DeviceManager_update_device_list, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__197)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_update_device_list, __pyx_t_4) < 0) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1400
 *         pass
 * 
 *     def shell(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # Set default timeout to 5 if not provided
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_61shell, 0, __pyx_n_s_DeviceManager_shell, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__199)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_shell, __pyx_t_4) < 0) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1409
 *             raise Exception('Device is none')
 * 
 *     def device_connected(self):             # <<<<<<<<<<<<<<
 *         if self.get_preferred_device()['device'] == 'windows':
 *             return True
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_63device_connected, 0, __pyx_n_s_DeviceManager_device_connected, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__201)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_device_connected, __pyx_t_4) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1420
 *                 logger.error(f'device_connected error occurred, {e}')
 * 
 *     def get_exe_path(self, device):             # <<<<<<<<<<<<<<
 *         path = device.get('full_path')
 *         if path != 'none' and device.get(
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_65get_exe_path, 0, __pyx_n_s_DeviceManager_get_exe_path, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__203)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_exe_path, __pyx_t_4) < 0) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1435
 *             return None
 * 
 *     def adb_check_installed(self, packages):             # <<<<<<<<<<<<<<
 *         installed = self.shell('pm list packages')
 *         if isinstance(packages, str):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_67adb_check_installed, 0, __pyx_n_s_DeviceManager_adb_check_installe, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__205)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_check_installed, __pyx_t_4) < 0) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1443
 *                 return package
 * 
 *     def adb_check_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.device.app_current()
 *         logger.debug(f'adb_check_in_front {front}')
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_69adb_check_in_front, 0, __pyx_n_s_DeviceManager_adb_check_in_front, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__207)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_check_in_front_2, __pyx_t_4) < 0) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1453
 *                     return True
 * 
 *     def adb_start_package(self, package):             # <<<<<<<<<<<<<<
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_71adb_start_package, 0, __pyx_n_s_DeviceManager_adb_start_package, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__209)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_start_package, __pyx_t_4) < 0) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1456
 *         self.shell(f'monkey -p {package} -c android.intent.category.LAUNCHER 1')
 * 
 *     def adb_ensure_in_front(self, packages):             # <<<<<<<<<<<<<<
 *         front = self.adb_check_in_front(packages)
 *         logger.debug(f'adb_ensure_in_front {front}')
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_13DeviceManager_73adb_ensure_in_front, 0, __pyx_n_s_DeviceManager_adb_ensure_in_fron, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__211)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_adb_ensure_in_front_2, __pyx_t_4) < 0) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ok/Capture.pyx":1005
 * 
 * 
 * class DeviceManager:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, app_config, exit_event=None, global_config=None):
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_DeviceManager, __pyx_empty_tuple, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DeviceManager, __pyx_t_4) < 0) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1466
 * 
 * 
 * def parse_ratio(ratio_str):             # <<<<<<<<<<<<<<
 *     if ratio_str:
 *         # Split the string into two parts: '16' and '9'
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_35parse_ratio, 0, __pyx_n_s_parse_ratio, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__213)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parse_ratio, __pyx_t_3) < 0) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1475
 * 
 * cdef class NemuIpcCaptureMethod(BaseCaptureMethod):
 *     name = "Nemu Ipc Capture"             # <<<<<<<<<<<<<<
 *     description = "mumu player 12 only"
 *     cdef bint _connected
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_name_2, __pyx_kp_s_Nemu_Ipc_Capture) < 0) __PYX_ERR(0, 1475, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1476
 * cdef class NemuIpcCaptureMethod(BaseCaptureMethod):
 *     name = "Nemu Ipc Capture"
 *     description = "mumu player 12 only"             # <<<<<<<<<<<<<<
 *     cdef bint _connected
 *     cdef object device_manager, nemu_impl, emulator
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_description, __pyx_kp_s_mumu_player_12_only) < 0) __PYX_ERR(0, 1476, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1488
 *         self.emulator = None
 * 
 *     def update_emulator(self, emulator):             # <<<<<<<<<<<<<<
 *         self.emulator = emulator
 *         logger.info(f'update_path_and_id {emulator}')
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_3update_emulator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_update_emul, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__215)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_update_emulator, __pyx_t_3) < 0) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1495
 *             self.nemu_impl = None
 * 
 *     def init_nemu(self):             # <<<<<<<<<<<<<<
 *         self.check_mumu_app_keep_alive_400()
 *         if not self.nemu_impl:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_5init_nemu, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_init_nemu, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__217)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_init_nemu, __pyx_t_3) < 0) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1505
 *             ).__enter__()
 * 
 *     def base_folder(self):             # <<<<<<<<<<<<<<
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_7base_folder, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_base_folder, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__218)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_base_folder, __pyx_t_3) < 0) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1508
 *         return os.path.dirname(os.path.dirname(self.emulator.path))
 * 
 *     def check_mumu_app_keep_alive_400(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check app_keep_alive from emulator config if version >= 4.0
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_9check_mumu_app_keep_alive_400, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_check_mumu, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__220)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_check_mumu_app_keep_alive_400, __pyx_t_3) < 0) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1539
 *         return True
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         super().close()
 *         if self.nemu_impl:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_11close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_close, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__221)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_close, __pyx_t_3) < 0) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1545
 *             self.nemu_impl = None
 * 
 *     cpdef object do_get_frame(self):             # <<<<<<<<<<<<<<
 *         self.init_nemu()
 *         return self.screencap()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_13do_get_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_do_get_fram, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__222)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_do_get_frame, __pyx_t_3) < 0) __PYX_ERR(0, 1545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1555
 *             return self.nemu_impl.screenshot(timeout=0.5)
 * 
 *     def connected(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_15connected, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod_connected, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__223)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_connected, __pyx_t_3) < 0) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_17__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod___reduce_cy, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__224)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NemuIpcCaptureMethod, (type(self), 0x0f27d96, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NemuIpcCaptureMethod__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_20NemuIpcCaptureMethod_19__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NemuIpcCaptureMethod___setstate, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__225)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_2ok_7Capture_NemuIpcCaptureMethod);

  /* "ok/Capture.pyx":1558
 *         return True
 * 
 * def deep_get(d, keys, default=None):             # <<<<<<<<<<<<<<
 *     """
 *     Get values in dictionary safely.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_37deep_get, 0, __pyx_n_s_deep_get, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__227)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__150);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deep_get, __pyx_t_3) < 0) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1580
 *     return deep_get(d.get(keys[0]), keys[1:], default)
 * 
 * def update_capture_method(config, capture_method, hwnd, require_bg=False, use_bit_blt_only=False,             # <<<<<<<<<<<<<<
 *                           bit_blt_render_full=False, exit_event=None):
 *     try:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_39update_capture_method, 0, __pyx_n_s_update_capture_method, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__229)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__230);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_update_capture_method, __pyx_t_3) < 0) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1609
 *         logger.error(f'update_capture_method exception, return None: ', e)
 * 
 * def get_win_graphics_capture(capture_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if windows_graphics_available():
 *         target_method = WindowsGraphicsCaptureMethod
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_41get_win_graphics_capture, 0, __pyx_n_s_get_win_graphics_capture, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__232)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_win_graphics_capture, __pyx_t_3) < 0) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1616
 *             return capture_method
 * 
 * def get_capture(capture_method, target_method, hwnd, exit_event):             # <<<<<<<<<<<<<<
 *     if not isinstance(capture_method, target_method):
 *         if capture_method is not None:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_43get_capture, 0, __pyx_n_s_get_capture, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__234)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_capture, __pyx_t_3) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ok/Capture.pyx":1625
 *     return capture_method
 * 
 * MDT_EFFECTIVE_DPI = 0             # <<<<<<<<<<<<<<
 * user32 = ctypes.WinDLL('user32', use_last_error=True)
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MDT_EFFECTIVE_DPI, __pyx_int_0) < 0) __PYX_ERR(0, 1625, __pyx_L1_error)

  /* "ok/Capture.pyx":1626
 * 
 * MDT_EFFECTIVE_DPI = 0
 * user32 = ctypes.WinDLL('user32', use_last_error=True)             # <<<<<<<<<<<<<<
 * 
 * def is_window_minimized(hWnd):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_WinDLL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_use_last_error, Py_True) < 0) __PYX_ERR(0, 1626, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__235, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_user32, __pyx_t_5) < 0) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1628
 * user32 = ctypes.WinDLL('user32', use_last_error=True)
 * 
 * def is_window_minimized(hWnd):             # <<<<<<<<<<<<<<
 *     return user32.IsIconic(hWnd) != 0
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_45is_window_minimized, 0, __pyx_n_s_is_window_minimized, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__237)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_minimized, __pyx_t_5) < 0) __PYX_ERR(0, 1628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1631
 *     return user32.IsIconic(hWnd) != 0
 * 
 * def get_window_bounds(hwnd):             # <<<<<<<<<<<<<<
 *     try:
 *         extended_frame_bounds = ctypes.wintypes.RECT()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_47get_window_bounds, 0, __pyx_n_s_get_window_bounds, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__239)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_bounds, __pyx_t_5) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1656
 *         return 0, 0, 0, 0, 0, 0, 1
 * 
 * def is_foreground_window(hwnd):             # <<<<<<<<<<<<<<
 *     return win32gui.IsWindowVisible(hwnd) and win32gui.GetForegroundWindow() == hwnd
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_49is_foreground_window, 0, __pyx_n_s_is_foreground_window, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__240)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_foreground_window, __pyx_t_5) < 0) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_51__pyx_unpickle_BaseCaptureMethod, 0, __pyx_n_s_pyx_unpickle_BaseCaptureMethod, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__242)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BaseCaptureMethod, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseCaptureMethod__set_state(<BaseCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseCaptureMethod__set_state(BaseCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._size = __pyx_state[0]; __pyx_result.exit_event = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_53__pyx_unpickle_BaseWindowsCaptureMethod, 0, __pyx_n_s_pyx_unpickle_BaseWindowsCaptur, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__243)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BaseWindowsCaptur, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_WindowsGraphicsCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_55__pyx_unpickle_WindowsGraphicsCaptureMethod, 0, __pyx_n_s_pyx_unpickle_WindowsGraphicsCa, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__244)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_WindowsGraphicsCa, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(<WindowsGraphicsCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_WindowsGraphicsCaptureMethod__set_state(WindowsGraphicsCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_window = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.cputex = __pyx_state[2]; __pyx_result.dxdevice = __pyx_state[3]; __pyx_result.evtoken = __pyx_state[4]; __pyx_result.exit_event = __pyx_state[5]; __pyx_result.frame_pool = __pyx_state[6]; __pyx_result.immediatedc = __pyx_state[7]; __pyx_result.item = __pyx_state[8]; __pyx_result.last_frame = __pyx_state[9]; __pyx_result.last_frame_time = __pyx_state[10]; __pyx_result.last_size = __pyx_state[11]; __pyx_result.rtdevice = __pyx_state[12]; __pyx_result.session = __pyx_state[13]
 *     if len(__pyx_state) > 14 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_57__pyx_unpickle_BitBltCaptureMethod, 0, __pyx_n_s_pyx_unpickle_BitBltCaptureMeth, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__245)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BitBltCaptureMeth, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_HwndWindow(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_59__pyx_unpickle_HwndWindow, 0, __pyx_n_s_pyx_unpickle_HwndWindow, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__246)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_HwndWindow, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_HwndWindow__set_state(<HwndWindow> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HwndWindow__set_state(HwndWindow __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._hwnd_title = __pyx_state[0]; __pyx_result.app_exit_event = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exe_full_path = __pyx_state[3]; __pyx_result.exe_name = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.frame_aspect_ratio = __pyx_state[6]; __pyx_result.frame_height = __pyx_state[7]; __pyx_result.frame_width = __pyx_state[8]; __pyx_result.height = __pyx_state[9]; __pyx_result.hwnd = __pyx_state[10]; __pyx_result.hwnd_class = __pyx_state[11]; __pyx_result.monitors_bounds = __pyx_state[12]; __pyx_result.mute_option = __pyx_state[13]; __pyx_result.player_id = __pyx_state[14]; __pyx_result.pos_valid = __pyx_state[15]; __pyx_result.real_height = __pyx_state[16]; __pyx_result.real_width = __pyx_state[17]; __pyx_result.real_x_offset = __pyx_state[18]; __pyx_result.real_y_offset = __pyx_state[19]; __pyx_result.scaling = __pyx_state[20]; __pyx_result.stop_event = __pyx_state[21]; __pyx_result.thread = __pyx_state[22]; __pyx_result.title = __pyx_state[23]; __pyx_result.visible = __pyx_state[24]; __pyx_result.width = __pyx_state[25]; __pyx_result.window_height = __pyx_state[26]; __pyx_result.window_width = __pyx_state[27]; __pyx_result.x = __pyx_state[28]; __pyx_result.y = __pyx_state[29]
 *     if len(__pyx_state) > 30 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_61__pyx_unpickle_DesktopDuplicationCaptureMethod, 0, __pyx_n_s_pyx_unpickle_DesktopDuplicatio, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__247)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_DesktopDuplicatio, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ADBCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_63__pyx_unpickle_ADBCaptureMethod, 0, __pyx_n_s_pyx_unpickle_ADBCaptureMethod, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__248)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ADBCaptureMethod, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_ADBCaptureMethod__set_state(<ADBCaptureMethod> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ADBCaptureMethod__set_state(ADBCaptureMethod __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._connected = __pyx_state[0]; __pyx_result._size = __pyx_state[1]; __pyx_result.device_manager = __pyx_state[2]; __pyx_result.exit_event = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_65__pyx_unpickle_ImageCaptureMethod, 0, __pyx_n_s_pyx_unpickle_ImageCaptureMetho, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__249)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ImageCaptureMetho, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NemuIpcCaptureMethod(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_2ok_7Capture_67__pyx_unpickle_NemuIpcCaptureMethod, 0, __pyx_n_s_pyx_unpickle_NemuIpcCaptureMet, NULL, __pyx_n_s_ok_Capture, __pyx_d, ((PyObject *)__pyx_codeobj__250)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_NemuIpcCaptureMet, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ok/Capture.pyx":1
 * import sys             # <<<<<<<<<<<<<<
 * import time
 * 
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init ok.Capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ok.Capture");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_PyLong_DigitCount(op1) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__8);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            if (unlikely(b == -1 && ((unsigned long)a) == 0-(unsigned long)a))
                return PyInt_Type.tp_as_number->nb_floor_divide(op1, op2);
            else {
                long q, r;
                q = a / b;
                r = a - q*b;
                q -= ((r != 0) & ((r ^ b) < 0));
                x = q;
            }
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_floor_divide(op1, op2);
            }
        }
                {
                    long q, r;
                    q = a / b;
                    r = a - q*b;
                    q -= ((r != 0) & ((r ^ b) < 0));
                    x = q;
                }
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                {
                    PY_LONG_LONG q, r;
                    q = lla / llb;
                    r = lla - q*llb;
                    q -= ((r != 0) & ((r ^ llb) < 0));
                    llx = q;
                }
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceFloorDivide : PyNumber_FloorDivide)(op1, op2);
}
#endif

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 0;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a != b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) != 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 1;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 1;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal != 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a != (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseClosureNameError */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
#if PY_VERSION_HEX >= 0x030C00A7
    if (likely(__Pyx_PyLong_IsCompact(n))) {
        return PyLong_FromSize_t(__Pyx_PyLong_CompactValueUnsigned(n));
    }
#else
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromUnsignedLong(__Pyx_PyLong_Digits(n)[0]);
    }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            #if PY_VERSION_HEX >= 0x030C00A7
            ((PyLongObject*)copy)->long_value.lv_tag = ((PyLongObject*)copy)->long_value.lv_tag & ~_PyLong_SIGN_MASK;
            #else
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
            #endif
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__24;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
    if (__Pyx_IS_TYPE(L, &PySet_Type)) {
        return PySet_Pop(L);
    }
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
#if CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
#include <string.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if PY_VERSION_HEX >= 0x030400A0
    if ((1)) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_setdefault, d, key, default_value);
    }
    return value;
}

/* PyIntCompare */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            if (__Pyx_PyLong_IsZero(op1) != 1) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                Py_RETURN_TRUE;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* GetAttr */
    static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* SetPackagePathFromImportLib */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_PEP489_MULTI_PHASE_INIT
static int __Pyx_SetPackagePathFromImportLib(PyObject *module_name) {
    PyObject *importlib, *osmod, *ossep, *parts, *package_path;
    PyObject *file_path = NULL;
    int result;
    PyObject *spec;
    importlib = PyImport_ImportModule("importlib.util");
    if (unlikely(!importlib))
        goto bad;
    spec = PyObject_CallMethod(importlib, "find_spec", "(O)", module_name);
    Py_DECREF(importlib);
    if (unlikely(!spec))
        goto bad;
    file_path = PyObject_GetAttrString(spec, "origin");
    Py_DECREF(spec);
    if (unlikely(!file_path))
        goto bad;
    if (unlikely(PyObject_SetAttrString(__pyx_m, "__file__", file_path) < 0))
        goto bad;
    osmod = PyImport_ImportModule("os");
    if (unlikely(!osmod))
        goto bad;
    ossep = PyObject_GetAttrString(osmod, "sep");
    Py_DECREF(osmod);
    if (unlikely(!ossep))
        goto bad;
    parts = PyObject_CallMethod(file_path, "rsplit", "(Oi)", ossep, 1);
    Py_DECREF(file_path); file_path = NULL;
    Py_DECREF(ossep);
    if (unlikely(!parts))
        goto bad;
    package_path = Py_BuildValue("[O]", PyList_GET_ITEM(parts, 0));
    Py_DECREF(parts);
    if (unlikely(!package_path))
        goto bad;
    goto set_path;
bad:
    PyErr_WriteUnraisable(module_name);
    Py_XDECREF(file_path);
    PyErr_Clear();
    package_path = PyList_New(0);
    if (unlikely(!package_path))
        return -1;
set_path:
    result = PyObject_SetAttrString(__pyx_m, "__path__", package_path);
    Py_DECREF(package_path);
    return result;
}
#endif

/* ValidateBasesTuple */
    #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
    static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
    static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
    static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Py3UpdateBases */
    static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CalculateMetaclass */
    static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* Py3ClassCreate */
    static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FormatTypeName */
    #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__251);
    }
    return name;
}
#endif

/* CheckBinaryVersion */
    static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
    #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
